{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"android/android/","text":"Android \u00b6 Android Push notification (Toolkit) Push notification (Toolkit) \u00b6 Desativar mensagens enviadas pela operadora por push notification. Habilitar modo desenvolvedor Baixar o bin\u00e1rio ADB https://www.xda-developers.com/google-releases-separate-adb-and-fastboot-binary-downloads/ Executar o shell ./adb shell Remover pacote pm uninstall -k --user 0 com.android.stk Refer\u00eancia: https://www.xda-developers.com/uninstall-carrier-oem-bloatware-without-root-access/","title":"Android"},{"location":"android/android/#android","text":"Android Push notification (Toolkit)","title":"Android"},{"location":"android/android/#push-notification-toolkit","text":"Desativar mensagens enviadas pela operadora por push notification. Habilitar modo desenvolvedor Baixar o bin\u00e1rio ADB https://www.xda-developers.com/google-releases-separate-adb-and-fastboot-binary-downloads/ Executar o shell ./adb shell Remover pacote pm uninstall -k --user 0 com.android.stk Refer\u00eancia: https://www.xda-developers.com/uninstall-carrier-oem-bloatware-without-root-access/","title":"Push notification (Toolkit)"},{"location":"angular/introducao/","text":"Introdu\u00e7\u00e3o \u00b6 Introdu\u00e7\u00e3o Sobre Angular CLI Instala\u00e7\u00e3o Criar projeto Executar projeto Criar arquivos Criar componente Adicionar m\u00f3dulo de rotas Elementos de uma aplica\u00e7\u00e3o Angular Links Sobre \u00b6 Angular \u00e9 uma plataforma e framework para constru\u00e7\u00e3o da interface de aplica\u00e7\u00f5es usando HTML, CSS e, principalmente, JavaScript, criada pelos desenvolvedores da Google. Ele possui alguns elementos b\u00e1sicos que tornam essa constru\u00e7\u00e3o interessante como: componentes, templates, diretivas, roteamento, m\u00f3dulos, servi\u00e7os, inje\u00e7\u00e3o de depend\u00eancias e ferramentas de infraestrutura que automatizam tarefas, como a de executar os testes unit\u00e1rios de uma aplica\u00e7\u00e3o. Angular nos ajuda a criar Single-Page Applications com uma qualidade e produtividade surpreendente. Angular CLI \u00b6 Instala\u00e7\u00e3o \u00b6 npm install -g @angular/cli Especificando a vers\u00e3o de instala\u00e7\u00e3o. Ver vers\u00f5es . npm install -g @angular/cli@v10.0.0-rc.3 Criar projeto \u00b6 ng new <projeto> Executar projeto \u00b6 cd <projeto> ng serve Criar arquivos \u00b6 ng generate <tipo> <nome> Tipos poss\u00edveis: appShell application class component directive enum guard interceptor interface library module pipe service serviceWorker webWorker Criar componente \u00b6 ng generate component <name> Adicionar m\u00f3dulo de rotas \u00b6 ng generate module app-routing --flat --module = app Modificar o arquivo criado conforme exemplo abaixo: import { NgModule } from '@angular/core' ; import { RouterModule , Routes } from '@angular/router' ; import { HeroesComponent } from './heroes/heroes.component' ; // Rotas adicionadas const routes : Routes = [ { path : 'heroes' , component : HeroesComponent } ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Elementos de uma aplica\u00e7\u00e3o Angular \u00b6 Os elementos b\u00e1sicos (building blocks) de uma aplica\u00e7\u00e3o Angular s\u00e3o: M\u00f3dulos Componentes Templates Metadata Data binding Diretivas Servi\u00e7os Inje\u00e7\u00e3o de depend\u00eancias ![exemplo_sem_dip](_introducao/esquema-elementos-angular.png) CONTINUAR!!! https://blog.algaworks.com/o-que-e-angular/ Links \u00b6 https://blog.algaworks.com/o-que-e-angular/ https://medium.com/@danilodev.silva/aprendendo-angular-2-na-pr%C3%A1tica-antes-veja-depois-crie-49567b25dc1 https://angular.io/start https://angular.io/guide/styleguide","title":"Introdu\u00e7\u00e3o"},{"location":"angular/introducao/#introducao","text":"Introdu\u00e7\u00e3o Sobre Angular CLI Instala\u00e7\u00e3o Criar projeto Executar projeto Criar arquivos Criar componente Adicionar m\u00f3dulo de rotas Elementos de uma aplica\u00e7\u00e3o Angular Links","title":"Introdu\u00e7\u00e3o"},{"location":"angular/introducao/#sobre","text":"Angular \u00e9 uma plataforma e framework para constru\u00e7\u00e3o da interface de aplica\u00e7\u00f5es usando HTML, CSS e, principalmente, JavaScript, criada pelos desenvolvedores da Google. Ele possui alguns elementos b\u00e1sicos que tornam essa constru\u00e7\u00e3o interessante como: componentes, templates, diretivas, roteamento, m\u00f3dulos, servi\u00e7os, inje\u00e7\u00e3o de depend\u00eancias e ferramentas de infraestrutura que automatizam tarefas, como a de executar os testes unit\u00e1rios de uma aplica\u00e7\u00e3o. Angular nos ajuda a criar Single-Page Applications com uma qualidade e produtividade surpreendente.","title":"Sobre"},{"location":"angular/introducao/#angular-cli","text":"","title":"Angular CLI"},{"location":"angular/introducao/#instalacao","text":"npm install -g @angular/cli Especificando a vers\u00e3o de instala\u00e7\u00e3o. Ver vers\u00f5es . npm install -g @angular/cli@v10.0.0-rc.3","title":"Instala\u00e7\u00e3o"},{"location":"angular/introducao/#criar-projeto","text":"ng new <projeto>","title":"Criar projeto"},{"location":"angular/introducao/#executar-projeto","text":"cd <projeto> ng serve","title":"Executar projeto"},{"location":"angular/introducao/#criar-arquivos","text":"ng generate <tipo> <nome> Tipos poss\u00edveis: appShell application class component directive enum guard interceptor interface library module pipe service serviceWorker webWorker","title":"Criar arquivos"},{"location":"angular/introducao/#criar-componente","text":"ng generate component <name>","title":"Criar componente"},{"location":"angular/introducao/#adicionar-modulo-de-rotas","text":"ng generate module app-routing --flat --module = app Modificar o arquivo criado conforme exemplo abaixo: import { NgModule } from '@angular/core' ; import { RouterModule , Routes } from '@angular/router' ; import { HeroesComponent } from './heroes/heroes.component' ; // Rotas adicionadas const routes : Routes = [ { path : 'heroes' , component : HeroesComponent } ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { }","title":"Adicionar m\u00f3dulo de rotas"},{"location":"angular/introducao/#elementos-de-uma-aplicacao-angular","text":"Os elementos b\u00e1sicos (building blocks) de uma aplica\u00e7\u00e3o Angular s\u00e3o: M\u00f3dulos Componentes Templates Metadata Data binding Diretivas Servi\u00e7os Inje\u00e7\u00e3o de depend\u00eancias ![exemplo_sem_dip](_introducao/esquema-elementos-angular.png) CONTINUAR!!! https://blog.algaworks.com/o-que-e-angular/","title":"Elementos de uma aplica\u00e7\u00e3o Angular"},{"location":"angular/introducao/#links","text":"https://blog.algaworks.com/o-que-e-angular/ https://medium.com/@danilodev.silva/aprendendo-angular-2-na-pr%C3%A1tica-antes-veja-depois-crie-49567b25dc1 https://angular.io/start https://angular.io/guide/styleguide","title":"Links"},{"location":"angular/aplicacao/","text":"Aplicacao \u00b6 This project was generated with Angular CLI version 8.3.6. Development server \u00b6 Run ng serve for a dev server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files. Code scaffolding \u00b6 Run ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module . Build \u00b6 Run ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build. Running unit tests \u00b6 Run ng test to execute the unit tests via Karma . Running end-to-end tests \u00b6 Run ng e2e to execute the end-to-end tests via Protractor . Further help \u00b6 To get more help on the Angular CLI use ng help or go check out the Angular CLI README .","title":"Aplicacao"},{"location":"angular/aplicacao/#aplicacao","text":"This project was generated with Angular CLI version 8.3.6.","title":"Aplicacao"},{"location":"angular/aplicacao/#development-server","text":"Run ng serve for a dev server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files.","title":"Development server"},{"location":"angular/aplicacao/#code-scaffolding","text":"Run ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module .","title":"Code scaffolding"},{"location":"angular/aplicacao/#build","text":"Run ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.","title":"Build"},{"location":"angular/aplicacao/#running-unit-tests","text":"Run ng test to execute the unit tests via Karma .","title":"Running unit tests"},{"location":"angular/aplicacao/#running-end-to-end-tests","text":"Run ng e2e to execute the end-to-end tests via Protractor .","title":"Running end-to-end tests"},{"location":"angular/aplicacao/#further-help","text":"To get more help on the Angular CLI use ng help or go check out the Angular CLI README .","title":"Further help"},{"location":"design-patterns/dao/","text":"Data Access Object \u00b6 Data Access Object Introdu\u00e7\u00e3o DAO x Repository Introdu\u00e7\u00e3o \u00b6 Objeto de acesso a dados (em ingl\u00eas, Data Access Object - DAO) \u00e9 um padr\u00e3o de projetos para aplica\u00e7\u00f5es que utilizam persist\u00eancia de dados, onde tem a separa\u00e7\u00e3o das regras de neg\u00f3cio das regras de acesso a banco de dados, onde todas as funcionalidades de bancos de dados, tais como obter conex\u00f5es, mapear objetos para tipos de dados SQL ou executar comandos SQL, devem ser feitas por classes DAO. Seguindo o princ\u00edpio de responsabilidade \u00fanica do SOLID, um DAO n\u00e3o deve ser respons\u00e1vel por mais do que acesso aos dados. DAO x Repository \u00b6 O DAO \u00e9 considerado um padr\u00e3o de integra\u00e7\u00e3o e \u00e9 usado como parte da infraestrutura da aplica\u00e7\u00e3o. Um DAO serve para voc\u00ea especificar qual o banco de dados vai ser usado, como ele ser\u00e1 usado e todas as instru\u00e7\u00f5es que devem ser passadas a ele. Ou seja, o DAO conhece e sabe exatamente com qual infraestrutura (banco de dados, arquivos, mem\u00f3ria, etc) ele est\u00e1 lidando. O Repository \u00e9 considerado um padr\u00e3o de dom\u00ednio e faz parte das regras de neg\u00f3cios de uma aplica\u00e7\u00e3o. \u00c9 uma interface que n\u00e3o sabe nada da infra-estrutura. Ele n\u00e3o conhece o banco de dados. O que ele conhece \u00e9 o dom\u00ednio da aplica\u00e7\u00e3o. O Resopitory acessa o DAO que por sua vez devolve os dados de uma consulta. Portanto, Repository se torna apenas um \"reposit\u00f3rio de dom\u00ednio\". O padr\u00e3o Repository tem o objetivo de dar apoio ao dom\u00ednio (modelo) fornecendo persist\u00eancia ou n\u00e3o. Ao contr\u00e1rio do DAO, que \u00e9 um objeto de infra-estrutura da aplica\u00e7\u00e3o e faz parte da camada de persist\u00eancia. O Repository faz parte do modelo de dom\u00ednio que \u00e9 parte da camada de neg\u00f3cios. O Repository inclusive n\u00e3o precisa apenas ser usado em acesso a dados que venham de uma base de dados, podem servir para outros tipos de opera\u00e7\u00f5es.","title":"Data Access Object"},{"location":"design-patterns/dao/#data-access-object","text":"Data Access Object Introdu\u00e7\u00e3o DAO x Repository","title":"Data Access Object"},{"location":"design-patterns/dao/#introducao","text":"Objeto de acesso a dados (em ingl\u00eas, Data Access Object - DAO) \u00e9 um padr\u00e3o de projetos para aplica\u00e7\u00f5es que utilizam persist\u00eancia de dados, onde tem a separa\u00e7\u00e3o das regras de neg\u00f3cio das regras de acesso a banco de dados, onde todas as funcionalidades de bancos de dados, tais como obter conex\u00f5es, mapear objetos para tipos de dados SQL ou executar comandos SQL, devem ser feitas por classes DAO. Seguindo o princ\u00edpio de responsabilidade \u00fanica do SOLID, um DAO n\u00e3o deve ser respons\u00e1vel por mais do que acesso aos dados.","title":"Introdu\u00e7\u00e3o"},{"location":"design-patterns/dao/#dao-x-repository","text":"O DAO \u00e9 considerado um padr\u00e3o de integra\u00e7\u00e3o e \u00e9 usado como parte da infraestrutura da aplica\u00e7\u00e3o. Um DAO serve para voc\u00ea especificar qual o banco de dados vai ser usado, como ele ser\u00e1 usado e todas as instru\u00e7\u00f5es que devem ser passadas a ele. Ou seja, o DAO conhece e sabe exatamente com qual infraestrutura (banco de dados, arquivos, mem\u00f3ria, etc) ele est\u00e1 lidando. O Repository \u00e9 considerado um padr\u00e3o de dom\u00ednio e faz parte das regras de neg\u00f3cios de uma aplica\u00e7\u00e3o. \u00c9 uma interface que n\u00e3o sabe nada da infra-estrutura. Ele n\u00e3o conhece o banco de dados. O que ele conhece \u00e9 o dom\u00ednio da aplica\u00e7\u00e3o. O Resopitory acessa o DAO que por sua vez devolve os dados de uma consulta. Portanto, Repository se torna apenas um \"reposit\u00f3rio de dom\u00ednio\". O padr\u00e3o Repository tem o objetivo de dar apoio ao dom\u00ednio (modelo) fornecendo persist\u00eancia ou n\u00e3o. Ao contr\u00e1rio do DAO, que \u00e9 um objeto de infra-estrutura da aplica\u00e7\u00e3o e faz parte da camada de persist\u00eancia. O Repository faz parte do modelo de dom\u00ednio que \u00e9 parte da camada de neg\u00f3cios. O Repository inclusive n\u00e3o precisa apenas ser usado em acesso a dados que venham de uma base de dados, podem servir para outros tipos de opera\u00e7\u00f5es.","title":"DAO x Repository"},{"location":"design-patterns/dependency-injection/","text":"Inje\u00e7\u00e3o de depend\u00eancia \u00b6 Inje\u00e7\u00e3o de depend\u00eancia Introdu\u00e7\u00e3o Inje\u00e7\u00e3o por construtor Inje\u00e7\u00e3o por m\u00e9todo Inje\u00e7\u00e3o por interface Introdu\u00e7\u00e3o \u00b6 Inje\u00e7\u00e3o de depend\u00eancia (em ingles, Depedency Injection ) \u00e9 um padr\u00e3o de projeto utilizado para manter o acoplamento fraco entre classes ou m\u00f3dulos do sistema. O foco principal \u00e9 fazer com que uma classe n\u00e3o tenha conhecimento de como instanciar um objeto de um tipo do qual \u00e9 dependente. Isto permite que os objetos sejam fracamente acoplados e siga os princ\u00edpios de invers\u00e3o de depend\u00eancia e responsabilidade \u00fanica. Abaixo, um exemplo de algo que deve ser evitado devido ao alto acoplamento. Neste exemplo a ClasseA tem conhecimento de como instanciar objetos da ClasseB . public class ClasseA { public void metodoA () { ClasseB b = new ClasseB (); b . metodoB (); } } Atrav\u00e9s da inje\u00e7\u00e3o de depend\u00eancia, existem pelo menos tr\u00eas maneiras pelas quais um objeto cliente pode receber uma refer\u00eancia a um objeto externo. Inje\u00e7\u00e3o por construtor : as depend\u00eancias s\u00e3o fornecidas por meio do construtor de classe do cliente. Inje\u00e7\u00e3o por m\u00e9todo : o cliente exp\u00f5e um m\u00e9todo que o injetor usa para injetar a depend\u00eancia. Inje\u00e7\u00e3o por interface : a interface da depend\u00eancia fornece um m\u00e9todo que injetar\u00e1 a depend\u00eancia em qualquer cliente passado a ela. Os clientes devem implementar uma interface que exp\u00f5e um m\u00e9todo que aceita a depend\u00eancia. Inje\u00e7\u00e3o por construtor \u00b6 Este m\u00e9todo requer que o cliente forne\u00e7a um par\u00e2metro em um construtor para a depend\u00eancia. public class Client { Client ( Service service ) { this . service = service ; } } Inje\u00e7\u00e3o por m\u00e9todo \u00b6 Este m\u00e9todo requer que o cliente forne\u00e7a um m\u00e9todo setter para a depend\u00eancia. public class Client { public void setService ( Service service ) { this . service = service ; } } Inje\u00e7\u00e3o por interface \u00b6 Isso \u00e9 simplesmente o cliente publicando uma interface para os m\u00e9todos setter das depend\u00eancias do cliente. Pode ser usado para estabelecer como o injetor deve falar com o cliente ao injetar depend\u00eancias. public interface ServiceSetter { public void setService ( Service service ); } public class Client implements ServiceSetter { // Refer\u00eancia interna ao Service usado por este Client. private Service service ; @Override public void setService ( Service service ) { this . service = service ; } }","title":"Inje\u00e7\u00e3o de depend\u00eancia"},{"location":"design-patterns/dependency-injection/#injecao-de-dependencia","text":"Inje\u00e7\u00e3o de depend\u00eancia Introdu\u00e7\u00e3o Inje\u00e7\u00e3o por construtor Inje\u00e7\u00e3o por m\u00e9todo Inje\u00e7\u00e3o por interface","title":"Inje\u00e7\u00e3o de depend\u00eancia"},{"location":"design-patterns/dependency-injection/#introducao","text":"Inje\u00e7\u00e3o de depend\u00eancia (em ingles, Depedency Injection ) \u00e9 um padr\u00e3o de projeto utilizado para manter o acoplamento fraco entre classes ou m\u00f3dulos do sistema. O foco principal \u00e9 fazer com que uma classe n\u00e3o tenha conhecimento de como instanciar um objeto de um tipo do qual \u00e9 dependente. Isto permite que os objetos sejam fracamente acoplados e siga os princ\u00edpios de invers\u00e3o de depend\u00eancia e responsabilidade \u00fanica. Abaixo, um exemplo de algo que deve ser evitado devido ao alto acoplamento. Neste exemplo a ClasseA tem conhecimento de como instanciar objetos da ClasseB . public class ClasseA { public void metodoA () { ClasseB b = new ClasseB (); b . metodoB (); } } Atrav\u00e9s da inje\u00e7\u00e3o de depend\u00eancia, existem pelo menos tr\u00eas maneiras pelas quais um objeto cliente pode receber uma refer\u00eancia a um objeto externo. Inje\u00e7\u00e3o por construtor : as depend\u00eancias s\u00e3o fornecidas por meio do construtor de classe do cliente. Inje\u00e7\u00e3o por m\u00e9todo : o cliente exp\u00f5e um m\u00e9todo que o injetor usa para injetar a depend\u00eancia. Inje\u00e7\u00e3o por interface : a interface da depend\u00eancia fornece um m\u00e9todo que injetar\u00e1 a depend\u00eancia em qualquer cliente passado a ela. Os clientes devem implementar uma interface que exp\u00f5e um m\u00e9todo que aceita a depend\u00eancia.","title":"Introdu\u00e7\u00e3o"},{"location":"design-patterns/dependency-injection/#injecao-por-construtor","text":"Este m\u00e9todo requer que o cliente forne\u00e7a um par\u00e2metro em um construtor para a depend\u00eancia. public class Client { Client ( Service service ) { this . service = service ; } }","title":"Inje\u00e7\u00e3o por construtor"},{"location":"design-patterns/dependency-injection/#injecao-por-metodo","text":"Este m\u00e9todo requer que o cliente forne\u00e7a um m\u00e9todo setter para a depend\u00eancia. public class Client { public void setService ( Service service ) { this . service = service ; } }","title":"Inje\u00e7\u00e3o por m\u00e9todo"},{"location":"design-patterns/dependency-injection/#injecao-por-interface","text":"Isso \u00e9 simplesmente o cliente publicando uma interface para os m\u00e9todos setter das depend\u00eancias do cliente. Pode ser usado para estabelecer como o injetor deve falar com o cliente ao injetar depend\u00eancias. public interface ServiceSetter { public void setService ( Service service ); } public class Client implements ServiceSetter { // Refer\u00eancia interna ao Service usado por este Client. private Service service ; @Override public void setService ( Service service ) { this . service = service ; } }","title":"Inje\u00e7\u00e3o por interface"},{"location":"design-patterns/dto/","text":"Data Transfer Object \u00b6 Data Transfer Object Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Objetos de transfer\u00eancia de dados (em ingl\u00eas, Data Transfer Object - DTO) \u00e9 um padr\u00e3o de projetos bastante usado em Java para o transporte de dados entre diferentes componentes de um sistema, diferentes inst\u00e2ncias, diferentes processos de um sistema distribu\u00eddo ou diferentes sistemas via serializa\u00e7\u00e3o. Um DTO n\u00e3o possui comportamento algum, exceto o de armazenamento e obten\u00e7\u00e3o de seus pr\u00f3prios dados. DTOs s\u00e3o objetos simples que n\u00e3o cont\u00eam qualquer l\u00f3gica de neg\u00f3cio que requeira testes. A ideia consiste basicamente em agrupar um conjunto de campos de uma ou mais classes numa \u00fanica classe simples de forma a otimizar a comunica\u00e7\u00e3o. Numa chamada remota, seria ineficiente passar cada campo individualmente. Da mesma forma seria ineficiente ou at\u00e9 causaria erros passar uma entidade mais complexa. Al\u00e9m disso, muitas vezes os dados usados na comunica\u00e7\u00e3o n\u00e3o refletem exatamente os campos do seu modelo. Ent\u00e3o, um DTO seria uma classe que prov\u00ea exatamente aquilo que \u00e9 necess\u00e1rio para um determinado processo. Abaixo temos um exemplo de um DTO, onde n\u00e3o queremos expor o campo cpf de Pessoa . Al\u00e9m disso a classe Pessoa possui um tipo Carro , e podemos \"achat\u00e1-la\" para que o objeto DTO tenha apenas tipos primitivos. /* entidades */ class Pesssoa { int id ; String nome ; String cpf ; Carro carro ; public Pesssoa ( int id , String nome , Carro carro ) { this . id = id ; this . nome = nome ; this . carro = carro ; } /* gets() e sets() */ } class Carro { String modelo ; public Carro ( String modelo ) { this . modelo = modelo ; } /* gets() e sets() */ } /* dto */ class PessoaDto { int idPessoa ; String nomePessoa ; String modeloCarro ; /* * Um DTO n\u00e3o tem l\u00f3gicas de neg\u00f3cio, portanto n\u00e3o devem fazer mapeamentos. Portanto * o construtor possui apenas seus pr\u00f3prios campos como par\u00e2metro. */ public PessoaDto ( int idPessoa , String nomePessoa , String modeloCarro ) { this . idPessoa = idPessoa ; this . nomePessoa = nomePessoa ; this . modeloCarro = modeloCarro ; } } O mapeamento de um objeto da entidade Pessoa para um DTO ou vice-versa, deve ser feito pela camada controller . /* controller */ PessoaDto convertToPessoaDto ( Pesssoa pessoa ) { return new PessoaDto ( pessoa . getId (), pessoa . getNome (), pessoa . carro . getModelo ()); } Pesssoa convertToPessoa ( PessoaDto pessoaDto ) { Carro carro = new Carro ( pessoaDto . getModeloCarro ()); return new Pesssoa ( pessoaDto . getIdPessoa (), pessoaDto . getNomePessoa (), carro ); } No exemplo acima, poder\u00edamos verificar se o id \u00e9 nulo, se fosse, ent\u00e3o seria considerado um novo objeto, caso contr\u00e1rio, poder\u00edamos buscar o objeto persistido e alterar somente os novos valores dos campos. Fazer o mapeamento manualmente de DTOs para as classes de neg\u00f3cio pode criar rapidamente muito c\u00f3digo, induzir a erros e consumir muito tempo. Para isso existem diversos frameworks de mapeamento de objetos como: `MapStruct`, `ModelMapper`, `Orika`, `JMapper`, `Dozer` etc.","title":"Data Transfer Object"},{"location":"design-patterns/dto/#data-transfer-object","text":"Data Transfer Object Introdu\u00e7\u00e3o","title":"Data Transfer Object"},{"location":"design-patterns/dto/#introducao","text":"Objetos de transfer\u00eancia de dados (em ingl\u00eas, Data Transfer Object - DTO) \u00e9 um padr\u00e3o de projetos bastante usado em Java para o transporte de dados entre diferentes componentes de um sistema, diferentes inst\u00e2ncias, diferentes processos de um sistema distribu\u00eddo ou diferentes sistemas via serializa\u00e7\u00e3o. Um DTO n\u00e3o possui comportamento algum, exceto o de armazenamento e obten\u00e7\u00e3o de seus pr\u00f3prios dados. DTOs s\u00e3o objetos simples que n\u00e3o cont\u00eam qualquer l\u00f3gica de neg\u00f3cio que requeira testes. A ideia consiste basicamente em agrupar um conjunto de campos de uma ou mais classes numa \u00fanica classe simples de forma a otimizar a comunica\u00e7\u00e3o. Numa chamada remota, seria ineficiente passar cada campo individualmente. Da mesma forma seria ineficiente ou at\u00e9 causaria erros passar uma entidade mais complexa. Al\u00e9m disso, muitas vezes os dados usados na comunica\u00e7\u00e3o n\u00e3o refletem exatamente os campos do seu modelo. Ent\u00e3o, um DTO seria uma classe que prov\u00ea exatamente aquilo que \u00e9 necess\u00e1rio para um determinado processo. Abaixo temos um exemplo de um DTO, onde n\u00e3o queremos expor o campo cpf de Pessoa . Al\u00e9m disso a classe Pessoa possui um tipo Carro , e podemos \"achat\u00e1-la\" para que o objeto DTO tenha apenas tipos primitivos. /* entidades */ class Pesssoa { int id ; String nome ; String cpf ; Carro carro ; public Pesssoa ( int id , String nome , Carro carro ) { this . id = id ; this . nome = nome ; this . carro = carro ; } /* gets() e sets() */ } class Carro { String modelo ; public Carro ( String modelo ) { this . modelo = modelo ; } /* gets() e sets() */ } /* dto */ class PessoaDto { int idPessoa ; String nomePessoa ; String modeloCarro ; /* * Um DTO n\u00e3o tem l\u00f3gicas de neg\u00f3cio, portanto n\u00e3o devem fazer mapeamentos. Portanto * o construtor possui apenas seus pr\u00f3prios campos como par\u00e2metro. */ public PessoaDto ( int idPessoa , String nomePessoa , String modeloCarro ) { this . idPessoa = idPessoa ; this . nomePessoa = nomePessoa ; this . modeloCarro = modeloCarro ; } } O mapeamento de um objeto da entidade Pessoa para um DTO ou vice-versa, deve ser feito pela camada controller . /* controller */ PessoaDto convertToPessoaDto ( Pesssoa pessoa ) { return new PessoaDto ( pessoa . getId (), pessoa . getNome (), pessoa . carro . getModelo ()); } Pesssoa convertToPessoa ( PessoaDto pessoaDto ) { Carro carro = new Carro ( pessoaDto . getModeloCarro ()); return new Pesssoa ( pessoaDto . getIdPessoa (), pessoaDto . getNomePessoa (), carro ); } No exemplo acima, poder\u00edamos verificar se o id \u00e9 nulo, se fosse, ent\u00e3o seria considerado um novo objeto, caso contr\u00e1rio, poder\u00edamos buscar o objeto persistido e alterar somente os novos valores dos campos. Fazer o mapeamento manualmente de DTOs para as classes de neg\u00f3cio pode criar rapidamente muito c\u00f3digo, induzir a erros e consumir muito tempo. Para isso existem diversos frameworks de mapeamento de objetos como: `MapStruct`, `ModelMapper`, `Orika`, `JMapper`, `Dozer` etc.","title":"Introdu\u00e7\u00e3o"},{"location":"design-patterns/facade/","text":"Facade \u00b6 Facade Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 O padr\u00e3o de projeto Facade oculta toda a complexidade de uma ou mais classes atrav\u00e9s de uma facade (fachada). A inten\u00e7\u00e3o desse padr\u00e3o de projeto \u00e9 simplificar uma interface, desconectando o cliente de um subsistema complexo. O Padr\u00e3o Facade \u00e9 utilizado quando precisamos simplificar e unificar uma interface grande ou um conjunto complexo de interfaces. Um sistema pode ter diversos Facades simplificando diversos pontos do programa. Com o padr\u00e3o Facade podemos simplificar a utiliza\u00e7\u00e3o de um subsistema complexo apenas implementando uma classe que fornece uma interface \u00fanica e mais razo\u00e1vel, por\u00e9m se desej\u00e1ssemos acessar as funcionalidades de baixo n\u00edvel do sistema isso seria perfeitamente poss\u00edvel. O padr\u00e3o Facade n\u00e3o \"encapsula\" as interfaces do sistema, apenas fornece uma interface simplificada para acessar as suas funcionalidades. Imagine que existe um sistema com diversas classes contendo diversos m\u00e9todos e tenhamos que agrupar todas essas classes chamando diversos m\u00e9todos para realizar uma determinada opera\u00e7\u00e3o. Tendo uma Facade precisar\u00edamos apenas construir um m\u00e9todo que agrupe todas essas classes e chame todos esses m\u00e9todos. Assim, quando usu\u00e1rio quiser fazer essa opera\u00e7\u00e3o ele chamaria apenas a Facade que realizaria essa opera\u00e7\u00e3o, simplificando muito todo o processo com uma simples interface. Vale ressaltar que isso n\u00e3o significa que uma Facade n\u00e3o tenha tamb\u00e9m funcionalidades pr\u00f3prias, ou seja, que tenha a sua pr\u00f3pria intelig\u00eancia e tamb\u00e9m utilize o subsistema. ![exemplo_padrao_facade](_facade/exemplo_padrao_facade.png) Abaixo um exemplo abstrato de como um cliente interage com um fa\u00e7ade (o \"computador\") para um sistema complexo (as partes internas do computador como o processador e o disco r\u00edgido): class CPU { public void freeze () { ... } public void jump ( long position ) { ... } public void execute () { ... } } class Memory { public void load ( long position , byte [] data ) { ... } } class HardDrive { public byte [] read ( long lba , int size ) { ... } } class Computer { private CPU cpu ; private Memory memory ; private HardDrive hardDrive ; public Computer () { this . cpu = new CPU (); this . memory = new Memory (); this . hardDrive = new HardDrive (); } public void startComputer () { cpu . freeze (); memory . load ( BOOT_ADDRESS , hardDrive . read ( BOOT_SECTOR , SECTOR_SIZE )); cpu . jump ( BOOT_ADDRESS ); cpu . execute (); } } class Client { public static void main ( String [] args ) { Computer facade = new Computer (); facade . startComputer (); } }","title":"Facade"},{"location":"design-patterns/facade/#facade","text":"Facade Introdu\u00e7\u00e3o","title":"Facade"},{"location":"design-patterns/facade/#introducao","text":"O padr\u00e3o de projeto Facade oculta toda a complexidade de uma ou mais classes atrav\u00e9s de uma facade (fachada). A inten\u00e7\u00e3o desse padr\u00e3o de projeto \u00e9 simplificar uma interface, desconectando o cliente de um subsistema complexo. O Padr\u00e3o Facade \u00e9 utilizado quando precisamos simplificar e unificar uma interface grande ou um conjunto complexo de interfaces. Um sistema pode ter diversos Facades simplificando diversos pontos do programa. Com o padr\u00e3o Facade podemos simplificar a utiliza\u00e7\u00e3o de um subsistema complexo apenas implementando uma classe que fornece uma interface \u00fanica e mais razo\u00e1vel, por\u00e9m se desej\u00e1ssemos acessar as funcionalidades de baixo n\u00edvel do sistema isso seria perfeitamente poss\u00edvel. O padr\u00e3o Facade n\u00e3o \"encapsula\" as interfaces do sistema, apenas fornece uma interface simplificada para acessar as suas funcionalidades. Imagine que existe um sistema com diversas classes contendo diversos m\u00e9todos e tenhamos que agrupar todas essas classes chamando diversos m\u00e9todos para realizar uma determinada opera\u00e7\u00e3o. Tendo uma Facade precisar\u00edamos apenas construir um m\u00e9todo que agrupe todas essas classes e chame todos esses m\u00e9todos. Assim, quando usu\u00e1rio quiser fazer essa opera\u00e7\u00e3o ele chamaria apenas a Facade que realizaria essa opera\u00e7\u00e3o, simplificando muito todo o processo com uma simples interface. Vale ressaltar que isso n\u00e3o significa que uma Facade n\u00e3o tenha tamb\u00e9m funcionalidades pr\u00f3prias, ou seja, que tenha a sua pr\u00f3pria intelig\u00eancia e tamb\u00e9m utilize o subsistema. ![exemplo_padrao_facade](_facade/exemplo_padrao_facade.png) Abaixo um exemplo abstrato de como um cliente interage com um fa\u00e7ade (o \"computador\") para um sistema complexo (as partes internas do computador como o processador e o disco r\u00edgido): class CPU { public void freeze () { ... } public void jump ( long position ) { ... } public void execute () { ... } } class Memory { public void load ( long position , byte [] data ) { ... } } class HardDrive { public byte [] read ( long lba , int size ) { ... } } class Computer { private CPU cpu ; private Memory memory ; private HardDrive hardDrive ; public Computer () { this . cpu = new CPU (); this . memory = new Memory (); this . hardDrive = new HardDrive (); } public void startComputer () { cpu . freeze (); memory . load ( BOOT_ADDRESS , hardDrive . read ( BOOT_SECTOR , SECTOR_SIZE )); cpu . jump ( BOOT_ADDRESS ); cpu . execute (); } } class Client { public static void main ( String [] args ) { Computer facade = new Computer (); facade . startComputer (); } }","title":"Introdu\u00e7\u00e3o"},{"location":"design-patterns/factory/","text":"Factory \u00b6 Factory Introdu\u00e7\u00e3o Padr\u00e3o Simple Factory Padr\u00e3o Factory Method Abstract Factory Introdu\u00e7\u00e3o \u00b6 Os padr\u00f5es de projeto Factory (Simple Factory, Factory Method, Abstract Factory) encapsulam a cria\u00e7\u00e3o de objetos. A proposta do padr\u00e3o Factory \u00e9 de criar objetos, por isso este \u00e9 considerado um padr\u00e3o criacional. O cliente n\u00e3o precisa conhecer as diferentes implementa\u00e7\u00f5es da interface ou da classe. A \u00fanica coisa que o cliente precisa conhecer \u00e9 a Factory (Factory Method ou Abstract Factory) para que possa obter uma inst\u00e2ncia de uma das implementa\u00e7\u00f5es da interface. Dessa forma, os clientes s\u00e3o desacoplados da cria\u00e7\u00e3o de objetos. Esse desacoplamento se d\u00e1 em fun\u00e7\u00e3o da aplica\u00e7\u00e3o do princ\u00edpio da invers\u00e3o de depend\u00eancia , ou seja, ao inv\u00e9s do cliente saber qual classe concreta ela precisa utilizar, ele delega isto para outra classe que retorna a implementa\u00e7\u00e3o apropriada para aquela interface. Entre as vantagens do desacoplamento tem-se a possibilidade de serem implementadas classes concretas que podem ser alteradas sem afetar o cliente, reduzindo assim o acoplamento entre as classes e aumentando a flexibilidade. Padr\u00e3o Simple Factory \u00b6 O padr\u00e3o Simple Factory gera uma inst\u00e2ncia de um objeto/servi\u00e7o para o cliente sem expor nenhuma implementa\u00e7\u00e3o ao cliente. Este padr\u00e3o pode ser usado quando a cria\u00e7\u00e3o de um objeto envolve alguma l\u00f3gica de neg\u00f3cios al\u00e9m da inicializa\u00e7\u00e3o. Isso ajuda a esconder essa l\u00f3gica. ![exemplo-diagrama-simple-factory](_factory/exemplo-diagrama-simple-factory.jpg) package _factory.exemplo_simple_factory ; public class Pizzaria { Pizza pizza ; public static void main ( String [] args ) { Pizzaria pizzaria = new Pizzaria (); /** * Gera uma inst\u00e2ncia do objeto sem expor nenhuma implementa\u00e7\u00e3o. A f\u00e1brica toma a * decis\u00e3o de qual subclasse deve ser retornada a inst\u00e2ncia baseado no argumento * passado. */ pizzaria . pizza = PizzaFactory . criarPizza ( \"portuguesa\" ); } } final class PizzaFactory { private PizzaFactory () {} public static Pizza criarPizza ( String tipo ) { Pizza pizza = null ; switch ( tipo ) { case \"queijo\" : pizza = new PizzaQuatroQueijos (); break ; case \"portuguesa\" : pizza = new PizzaPortuguesa (); break ; case \"calabresa\" : pizza = new PizzaCalabresa (); break ; case \"camarao\" : pizza = new PizzaCamarao (); break ; } return pizza ; } } interface Pizza { } class PizzaQuatroQueijos implements Pizza {} class PizzaPortuguesa implements Pizza {} class PizzaCalabresa implements Pizza {} class PizzaCamarao implements Pizza {} Padr\u00e3o Factory Method \u00b6 O padr\u00e3o Factory Method delega a implementa\u00e7\u00e3o do c\u00f3digo de cria\u00e7\u00e3o para as suas subclasses. Portanto, Factory Method depende da heran\u00e7a, pois a cria\u00e7\u00e3o do objeto \u00e9 delegada \u00e0s subclasses que implementam o m\u00e9todo factory (em ingles, Factory Method ) para criar objetos. ![exemplo-diagrama-factory-method](_factory/exemplo-diagrama-factory-method.jpg) package _factory.exemplo_factory_method ; public class Pizzaria { Pizza pizza ; public static void main ( String [] args ) { Pizzaria pizzaria = new Pizzaria (); /** * \u00c9 responsabilidade das subclasses instanciar o objeto. Ou seja, somente * PizzaFactorySaoPaulo e PizzaFactoryRioDeJaneiro sabem criar suas respectivas * pizzas. */ PizzaFactory pizzariaSaoPaulo = new PizzaFactorySaoPaulo (); pizzariaSaoPaulo . criarPizza ( \"queijo\" ); pizzaria . pizza = pizzariaSaoPaulo . delivery (); // ou PizzaFactory pizzariaRioDeJaneiro = new PizzaFactoryRioDeJaneiro (); pizzariaRioDeJaneiro . criarPizza ( \"calabresa\" ); pizzaria . pizza = pizzariaRioDeJaneiro . delivery (); } } class PizzaFactorySaoPaulo extends PizzaFactory { @Override public void criarPizza ( String tipo ) { switch ( tipo ) { case \"queijo\" : this . pizza = new SpPizzaQuatroQueijos (); break ; case \"portuguesa\" : this . pizza = new SpPizzaPortuguesa (); break ; case \"calabresa\" : this . pizza = new SpPizzaCalabresa (); break ; } } } class PizzaFactoryRioDeJaneiro extends PizzaFactory { @Override public void criarPizza ( String tipo ) { switch ( tipo ) { case \"queijo\" : this . pizza = new RjPizzaQuatroQueijos (); break ; case \"portuguesa\" : this . pizza = new RjPizzaPortuguesa (); break ; case \"calabresa\" : this . pizza = new RjPizzaCalabresa (); break ; } } } abstract class PizzaFactory { protected Pizza pizza ; /* * O m\u00e9todo factory, que deve ser implementado pelas classes filhas. */ public abstract void criarPizza ( String tipo ); public Pizza delivery () { return pizza ; } } interface Pizza { } class SpPizzaQuatroQueijos implements Pizza {} class SpPizzaPortuguesa implements Pizza {} class SpPizzaCalabresa implements Pizza {} class RjPizzaQuatroQueijos implements Pizza {} class RjPizzaPortuguesa implements Pizza {} class RjPizzaCalabresa implements Pizza {} Abstract Factory \u00b6 O padr\u00e3o Abstract Factory fornece uma maneira de encapsular um grupo de f\u00e1bricas individuais que t\u00eam um tema comum sem especificar suas classes concretas. Abstract Factory possui em sua composi\u00e7\u00e3o a implementa\u00e7\u00e3o de v\u00e1rios Factory Method . ![exemplo-diagrama-abstract-factory](_factory/exemplo-diagrama-abstract-factory.jpg) Caso a pizzaria, do exemplo anterior, tivesse um padr\u00e3o na constru\u00e7\u00e3o de pizzas, algo comum a todos os estados, mudando apenas a intensidade dos ingredientes, por exemplo: S\u00e3o Paulo tende a ter a massa mais grossa do que no Rio de Janeiro. Caso esse seja o cen\u00e1rio, o Abstract Factory seria a solu\u00e7\u00e3o ideal. As pizzas PizzaQuatroQueijos , PizzaCalabresa e PizzaPortuguesa possui o campo ingredientes que \u00e9 do tipo da interface abstrata de Factory (em ingles, Abstract Factory ). As pizzas (cliente) n\u00e3o tem conhecimento algum do tipo concreto do Factory. package exemplo_abstract_factory ; public class Pizzaria { Pizza pizza ; public void criarPizza ( String cidade , String tipo ){ switch ( tipo ) { case \"queijo\" : this . pizza = new PizzaQuatroQueijos ( getIngredientes ( cidade )); break ; case \"portuguesa\" : this . pizza = new PizzaPortuguesa ( getIngredientes ( cidade )); break ; case \"calabresa\" : this . pizza = new PizzaCalabresa ( getIngredientes ( cidade )); break ; } } private PizzaIngredientesFactory getIngredientes ( String cidade ) { if ( cidade . equals ( \"sao-paulo\" )) { return new SPPizzaIngredientesFactory (); } return new RJPizzaIngredientesFactory (); } public static void main ( String [] args ) { Pizzaria pizzaria = new Pizzaria (); pizzaria . criarPizza ( \"queijo\" , \"sao-paulo\" ); } } abstract class PizzaIngredientesFactory { public abstract Massa criarMassa (); public abstract Queijo criarQueijo (); } class SPPizzaIngredientesFactory extends PizzaIngredientesFactory { @Override public Massa criarMassa () { return new MassaGrossa (); } @Override public Queijo criarQueijo () { return new QueijoMinas (); } } class RJPizzaIngredientesFactory extends PizzaIngredientesFactory { @Override public Massa criarMassa () { return new MassaFina (); } @Override public Queijo criarQueijo () { return new QueijoParmesao (); } } // class PizzaCalabresa extends Pizza // class PizzaPortuguesa extends Pizza class PizzaQuatroQueijos extends Pizza { private PizzaIngredientesFactory ingredientes ; // tipo abstrato private Massa massa ; private Queijo queijo ; public PizzaQuatroQueijos ( PizzaIngredientesFactory ingredientes ){ this . ingredientes = ingredientes ; } public void prepara (){ massa = ingredientes . criarMassa (); queijo = ingredientes . criarQueijo (); } } class Pizza {} class Massa {} class MassaFina extends Massa {} class MassaGrossa extends Massa {} class Queijo {} class QueijoMinas extends Queijo {} class QueijoParmesao extends Queijo {}","title":"Factory"},{"location":"design-patterns/factory/#factory","text":"Factory Introdu\u00e7\u00e3o Padr\u00e3o Simple Factory Padr\u00e3o Factory Method Abstract Factory","title":"Factory"},{"location":"design-patterns/factory/#introducao","text":"Os padr\u00f5es de projeto Factory (Simple Factory, Factory Method, Abstract Factory) encapsulam a cria\u00e7\u00e3o de objetos. A proposta do padr\u00e3o Factory \u00e9 de criar objetos, por isso este \u00e9 considerado um padr\u00e3o criacional. O cliente n\u00e3o precisa conhecer as diferentes implementa\u00e7\u00f5es da interface ou da classe. A \u00fanica coisa que o cliente precisa conhecer \u00e9 a Factory (Factory Method ou Abstract Factory) para que possa obter uma inst\u00e2ncia de uma das implementa\u00e7\u00f5es da interface. Dessa forma, os clientes s\u00e3o desacoplados da cria\u00e7\u00e3o de objetos. Esse desacoplamento se d\u00e1 em fun\u00e7\u00e3o da aplica\u00e7\u00e3o do princ\u00edpio da invers\u00e3o de depend\u00eancia , ou seja, ao inv\u00e9s do cliente saber qual classe concreta ela precisa utilizar, ele delega isto para outra classe que retorna a implementa\u00e7\u00e3o apropriada para aquela interface. Entre as vantagens do desacoplamento tem-se a possibilidade de serem implementadas classes concretas que podem ser alteradas sem afetar o cliente, reduzindo assim o acoplamento entre as classes e aumentando a flexibilidade.","title":"Introdu\u00e7\u00e3o"},{"location":"design-patterns/factory/#padrao-simple-factory","text":"O padr\u00e3o Simple Factory gera uma inst\u00e2ncia de um objeto/servi\u00e7o para o cliente sem expor nenhuma implementa\u00e7\u00e3o ao cliente. Este padr\u00e3o pode ser usado quando a cria\u00e7\u00e3o de um objeto envolve alguma l\u00f3gica de neg\u00f3cios al\u00e9m da inicializa\u00e7\u00e3o. Isso ajuda a esconder essa l\u00f3gica. ![exemplo-diagrama-simple-factory](_factory/exemplo-diagrama-simple-factory.jpg) package _factory.exemplo_simple_factory ; public class Pizzaria { Pizza pizza ; public static void main ( String [] args ) { Pizzaria pizzaria = new Pizzaria (); /** * Gera uma inst\u00e2ncia do objeto sem expor nenhuma implementa\u00e7\u00e3o. A f\u00e1brica toma a * decis\u00e3o de qual subclasse deve ser retornada a inst\u00e2ncia baseado no argumento * passado. */ pizzaria . pizza = PizzaFactory . criarPizza ( \"portuguesa\" ); } } final class PizzaFactory { private PizzaFactory () {} public static Pizza criarPizza ( String tipo ) { Pizza pizza = null ; switch ( tipo ) { case \"queijo\" : pizza = new PizzaQuatroQueijos (); break ; case \"portuguesa\" : pizza = new PizzaPortuguesa (); break ; case \"calabresa\" : pizza = new PizzaCalabresa (); break ; case \"camarao\" : pizza = new PizzaCamarao (); break ; } return pizza ; } } interface Pizza { } class PizzaQuatroQueijos implements Pizza {} class PizzaPortuguesa implements Pizza {} class PizzaCalabresa implements Pizza {} class PizzaCamarao implements Pizza {}","title":"Padr\u00e3o Simple Factory"},{"location":"design-patterns/factory/#padrao-factory-method","text":"O padr\u00e3o Factory Method delega a implementa\u00e7\u00e3o do c\u00f3digo de cria\u00e7\u00e3o para as suas subclasses. Portanto, Factory Method depende da heran\u00e7a, pois a cria\u00e7\u00e3o do objeto \u00e9 delegada \u00e0s subclasses que implementam o m\u00e9todo factory (em ingles, Factory Method ) para criar objetos. ![exemplo-diagrama-factory-method](_factory/exemplo-diagrama-factory-method.jpg) package _factory.exemplo_factory_method ; public class Pizzaria { Pizza pizza ; public static void main ( String [] args ) { Pizzaria pizzaria = new Pizzaria (); /** * \u00c9 responsabilidade das subclasses instanciar o objeto. Ou seja, somente * PizzaFactorySaoPaulo e PizzaFactoryRioDeJaneiro sabem criar suas respectivas * pizzas. */ PizzaFactory pizzariaSaoPaulo = new PizzaFactorySaoPaulo (); pizzariaSaoPaulo . criarPizza ( \"queijo\" ); pizzaria . pizza = pizzariaSaoPaulo . delivery (); // ou PizzaFactory pizzariaRioDeJaneiro = new PizzaFactoryRioDeJaneiro (); pizzariaRioDeJaneiro . criarPizza ( \"calabresa\" ); pizzaria . pizza = pizzariaRioDeJaneiro . delivery (); } } class PizzaFactorySaoPaulo extends PizzaFactory { @Override public void criarPizza ( String tipo ) { switch ( tipo ) { case \"queijo\" : this . pizza = new SpPizzaQuatroQueijos (); break ; case \"portuguesa\" : this . pizza = new SpPizzaPortuguesa (); break ; case \"calabresa\" : this . pizza = new SpPizzaCalabresa (); break ; } } } class PizzaFactoryRioDeJaneiro extends PizzaFactory { @Override public void criarPizza ( String tipo ) { switch ( tipo ) { case \"queijo\" : this . pizza = new RjPizzaQuatroQueijos (); break ; case \"portuguesa\" : this . pizza = new RjPizzaPortuguesa (); break ; case \"calabresa\" : this . pizza = new RjPizzaCalabresa (); break ; } } } abstract class PizzaFactory { protected Pizza pizza ; /* * O m\u00e9todo factory, que deve ser implementado pelas classes filhas. */ public abstract void criarPizza ( String tipo ); public Pizza delivery () { return pizza ; } } interface Pizza { } class SpPizzaQuatroQueijos implements Pizza {} class SpPizzaPortuguesa implements Pizza {} class SpPizzaCalabresa implements Pizza {} class RjPizzaQuatroQueijos implements Pizza {} class RjPizzaPortuguesa implements Pizza {} class RjPizzaCalabresa implements Pizza {}","title":"Padr\u00e3o Factory Method"},{"location":"design-patterns/factory/#abstract-factory","text":"O padr\u00e3o Abstract Factory fornece uma maneira de encapsular um grupo de f\u00e1bricas individuais que t\u00eam um tema comum sem especificar suas classes concretas. Abstract Factory possui em sua composi\u00e7\u00e3o a implementa\u00e7\u00e3o de v\u00e1rios Factory Method . ![exemplo-diagrama-abstract-factory](_factory/exemplo-diagrama-abstract-factory.jpg) Caso a pizzaria, do exemplo anterior, tivesse um padr\u00e3o na constru\u00e7\u00e3o de pizzas, algo comum a todos os estados, mudando apenas a intensidade dos ingredientes, por exemplo: S\u00e3o Paulo tende a ter a massa mais grossa do que no Rio de Janeiro. Caso esse seja o cen\u00e1rio, o Abstract Factory seria a solu\u00e7\u00e3o ideal. As pizzas PizzaQuatroQueijos , PizzaCalabresa e PizzaPortuguesa possui o campo ingredientes que \u00e9 do tipo da interface abstrata de Factory (em ingles, Abstract Factory ). As pizzas (cliente) n\u00e3o tem conhecimento algum do tipo concreto do Factory. package exemplo_abstract_factory ; public class Pizzaria { Pizza pizza ; public void criarPizza ( String cidade , String tipo ){ switch ( tipo ) { case \"queijo\" : this . pizza = new PizzaQuatroQueijos ( getIngredientes ( cidade )); break ; case \"portuguesa\" : this . pizza = new PizzaPortuguesa ( getIngredientes ( cidade )); break ; case \"calabresa\" : this . pizza = new PizzaCalabresa ( getIngredientes ( cidade )); break ; } } private PizzaIngredientesFactory getIngredientes ( String cidade ) { if ( cidade . equals ( \"sao-paulo\" )) { return new SPPizzaIngredientesFactory (); } return new RJPizzaIngredientesFactory (); } public static void main ( String [] args ) { Pizzaria pizzaria = new Pizzaria (); pizzaria . criarPizza ( \"queijo\" , \"sao-paulo\" ); } } abstract class PizzaIngredientesFactory { public abstract Massa criarMassa (); public abstract Queijo criarQueijo (); } class SPPizzaIngredientesFactory extends PizzaIngredientesFactory { @Override public Massa criarMassa () { return new MassaGrossa (); } @Override public Queijo criarQueijo () { return new QueijoMinas (); } } class RJPizzaIngredientesFactory extends PizzaIngredientesFactory { @Override public Massa criarMassa () { return new MassaFina (); } @Override public Queijo criarQueijo () { return new QueijoParmesao (); } } // class PizzaCalabresa extends Pizza // class PizzaPortuguesa extends Pizza class PizzaQuatroQueijos extends Pizza { private PizzaIngredientesFactory ingredientes ; // tipo abstrato private Massa massa ; private Queijo queijo ; public PizzaQuatroQueijos ( PizzaIngredientesFactory ingredientes ){ this . ingredientes = ingredientes ; } public void prepara (){ massa = ingredientes . criarMassa (); queijo = ingredientes . criarQueijo (); } } class Pizza {} class Massa {} class MassaFina extends Massa {} class MassaGrossa extends Massa {} class Queijo {} class QueijoMinas extends Queijo {} class QueijoParmesao extends Queijo {}","title":"Abstract Factory"},{"location":"design-patterns/introducao/","text":"Introdu\u00e7\u00e3o \u00b6 Introdu\u00e7\u00e3o Links Links \u00b6 https://brizeno.wordpress.com/padroes/","title":"Introdu\u00e7\u00e3o"},{"location":"design-patterns/introducao/#introducao","text":"Introdu\u00e7\u00e3o Links","title":"Introdu\u00e7\u00e3o"},{"location":"design-patterns/introducao/#links","text":"https://brizeno.wordpress.com/padroes/","title":"Links"},{"location":"design-patterns/oauth/","text":"OAuth 2.0 \u00b6 OAuth 2.0 Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6","title":"OAuth 2.0"},{"location":"design-patterns/oauth/#oauth-20","text":"OAuth 2.0 Introdu\u00e7\u00e3o","title":"OAuth 2.0"},{"location":"design-patterns/oauth/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/erros-solucoes/","text":"Erros e solu\u00e7\u00f5es \u00b6 HTTPS certificate \u00b6 Erro quando n\u00e3o foi encontrado um certificado SSL/TLS v\u00e1lido. Log info: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager [ 0 ] User profile is available. Using '/home/<user>/.aspnet/DataProtection-Keys' as key repository ; keys will not be encrypted at rest. crit: Microsoft.AspNetCore.Server.Kestrel [ 0 ] Unable to start Kestrel. System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found. To generate a developer certificate run 'dotnet dev-certs https' . To trust the certificate ( Windows and macOS only ) run 'dotnet dev-certs https --trust' . Solu\u00e7\u00e3o (Linux) Executar os comandos abaixo: dotnet tool uninstall --global dotnet-dev-certs dotnet tool install --global dotnet-dev-certs export PATH = \" $PATH :~/.dotnet/tools\" dotnet dev-certs https --trust Para permanecer ap\u00f3s o reboot, adicione estes comandos em ~/.bash_profile . OmniSharp \u00b6 Erro quando OmniSharp n\u00e3o encontra os sdks do dotnet. Log warn: OmniSharp.MSBuild.ProjectManager Failed to load project file <path-to-project> Microsoft.Build.Exceptions.InvalidProjectFileException: The SDK 'Microsoft.NET.Sdk' specified could not be found. <path-to-project> Solu\u00e7\u00e3o (Linux) Criar link simb\u00f3lico do dotnet em /usr/local/bin/ conforme o comando abaixo. sudo ln -s /usr/bin/dotnet /usr/local/bin/dotnet","title":"Erros e solu\u00e7\u00f5es"},{"location":"dotnet/erros-solucoes/#erros-e-solucoes","text":"","title":"Erros e solu\u00e7\u00f5es"},{"location":"dotnet/erros-solucoes/#https-certificate","text":"Erro quando n\u00e3o foi encontrado um certificado SSL/TLS v\u00e1lido. Log info: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager [ 0 ] User profile is available. Using '/home/<user>/.aspnet/DataProtection-Keys' as key repository ; keys will not be encrypted at rest. crit: Microsoft.AspNetCore.Server.Kestrel [ 0 ] Unable to start Kestrel. System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found. To generate a developer certificate run 'dotnet dev-certs https' . To trust the certificate ( Windows and macOS only ) run 'dotnet dev-certs https --trust' . Solu\u00e7\u00e3o (Linux) Executar os comandos abaixo: dotnet tool uninstall --global dotnet-dev-certs dotnet tool install --global dotnet-dev-certs export PATH = \" $PATH :~/.dotnet/tools\" dotnet dev-certs https --trust Para permanecer ap\u00f3s o reboot, adicione estes comandos em ~/.bash_profile .","title":"HTTPS certificate"},{"location":"dotnet/erros-solucoes/#omnisharp","text":"Erro quando OmniSharp n\u00e3o encontra os sdks do dotnet. Log warn: OmniSharp.MSBuild.ProjectManager Failed to load project file <path-to-project> Microsoft.Build.Exceptions.InvalidProjectFileException: The SDK 'Microsoft.NET.Sdk' specified could not be found. <path-to-project> Solu\u00e7\u00e3o (Linux) Criar link simb\u00f3lico do dotnet em /usr/local/bin/ conforme o comando abaixo. sudo ln -s /usr/bin/dotnet /usr/local/bin/dotnet","title":"OmniSharp"},{"location":"dotnet/introducao/","text":"Introdu\u00e7\u00e3o \u00b6 Introdu\u00e7\u00e3o Instala\u00e7\u00e3o Local da instala\u00e7\u00e3o Configurar vari\u00e1veis de sistema Arquivos de configura\u00e7\u00e3o launchSettings.json launch.json appsettings.json web.config Criar solu\u00e7\u00e3o Criar projeto Criar pasta de projeto Associar projetos Associar projeto a solu\u00e7\u00e3o Desassociar projeto a solu\u00e7\u00e3o Associar projeto a outro projeto Desassociar projeto de outro projeto Listar projetos da solu\u00e7\u00e3o Compilar solu\u00e7\u00e3o ou projeto Publicar solu\u00e7\u00e3o Rodar a solu\u00e7\u00e3o ou projeto publicado Instalar as depend\u00eancias (pacotes) do projeto Banco de dados Instalar o CLI do EF Adicionar o pacote do EF Instalar o provedor do banco para o EF Criar uma migration Remover migration Reverter uma migration Lista as migrations Gerar scripts SQL Atualizar o banco Aplicar migra\u00e7\u00f5es em runtime Pacotes Nuget Instalar Remover Restaurar Erros It is being used by another process The required library libhostfxr.so could not be found Couldn't find a valid ICU package installed on the system [[ TOC ]] Instala\u00e7\u00e3o \u00b6 P\u00e1gina de download: https://dotnet.microsoft.com/download/dotnet-core Adicionar reposit\u00f3rio e instala\u00e7\u00e3o. wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo sdpkg -i packages-microsoft-prod.deb sudo apt-get update sudo apt-get install apt-transport-https sudo apt-get update sudo apt-get install dotnet-sdk-3.1 Local da instala\u00e7\u00e3o \u00b6 /usr/share/dotnet Configurar vari\u00e1veis de sistema \u00b6 export DOTNET_ROOT = $( dirname $( realpath $( which dotnet ))) export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = true Arquivos de configura\u00e7\u00e3o \u00b6 launchSettings.json \u00b6 O arquivo launchSettings.json \u00e9 usado apenas pelo Visual Studio para o usu\u00e1rio escolher o environment atual. { \"iisSettings\" : { \"windowsAuthentication\" : false , \"anonymousAuthentication\" : true , \"iisExpress\" : { \"applicationUrl\" : \"http://localhost:53836/\" , \"sslPort\" : 0 } }, \"profiles\" : { \"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, \"Gustavo\" : { \"commandName\" : \"Project\" , \"launchBrowser\" : false , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Gustavo\" }, \"applicationUrl\" : \"http://localhost:5000/\" } } } launch.json \u00b6 O arquivo launch.json \u00e9 usando pelo Visual Studio Code . O environment \u00e9 definido pela chave env . { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \".NET Core Launch (web)\" , \"type\" : \"coreclr\" , \"request\" : \"launch\" , \"preLaunchTask\" : \"build\" , \"program\" : \"${workspaceRoot}/bin/Debug/netcoreapp1.0/TestApp.dll\" , \"args\" : [], \"cwd\" : \"${workspaceRoot}\" , \"stopAtEntry\" : false , \"launchBrowser\" : { \"enabled\" : true , \"args\" : \"${auto-detect-url}\" , \"windows\" : { \"command\" : \"cmd.exe\" , \"args\" : \"/C start ${auto-detect-url}\" }, \"osx\" : { \"command\" : \"open\" }, \"linux\" : { \"command\" : \"xdg-open\" } }, \"env\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" }, \"sourceFileMap\" : { \"/Views\" : \"${workspaceRoot}/Views\" } } ] } appsettings.json \u00b6 O arquivo appsettings.json define as configura\u00e7\u00f5es da aplica\u00e7\u00e3o e pode ser definida espec\u00edfica para um ambiente. Basta criar um arquivo appsettings.<environment>.json . { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"AllowedHosts\" : \"*\" } web.config \u00b6 O arquivo web.config \u00e9 usado apenas pelo IIS (Windows). <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <location path= \".\" inheritInChildApplications= \"false\" > <system.webServer> <handlers> <add name= \"aspNetCore\" path= \"*\" verb= \"*\" modules= \"AspNetCoreModuleV2\" resourceType= \"Unspecified\" /> </handlers> <aspNetCore processPath= \".\\MeuConsultorio.Api\" stdoutLogEnabled= \"true\" stdoutLogFile= \".\\logs\\stdout\" hostingModel= \"OutOfProcess\" > <environmentVariables> <environmentVariable name= \"ASPNETCORE_ENVIRONMENT\" value= \"ProducaoLinux\" /> </environmentVariables> </aspNetCore> </system.webServer> </location> </configuration> Criar solu\u00e7\u00e3o \u00b6 Criar nova solu\u00e7\u00e3o dotnet new sln -n <nome-solucao> # Par\u00e2metros # -n: Por padr\u00e3o usa o nome do diret\u00f3rio Criar projeto \u00b6 Criar projeto tipo console . dotnet new console -o <projeto> Criar projeto tipo biblioteca de classes . dotnet new classlib -f <framework> -o <diretorio> -n <nome-projeto> # Exemplo: dotnet new classlib -f netcoreapp3.1 -o NerdStore.Catalogo.Domain Criar projeto tipo ASP.NET Core vazio . dotnet new web -o <projeto> Criar projeto tipo API Web do ASP.NET Core . dotnet new webapi -o <projeto> Criar projeto tipo Aplicativo Web ASP.NET Core . dotnet new webapp -o <projeto> Criar projeto tipo Aplicativo Web ASP.NET Core MVC . dotnet new mvc -o <projeto> -au Individual # Par\u00e2metros # -au: Autentica\u00e7\u00e3o individual do identity Criar projeto tipo Xunit . dotnet new xunit -o <projeto> Criar pasta de projeto \u00b6 dotnet new <typeproj> -o <pasta-solucao> -n <nome-pasta> # Exemplo dotnet new <typeproj> -o \"Services/Catalogo\" -n \"Catalogo\" Associar projetos \u00b6 Associar projeto a solu\u00e7\u00e3o \u00b6 dotnet sln add -s <pasta-solucao> <diretorio-projeto>/<arquivo>.csproj # Exemplo dotnet sln add -s Services/Catalogo src/NerdStore.Catalogo.Domain/NerdStore.Catalogo.Domain.csproj Desassociar projeto a solu\u00e7\u00e3o \u00b6 dotnet sln remove -s <pasta-solucao> <diretorio-projeto>/<arquivo>.csproj # Exemplo dotnet sln remove src/NerdStore.Catalogo.Domain/NerdStore.Catalogo.Domain.csproj Associar projeto a outro projeto \u00b6 dotnet add <diretorio-projeto> reference <diretorio-projeto-referenciado> Desassociar projeto de outro projeto \u00b6 dotnet remove <diretorio-projeto> reference <diretorio-projeto-referenciado> # Exemplo dotnet remove Projeto.csproj reference src/NerdStore.Catalogo.Domain/NerdStore.Catalogo.Domain.csproj Listar projetos da solu\u00e7\u00e3o \u00b6 dotnet sln list Compilar solu\u00e7\u00e3o ou projeto \u00b6 dotnet build Publicar solu\u00e7\u00e3o \u00b6 Gerar o build para produ\u00e7\u00e3o. As implanta\u00e7\u00f5es de aplicativo autocontatidas do .NET Core incluem as bibliotecas e o runtime do .NET Core. A partir do SDK do .NET Core 2.1 (.NET Core 2.1.300), uma implanta\u00e7\u00e3o de aplicativo autocontida publica o runtime de patch mais recente no computador. Lista de runtimes dotnet publish -f <framework> -c <configuracao> -o <diretorio-saida> --self-contained true -r <rid-runtime-id> -p:<propriedade-nome> = <valor> # Exemplo dotnet publish -f netcoreapp2.2 -o ~/MeuDeploy --self-contained true -r ubuntu.18.04-x64 p:EnvironmentName = ProducaoLinux Rodar a solu\u00e7\u00e3o ou projeto publicado \u00b6 dotnet <nome-solucao-ou-projeto>.dll --environment <nome-environment> --server.urls http://0.0.0.0:5000 Instalar as depend\u00eancias (pacotes) do projeto \u00b6 dotnet restore Banco de dados \u00b6 O EF Core ( Entity Framework Core ) \u00e9 um O/RM (mapeador relacional de objeto) que permite que os desenvolvedores de .NET trabalhem com um banco de dados usando objetos .NET. Elimina a necessidade da maioria do c\u00f3digo de acesso a dados que os desenvolvedores geralmente precisam gravar. Instalar o CLI do EF \u00b6 dotnet tool install --global dotnet-ef Adicionar o pacote do EF \u00b6 dotnet add package Microsoft.EntityFrameworkCore dotnet add package Microsoft.EntityFrameworkCore.Design Instalar o provedor do banco para o EF \u00b6 dotnet add <projeto> package <pacote-provedor-banco> # Exemplo PostgreSQL: # dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL O argumento <projeto> \u00e9 opcional. Pode basear no diret\u00f3rio corrente. Lista de provedores de bancos de dados: Veja mais Exemplo de uso: public class MeuContexto : DbContext { // ... protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseNpgsql(\"Host=localhost;Port=5432;Database=exemplo-migrations2;Username=postgres;Password=postgres\"); } } Criar uma migration \u00b6 dotnet ef migrations add <nome> -p <caminho-projeto-migrations> -s <caminho-projeto-startup> -c <nome-contexto> --framework <netcoreapp#.#> Remover migration \u00b6 Remove a \u00faltima migration ainda n\u00e3o aplicada ao banco . dotnet ef migrations remove Remover todas migrations dotnet ef database update 0 dotnet ef migrations remove Reverter uma migration \u00b6 Reverter uma ou v\u00e1rias migrations , at\u00e9 a migrations informada. dotnet ef database update <nome> Lista as migrations \u00b6 dotnet ef migrations list Gerar scripts SQL \u00b6 Gera um script SQL das aplica\u00e7\u00f5es que ser\u00e3o feitas no banco. dotnet ef migrations script -from <nome> -to <nome> Os argumentos <from> e <to> s\u00e3o opcionais. Por pad\u00e3o ser\u00e1 pego da primeira at\u00e9 a \u00faltima migration . Atualizar o banco \u00b6 Aplica as migrations no banco. Se o banco n\u00e3o existir, tamb\u00e9m ser\u00e1 criado. dotnet ef database update Aplicar migra\u00e7\u00f5es em runtime \u00b6 <contexto>.Database.Migrate(); Exemplo chamando no Main . class Program { static void Main(string[] args) { // ... using var context = new BloggingContext(); context.Database.Migrate(); } } N\u00e3o chame EnsureCreated() antes de Migrate() . O EnsureCreated() ignora as Migra\u00e7\u00f5es para criar o esquema e causa falha no Migrate() . Pacotes Nuget \u00b6 Instalar \u00b6 dotnet add <projeto> package <pacote> <versao> # exemplo: dotnet add ~/ToDo.csproj package Microsoft.Azure.DocumentDB.Core -v 1.0.0 Os argumento <projeto> e <versao> s\u00e3o opcionais. Pode basear no diret\u00f3rio corrente. Remover \u00b6 dotnet remove <projeto> package <pacote> O argumento <projeto> \u00e9 opcional. Pode basear no diret\u00f3rio corrente. Restaurar \u00b6 dotnet restore <projeto | solucao> O argumento <projeto|solucao> \u00e9 opcional. Pode basear no diret\u00f3rio corrente. Erros \u00b6 It is being used by another process \u00b6 Erro de concorrencia de processos dotnet build-server shutdown Se n\u00e3o funcionar, matar todas os processos dotnet killall dotnet Se o erro ocorrer em dotnet publish , pode ser que o arquivo j\u00e1 est\u00e1 sendo copiado por outra thread, basta ignorar o erro. The required library libhostfxr.so could not be found \u00b6 Solu\u00e7\u00e3o, definir a vari\u00e1vel de sistema DOTNET_ROOT . export DOTNET_ROOT = $( dirname $( realpath $( which dotnet ))) Couldn't find a valid ICU package installed on the system \u00b6 Solu\u00e7\u00e3o, definir a vari\u00e1vel de sistema DOTNET_SYSTEM_GLOBALIZATION_INVARIANT . Veja mais export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = true","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/introducao/#introducao","text":"Introdu\u00e7\u00e3o Instala\u00e7\u00e3o Local da instala\u00e7\u00e3o Configurar vari\u00e1veis de sistema Arquivos de configura\u00e7\u00e3o launchSettings.json launch.json appsettings.json web.config Criar solu\u00e7\u00e3o Criar projeto Criar pasta de projeto Associar projetos Associar projeto a solu\u00e7\u00e3o Desassociar projeto a solu\u00e7\u00e3o Associar projeto a outro projeto Desassociar projeto de outro projeto Listar projetos da solu\u00e7\u00e3o Compilar solu\u00e7\u00e3o ou projeto Publicar solu\u00e7\u00e3o Rodar a solu\u00e7\u00e3o ou projeto publicado Instalar as depend\u00eancias (pacotes) do projeto Banco de dados Instalar o CLI do EF Adicionar o pacote do EF Instalar o provedor do banco para o EF Criar uma migration Remover migration Reverter uma migration Lista as migrations Gerar scripts SQL Atualizar o banco Aplicar migra\u00e7\u00f5es em runtime Pacotes Nuget Instalar Remover Restaurar Erros It is being used by another process The required library libhostfxr.so could not be found Couldn't find a valid ICU package installed on the system [[ TOC ]]","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/introducao/#instalacao","text":"P\u00e1gina de download: https://dotnet.microsoft.com/download/dotnet-core Adicionar reposit\u00f3rio e instala\u00e7\u00e3o. wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo sdpkg -i packages-microsoft-prod.deb sudo apt-get update sudo apt-get install apt-transport-https sudo apt-get update sudo apt-get install dotnet-sdk-3.1","title":"Instala\u00e7\u00e3o"},{"location":"dotnet/introducao/#local-da-instalacao","text":"/usr/share/dotnet","title":"Local da instala\u00e7\u00e3o"},{"location":"dotnet/introducao/#configurar-variaveis-de-sistema","text":"export DOTNET_ROOT = $( dirname $( realpath $( which dotnet ))) export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = true","title":"Configurar vari\u00e1veis de sistema"},{"location":"dotnet/introducao/#arquivos-de-configuracao","text":"","title":"Arquivos de configura\u00e7\u00e3o"},{"location":"dotnet/introducao/#launchsettingsjson","text":"O arquivo launchSettings.json \u00e9 usado apenas pelo Visual Studio para o usu\u00e1rio escolher o environment atual. { \"iisSettings\" : { \"windowsAuthentication\" : false , \"anonymousAuthentication\" : true , \"iisExpress\" : { \"applicationUrl\" : \"http://localhost:53836/\" , \"sslPort\" : 0 } }, \"profiles\" : { \"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, \"Gustavo\" : { \"commandName\" : \"Project\" , \"launchBrowser\" : false , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Gustavo\" }, \"applicationUrl\" : \"http://localhost:5000/\" } } }","title":"launchSettings.json"},{"location":"dotnet/introducao/#launchjson","text":"O arquivo launch.json \u00e9 usando pelo Visual Studio Code . O environment \u00e9 definido pela chave env . { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \".NET Core Launch (web)\" , \"type\" : \"coreclr\" , \"request\" : \"launch\" , \"preLaunchTask\" : \"build\" , \"program\" : \"${workspaceRoot}/bin/Debug/netcoreapp1.0/TestApp.dll\" , \"args\" : [], \"cwd\" : \"${workspaceRoot}\" , \"stopAtEntry\" : false , \"launchBrowser\" : { \"enabled\" : true , \"args\" : \"${auto-detect-url}\" , \"windows\" : { \"command\" : \"cmd.exe\" , \"args\" : \"/C start ${auto-detect-url}\" }, \"osx\" : { \"command\" : \"open\" }, \"linux\" : { \"command\" : \"xdg-open\" } }, \"env\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" }, \"sourceFileMap\" : { \"/Views\" : \"${workspaceRoot}/Views\" } } ] }","title":"launch.json"},{"location":"dotnet/introducao/#appsettingsjson","text":"O arquivo appsettings.json define as configura\u00e7\u00f5es da aplica\u00e7\u00e3o e pode ser definida espec\u00edfica para um ambiente. Basta criar um arquivo appsettings.<environment>.json . { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"AllowedHosts\" : \"*\" }","title":"appsettings.json"},{"location":"dotnet/introducao/#webconfig","text":"O arquivo web.config \u00e9 usado apenas pelo IIS (Windows). <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <location path= \".\" inheritInChildApplications= \"false\" > <system.webServer> <handlers> <add name= \"aspNetCore\" path= \"*\" verb= \"*\" modules= \"AspNetCoreModuleV2\" resourceType= \"Unspecified\" /> </handlers> <aspNetCore processPath= \".\\MeuConsultorio.Api\" stdoutLogEnabled= \"true\" stdoutLogFile= \".\\logs\\stdout\" hostingModel= \"OutOfProcess\" > <environmentVariables> <environmentVariable name= \"ASPNETCORE_ENVIRONMENT\" value= \"ProducaoLinux\" /> </environmentVariables> </aspNetCore> </system.webServer> </location> </configuration>","title":"web.config"},{"location":"dotnet/introducao/#criar-solucao","text":"Criar nova solu\u00e7\u00e3o dotnet new sln -n <nome-solucao> # Par\u00e2metros # -n: Por padr\u00e3o usa o nome do diret\u00f3rio","title":"Criar solu\u00e7\u00e3o"},{"location":"dotnet/introducao/#criar-projeto","text":"Criar projeto tipo console . dotnet new console -o <projeto> Criar projeto tipo biblioteca de classes . dotnet new classlib -f <framework> -o <diretorio> -n <nome-projeto> # Exemplo: dotnet new classlib -f netcoreapp3.1 -o NerdStore.Catalogo.Domain Criar projeto tipo ASP.NET Core vazio . dotnet new web -o <projeto> Criar projeto tipo API Web do ASP.NET Core . dotnet new webapi -o <projeto> Criar projeto tipo Aplicativo Web ASP.NET Core . dotnet new webapp -o <projeto> Criar projeto tipo Aplicativo Web ASP.NET Core MVC . dotnet new mvc -o <projeto> -au Individual # Par\u00e2metros # -au: Autentica\u00e7\u00e3o individual do identity Criar projeto tipo Xunit . dotnet new xunit -o <projeto>","title":"Criar projeto"},{"location":"dotnet/introducao/#criar-pasta-de-projeto","text":"dotnet new <typeproj> -o <pasta-solucao> -n <nome-pasta> # Exemplo dotnet new <typeproj> -o \"Services/Catalogo\" -n \"Catalogo\"","title":"Criar pasta de projeto"},{"location":"dotnet/introducao/#associar-projetos","text":"","title":"Associar projetos"},{"location":"dotnet/introducao/#associar-projeto-a-solucao","text":"dotnet sln add -s <pasta-solucao> <diretorio-projeto>/<arquivo>.csproj # Exemplo dotnet sln add -s Services/Catalogo src/NerdStore.Catalogo.Domain/NerdStore.Catalogo.Domain.csproj","title":"Associar projeto a solu\u00e7\u00e3o"},{"location":"dotnet/introducao/#desassociar-projeto-a-solucao","text":"dotnet sln remove -s <pasta-solucao> <diretorio-projeto>/<arquivo>.csproj # Exemplo dotnet sln remove src/NerdStore.Catalogo.Domain/NerdStore.Catalogo.Domain.csproj","title":"Desassociar projeto a solu\u00e7\u00e3o"},{"location":"dotnet/introducao/#associar-projeto-a-outro-projeto","text":"dotnet add <diretorio-projeto> reference <diretorio-projeto-referenciado>","title":"Associar projeto a outro projeto"},{"location":"dotnet/introducao/#desassociar-projeto-de-outro-projeto","text":"dotnet remove <diretorio-projeto> reference <diretorio-projeto-referenciado> # Exemplo dotnet remove Projeto.csproj reference src/NerdStore.Catalogo.Domain/NerdStore.Catalogo.Domain.csproj","title":"Desassociar projeto de outro projeto"},{"location":"dotnet/introducao/#listar-projetos-da-solucao","text":"dotnet sln list","title":"Listar projetos da solu\u00e7\u00e3o"},{"location":"dotnet/introducao/#compilar-solucao-ou-projeto","text":"dotnet build","title":"Compilar solu\u00e7\u00e3o ou projeto"},{"location":"dotnet/introducao/#publicar-solucao","text":"Gerar o build para produ\u00e7\u00e3o. As implanta\u00e7\u00f5es de aplicativo autocontatidas do .NET Core incluem as bibliotecas e o runtime do .NET Core. A partir do SDK do .NET Core 2.1 (.NET Core 2.1.300), uma implanta\u00e7\u00e3o de aplicativo autocontida publica o runtime de patch mais recente no computador. Lista de runtimes dotnet publish -f <framework> -c <configuracao> -o <diretorio-saida> --self-contained true -r <rid-runtime-id> -p:<propriedade-nome> = <valor> # Exemplo dotnet publish -f netcoreapp2.2 -o ~/MeuDeploy --self-contained true -r ubuntu.18.04-x64 p:EnvironmentName = ProducaoLinux","title":"Publicar solu\u00e7\u00e3o"},{"location":"dotnet/introducao/#rodar-a-solucao-ou-projeto-publicado","text":"dotnet <nome-solucao-ou-projeto>.dll --environment <nome-environment> --server.urls http://0.0.0.0:5000","title":"Rodar a solu\u00e7\u00e3o ou projeto publicado"},{"location":"dotnet/introducao/#instalar-as-dependencias-pacotes-do-projeto","text":"dotnet restore","title":"Instalar as depend\u00eancias (pacotes) do projeto"},{"location":"dotnet/introducao/#banco-de-dados","text":"O EF Core ( Entity Framework Core ) \u00e9 um O/RM (mapeador relacional de objeto) que permite que os desenvolvedores de .NET trabalhem com um banco de dados usando objetos .NET. Elimina a necessidade da maioria do c\u00f3digo de acesso a dados que os desenvolvedores geralmente precisam gravar.","title":"Banco de dados"},{"location":"dotnet/introducao/#instalar-o-cli-do-ef","text":"dotnet tool install --global dotnet-ef","title":"Instalar o CLI do EF"},{"location":"dotnet/introducao/#adicionar-o-pacote-do-ef","text":"dotnet add package Microsoft.EntityFrameworkCore dotnet add package Microsoft.EntityFrameworkCore.Design","title":"Adicionar o pacote do EF"},{"location":"dotnet/introducao/#instalar-o-provedor-do-banco-para-o-ef","text":"dotnet add <projeto> package <pacote-provedor-banco> # Exemplo PostgreSQL: # dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL O argumento <projeto> \u00e9 opcional. Pode basear no diret\u00f3rio corrente. Lista de provedores de bancos de dados: Veja mais Exemplo de uso: public class MeuContexto : DbContext { // ... protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseNpgsql(\"Host=localhost;Port=5432;Database=exemplo-migrations2;Username=postgres;Password=postgres\"); } }","title":"Instalar o provedor do banco para o EF"},{"location":"dotnet/introducao/#criar-uma-migration","text":"dotnet ef migrations add <nome> -p <caminho-projeto-migrations> -s <caminho-projeto-startup> -c <nome-contexto> --framework <netcoreapp#.#>","title":"Criar uma migration"},{"location":"dotnet/introducao/#remover-migration","text":"Remove a \u00faltima migration ainda n\u00e3o aplicada ao banco . dotnet ef migrations remove Remover todas migrations dotnet ef database update 0 dotnet ef migrations remove","title":"Remover migration"},{"location":"dotnet/introducao/#reverter-uma-migration","text":"Reverter uma ou v\u00e1rias migrations , at\u00e9 a migrations informada. dotnet ef database update <nome>","title":"Reverter uma migration"},{"location":"dotnet/introducao/#lista-as-migrations","text":"dotnet ef migrations list","title":"Lista as migrations"},{"location":"dotnet/introducao/#gerar-scripts-sql","text":"Gera um script SQL das aplica\u00e7\u00f5es que ser\u00e3o feitas no banco. dotnet ef migrations script -from <nome> -to <nome> Os argumentos <from> e <to> s\u00e3o opcionais. Por pad\u00e3o ser\u00e1 pego da primeira at\u00e9 a \u00faltima migration .","title":"Gerar scripts SQL"},{"location":"dotnet/introducao/#atualizar-o-banco","text":"Aplica as migrations no banco. Se o banco n\u00e3o existir, tamb\u00e9m ser\u00e1 criado. dotnet ef database update","title":"Atualizar o banco"},{"location":"dotnet/introducao/#aplicar-migracoes-em-runtime","text":"<contexto>.Database.Migrate(); Exemplo chamando no Main . class Program { static void Main(string[] args) { // ... using var context = new BloggingContext(); context.Database.Migrate(); } } N\u00e3o chame EnsureCreated() antes de Migrate() . O EnsureCreated() ignora as Migra\u00e7\u00f5es para criar o esquema e causa falha no Migrate() .","title":"Aplicar migra\u00e7\u00f5es em runtime"},{"location":"dotnet/introducao/#pacotes-nuget","text":"","title":"Pacotes Nuget"},{"location":"dotnet/introducao/#instalar","text":"dotnet add <projeto> package <pacote> <versao> # exemplo: dotnet add ~/ToDo.csproj package Microsoft.Azure.DocumentDB.Core -v 1.0.0 Os argumento <projeto> e <versao> s\u00e3o opcionais. Pode basear no diret\u00f3rio corrente.","title":"Instalar"},{"location":"dotnet/introducao/#remover","text":"dotnet remove <projeto> package <pacote> O argumento <projeto> \u00e9 opcional. Pode basear no diret\u00f3rio corrente.","title":"Remover"},{"location":"dotnet/introducao/#restaurar","text":"dotnet restore <projeto | solucao> O argumento <projeto|solucao> \u00e9 opcional. Pode basear no diret\u00f3rio corrente.","title":"Restaurar"},{"location":"dotnet/introducao/#erros","text":"","title":"Erros"},{"location":"dotnet/introducao/#it-is-being-used-by-another-process","text":"Erro de concorrencia de processos dotnet build-server shutdown Se n\u00e3o funcionar, matar todas os processos dotnet killall dotnet Se o erro ocorrer em dotnet publish , pode ser que o arquivo j\u00e1 est\u00e1 sendo copiado por outra thread, basta ignorar o erro.","title":"It is being used by another process"},{"location":"dotnet/introducao/#the-required-library-libhostfxrso-could-not-be-found","text":"Solu\u00e7\u00e3o, definir a vari\u00e1vel de sistema DOTNET_ROOT . export DOTNET_ROOT = $( dirname $( realpath $( which dotnet )))","title":"The required library libhostfxr.so could not be found"},{"location":"dotnet/introducao/#couldnt-find-a-valid-icu-package-installed-on-the-system","text":"Solu\u00e7\u00e3o, definir a vari\u00e1vel de sistema DOTNET_SYSTEM_GLOBALIZATION_INVARIANT . Veja mais export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = true","title":"Couldn't find a valid ICU package installed on the system"},{"location":"dotnet/linguagem/classes-e-structs/","text":"Classes e structs \u00b6 Classes e structs Introdu\u00e7\u00e3o Membros Campos Constantes Propriedades Defini\u00e7\u00f5es de corpo de express\u00e3o M\u00e9todos Par\u00e2metros do m\u00e9todo x argumentos Passando por refer\u00eancia x passando por valor Valores retornados M\u00e9todos ass\u00edncronos Construtores Links [[ TOC ]] Introdu\u00e7\u00e3o \u00b6 Classes e structs s\u00e3o uma estrutura de dados que encapsula um conjunto de dados e os comportamentos que s\u00e3o uma unidade l\u00f3gica. Os dados e os comportamentos s\u00e3o os membros da classe ou struct , e eles incluem seus m\u00e9todos, propriedades e eventos, e etc. Uma classe \u00e9 um tipo de refer\u00eancia . Quando um objeto da classe \u00e9 criado, a vari\u00e1vel \u00e0 qual o objeto \u00e9 atribu\u00eddo armazena apenas uma refer\u00eancia na mem\u00f3ria. Quando a refer\u00eancia de objeto \u00e9 atribu\u00edda a uma nova vari\u00e1vel, a nova vari\u00e1vel refere-se ao objeto original. As altera\u00e7\u00f5es feitas por meio de uma vari\u00e1vel s\u00e3o refletidas na outra vari\u00e1vel porque ambas se referem aos mesmos dados. Um struct \u00e9 um tipo de valor . Quando um struct \u00e9 criado, a vari\u00e1vel \u00e0 qual o struct est\u00e1 atribu\u00eddo cont\u00e9m os dados reais do struct . Quando o struct \u00e9 atribu\u00eddo a uma nova vari\u00e1vel, ele \u00e9 copiado. A nova vari\u00e1vel e a vari\u00e1vel original, portanto, cont\u00eam duas c\u00f3pias separadas dos mesmos dados. As altera\u00e7\u00f5es feitas em uma c\u00f3pia n\u00e3o afetam a outra c\u00f3pia. Em geral, as classes s\u00e3o usadas para modelar o comportamento mais complexo ou dados que ser\u00e3o modificados depois que um objeto de classe for criado. Os structs s\u00e3o mais adequados para estruturas de dados pequenas que cont\u00eam principalmente dados que n\u00e3o ser\u00e3o modificados depois que o struct for criado. Membros \u00b6 Todos os m\u00e9todos, campos, constantes, propriedades e eventos devem ser declarados em um tipo. Eles s\u00e3o chamados de membros do tipo. No C#, n\u00e3o existem vari\u00e1veis globais ou m\u00e9todos como em algumas das outras linguagens. At\u00e9 mesmo um ponto de entrada de um programa, o m\u00e9todo Main , deve ser declarado em uma classe ou struct . A lista a seguir inclui todos os v\u00e1rios tipos de membros que podem ser declarados em uma classe ou struct . Campos Constantes Propriedades M\u00e9todos Construtores Eventos Finalizadores Indexadores Operadores Tipos aninhados Campos \u00b6 Um campo \u00e9 uma vari\u00e1vel de qualquer tipo que \u00e9 declarada diretamente em uma classe ou struct . Em geral, voc\u00ea s\u00f3 deve usar campos para vari\u00e1veis que t\u00eam acessibilidade private ou protected . Os dados que sua classe exp\u00f5e ao c\u00f3digo do cliente devem ser fornecidos atrav\u00e9s de m\u00e9todos, propriedades e indexadores. public class CalendarEntry { // campo privado private DateTime date ; // campo p\u00fablico (geralmente n\u00e3o recomendado) public string day ; // propriedade p\u00fablica (exp\u00f5e o campo data de forma segura) public DateTime Date { get { return date ; } set { if ( value . Year > 1900 && value . Year <= DateTime . Today . Year ) { date = value ; } else { throw new ArgumentOutOfRangeException (); } } } } Constantes \u00b6 As constantes s\u00e3o valores imut\u00e1veis que s\u00e3o conhecidos no tempo de compila\u00e7\u00e3o e n\u00e3o s\u00e3o alterados durante a vida \u00fatil do programa. Constantes s\u00e3o declaradas com o modificador const . Tipos definidos pelo usu\u00e1rio, incluindo classes, struct e matrizes, n\u00e3o podem ser constantes. Use o modificador readonly para criar uma classe, struct ou matriz que \u00e9 inicializada uma vez em runtime (por exemplo, em um construtor) e, assim, n\u00e3o pode ser alterada. O C# n\u00e3o d\u00e1 suporte aos m\u00e9todos, propriedades ou eventos const . A express\u00e3o que \u00e9 usada para inicializar uma constante poder\u00e1 fazer refer\u00eancia a outra constante se ela n\u00e3o criar uma refer\u00eancia circular. Por exemplo: class Calendar { public const int Months = 12 ; public const int Weeks = 52 ; public const int Days = 365 ; public const double DaysPerWeek = ( double ) Days / ( double ) Weeks ; public const double DaysPerMonth = ( double ) Days / ( double ) Months ; } As constantes s\u00e3o acessadas como se fossem campos static porque o valor da constante \u00e9 o mesmo para todas as inst\u00e2ncias do tipo. Propriedades \u00b6 Uma propriedade \u00e9 um membro que oferece um mecanismo flex\u00edvel para ler, gravar ou calcular o valor de um campo particular. As propriedades podem ser usadas como se fossem membros de dados p\u00fablicos, mas na verdade elas s\u00e3o m\u00e9todos especiais chamados acessadores . Isso permite que os dados sejam acessados facilmente e ainda ajuda a promover a seguran\u00e7a e a flexibilidade dos m\u00e9todos. Um acessador de propriedade get \u00e9 usado para retornar o valor da propriedade e um acessador de propriedade set \u00e9 usado para atribuir um novo valor. As propriedades podem ser de leitura/grava\u00e7\u00e3o (possui acessadores get e set ), somente leitura (somente acessador get ) ou somente grava\u00e7\u00e3o (somente acessador set ). A palavra-chave value \u00e9 usada para definir o valor que est\u00e1 sendo atribu\u00eddo pelo acessador set . class TimePeriod { private double _seconds ; public double Hours { get { return _seconds / 3600 ; } set { if ( value < 0 || value > 24 ) throw new ArgumentOutOfRangeException ( $ \"{nameof(value)} must be between 0 and 24.\" ); _seconds = value * 3600 ; } } } As propriedades simples que n\u00e3o exigem nenhum c\u00f3digo de acessador personalizado podem ser implementadas como defini\u00e7\u00f5es de corpo da express\u00e3o ou como propriedades autoimplementadas . class Teste { public int Id { get ; set ; } } Defini\u00e7\u00f5es de corpo de express\u00e3o \u00b6 Os acessadores de propriedade geralmente consistem em instru\u00e7\u00f5es de linha \u00fanica que simplesmente atribuem ou retornam o resultado de uma express\u00e3o. Voc\u00ea pode implementar essas propriedades como membros aptos para express\u00e3o. As defini\u00e7\u00f5es de corpo da express\u00e3o consistem no s\u00edmbolo => seguido pela express\u00e3o \u00e0 qual atribuir ou recuperar da propriedade. As propriedades somente leitura podem implementar o acessador get como um membro apto para express\u00e3o. Nesse caso, nem a palavra-chave do acessador get nem a palavra-chave return \u00e9 usada. public class Person { // campos privados private string _firstName ; private string _lastName ; // propriedade com apenas acessador get public string Name => $ \"{_firstName} {_lastName}\" ; } Propriedade com acessadores get e set public class SaleItem { string _name ; decimal _cost ; public string Name { get => _name ; set => _name = value ; } public decimal Price { get => _cost ; set => _cost = value ; } } M\u00e9todos \u00b6 Um m\u00e9todo \u00e9 um bloco de c\u00f3digo que cont\u00e9m uma s\u00e9rie de instru\u00e7\u00f5es. Um programa faz com que as instru\u00e7\u00f5es sejam executadas chamando o m\u00e9todo e especificando os argumentos de m\u00e9todo necess\u00e1rios. Os m\u00e9todos s\u00e3o declarados em uma classe, estruct ou interface especificando o n\u00edvel de acesso, como public ou private , modificadores opcionais, como abstract ou sealed , o valor de retorno, o nome do m\u00e9todo e quaisquer par\u00e2metros do m\u00e9todo. Juntas, essas partes s\u00e3o a assinatura do m\u00e9todo. Um tipo de retorno de um m\u00e9todo n\u00e3o faz parte da assinatura do m\u00e9todo para fins de sobrecarga de m\u00e9todo. Par\u00e2metros do m\u00e9todo x argumentos \u00b6 A defini\u00e7\u00e3o do m\u00e9todo especifica os nomes e tipos de quaisquer par\u00e2metros obrigat\u00f3rios. Quando o c\u00f3digo de chamada chama o m\u00e9todo, ele fornece valores concretos, chamados argumentos , para cada par\u00e2metro. Os argumentos devem ser compat\u00edveis com o tipo de par\u00e2metro, mas o nome do argumento (se houver) usado no c\u00f3digo de chamada n\u00e3o precisa ser o mesmo que o par\u00e2metro nomeado definido no m\u00e9todo. Passando por refer\u00eancia x passando por valor \u00b6 Por padr\u00e3o, quando uma inst\u00e2ncia de um tipo de valor \u00e9 passada para um m\u00e9todo, sua c\u00f3pia \u00e9 passada em vez da pr\u00f3pria inst\u00e2ncia. Portanto, as altera\u00e7\u00f5es no argumento n\u00e3o t\u00eam efeito sobre a inst\u00e2ncia original no m\u00e9todo de chamada. Para passar uma inst\u00e2ncia de tipo de valor por refer\u00eancia, use a palavra-chave ref . void Method ( ref int refArgument ) { refArgument = refArgument + 44 ; } int number = 1 ; Method ( ref number ); Console . WriteLine ( number ); // Saida: 45 Quando um objeto de tipo de refer\u00eancia \u00e9 passado para um m\u00e9todo, uma refer\u00eancia ao objeto \u00e9 passada. Ou seja, o m\u00e9todo recebe n\u00e3o o objeto em si, mas um argumento que indica o local do objeto. Se voc\u00ea alterar um membro do objeto usando essa refer\u00eancia, a altera\u00e7\u00e3o ser\u00e1 refletida no argumento no m\u00e9todo de chamada, ainda que voc\u00ea passe o objeto por valor. A palavra-chave out faz com que os argumentos sejam passados por refer\u00eancia. Ela torna o par\u00e2metro formal um alias para o argumento, que deve ser uma vari\u00e1vel. Em outras palavras, qualquer opera\u00e7\u00e3o no par\u00e2metro \u00e9 feita no argumento. \u00c9 como a palavra-chave ref , exceto pelo fato de que ref requer que a vari\u00e1vel seja inicializada antes de ser passada. Tamb\u00e9m \u00e9 como a palavra-chave in , exceto que in n\u00e3o permite que o m\u00e9todo chamado modifique o valor do argumento. Para usar um par\u00e2metro out , a defini\u00e7\u00e3o do m\u00e9todo e o m\u00e9todo de chamada devem usar explicitamente a palavra-chave out . Por exemplo: A palavra-chave out tamb\u00e9m pode ser usada com um par\u00e2metro de tipo gen\u00e9rico para especificar que o par\u00e2metro de tipo \u00e9 covariante. int initializeInMethod ; OutArgExample ( out initializeInMethod ); Console . WriteLine ( initializeInMethod ); // valor \u00e9 agora 44 void OutArgExample ( out int number ) { number = 44 ; } Vari\u00e1veis passadas como argumentos out n\u00e3o precisam ser inicializadas antes de serem passadas em uma chamada de m\u00e9todo. No entanto, o m\u00e9todo chamado \u00e9 necess\u00e1rio para atribuir um valor antes que o m\u00e9todo seja retornado. As palavras-chave in , ref e out n\u00e3o s\u00e3o consideradas parte da assinatura do m\u00e9todo para fins de resolu\u00e7\u00e3o de sobrecarga. Valores retornados \u00b6 Os m\u00e9todos podem retornar um valor para o chamador se o tipo de retorno n\u00e3o for void . O m\u00e9todo poder\u00e1 retornar o valor usando a palavra-chave return . O valor pode ser retornado ao chamador por valor ou, por refer\u00eancia. Valores s\u00e3o retornados ao chamador por refer\u00eancia se a palavra-chave ref for usada na assinatura do m\u00e9todo e antes de return . Por exemplo, a instru\u00e7\u00e3o de retorno e a assinatura de m\u00e9todo a seguir indicam que o m\u00e9todo retorna uma vari\u00e1vel chamada estDistance por refer\u00eancia para o chamador. public ref double GetEstimatedDistance () { return ref estDistance ; } Neste outro exemplo, \u00e9 retornado uma refer\u00eancia a um objeto Person chamado p : public ref Person GetContactInformation ( string fname , string lname ) { return ref p ; } M\u00e9todos ass\u00edncronos \u00b6 Usando o recurso async , voc\u00ea pode invocar m\u00e9todos ass\u00edncronos sem usar retornos de chamada expl\u00edcitos ou dividir manualmente seu c\u00f3digo entre v\u00e1rios m\u00e9todos ou express\u00f5es lambda. Se marcar um m\u00e9todo com o modificador async , voc\u00ea poder\u00e1 usar o operador await no m\u00e9todo. Quando o controle atinge uma express\u00e3o await no m\u00e9todo ass\u00edncrono, ele retorna para o chamador e o progresso no m\u00e9todo \u00e9 suspenso at\u00e9 a tarefa aguardada ser conclu\u00edda. Quando a tarefa for conclu\u00edda, a execu\u00e7\u00e3o poder\u00e1 ser retomada no m\u00e9todo. Um m\u00e9todo ass\u00edncrono pode conter um tipo de retorno Task<TResult> , Task ou nulo. O tipo de retorno nulo \u00e9 usado principalmente para definir manipuladores de eventos, em que um tipo de retorno nulo \u00e9 necess\u00e1rio. Um m\u00e9todo ass\u00edncrono que retorna nulo n\u00e3o pode ser aguardado e o chamador de um m\u00e9todo de retorno nulo n\u00e3o pode capturar as exce\u00e7\u00f5es que esse m\u00e9todo gera. Um m\u00e9todo ass\u00edncrono n\u00e3o pode declarar nenhum par\u00e2metro ref ou out , mas pode chamar m\u00e9todos com tais par\u00e2metros. Construtores \u00b6 Links \u00b6 https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/classes-and-structs","title":"Classes e structs"},{"location":"dotnet/linguagem/classes-e-structs/#classes-e-structs","text":"Classes e structs Introdu\u00e7\u00e3o Membros Campos Constantes Propriedades Defini\u00e7\u00f5es de corpo de express\u00e3o M\u00e9todos Par\u00e2metros do m\u00e9todo x argumentos Passando por refer\u00eancia x passando por valor Valores retornados M\u00e9todos ass\u00edncronos Construtores Links [[ TOC ]]","title":"Classes e structs"},{"location":"dotnet/linguagem/classes-e-structs/#introducao","text":"Classes e structs s\u00e3o uma estrutura de dados que encapsula um conjunto de dados e os comportamentos que s\u00e3o uma unidade l\u00f3gica. Os dados e os comportamentos s\u00e3o os membros da classe ou struct , e eles incluem seus m\u00e9todos, propriedades e eventos, e etc. Uma classe \u00e9 um tipo de refer\u00eancia . Quando um objeto da classe \u00e9 criado, a vari\u00e1vel \u00e0 qual o objeto \u00e9 atribu\u00eddo armazena apenas uma refer\u00eancia na mem\u00f3ria. Quando a refer\u00eancia de objeto \u00e9 atribu\u00edda a uma nova vari\u00e1vel, a nova vari\u00e1vel refere-se ao objeto original. As altera\u00e7\u00f5es feitas por meio de uma vari\u00e1vel s\u00e3o refletidas na outra vari\u00e1vel porque ambas se referem aos mesmos dados. Um struct \u00e9 um tipo de valor . Quando um struct \u00e9 criado, a vari\u00e1vel \u00e0 qual o struct est\u00e1 atribu\u00eddo cont\u00e9m os dados reais do struct . Quando o struct \u00e9 atribu\u00eddo a uma nova vari\u00e1vel, ele \u00e9 copiado. A nova vari\u00e1vel e a vari\u00e1vel original, portanto, cont\u00eam duas c\u00f3pias separadas dos mesmos dados. As altera\u00e7\u00f5es feitas em uma c\u00f3pia n\u00e3o afetam a outra c\u00f3pia. Em geral, as classes s\u00e3o usadas para modelar o comportamento mais complexo ou dados que ser\u00e3o modificados depois que um objeto de classe for criado. Os structs s\u00e3o mais adequados para estruturas de dados pequenas que cont\u00eam principalmente dados que n\u00e3o ser\u00e3o modificados depois que o struct for criado.","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/classes-e-structs/#membros","text":"Todos os m\u00e9todos, campos, constantes, propriedades e eventos devem ser declarados em um tipo. Eles s\u00e3o chamados de membros do tipo. No C#, n\u00e3o existem vari\u00e1veis globais ou m\u00e9todos como em algumas das outras linguagens. At\u00e9 mesmo um ponto de entrada de um programa, o m\u00e9todo Main , deve ser declarado em uma classe ou struct . A lista a seguir inclui todos os v\u00e1rios tipos de membros que podem ser declarados em uma classe ou struct . Campos Constantes Propriedades M\u00e9todos Construtores Eventos Finalizadores Indexadores Operadores Tipos aninhados","title":"Membros"},{"location":"dotnet/linguagem/classes-e-structs/#campos","text":"Um campo \u00e9 uma vari\u00e1vel de qualquer tipo que \u00e9 declarada diretamente em uma classe ou struct . Em geral, voc\u00ea s\u00f3 deve usar campos para vari\u00e1veis que t\u00eam acessibilidade private ou protected . Os dados que sua classe exp\u00f5e ao c\u00f3digo do cliente devem ser fornecidos atrav\u00e9s de m\u00e9todos, propriedades e indexadores. public class CalendarEntry { // campo privado private DateTime date ; // campo p\u00fablico (geralmente n\u00e3o recomendado) public string day ; // propriedade p\u00fablica (exp\u00f5e o campo data de forma segura) public DateTime Date { get { return date ; } set { if ( value . Year > 1900 && value . Year <= DateTime . Today . Year ) { date = value ; } else { throw new ArgumentOutOfRangeException (); } } } }","title":"Campos"},{"location":"dotnet/linguagem/classes-e-structs/#constantes","text":"As constantes s\u00e3o valores imut\u00e1veis que s\u00e3o conhecidos no tempo de compila\u00e7\u00e3o e n\u00e3o s\u00e3o alterados durante a vida \u00fatil do programa. Constantes s\u00e3o declaradas com o modificador const . Tipos definidos pelo usu\u00e1rio, incluindo classes, struct e matrizes, n\u00e3o podem ser constantes. Use o modificador readonly para criar uma classe, struct ou matriz que \u00e9 inicializada uma vez em runtime (por exemplo, em um construtor) e, assim, n\u00e3o pode ser alterada. O C# n\u00e3o d\u00e1 suporte aos m\u00e9todos, propriedades ou eventos const . A express\u00e3o que \u00e9 usada para inicializar uma constante poder\u00e1 fazer refer\u00eancia a outra constante se ela n\u00e3o criar uma refer\u00eancia circular. Por exemplo: class Calendar { public const int Months = 12 ; public const int Weeks = 52 ; public const int Days = 365 ; public const double DaysPerWeek = ( double ) Days / ( double ) Weeks ; public const double DaysPerMonth = ( double ) Days / ( double ) Months ; } As constantes s\u00e3o acessadas como se fossem campos static porque o valor da constante \u00e9 o mesmo para todas as inst\u00e2ncias do tipo.","title":"Constantes"},{"location":"dotnet/linguagem/classes-e-structs/#propriedades","text":"Uma propriedade \u00e9 um membro que oferece um mecanismo flex\u00edvel para ler, gravar ou calcular o valor de um campo particular. As propriedades podem ser usadas como se fossem membros de dados p\u00fablicos, mas na verdade elas s\u00e3o m\u00e9todos especiais chamados acessadores . Isso permite que os dados sejam acessados facilmente e ainda ajuda a promover a seguran\u00e7a e a flexibilidade dos m\u00e9todos. Um acessador de propriedade get \u00e9 usado para retornar o valor da propriedade e um acessador de propriedade set \u00e9 usado para atribuir um novo valor. As propriedades podem ser de leitura/grava\u00e7\u00e3o (possui acessadores get e set ), somente leitura (somente acessador get ) ou somente grava\u00e7\u00e3o (somente acessador set ). A palavra-chave value \u00e9 usada para definir o valor que est\u00e1 sendo atribu\u00eddo pelo acessador set . class TimePeriod { private double _seconds ; public double Hours { get { return _seconds / 3600 ; } set { if ( value < 0 || value > 24 ) throw new ArgumentOutOfRangeException ( $ \"{nameof(value)} must be between 0 and 24.\" ); _seconds = value * 3600 ; } } } As propriedades simples que n\u00e3o exigem nenhum c\u00f3digo de acessador personalizado podem ser implementadas como defini\u00e7\u00f5es de corpo da express\u00e3o ou como propriedades autoimplementadas . class Teste { public int Id { get ; set ; } }","title":"Propriedades"},{"location":"dotnet/linguagem/classes-e-structs/#definicoes-de-corpo-de-expressao","text":"Os acessadores de propriedade geralmente consistem em instru\u00e7\u00f5es de linha \u00fanica que simplesmente atribuem ou retornam o resultado de uma express\u00e3o. Voc\u00ea pode implementar essas propriedades como membros aptos para express\u00e3o. As defini\u00e7\u00f5es de corpo da express\u00e3o consistem no s\u00edmbolo => seguido pela express\u00e3o \u00e0 qual atribuir ou recuperar da propriedade. As propriedades somente leitura podem implementar o acessador get como um membro apto para express\u00e3o. Nesse caso, nem a palavra-chave do acessador get nem a palavra-chave return \u00e9 usada. public class Person { // campos privados private string _firstName ; private string _lastName ; // propriedade com apenas acessador get public string Name => $ \"{_firstName} {_lastName}\" ; } Propriedade com acessadores get e set public class SaleItem { string _name ; decimal _cost ; public string Name { get => _name ; set => _name = value ; } public decimal Price { get => _cost ; set => _cost = value ; } }","title":"Defini\u00e7\u00f5es de corpo de express\u00e3o"},{"location":"dotnet/linguagem/classes-e-structs/#metodos","text":"Um m\u00e9todo \u00e9 um bloco de c\u00f3digo que cont\u00e9m uma s\u00e9rie de instru\u00e7\u00f5es. Um programa faz com que as instru\u00e7\u00f5es sejam executadas chamando o m\u00e9todo e especificando os argumentos de m\u00e9todo necess\u00e1rios. Os m\u00e9todos s\u00e3o declarados em uma classe, estruct ou interface especificando o n\u00edvel de acesso, como public ou private , modificadores opcionais, como abstract ou sealed , o valor de retorno, o nome do m\u00e9todo e quaisquer par\u00e2metros do m\u00e9todo. Juntas, essas partes s\u00e3o a assinatura do m\u00e9todo. Um tipo de retorno de um m\u00e9todo n\u00e3o faz parte da assinatura do m\u00e9todo para fins de sobrecarga de m\u00e9todo.","title":"M\u00e9todos"},{"location":"dotnet/linguagem/classes-e-structs/#parametros-do-metodo-x-argumentos","text":"A defini\u00e7\u00e3o do m\u00e9todo especifica os nomes e tipos de quaisquer par\u00e2metros obrigat\u00f3rios. Quando o c\u00f3digo de chamada chama o m\u00e9todo, ele fornece valores concretos, chamados argumentos , para cada par\u00e2metro. Os argumentos devem ser compat\u00edveis com o tipo de par\u00e2metro, mas o nome do argumento (se houver) usado no c\u00f3digo de chamada n\u00e3o precisa ser o mesmo que o par\u00e2metro nomeado definido no m\u00e9todo.","title":"Par\u00e2metros do m\u00e9todo x argumentos"},{"location":"dotnet/linguagem/classes-e-structs/#passando-por-referencia-x-passando-por-valor","text":"Por padr\u00e3o, quando uma inst\u00e2ncia de um tipo de valor \u00e9 passada para um m\u00e9todo, sua c\u00f3pia \u00e9 passada em vez da pr\u00f3pria inst\u00e2ncia. Portanto, as altera\u00e7\u00f5es no argumento n\u00e3o t\u00eam efeito sobre a inst\u00e2ncia original no m\u00e9todo de chamada. Para passar uma inst\u00e2ncia de tipo de valor por refer\u00eancia, use a palavra-chave ref . void Method ( ref int refArgument ) { refArgument = refArgument + 44 ; } int number = 1 ; Method ( ref number ); Console . WriteLine ( number ); // Saida: 45 Quando um objeto de tipo de refer\u00eancia \u00e9 passado para um m\u00e9todo, uma refer\u00eancia ao objeto \u00e9 passada. Ou seja, o m\u00e9todo recebe n\u00e3o o objeto em si, mas um argumento que indica o local do objeto. Se voc\u00ea alterar um membro do objeto usando essa refer\u00eancia, a altera\u00e7\u00e3o ser\u00e1 refletida no argumento no m\u00e9todo de chamada, ainda que voc\u00ea passe o objeto por valor. A palavra-chave out faz com que os argumentos sejam passados por refer\u00eancia. Ela torna o par\u00e2metro formal um alias para o argumento, que deve ser uma vari\u00e1vel. Em outras palavras, qualquer opera\u00e7\u00e3o no par\u00e2metro \u00e9 feita no argumento. \u00c9 como a palavra-chave ref , exceto pelo fato de que ref requer que a vari\u00e1vel seja inicializada antes de ser passada. Tamb\u00e9m \u00e9 como a palavra-chave in , exceto que in n\u00e3o permite que o m\u00e9todo chamado modifique o valor do argumento. Para usar um par\u00e2metro out , a defini\u00e7\u00e3o do m\u00e9todo e o m\u00e9todo de chamada devem usar explicitamente a palavra-chave out . Por exemplo: A palavra-chave out tamb\u00e9m pode ser usada com um par\u00e2metro de tipo gen\u00e9rico para especificar que o par\u00e2metro de tipo \u00e9 covariante. int initializeInMethod ; OutArgExample ( out initializeInMethod ); Console . WriteLine ( initializeInMethod ); // valor \u00e9 agora 44 void OutArgExample ( out int number ) { number = 44 ; } Vari\u00e1veis passadas como argumentos out n\u00e3o precisam ser inicializadas antes de serem passadas em uma chamada de m\u00e9todo. No entanto, o m\u00e9todo chamado \u00e9 necess\u00e1rio para atribuir um valor antes que o m\u00e9todo seja retornado. As palavras-chave in , ref e out n\u00e3o s\u00e3o consideradas parte da assinatura do m\u00e9todo para fins de resolu\u00e7\u00e3o de sobrecarga.","title":"Passando por refer\u00eancia x passando por valor"},{"location":"dotnet/linguagem/classes-e-structs/#valores-retornados","text":"Os m\u00e9todos podem retornar um valor para o chamador se o tipo de retorno n\u00e3o for void . O m\u00e9todo poder\u00e1 retornar o valor usando a palavra-chave return . O valor pode ser retornado ao chamador por valor ou, por refer\u00eancia. Valores s\u00e3o retornados ao chamador por refer\u00eancia se a palavra-chave ref for usada na assinatura do m\u00e9todo e antes de return . Por exemplo, a instru\u00e7\u00e3o de retorno e a assinatura de m\u00e9todo a seguir indicam que o m\u00e9todo retorna uma vari\u00e1vel chamada estDistance por refer\u00eancia para o chamador. public ref double GetEstimatedDistance () { return ref estDistance ; } Neste outro exemplo, \u00e9 retornado uma refer\u00eancia a um objeto Person chamado p : public ref Person GetContactInformation ( string fname , string lname ) { return ref p ; }","title":"Valores retornados"},{"location":"dotnet/linguagem/classes-e-structs/#metodos-assincronos","text":"Usando o recurso async , voc\u00ea pode invocar m\u00e9todos ass\u00edncronos sem usar retornos de chamada expl\u00edcitos ou dividir manualmente seu c\u00f3digo entre v\u00e1rios m\u00e9todos ou express\u00f5es lambda. Se marcar um m\u00e9todo com o modificador async , voc\u00ea poder\u00e1 usar o operador await no m\u00e9todo. Quando o controle atinge uma express\u00e3o await no m\u00e9todo ass\u00edncrono, ele retorna para o chamador e o progresso no m\u00e9todo \u00e9 suspenso at\u00e9 a tarefa aguardada ser conclu\u00edda. Quando a tarefa for conclu\u00edda, a execu\u00e7\u00e3o poder\u00e1 ser retomada no m\u00e9todo. Um m\u00e9todo ass\u00edncrono pode conter um tipo de retorno Task<TResult> , Task ou nulo. O tipo de retorno nulo \u00e9 usado principalmente para definir manipuladores de eventos, em que um tipo de retorno nulo \u00e9 necess\u00e1rio. Um m\u00e9todo ass\u00edncrono que retorna nulo n\u00e3o pode ser aguardado e o chamador de um m\u00e9todo de retorno nulo n\u00e3o pode capturar as exce\u00e7\u00f5es que esse m\u00e9todo gera. Um m\u00e9todo ass\u00edncrono n\u00e3o pode declarar nenhum par\u00e2metro ref ou out , mas pode chamar m\u00e9todos com tais par\u00e2metros.","title":"M\u00e9todos ass\u00edncronos"},{"location":"dotnet/linguagem/classes-e-structs/#construtores","text":"","title":"Construtores"},{"location":"dotnet/linguagem/classes-e-structs/#links","text":"https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/classes-and-structs","title":"Links"},{"location":"dotnet/linguagem/coding-guidelines/","text":"Conven\u00e7\u00f5es de codifica\u00e7\u00e3o \u00b6 Conven\u00e7\u00f5es de codifica\u00e7\u00e3o Introdu\u00e7\u00e3o Layout Nomea\u00e7\u00f5es Geral M\u00e9todos Propriedades Campos Vari\u00e1veis locais Par\u00e2metros Eventos Namespaces M\u00e9todos M\u00e9todos de extens\u00e3o Propriedades Propriedade indexada Construtor Coment\u00e1rios Strings Vari\u00e1veis Locais Matrizes Delegados Try-catch-finally Operadores Operador && e || Operador new Sobrecargas de operador Operadores de convers\u00e3o Par\u00e2metros Membros com n\u00famero vari\u00e1vel de par\u00e2metros Eventos Eventos personalizados LINQ Links [[ TOC ]] Introdu\u00e7\u00e3o \u00b6 As conven\u00e7\u00f5es de codifica\u00e7\u00e3o atendem \u00e0s seguintes finalidades: Criam uma apar\u00eancia consistente para o c\u00f3digo, para que os leitores possam se concentrar no conte\u00fado e n\u00e3o no layout. Permitem que os leitores entendam o c\u00f3digo com mais rapidez, fazendo suposi\u00e7\u00f5es com base na experi\u00eancia anterior. Facilitam a c\u00f3pia, a altera\u00e7\u00e3o e a manuten\u00e7\u00e3o do c\u00f3digo. Demonstram as pr\u00e1ticas recomendadas do C#. As diretrizes neste artigo s\u00e3o usadas pela Microsoft para desenvolver exemplos e documenta\u00e7\u00e3o. Layout \u00b6 Recuo e tabula\u00e7\u00e3o de quatro espa\u00e7os. Uma instru\u00e7\u00e3o por linha. Uma declara\u00e7\u00e3o por linha. Para a quebra de linhas logas, recue-as uma tabula\u00e7\u00e3o (quatro espa\u00e7os). Adicione pelo menos uma linha em branco entre as defini\u00e7\u00f5es de m\u00e9todo e de propriedade. Use par\u00eanteses para criar cl\u00e1usulas em uma express\u00e3o aparente. if (( val1 > val2 ) && ( val1 > val3 )) { // Instru\u00e7\u00f5es... } Nomes qualificados podem ser interrompidos ap\u00f3s um ponto (.) se forem muito longos para uma \u00fanica linha. var currentPerformanceCounterCategory = new System . Diagnostics . PerformanceCounterCategory (); - As seguintes quebras de linha e alinhamentos s\u00e3o os mais indicadas para m\u00e9todos com muitos par\u00e2metros. public void Metodo ( int a , int b , int c , int d ) { var foo = \"foo\" var bar = \"bar\" } public void Metodo ( int a , int b , int c , int d ) { var foo = \"foo\" var bar = \"bar\" } public void Metodo ( int a , int b , int c , int d ) { var foo = \"foo\" var bar = \"bar\" } As seguintes quebras de linha e alinhamentos s\u00e3o os mais indicadas para cadeias de chamadas longas. string s = variavel . chamadaA () . chamadaB () . chamadaC () . chamadaD (); string s = variavel . chamadaA () . chamadaB () . chamadaC () . chamadaD (); As seguinte quebra de linha e alinhamento \u00e9 o mais indicadas para express\u00f5es bin\u00e1rias longas. if ( a != b && b != c && c == d ) { } Nomea\u00e7\u00f5es \u00b6 Geral \u00b6 N\u00e3o use abrevea\u00e7\u00f5es N\u00e3o use sublinhados em identificadores, hifens ou quaisquer outros caracteres n\u00e3o alfanum\u00e9ricos. Identificadores, exceto nomes de par\u00e2metro , usa a conven\u00e7\u00e3o PascalCasin . Ou seja, coloca em mai\u00fascula o primeiro caractere de cada palavra (incluindo acr\u00f4nimos com duas letras). // Exemplos. PropertyDescriptor HtmlTag IOStream Usar identificadores descritivos, em vez de curtos. Usar um nome de tipo CLR gen\u00e9rico, em vez de um nome espec\u00edfico de idioma, nos casos raros em que um identificador n\u00e3o tem um significado sem\u00e2ntico al\u00e9m de seu tipo. Por exemplo, um m\u00e9todo que converte para Int64 deve ser nomeado ToInt64 , n\u00e3o ToLong (porque Int64 \u00e9 o nome CLR para o alias espec\u00edfico long ) C# CLR sbyte SByte byte Byte short Int16 ushort UInt16 int Int32 uint UInt32 long Int64 ulong UInt64 float Single double Double bool Boolean char Char string String object Object M\u00e9todos \u00b6 Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser verbos ou frases de verbo. Propriedades \u00b6 Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser um substantivo, uma frase de substantivo ou um adjetivo. Nomes de propriedades de cole\u00e7\u00e3o devem ser uma frase plural que descreve os itens na cole\u00e7\u00e3o em vez de usar uma frase singular seguida de \"List\" ou \"Collection\". Nomes de propriedades booleanas devem ser uma frase afirmativo (CanSeek em vez de CantSeek). Opcionalmente, voc\u00ea tamb\u00e9m pode prefixar propriedades booleanas com \"Is\", \"Can\" ou \"Has\", mas apenas onde ele agrega valor. Considere atribuir uma propriedade com o mesmo nome que o seu tipo. public enum Color {...} public class Control { public Color Color { get {...} set {...} } } Campos \u00b6 As diretrizes de nomenclatura de campo se aplicam a campos public e protected est\u00e1ticos . Campos internos e private N\u00e3o s\u00e3o cobertos pela conven\u00e7\u00e3o, e campos public e protected n\u00e3o est\u00e1ticos, n\u00e3o s\u00e3o permitidos. Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser um substantivo, uma frase de substantivo ou um adjetivo. Vari\u00e1veis locais \u00b6 Usar a conven\u00e7\u00e3o camelCasing Par\u00e2metros \u00b6 Usar a conven\u00e7\u00e3o camelCasing . Ou seja coloca em mai\u00fascula o primeiro caractere de cada palavra, exceto a primeira palavra. // Exemplos. propertyDescriptor htmlTag ioStream - Em sobrecarga de m\u00e9todos, evitar nomes de par\u00e2metro diferentes casa um par\u00e2metro em uma sobrecarga representa a mesma entrada que um par\u00e2metro em outra sobrecarga. Em sobrecarga de m\u00e9todos, os par\u00e2metros com o mesmo nome devem aparecer na mesma posi\u00e7\u00e3o em todas as sobrecargas. Eventos \u00b6 Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser um verbo ou uma frase verbal. Exemplos: Clicked, Painting, DroppedDown, etc. Manipuladores de eventos de nome (delegados usados como tipos de eventos) com o sufixo \"EventHandler\". public delegate void ClickedEventHandler ( object sender , ClickedEventArgs e ); - Use dois par\u00e2metros chamados sender e e em manipuladores de eventos Nomes de classes de argumento de evento devem ter o sufixo \"EventArgs\". Namespaces \u00b6 Usar a conven\u00e7\u00e3o PascalCasin e separar componentes de namespace com pontos. Por exemplo, Microsoft.Office.PowerPoint . Usar prefixos namespace com um nome de empresa para impedir que os namespaces de diferentes empresas tenham o mesmo nome. N\u00e3o use o mesmo nome para um namespace e um tipo nesse namespace. Por exemplo, n\u00e3o use Debug como um nome de namespace e, em seguida, forne\u00e7a uma classe chamada Debug no mesmo namespace. V\u00e1rios compiladores exigem que esses tipos sejam totalmente qualificados. M\u00e9todos \u00b6 Permitir que null sejam passados para argumentos opcionais. Usar a sobrecarga de membros em vez de definir membros com argumentos padr\u00e3o. N\u00e3o use os modificadores ref ou out para sobrecarregar os membros. M\u00e9todos de extens\u00e3o \u00b6 Leia mais aqui Propriedades \u00b6 Criar propriedades somente com op\u00e7\u00e3o get se o chamador n\u00e3o puder alterar o valor da propriedade. Se o tipo da propriedade for um tipo de refer\u00eancia mut\u00e1vel, o valor da propriedade poder\u00e1 ser alterado mesmo se a propriedade for somente get . O acesso ao set n\u00e3o deve ser mais restrito que get . Preservar o valor anterior se um ters da propriedade lan\u00e7ar uma exce\u00e7\u00e3o. Evitar lan\u00e7ar exce\u00e7\u00f5es de getters da propriedade. Os getters de propriedade devem ser opera\u00e7\u00f5es simples e n\u00e3o devem ter nenhuma condi\u00e7\u00e3o. Permitir que as propriedades sejam definidas em qualquer ordem, mesmo se isso resultar em um estado tempor\u00e1rio inv\u00e1lido do objeto. Propriedade indexada \u00b6 Usar indexadores para fornecer acesso aos dados armazenados em uma matriz interna. Fornecer indexadores em tipos que representam cole\u00e7\u00f5es de itens. Evitar o uso de propriedades indexadas com mais de um par\u00e2metro. Use o nome Item para propriedades indexadas, a menos que haja um nome obviamente melhor. N\u00e3o fornecer um indexador e m\u00e9todos que s\u00e3o semanticamente equivalentes. Construtor \u00b6 Considere fornecer construtores simples. Ou seja, poucos par\u00e2metros e todos os par\u00e2metros s\u00e3o primitivos ou enums. Usar o mesmo nome para par\u00e2metros de construtor e uma propriedade se os par\u00e2metros do construtor forem usados para simplesmente definir a propriedade. Executar o m\u00ednimo de trabalho no construtor. Gerar exce\u00e7\u00f5es de construtores de inst\u00e2ncia, se apropriado. Declarar explicitamente o construtor p\u00fablico sem par\u00e2metros em classes, se esse construtor for necess\u00e1rio ou haja um outro construtor com par\u00e2metros. Evitar definir explicitamente construtores sem par\u00e2metros em structs. Isso torna a cria\u00e7\u00e3o de matriz mais r\u00e1pida, porque se o construtor sem par\u00e2metros n\u00e3o estiver definido, ele n\u00e3o precisar\u00e1 ser executado em todos os slots na matriz. Evitar chamar membros virtuais em um objeto dentro de seu construtor. Chamar um membro virtual far\u00e1 com que a sobrecarga mais derivada seja chamada, mesmo que o construtor do tipo mais derivado ainda n\u00e3o tenha sido totalmente executado. Tornar os construtores est\u00e1ticos privados. N\u00e3o lan\u00e7ar exce\u00e7\u00f5es de construtores est\u00e1ticos. Considere a inicializa\u00e7\u00e3o de campos est\u00e1ticos inline em vez de usar construtores est\u00e1ticos explicitamente, pois o tempo de execu\u00e7\u00e3o \u00e9 capaz de otimizar o desempenho dos tipos que n\u00e3o t\u00eam um construtor est\u00e1tico explicitamente definido. Coment\u00e1rios \u00b6 Coloque o coment\u00e1rio em uma linha separada, n\u00e3o no final de uma linha de c\u00f3digo. Comece o texto do coment\u00e1rio com uma letra mai\u00fascula. Termine o texto do coment\u00e1rio com um ponto final. Insira um espa\u00e7o entre o delimitador de coment\u00e1rio (//) e o texto do coment\u00e1rio // The following declaration creates a query. It does not run // the query. N\u00e3o crie blocos de asteriscos formatados em torno dos coment\u00e1rios. Strings \u00b6 Use a interpola\u00e7\u00e3o de cadeia de caracteres para concatenar cadeias de caracteres curtas. string displayName = $ \"{nameList[n].LastName}, {nameList[n].FirstName}\" ; Para acrescentar cadeias de caracteres em loops, especialmente quando voc\u00ea estiver trabalhando com grandes quantidades de texto, use um objeto StringBuilder . var phrase = \"lalala\" ; var manyPhrases = new StringBuilder (); for ( var i = 0 ; i < 10000 ; i ++) { manyPhrases . Append ( phrase ); } Console . WriteLine ( \"tra\" + manyPhrases ); Vari\u00e1veis Locais \u00b6 Use a tipagem impl\u00edcita para vari\u00e1veis locais quando o tipo da vari\u00e1vel for \u00f3bvio do lado direito da atribui\u00e7\u00e3o ou quando o tipo exato n\u00e3o for importante. var var1 = \"This is clearly a string.\" ; var var2 = 27 ; var var3 = Convert . ToInt32 ( Console . ReadLine ()); N\u00e3o use var quando o tipo n\u00e3o estiver aparente no lado direito da atribui\u00e7\u00e3o. int var4 = ExampleClass . ResultSoFar (); N\u00e3o se baseie no nome da vari\u00e1vel para especificar o tipo dela. Ele pode n\u00e3o estar correto. var inputInt = Console . ReadLine (); Console . WriteLine ( inputInt ); Evite o uso de var em vez de dynamic . Use a tipagem impl\u00edcita para determinar o tipo da vari\u00e1vel de loop nos loops for . for ( var i = 0 ; i < 10000 ; i ++) { // Instru\u00e7\u00f5es... } N\u00e3o use a tipagem impl\u00edcita para determinar o tipo da vari\u00e1vel de loop em loops foreach . // O exemplo a seguir usa a tipagem expl\u00edcita em uma instru\u00e7\u00e3o foreach. foreach ( var ch in laugh ) { if ( ch == 'h' ) Console . Write ( \"H\" ); else Console . Write ( ch ); } Console . WriteLine (); Tenha cuidado para n\u00e3o alterar acidentalmente um tipo de elemento da cole\u00e7\u00e3o iter\u00e1vel. Por exemplo, \u00e9 f\u00e1cil mudar de System.Linq.IQueryable para System.Collections.IEnumerable em uma instru\u00e7\u00e3o foreach, que altera a execu\u00e7\u00e3o de uma consulta. Matrizes \u00b6 Use a sintaxe concisa ao inicializar matrizes na linha da declara\u00e7\u00e3o. // Sintaxe preferencial. Var n\u00e3o pode ser usada aqui. string [] vowels1 = { \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }; // Se voc\u00ea usar a instancia\u00e7\u00e3o expl\u00edcita, voc\u00ea pode usar var. var vowels2 = new string [] { \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }; // Se o tamanho do array for especificado, os elementos s\u00e3o inicializados um por vez. var vowels3 = new string [ 5 ]; vowels3 [ 0 ] = \"a\" ; vowels3 [ 1 ] = \"e\" ; // ... Delegados \u00b6 Use a sintaxe concisa ao criar inst\u00e2ncias de um tipo delegado. // Primeiramente, na Classe defina o delegado e o m\u00e9todo que casa com a assinatura. // Defina o tipo. public delegate void Del ( string message ); // Defina o m\u00e9todo que casa com a assinatura public static void DelMethod ( string str ) { Console . WriteLine ( \"DelMethod argument: {0}\" , str ); } // Posteriormente, como cont\u00e9udo do m\u00e9todo, \u00e9 criado uma inst\u00e2ncia de Del. // Preferencial: Criar a inst\u00e2ncia de Del usando a sintaxe concisa. Del exampleDel2 = DelMethod ; // Usando a sintaxe verbosa. Del exampleDel1 = new Del ( DelMethod ); Try-catch-finally \u00b6 Use uma instru\u00e7\u00e3o try-catch para a maioria da manipula\u00e7\u00e3o de exce\u00e7\u00f5es. static string GetValueFromArray ( string [] array , int index ) { try { return array [ index ]; } catch ( System . IndexOutOfRangeException ex ) { Console . WriteLine ( \"Index is out of range: {0}\" , index ); throw ; } } Simplifique o c\u00f3digo usando a instru\u00e7\u00e3o using . Se voc\u00ea tiver uma instru\u00e7\u00e3o try-finally na qual o \u00fanico c\u00f3digo do bloco finally \u00e9 uma chamada para o m\u00e9todo Dispose , use, em vez disso, uma instru\u00e7\u00e3o using. // Try-finally somente chama Dispose no bloco finally. Font font1 = new Font ( \"Arial\" , 10.0f ); try { byte charset = font1 . GdiCharSet ; } finally { if ( font1 != null ) { (( IDisposable ) font1 ). Dispose (); } } // Preferencial: Podemos fazer a mesma coisa usando using. using ( Font font2 = new Font ( \"Arial\" , 10.0f )) { byte charset = font2 . GdiCharSet ; } Operadores \u00b6 Operador && e || \u00b6 Para evitar exce\u00e7\u00f5es e aumentar o desempenho ignorando compara\u00e7\u00f5es desnecess\u00e1rias, use && em vez de & e || em vez de | ao executar compara\u00e7\u00f5es. // Usando &&, se o primeira express\u00e3o for falsa a segunda j\u00e1 n\u00e3o ser\u00e1 avaliada. if (( divisor != 0 ) && ( dividend / divisor > 0 )) { Console . WriteLine ( \"Quotient: {0}\" , dividend / divisor ); } else { Console . WriteLine ( \"Attempted division by 0 ends up here.\" ); } Operador new \u00b6 Use a forma concisa de instancia\u00e7\u00e3o de objeto com tipagem impl\u00edcita. // Preferencial var instance1 = new ExampleClass (); // Usando tipagem expl\u00edcita ExampleClass instance2 = new ExampleClass (); Use iniciadores de objeto para simplificar a cria\u00e7\u00e3o do objeto. // Preferencial: Usando iniciadores de objetos var instance3 = new ExampleClass { Name = \"Desktop\" , ID = 37414 , Location = \"Redmond\" , Age = 2.3 }; // Usando constrtutor padr\u00e3o var instance4 = new ExampleClass (); instance4 . Name = \"Desktop\" ; instance4 . ID = 37414 ; instance4 . Location = \"Redmond\" ; instance4 . Age = 2.3 ; Sobrecargas de operador \u00b6 Evitar definir sobrecargas de operador, exceto em tipos que devem se sentir como tipos primitivos (internos). Definir sobrecargas de operador em structs que representam n\u00fameros (como System.Decimal). Defina operadores de sobrecarga de maneira sim\u00e9trica Por exemplo, se voc\u00ea sobrecarregar o operator == , tamb\u00e9m dever\u00e1 sobrecarregar o operator != . Da mesma forma, se voc\u00ea sobrecarregar o operator < , tamb\u00e9m dever\u00e1 sobrecarregar o operator > e assim por diante. Considere fornecer m\u00e9todos com nomes amig\u00e1veis que correspondam a cada operador sobrecarregado. Muitas linguagens n\u00e3o d\u00e3o suporte \u00e0 sobrecarga de operador. Por esse motivo, \u00e9 recomend\u00e1vel que os tipos que sobrecarregam operadores incluam um m\u00e9todo secund\u00e1rio com um nome espec\u00edfico de dom\u00ednio apropriado que forne\u00e7a funcionalidade equivalente. S\u00edmbolo de operador Nome de metadados Nome Amig\u00e1vel N/A op_Implicit To /From N/A op_Explicit To /From + (binary) op_Addition Add - (binary) op_Subtraction Subtract * (binary) op_Multiply Multiply \\/ op_Division Divide \\% op_Modulus Mod or Remainder \\^ op_ExclusiveOr Xor \\& (binary) op_BitwiseAnd BitwiseAnd | op_BitwiseOr BitwiseOr \\&& op_LogicalAnd And | op_LogicalOr \\= op_Assign Assign \\<< op_LeftShift LeftShift >> op_RightShift RightShift N/A op_SignedRightShift SignedRightShift N/A op_UnsignedRightShift UnsignedRightShift \\== op_Equality Equals != op_Inequality Equals > op_GreaterThan CompareTo \\< op_LessThan CompareTo >= op_GreaterThanOrEqual CompareTo \\<= op_LessThanOrEqual CompareTo *= op_MultiplicationAssignment Multiply -= op_SubtractionAssignment Subtract \\^= op_ExclusiveOrAssignment Xor \\<<= op_LeftShiftAssignment LeftShift \\%= op_ModulusAssignment Mod += op_AdditionAssignment Add \\&= op_BitwiseAndAssignment BitwiseAnd |= op_BitwiseOrAssignment BitwiseOr \\, op_Comma Comma \\/= op_DivisionAssignment Divide -- op_Decrement Decrement ++ op_Increment Increment - (unary) op_UnaryNegation Negate + (unary) op_UnaryPlus Plus \\~ op_OnesComplement OnesComplement O sobrecarregamento de operator == \u00e9 bastante complicado. A sem\u00e2ntica do operador precisa ser compat\u00edvel com v\u00e1rios outros membros, como Object.Equals . Operadores de convers\u00e3o \u00b6 N\u00e3o definir operadores de convers\u00e3o fora do dom\u00ednio de um tipo. Por exemplo, Int32 , Double e Decimal s\u00e3o todos os tipos num\u00e9ricos, enquanto DateTime n\u00e3o \u00e9. Portanto, n\u00e3o deve haver nenhum operador de convers\u00e3o para converter um Double(long) em um DateTime . Um construtor \u00e9 preferencial nesse caso. N\u00e3o fornecer um operador de convers\u00e3o impl\u00edcita se a convers\u00e3o tiver potencialmente perda. Por exemplo, n\u00e3o deve haver uma convers\u00e3o impl\u00edcita de Double para Int32 porque Double tem um intervalo maior do que Int32 . Um operador de convers\u00e3o expl\u00edcita pode ser fornecido mesmo que a convers\u00e3o tenha potencialmente perda. N\u00e3o lan\u00e7ar exce\u00e7\u00f5es de convers\u00f5es impl\u00edcitas. \u00c9 muito dif\u00edcil para os usu\u00e1rios finais entenderem o que est\u00e1 acontecendo, pois eles podem n\u00e3o estar cientes de que uma convers\u00e3o est\u00e1 ocorrendo. Lan\u00e7ar System.InvalidCastException se uma chamada para um operador de convers\u00e3o resultar em uma convers\u00e3o com perdas e o contrato do operador n\u00e3o permitir convers\u00f5es com perdas. Par\u00e2metros \u00b6 Usar o tipo de par\u00e2metro menos derivado que fornece a funcionalidade exigida pelo membro. Por exemplo, suponha que voc\u00ea queira criar um m\u00e9todo que enumere uma cole\u00e7\u00e3o e imprima cada item no console. Esse m\u00e9todo deve levar IEnumerable como o par\u00e2metro, n\u00e3o ArrayList ou IList , por exemplo. N\u00e3o use par\u00e2metros reservados. Se mais entradas para um membro forem necess\u00e1rias em alguma vers\u00e3o futura, uma nova sobrecarga poder\u00e1 ser adicionada. N\u00e3o tenha m\u00e9todos publicamente expostos que usam ponteiros, matrizes de ponteiros ou matrizes multidimensionais como par\u00e2metros. Ponteiros e matrizes multidimensionais s\u00e3o relativamente dif\u00edceis de usar corretamente. Em quase todos os casos, as APIs podem ser reprojetadas para evitar a cria\u00e7\u00e3o desses tipos como par\u00e2metros. Coloque todos os par\u00e2metros de out ap\u00f3s todos os par\u00e2metros por valor e ref (excluindo matrizes de par\u00e2metros), mesmo que resultem em uma inconsist\u00eancia na ordena\u00e7\u00e3o de par\u00e2metros entre sobrecargas. Os par\u00e2metros de out podem ser vistos como valores de retorno extras, e agrup\u00e1-los juntos torna a assinatura do m\u00e9todo mais f\u00e1cil de entender. Prefira enums ao inv\u00e9s de boleanos, a menos que tenha certeza de que nunca haver\u00e1 necessidade de mais de dois valores. Considere usar boleanos para par\u00e2metros de construtor que s\u00e3o verdadeiramente valores de dois estados e s\u00e3o simplesmente usados para inicializar propriedades booleanas. Validar argumentos passados para membros p\u00fablicos, protegidos ou explicitamente implementados. Lance System.ArgumentException , ou uma de suas subclasses, se a valida\u00e7\u00e3o falhar. Observe que a valida\u00e7\u00e3o real n\u00e3o precisa necessariamente acontecer no pr\u00f3prio membro p\u00fablico ou protegido. Isso pode acontecer em um n\u00edvel inferior em alguma rotina privada ou interna. O ponto principal \u00e9 que toda a \u00e1rea de superf\u00edcie exposta aos usu\u00e1rios finais verifica os argumentos. Lan\u00e7ar ArgumentNullException se um argumento nulo for passado e o membro n\u00e3o oferecer suporte a argumentos nulos. Esteja ciente de que argumentos mut\u00e1veis podem ter sido alterados depois de serem validados. Se o membro for sens\u00edvel \u00e0 seguran\u00e7a, voc\u00ea ser\u00e1 incentivado a fazer uma c\u00f3pia e, em seguida, validar e processar o argumento. Membros com n\u00famero vari\u00e1vel de par\u00e2metros \u00b6 Considere adicionar a palavra-chave params aos par\u00e2metros de matriz se voc\u00ea espera que os usu\u00e1rios finais passem matrizes com um pequeno n\u00famero de elementos. Se for esperado que muitos elementos sejam passados em cen\u00e1rios comuns, os usu\u00e1rios provavelmente n\u00e3o passar\u00e3o esses elementos embutidos de qualquer forma e, portanto, a palavra-chave params n\u00e3o ser\u00e1 necess\u00e1ria. public class String { public static string Format ( string format , params object [] parameters ); } Evitar o uso de matrizes params se o chamador quase sempre tiver a entrada j\u00e1 em uma matriz. Por exemplo, os membros com par\u00e2metros de matriz de bytes quase nunca seriam chamados passando bytes individuais. Por esse motivo, os par\u00e2metros de matriz de bytes no .NET Framework n\u00e3o usam a palavra-chave params . N\u00e3o use matrizes params se a matriz for modificada pelo membro. Modifica\u00e7\u00f4es na matriz pode ser perdida. Compiladores transformam os argumentos para o membro em uma matriz tempor\u00e1ria no local de chamada, a matriz pode ser um objeto tempor\u00e1rio e, portanto, qualquer modifica\u00e7\u00e3o na matriz ser\u00e1 perdida. Considere usar a palavra-chave params em uma sobrecarga simples, mesmo se uma sobrecarga mais complexa n\u00e3o puder us\u00e1-la. Pergunte-se se os usu\u00e1rios teriam valor com a matriz params em uma sobrecarga, mesmo que n\u00e3o estivesse em todas as sobrecargas. Tente ordenar os par\u00e2metros para tornar poss\u00edvel usar a palavra-chave params . Esteja ciente de que NULL pode ser passado como um argumento de matriz params . N\u00e3o usar os m\u00e9todos de varargs , tamb\u00e9m conhecidos como retic\u00eancias. Eventos \u00b6 Usar o termo \"Raise\" para eventos em vez de \"Fire\" ou \"Trigger\". Usar System.EventHandler<TEventArgs> em vez de criar manualmente novos delegados para serem usados como manipuladores de eventos. Considere o uso de uma subclasse de EventArgs como o argumento de evento, a menos que voc\u00ea tenha certeza absoluta de que o evento nunca precisar\u00e1 transportar dados para o m\u00e9todo de manipula\u00e7\u00e3o de eventos; nesse caso, voc\u00ea pode usar o tipo de EventArgs diretamente. N\u00e3o passe nulo como o sender ao gerar um evento n\u00e3o est\u00e1tico. Passar nulo como o sender ao gerar um evento est\u00e1tico. N\u00e3o passar nulo como o par\u00e2metro de dados de evento ao gerar um evento. Voc\u00ea deve passar EventArgs.Empty se n\u00e3o quiser passar dados para o m\u00e9todo de manipula\u00e7\u00e3o de eventos. Considere a gera\u00e7\u00e3o de eventos que o usu\u00e1rio final pode cancelar. Use System.ComponentModel.CancelEventArgs ou sua subclasse como o argumento de evento para permitir que o usu\u00e1rio final cancele eventos. Se voc\u00ea estiver definindo um manipulador de eventos que n\u00e3o necessita ser removido posteriormente, use uma express\u00e3o lambda. // Preferencial: Usando express\u00e3o lambda para definir um manipulador de eventos. public Form2 () { this . Click += ( s , e ) => { MessageBox . Show ((( MouseEventArgs ) e ). Location . ToString ()); }; } // Forma tradicional. public Form1 () { this . Click += new EventHandler ( Form1_Click ); } void Form1_Click ( object sender , EventArgs e ) { MessageBox . Show ((( MouseEventArgs ) e ). Location . ToString ()); } Eventos personalizados \u00b6 Usar um tipo de retorno de void para manipuladores de eventos. Um manipulador de eventos pode invocar v\u00e1rios m\u00e9todos de manipula\u00e7\u00e3o de eventos, possivelmente em v\u00e1rios objetos. Se os m\u00e9todos de manipula\u00e7\u00e3o de eventos tivessem permiss\u00e3o para retornar um valor, haveria v\u00e1rios valores de retorno para cada invoca\u00e7\u00e3o de evento. Usar object como o tipo do primeiro par\u00e2metro do manipulador de eventos e cham\u00e1-lo sender . Usar System.EventArgs ou sua subclasse como o tipo do segundo par\u00e2metro do manipulador de eventos e cham\u00e1-lo e . N\u00e3o tem mais de dois par\u00e2metros em manipuladores de eventos. LINQ \u00b6 Use nomes significativos para vari\u00e1veis de consulta. // seattleCustomers para os clientes que est\u00e3o localizados em Seattle. var seattleCustomers = from customer in customers where customer . City == \"Seattle\" select customer . Name ; Use a tipagem impl\u00edcita na declara\u00e7\u00e3o de vari\u00e1veis de consulta e de intervalo. var seattleCustomers = from customer in customers where customer . City == \"Seattle\" select customer . Name ; Alinhe cl\u00e1usulas de consulta na cl\u00e1usula from . Use cl\u00e1usulas where antes de outras cl\u00e1usulas de consulta para garantir que cl\u00e1usulas de consulta posteriores operem no conjunto de dados filtrado e reduzido. var seattleCustomers2 = from customer in customers where customer . City == \"Seattle\" orderby customer . Name select customer ; Use aliases para se certificar de que os nomes de propriedades de tipos an\u00f4nimos sejam colocados corretamente em mai\u00fasculas, usando o padr\u00e3o Pascal-Case. var localDistributors = from customer in customers join distributor in distributors on customer . City equals distributor . City select new { Customer = customer , Distributor = distributor }; Renomeie propriedades quando os nomes de propriedades no resultado forem amb\u00edguos. Por exemplo, se a sua consulta retornar um nome de cliente e uma ID de distribuidor, em vez de deix\u00e1-los como Name e ID no resultado, renomeie-os para esclarecer que Name \u00e9 o nome de um cliente, e ID \u00e9 a identifica\u00e7\u00e3o de um distribuidor. var localDistributors2 = from customer in customers join distributor in distributors on customer . City equals distributor . City select new { CustomerName = customer . Name , DistributorID = distributor . ID }; Use v\u00e1rias cl\u00e1usulas from em vez de uma cl\u00e1usula join para acessar cole\u00e7\u00f5es internas. Por exemplo, cada cole\u00e7\u00e3o de objetos Student pode conter um conjunto de pontua\u00e7\u00f5es no teste. Quando a pr\u00f3xima consulta for executada, ela retorna cada pontua\u00e7\u00e3o que seja acima de 90, juntamente com o sobrenome do estudante que recebeu a pontua\u00e7\u00e3o. var scoreQuery = from student in students from score in student . Scores where score > 90 select new { Last = student . LastName , score }; Links \u00b6 https://docs.microsoft.com/pt-br/dotnet/standard/design-guidelines/","title":"Conven\u00e7\u00f5es de codifica\u00e7\u00e3o"},{"location":"dotnet/linguagem/coding-guidelines/#convencoes-de-codificacao","text":"Conven\u00e7\u00f5es de codifica\u00e7\u00e3o Introdu\u00e7\u00e3o Layout Nomea\u00e7\u00f5es Geral M\u00e9todos Propriedades Campos Vari\u00e1veis locais Par\u00e2metros Eventos Namespaces M\u00e9todos M\u00e9todos de extens\u00e3o Propriedades Propriedade indexada Construtor Coment\u00e1rios Strings Vari\u00e1veis Locais Matrizes Delegados Try-catch-finally Operadores Operador && e || Operador new Sobrecargas de operador Operadores de convers\u00e3o Par\u00e2metros Membros com n\u00famero vari\u00e1vel de par\u00e2metros Eventos Eventos personalizados LINQ Links [[ TOC ]]","title":"Conven\u00e7\u00f5es de codifica\u00e7\u00e3o"},{"location":"dotnet/linguagem/coding-guidelines/#introducao","text":"As conven\u00e7\u00f5es de codifica\u00e7\u00e3o atendem \u00e0s seguintes finalidades: Criam uma apar\u00eancia consistente para o c\u00f3digo, para que os leitores possam se concentrar no conte\u00fado e n\u00e3o no layout. Permitem que os leitores entendam o c\u00f3digo com mais rapidez, fazendo suposi\u00e7\u00f5es com base na experi\u00eancia anterior. Facilitam a c\u00f3pia, a altera\u00e7\u00e3o e a manuten\u00e7\u00e3o do c\u00f3digo. Demonstram as pr\u00e1ticas recomendadas do C#. As diretrizes neste artigo s\u00e3o usadas pela Microsoft para desenvolver exemplos e documenta\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/coding-guidelines/#layout","text":"Recuo e tabula\u00e7\u00e3o de quatro espa\u00e7os. Uma instru\u00e7\u00e3o por linha. Uma declara\u00e7\u00e3o por linha. Para a quebra de linhas logas, recue-as uma tabula\u00e7\u00e3o (quatro espa\u00e7os). Adicione pelo menos uma linha em branco entre as defini\u00e7\u00f5es de m\u00e9todo e de propriedade. Use par\u00eanteses para criar cl\u00e1usulas em uma express\u00e3o aparente. if (( val1 > val2 ) && ( val1 > val3 )) { // Instru\u00e7\u00f5es... } Nomes qualificados podem ser interrompidos ap\u00f3s um ponto (.) se forem muito longos para uma \u00fanica linha. var currentPerformanceCounterCategory = new System . Diagnostics . PerformanceCounterCategory (); - As seguintes quebras de linha e alinhamentos s\u00e3o os mais indicadas para m\u00e9todos com muitos par\u00e2metros. public void Metodo ( int a , int b , int c , int d ) { var foo = \"foo\" var bar = \"bar\" } public void Metodo ( int a , int b , int c , int d ) { var foo = \"foo\" var bar = \"bar\" } public void Metodo ( int a , int b , int c , int d ) { var foo = \"foo\" var bar = \"bar\" } As seguintes quebras de linha e alinhamentos s\u00e3o os mais indicadas para cadeias de chamadas longas. string s = variavel . chamadaA () . chamadaB () . chamadaC () . chamadaD (); string s = variavel . chamadaA () . chamadaB () . chamadaC () . chamadaD (); As seguinte quebra de linha e alinhamento \u00e9 o mais indicadas para express\u00f5es bin\u00e1rias longas. if ( a != b && b != c && c == d ) { }","title":"Layout"},{"location":"dotnet/linguagem/coding-guidelines/#nomeacoes","text":"","title":"Nomea\u00e7\u00f5es"},{"location":"dotnet/linguagem/coding-guidelines/#geral","text":"N\u00e3o use abrevea\u00e7\u00f5es N\u00e3o use sublinhados em identificadores, hifens ou quaisquer outros caracteres n\u00e3o alfanum\u00e9ricos. Identificadores, exceto nomes de par\u00e2metro , usa a conven\u00e7\u00e3o PascalCasin . Ou seja, coloca em mai\u00fascula o primeiro caractere de cada palavra (incluindo acr\u00f4nimos com duas letras). // Exemplos. PropertyDescriptor HtmlTag IOStream Usar identificadores descritivos, em vez de curtos. Usar um nome de tipo CLR gen\u00e9rico, em vez de um nome espec\u00edfico de idioma, nos casos raros em que um identificador n\u00e3o tem um significado sem\u00e2ntico al\u00e9m de seu tipo. Por exemplo, um m\u00e9todo que converte para Int64 deve ser nomeado ToInt64 , n\u00e3o ToLong (porque Int64 \u00e9 o nome CLR para o alias espec\u00edfico long ) C# CLR sbyte SByte byte Byte short Int16 ushort UInt16 int Int32 uint UInt32 long Int64 ulong UInt64 float Single double Double bool Boolean char Char string String object Object","title":"Geral"},{"location":"dotnet/linguagem/coding-guidelines/#metodos","text":"Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser verbos ou frases de verbo.","title":"M\u00e9todos"},{"location":"dotnet/linguagem/coding-guidelines/#propriedades","text":"Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser um substantivo, uma frase de substantivo ou um adjetivo. Nomes de propriedades de cole\u00e7\u00e3o devem ser uma frase plural que descreve os itens na cole\u00e7\u00e3o em vez de usar uma frase singular seguida de \"List\" ou \"Collection\". Nomes de propriedades booleanas devem ser uma frase afirmativo (CanSeek em vez de CantSeek). Opcionalmente, voc\u00ea tamb\u00e9m pode prefixar propriedades booleanas com \"Is\", \"Can\" ou \"Has\", mas apenas onde ele agrega valor. Considere atribuir uma propriedade com o mesmo nome que o seu tipo. public enum Color {...} public class Control { public Color Color { get {...} set {...} } }","title":"Propriedades"},{"location":"dotnet/linguagem/coding-guidelines/#campos","text":"As diretrizes de nomenclatura de campo se aplicam a campos public e protected est\u00e1ticos . Campos internos e private N\u00e3o s\u00e3o cobertos pela conven\u00e7\u00e3o, e campos public e protected n\u00e3o est\u00e1ticos, n\u00e3o s\u00e3o permitidos. Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser um substantivo, uma frase de substantivo ou um adjetivo.","title":"Campos"},{"location":"dotnet/linguagem/coding-guidelines/#variaveis-locais","text":"Usar a conven\u00e7\u00e3o camelCasing","title":"Vari\u00e1veis locais"},{"location":"dotnet/linguagem/coding-guidelines/#parametros","text":"Usar a conven\u00e7\u00e3o camelCasing . Ou seja coloca em mai\u00fascula o primeiro caractere de cada palavra, exceto a primeira palavra. // Exemplos. propertyDescriptor htmlTag ioStream - Em sobrecarga de m\u00e9todos, evitar nomes de par\u00e2metro diferentes casa um par\u00e2metro em uma sobrecarga representa a mesma entrada que um par\u00e2metro em outra sobrecarga. Em sobrecarga de m\u00e9todos, os par\u00e2metros com o mesmo nome devem aparecer na mesma posi\u00e7\u00e3o em todas as sobrecargas.","title":"Par\u00e2metros"},{"location":"dotnet/linguagem/coding-guidelines/#eventos","text":"Usar a conven\u00e7\u00e3o PascalCasin Nomes devem ser um verbo ou uma frase verbal. Exemplos: Clicked, Painting, DroppedDown, etc. Manipuladores de eventos de nome (delegados usados como tipos de eventos) com o sufixo \"EventHandler\". public delegate void ClickedEventHandler ( object sender , ClickedEventArgs e ); - Use dois par\u00e2metros chamados sender e e em manipuladores de eventos Nomes de classes de argumento de evento devem ter o sufixo \"EventArgs\".","title":"Eventos"},{"location":"dotnet/linguagem/coding-guidelines/#namespaces","text":"Usar a conven\u00e7\u00e3o PascalCasin e separar componentes de namespace com pontos. Por exemplo, Microsoft.Office.PowerPoint . Usar prefixos namespace com um nome de empresa para impedir que os namespaces de diferentes empresas tenham o mesmo nome. N\u00e3o use o mesmo nome para um namespace e um tipo nesse namespace. Por exemplo, n\u00e3o use Debug como um nome de namespace e, em seguida, forne\u00e7a uma classe chamada Debug no mesmo namespace. V\u00e1rios compiladores exigem que esses tipos sejam totalmente qualificados.","title":"Namespaces"},{"location":"dotnet/linguagem/coding-guidelines/#metodos_1","text":"Permitir que null sejam passados para argumentos opcionais. Usar a sobrecarga de membros em vez de definir membros com argumentos padr\u00e3o. N\u00e3o use os modificadores ref ou out para sobrecarregar os membros.","title":"M\u00e9todos"},{"location":"dotnet/linguagem/coding-guidelines/#metodos-de-extensao","text":"Leia mais aqui","title":"M\u00e9todos de extens\u00e3o"},{"location":"dotnet/linguagem/coding-guidelines/#propriedades_1","text":"Criar propriedades somente com op\u00e7\u00e3o get se o chamador n\u00e3o puder alterar o valor da propriedade. Se o tipo da propriedade for um tipo de refer\u00eancia mut\u00e1vel, o valor da propriedade poder\u00e1 ser alterado mesmo se a propriedade for somente get . O acesso ao set n\u00e3o deve ser mais restrito que get . Preservar o valor anterior se um ters da propriedade lan\u00e7ar uma exce\u00e7\u00e3o. Evitar lan\u00e7ar exce\u00e7\u00f5es de getters da propriedade. Os getters de propriedade devem ser opera\u00e7\u00f5es simples e n\u00e3o devem ter nenhuma condi\u00e7\u00e3o. Permitir que as propriedades sejam definidas em qualquer ordem, mesmo se isso resultar em um estado tempor\u00e1rio inv\u00e1lido do objeto.","title":"Propriedades"},{"location":"dotnet/linguagem/coding-guidelines/#propriedade-indexada","text":"Usar indexadores para fornecer acesso aos dados armazenados em uma matriz interna. Fornecer indexadores em tipos que representam cole\u00e7\u00f5es de itens. Evitar o uso de propriedades indexadas com mais de um par\u00e2metro. Use o nome Item para propriedades indexadas, a menos que haja um nome obviamente melhor. N\u00e3o fornecer um indexador e m\u00e9todos que s\u00e3o semanticamente equivalentes.","title":"Propriedade indexada"},{"location":"dotnet/linguagem/coding-guidelines/#construtor","text":"Considere fornecer construtores simples. Ou seja, poucos par\u00e2metros e todos os par\u00e2metros s\u00e3o primitivos ou enums. Usar o mesmo nome para par\u00e2metros de construtor e uma propriedade se os par\u00e2metros do construtor forem usados para simplesmente definir a propriedade. Executar o m\u00ednimo de trabalho no construtor. Gerar exce\u00e7\u00f5es de construtores de inst\u00e2ncia, se apropriado. Declarar explicitamente o construtor p\u00fablico sem par\u00e2metros em classes, se esse construtor for necess\u00e1rio ou haja um outro construtor com par\u00e2metros. Evitar definir explicitamente construtores sem par\u00e2metros em structs. Isso torna a cria\u00e7\u00e3o de matriz mais r\u00e1pida, porque se o construtor sem par\u00e2metros n\u00e3o estiver definido, ele n\u00e3o precisar\u00e1 ser executado em todos os slots na matriz. Evitar chamar membros virtuais em um objeto dentro de seu construtor. Chamar um membro virtual far\u00e1 com que a sobrecarga mais derivada seja chamada, mesmo que o construtor do tipo mais derivado ainda n\u00e3o tenha sido totalmente executado. Tornar os construtores est\u00e1ticos privados. N\u00e3o lan\u00e7ar exce\u00e7\u00f5es de construtores est\u00e1ticos. Considere a inicializa\u00e7\u00e3o de campos est\u00e1ticos inline em vez de usar construtores est\u00e1ticos explicitamente, pois o tempo de execu\u00e7\u00e3o \u00e9 capaz de otimizar o desempenho dos tipos que n\u00e3o t\u00eam um construtor est\u00e1tico explicitamente definido.","title":"Construtor"},{"location":"dotnet/linguagem/coding-guidelines/#comentarios","text":"Coloque o coment\u00e1rio em uma linha separada, n\u00e3o no final de uma linha de c\u00f3digo. Comece o texto do coment\u00e1rio com uma letra mai\u00fascula. Termine o texto do coment\u00e1rio com um ponto final. Insira um espa\u00e7o entre o delimitador de coment\u00e1rio (//) e o texto do coment\u00e1rio // The following declaration creates a query. It does not run // the query. N\u00e3o crie blocos de asteriscos formatados em torno dos coment\u00e1rios.","title":"Coment\u00e1rios"},{"location":"dotnet/linguagem/coding-guidelines/#strings","text":"Use a interpola\u00e7\u00e3o de cadeia de caracteres para concatenar cadeias de caracteres curtas. string displayName = $ \"{nameList[n].LastName}, {nameList[n].FirstName}\" ; Para acrescentar cadeias de caracteres em loops, especialmente quando voc\u00ea estiver trabalhando com grandes quantidades de texto, use um objeto StringBuilder . var phrase = \"lalala\" ; var manyPhrases = new StringBuilder (); for ( var i = 0 ; i < 10000 ; i ++) { manyPhrases . Append ( phrase ); } Console . WriteLine ( \"tra\" + manyPhrases );","title":"Strings"},{"location":"dotnet/linguagem/coding-guidelines/#variaveis-locais_1","text":"Use a tipagem impl\u00edcita para vari\u00e1veis locais quando o tipo da vari\u00e1vel for \u00f3bvio do lado direito da atribui\u00e7\u00e3o ou quando o tipo exato n\u00e3o for importante. var var1 = \"This is clearly a string.\" ; var var2 = 27 ; var var3 = Convert . ToInt32 ( Console . ReadLine ()); N\u00e3o use var quando o tipo n\u00e3o estiver aparente no lado direito da atribui\u00e7\u00e3o. int var4 = ExampleClass . ResultSoFar (); N\u00e3o se baseie no nome da vari\u00e1vel para especificar o tipo dela. Ele pode n\u00e3o estar correto. var inputInt = Console . ReadLine (); Console . WriteLine ( inputInt ); Evite o uso de var em vez de dynamic . Use a tipagem impl\u00edcita para determinar o tipo da vari\u00e1vel de loop nos loops for . for ( var i = 0 ; i < 10000 ; i ++) { // Instru\u00e7\u00f5es... } N\u00e3o use a tipagem impl\u00edcita para determinar o tipo da vari\u00e1vel de loop em loops foreach . // O exemplo a seguir usa a tipagem expl\u00edcita em uma instru\u00e7\u00e3o foreach. foreach ( var ch in laugh ) { if ( ch == 'h' ) Console . Write ( \"H\" ); else Console . Write ( ch ); } Console . WriteLine (); Tenha cuidado para n\u00e3o alterar acidentalmente um tipo de elemento da cole\u00e7\u00e3o iter\u00e1vel. Por exemplo, \u00e9 f\u00e1cil mudar de System.Linq.IQueryable para System.Collections.IEnumerable em uma instru\u00e7\u00e3o foreach, que altera a execu\u00e7\u00e3o de uma consulta.","title":"Vari\u00e1veis Locais"},{"location":"dotnet/linguagem/coding-guidelines/#matrizes","text":"Use a sintaxe concisa ao inicializar matrizes na linha da declara\u00e7\u00e3o. // Sintaxe preferencial. Var n\u00e3o pode ser usada aqui. string [] vowels1 = { \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }; // Se voc\u00ea usar a instancia\u00e7\u00e3o expl\u00edcita, voc\u00ea pode usar var. var vowels2 = new string [] { \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }; // Se o tamanho do array for especificado, os elementos s\u00e3o inicializados um por vez. var vowels3 = new string [ 5 ]; vowels3 [ 0 ] = \"a\" ; vowels3 [ 1 ] = \"e\" ; // ...","title":"Matrizes"},{"location":"dotnet/linguagem/coding-guidelines/#delegados","text":"Use a sintaxe concisa ao criar inst\u00e2ncias de um tipo delegado. // Primeiramente, na Classe defina o delegado e o m\u00e9todo que casa com a assinatura. // Defina o tipo. public delegate void Del ( string message ); // Defina o m\u00e9todo que casa com a assinatura public static void DelMethod ( string str ) { Console . WriteLine ( \"DelMethod argument: {0}\" , str ); } // Posteriormente, como cont\u00e9udo do m\u00e9todo, \u00e9 criado uma inst\u00e2ncia de Del. // Preferencial: Criar a inst\u00e2ncia de Del usando a sintaxe concisa. Del exampleDel2 = DelMethod ; // Usando a sintaxe verbosa. Del exampleDel1 = new Del ( DelMethod );","title":"Delegados"},{"location":"dotnet/linguagem/coding-guidelines/#try-catch-finally","text":"Use uma instru\u00e7\u00e3o try-catch para a maioria da manipula\u00e7\u00e3o de exce\u00e7\u00f5es. static string GetValueFromArray ( string [] array , int index ) { try { return array [ index ]; } catch ( System . IndexOutOfRangeException ex ) { Console . WriteLine ( \"Index is out of range: {0}\" , index ); throw ; } } Simplifique o c\u00f3digo usando a instru\u00e7\u00e3o using . Se voc\u00ea tiver uma instru\u00e7\u00e3o try-finally na qual o \u00fanico c\u00f3digo do bloco finally \u00e9 uma chamada para o m\u00e9todo Dispose , use, em vez disso, uma instru\u00e7\u00e3o using. // Try-finally somente chama Dispose no bloco finally. Font font1 = new Font ( \"Arial\" , 10.0f ); try { byte charset = font1 . GdiCharSet ; } finally { if ( font1 != null ) { (( IDisposable ) font1 ). Dispose (); } } // Preferencial: Podemos fazer a mesma coisa usando using. using ( Font font2 = new Font ( \"Arial\" , 10.0f )) { byte charset = font2 . GdiCharSet ; }","title":"Try-catch-finally"},{"location":"dotnet/linguagem/coding-guidelines/#operadores","text":"","title":"Operadores"},{"location":"dotnet/linguagem/coding-guidelines/#operador-e","text":"Para evitar exce\u00e7\u00f5es e aumentar o desempenho ignorando compara\u00e7\u00f5es desnecess\u00e1rias, use && em vez de & e || em vez de | ao executar compara\u00e7\u00f5es. // Usando &&, se o primeira express\u00e3o for falsa a segunda j\u00e1 n\u00e3o ser\u00e1 avaliada. if (( divisor != 0 ) && ( dividend / divisor > 0 )) { Console . WriteLine ( \"Quotient: {0}\" , dividend / divisor ); } else { Console . WriteLine ( \"Attempted division by 0 ends up here.\" ); }","title":"Operador &amp;&amp; e ||"},{"location":"dotnet/linguagem/coding-guidelines/#operador-new","text":"Use a forma concisa de instancia\u00e7\u00e3o de objeto com tipagem impl\u00edcita. // Preferencial var instance1 = new ExampleClass (); // Usando tipagem expl\u00edcita ExampleClass instance2 = new ExampleClass (); Use iniciadores de objeto para simplificar a cria\u00e7\u00e3o do objeto. // Preferencial: Usando iniciadores de objetos var instance3 = new ExampleClass { Name = \"Desktop\" , ID = 37414 , Location = \"Redmond\" , Age = 2.3 }; // Usando constrtutor padr\u00e3o var instance4 = new ExampleClass (); instance4 . Name = \"Desktop\" ; instance4 . ID = 37414 ; instance4 . Location = \"Redmond\" ; instance4 . Age = 2.3 ;","title":"Operador new"},{"location":"dotnet/linguagem/coding-guidelines/#sobrecargas-de-operador","text":"Evitar definir sobrecargas de operador, exceto em tipos que devem se sentir como tipos primitivos (internos). Definir sobrecargas de operador em structs que representam n\u00fameros (como System.Decimal). Defina operadores de sobrecarga de maneira sim\u00e9trica Por exemplo, se voc\u00ea sobrecarregar o operator == , tamb\u00e9m dever\u00e1 sobrecarregar o operator != . Da mesma forma, se voc\u00ea sobrecarregar o operator < , tamb\u00e9m dever\u00e1 sobrecarregar o operator > e assim por diante. Considere fornecer m\u00e9todos com nomes amig\u00e1veis que correspondam a cada operador sobrecarregado. Muitas linguagens n\u00e3o d\u00e3o suporte \u00e0 sobrecarga de operador. Por esse motivo, \u00e9 recomend\u00e1vel que os tipos que sobrecarregam operadores incluam um m\u00e9todo secund\u00e1rio com um nome espec\u00edfico de dom\u00ednio apropriado que forne\u00e7a funcionalidade equivalente. S\u00edmbolo de operador Nome de metadados Nome Amig\u00e1vel N/A op_Implicit To /From N/A op_Explicit To /From + (binary) op_Addition Add - (binary) op_Subtraction Subtract * (binary) op_Multiply Multiply \\/ op_Division Divide \\% op_Modulus Mod or Remainder \\^ op_ExclusiveOr Xor \\& (binary) op_BitwiseAnd BitwiseAnd | op_BitwiseOr BitwiseOr \\&& op_LogicalAnd And | op_LogicalOr \\= op_Assign Assign \\<< op_LeftShift LeftShift >> op_RightShift RightShift N/A op_SignedRightShift SignedRightShift N/A op_UnsignedRightShift UnsignedRightShift \\== op_Equality Equals != op_Inequality Equals > op_GreaterThan CompareTo \\< op_LessThan CompareTo >= op_GreaterThanOrEqual CompareTo \\<= op_LessThanOrEqual CompareTo *= op_MultiplicationAssignment Multiply -= op_SubtractionAssignment Subtract \\^= op_ExclusiveOrAssignment Xor \\<<= op_LeftShiftAssignment LeftShift \\%= op_ModulusAssignment Mod += op_AdditionAssignment Add \\&= op_BitwiseAndAssignment BitwiseAnd |= op_BitwiseOrAssignment BitwiseOr \\, op_Comma Comma \\/= op_DivisionAssignment Divide -- op_Decrement Decrement ++ op_Increment Increment - (unary) op_UnaryNegation Negate + (unary) op_UnaryPlus Plus \\~ op_OnesComplement OnesComplement O sobrecarregamento de operator == \u00e9 bastante complicado. A sem\u00e2ntica do operador precisa ser compat\u00edvel com v\u00e1rios outros membros, como Object.Equals .","title":"Sobrecargas de operador"},{"location":"dotnet/linguagem/coding-guidelines/#operadores-de-conversao","text":"N\u00e3o definir operadores de convers\u00e3o fora do dom\u00ednio de um tipo. Por exemplo, Int32 , Double e Decimal s\u00e3o todos os tipos num\u00e9ricos, enquanto DateTime n\u00e3o \u00e9. Portanto, n\u00e3o deve haver nenhum operador de convers\u00e3o para converter um Double(long) em um DateTime . Um construtor \u00e9 preferencial nesse caso. N\u00e3o fornecer um operador de convers\u00e3o impl\u00edcita se a convers\u00e3o tiver potencialmente perda. Por exemplo, n\u00e3o deve haver uma convers\u00e3o impl\u00edcita de Double para Int32 porque Double tem um intervalo maior do que Int32 . Um operador de convers\u00e3o expl\u00edcita pode ser fornecido mesmo que a convers\u00e3o tenha potencialmente perda. N\u00e3o lan\u00e7ar exce\u00e7\u00f5es de convers\u00f5es impl\u00edcitas. \u00c9 muito dif\u00edcil para os usu\u00e1rios finais entenderem o que est\u00e1 acontecendo, pois eles podem n\u00e3o estar cientes de que uma convers\u00e3o est\u00e1 ocorrendo. Lan\u00e7ar System.InvalidCastException se uma chamada para um operador de convers\u00e3o resultar em uma convers\u00e3o com perdas e o contrato do operador n\u00e3o permitir convers\u00f5es com perdas.","title":"Operadores de convers\u00e3o"},{"location":"dotnet/linguagem/coding-guidelines/#parametros_1","text":"Usar o tipo de par\u00e2metro menos derivado que fornece a funcionalidade exigida pelo membro. Por exemplo, suponha que voc\u00ea queira criar um m\u00e9todo que enumere uma cole\u00e7\u00e3o e imprima cada item no console. Esse m\u00e9todo deve levar IEnumerable como o par\u00e2metro, n\u00e3o ArrayList ou IList , por exemplo. N\u00e3o use par\u00e2metros reservados. Se mais entradas para um membro forem necess\u00e1rias em alguma vers\u00e3o futura, uma nova sobrecarga poder\u00e1 ser adicionada. N\u00e3o tenha m\u00e9todos publicamente expostos que usam ponteiros, matrizes de ponteiros ou matrizes multidimensionais como par\u00e2metros. Ponteiros e matrizes multidimensionais s\u00e3o relativamente dif\u00edceis de usar corretamente. Em quase todos os casos, as APIs podem ser reprojetadas para evitar a cria\u00e7\u00e3o desses tipos como par\u00e2metros. Coloque todos os par\u00e2metros de out ap\u00f3s todos os par\u00e2metros por valor e ref (excluindo matrizes de par\u00e2metros), mesmo que resultem em uma inconsist\u00eancia na ordena\u00e7\u00e3o de par\u00e2metros entre sobrecargas. Os par\u00e2metros de out podem ser vistos como valores de retorno extras, e agrup\u00e1-los juntos torna a assinatura do m\u00e9todo mais f\u00e1cil de entender. Prefira enums ao inv\u00e9s de boleanos, a menos que tenha certeza de que nunca haver\u00e1 necessidade de mais de dois valores. Considere usar boleanos para par\u00e2metros de construtor que s\u00e3o verdadeiramente valores de dois estados e s\u00e3o simplesmente usados para inicializar propriedades booleanas. Validar argumentos passados para membros p\u00fablicos, protegidos ou explicitamente implementados. Lance System.ArgumentException , ou uma de suas subclasses, se a valida\u00e7\u00e3o falhar. Observe que a valida\u00e7\u00e3o real n\u00e3o precisa necessariamente acontecer no pr\u00f3prio membro p\u00fablico ou protegido. Isso pode acontecer em um n\u00edvel inferior em alguma rotina privada ou interna. O ponto principal \u00e9 que toda a \u00e1rea de superf\u00edcie exposta aos usu\u00e1rios finais verifica os argumentos. Lan\u00e7ar ArgumentNullException se um argumento nulo for passado e o membro n\u00e3o oferecer suporte a argumentos nulos. Esteja ciente de que argumentos mut\u00e1veis podem ter sido alterados depois de serem validados. Se o membro for sens\u00edvel \u00e0 seguran\u00e7a, voc\u00ea ser\u00e1 incentivado a fazer uma c\u00f3pia e, em seguida, validar e processar o argumento.","title":"Par\u00e2metros"},{"location":"dotnet/linguagem/coding-guidelines/#membros-com-numero-variavel-de-parametros","text":"Considere adicionar a palavra-chave params aos par\u00e2metros de matriz se voc\u00ea espera que os usu\u00e1rios finais passem matrizes com um pequeno n\u00famero de elementos. Se for esperado que muitos elementos sejam passados em cen\u00e1rios comuns, os usu\u00e1rios provavelmente n\u00e3o passar\u00e3o esses elementos embutidos de qualquer forma e, portanto, a palavra-chave params n\u00e3o ser\u00e1 necess\u00e1ria. public class String { public static string Format ( string format , params object [] parameters ); } Evitar o uso de matrizes params se o chamador quase sempre tiver a entrada j\u00e1 em uma matriz. Por exemplo, os membros com par\u00e2metros de matriz de bytes quase nunca seriam chamados passando bytes individuais. Por esse motivo, os par\u00e2metros de matriz de bytes no .NET Framework n\u00e3o usam a palavra-chave params . N\u00e3o use matrizes params se a matriz for modificada pelo membro. Modifica\u00e7\u00f4es na matriz pode ser perdida. Compiladores transformam os argumentos para o membro em uma matriz tempor\u00e1ria no local de chamada, a matriz pode ser um objeto tempor\u00e1rio e, portanto, qualquer modifica\u00e7\u00e3o na matriz ser\u00e1 perdida. Considere usar a palavra-chave params em uma sobrecarga simples, mesmo se uma sobrecarga mais complexa n\u00e3o puder us\u00e1-la. Pergunte-se se os usu\u00e1rios teriam valor com a matriz params em uma sobrecarga, mesmo que n\u00e3o estivesse em todas as sobrecargas. Tente ordenar os par\u00e2metros para tornar poss\u00edvel usar a palavra-chave params . Esteja ciente de que NULL pode ser passado como um argumento de matriz params . N\u00e3o usar os m\u00e9todos de varargs , tamb\u00e9m conhecidos como retic\u00eancias.","title":"Membros com n\u00famero vari\u00e1vel de par\u00e2metros"},{"location":"dotnet/linguagem/coding-guidelines/#eventos_1","text":"Usar o termo \"Raise\" para eventos em vez de \"Fire\" ou \"Trigger\". Usar System.EventHandler<TEventArgs> em vez de criar manualmente novos delegados para serem usados como manipuladores de eventos. Considere o uso de uma subclasse de EventArgs como o argumento de evento, a menos que voc\u00ea tenha certeza absoluta de que o evento nunca precisar\u00e1 transportar dados para o m\u00e9todo de manipula\u00e7\u00e3o de eventos; nesse caso, voc\u00ea pode usar o tipo de EventArgs diretamente. N\u00e3o passe nulo como o sender ao gerar um evento n\u00e3o est\u00e1tico. Passar nulo como o sender ao gerar um evento est\u00e1tico. N\u00e3o passar nulo como o par\u00e2metro de dados de evento ao gerar um evento. Voc\u00ea deve passar EventArgs.Empty se n\u00e3o quiser passar dados para o m\u00e9todo de manipula\u00e7\u00e3o de eventos. Considere a gera\u00e7\u00e3o de eventos que o usu\u00e1rio final pode cancelar. Use System.ComponentModel.CancelEventArgs ou sua subclasse como o argumento de evento para permitir que o usu\u00e1rio final cancele eventos. Se voc\u00ea estiver definindo um manipulador de eventos que n\u00e3o necessita ser removido posteriormente, use uma express\u00e3o lambda. // Preferencial: Usando express\u00e3o lambda para definir um manipulador de eventos. public Form2 () { this . Click += ( s , e ) => { MessageBox . Show ((( MouseEventArgs ) e ). Location . ToString ()); }; } // Forma tradicional. public Form1 () { this . Click += new EventHandler ( Form1_Click ); } void Form1_Click ( object sender , EventArgs e ) { MessageBox . Show ((( MouseEventArgs ) e ). Location . ToString ()); }","title":"Eventos"},{"location":"dotnet/linguagem/coding-guidelines/#eventos-personalizados","text":"Usar um tipo de retorno de void para manipuladores de eventos. Um manipulador de eventos pode invocar v\u00e1rios m\u00e9todos de manipula\u00e7\u00e3o de eventos, possivelmente em v\u00e1rios objetos. Se os m\u00e9todos de manipula\u00e7\u00e3o de eventos tivessem permiss\u00e3o para retornar um valor, haveria v\u00e1rios valores de retorno para cada invoca\u00e7\u00e3o de evento. Usar object como o tipo do primeiro par\u00e2metro do manipulador de eventos e cham\u00e1-lo sender . Usar System.EventArgs ou sua subclasse como o tipo do segundo par\u00e2metro do manipulador de eventos e cham\u00e1-lo e . N\u00e3o tem mais de dois par\u00e2metros em manipuladores de eventos.","title":"Eventos personalizados"},{"location":"dotnet/linguagem/coding-guidelines/#linq","text":"Use nomes significativos para vari\u00e1veis de consulta. // seattleCustomers para os clientes que est\u00e3o localizados em Seattle. var seattleCustomers = from customer in customers where customer . City == \"Seattle\" select customer . Name ; Use a tipagem impl\u00edcita na declara\u00e7\u00e3o de vari\u00e1veis de consulta e de intervalo. var seattleCustomers = from customer in customers where customer . City == \"Seattle\" select customer . Name ; Alinhe cl\u00e1usulas de consulta na cl\u00e1usula from . Use cl\u00e1usulas where antes de outras cl\u00e1usulas de consulta para garantir que cl\u00e1usulas de consulta posteriores operem no conjunto de dados filtrado e reduzido. var seattleCustomers2 = from customer in customers where customer . City == \"Seattle\" orderby customer . Name select customer ; Use aliases para se certificar de que os nomes de propriedades de tipos an\u00f4nimos sejam colocados corretamente em mai\u00fasculas, usando o padr\u00e3o Pascal-Case. var localDistributors = from customer in customers join distributor in distributors on customer . City equals distributor . City select new { Customer = customer , Distributor = distributor }; Renomeie propriedades quando os nomes de propriedades no resultado forem amb\u00edguos. Por exemplo, se a sua consulta retornar um nome de cliente e uma ID de distribuidor, em vez de deix\u00e1-los como Name e ID no resultado, renomeie-os para esclarecer que Name \u00e9 o nome de um cliente, e ID \u00e9 a identifica\u00e7\u00e3o de um distribuidor. var localDistributors2 = from customer in customers join distributor in distributors on customer . City equals distributor . City select new { CustomerName = customer . Name , DistributorID = distributor . ID }; Use v\u00e1rias cl\u00e1usulas from em vez de uma cl\u00e1usula join para acessar cole\u00e7\u00f5es internas. Por exemplo, cada cole\u00e7\u00e3o de objetos Student pode conter um conjunto de pontua\u00e7\u00f5es no teste. Quando a pr\u00f3xima consulta for executada, ela retorna cada pontua\u00e7\u00e3o que seja acima de 90, juntamente com o sobrenome do estudante que recebeu a pontua\u00e7\u00e3o. var scoreQuery = from student in students from score in student . Scores where score > 90 select new { Last = student . LastName , score };","title":"LINQ"},{"location":"dotnet/linguagem/coding-guidelines/#links","text":"https://docs.microsoft.com/pt-br/dotnet/standard/design-guidelines/","title":"Links"},{"location":"dotnet/linguagem/delegate/","text":"Delegate \u00b6 Delegate Introdu\u00e7\u00e3o Forma mais moderna Comparando com interfaces Tipos de delegate Action Function Predicate Introdu\u00e7\u00e3o \u00b6 Um delegado (em ingl\u00eas, delegate ) \u00e9 um tipo que encapsula com seguran\u00e7a um m\u00e9todo, semelhante a um ponteiro de fun\u00e7\u00e3o em C e C++ . No entanto, ao contr\u00e1rio dos ponteiros de fun\u00e7\u00e3o de C , delegados s\u00e3o orientados a objeto, fortemente tipados e seguros. O tipo de um delegado \u00e9 definido pelo nome do delegado. O exemplo a seguir declara um delegado chamado Del que pode encapsular um m\u00e9todo que usa uma cadeia de caracteres como um argumento e retorna nulo: public delegate void Del ( string message ); Um objeto delegado \u00e9 normalmente constru\u00eddo fornecendo-se o nome do m\u00e9todo que o delegado encapsular\u00e1 ou com uma fun\u00e7\u00e3o an\u00f4nima. Quando um delegado \u00e9 instanciado, uma chamada de m\u00e9todo feita ao delegado ser\u00e1 passada pelo delegado para esse m\u00e9todo. Os par\u00e2metros passados para o delegado pelo chamador s\u00e3o passados para o m\u00e9todo e o valor de retorno, se houver, do m\u00e9todo \u00e9 retornado ao chamador pelo delegado. Isso \u00e9 conhecido como invocar o delegado. Um delegado instanciado pode ser invocado como se fosse o m\u00e9todo encapsulado em si. Por exemplo: // Declara o delegado public delegate void Del ( string message ); // Cria o m\u00e9todo para o delegado public static void DelegateMethod ( string message ) { System . Console . WriteLine ( message ); } // Instancia o delegado Del handler = DelegateMethod ; // Chama o delegado handler ( \"Hello World\" ); Veja mais aqui e aqui Forma mais moderna \u00b6 Hoje, em C# , usamos mais a lambda , que \u00e9 uma fun\u00e7\u00e3o an\u00f4nima com uma sintaxe mais simples e que, em geral, dispensa a declara\u00e7\u00e3o do delegado. Isto n\u00e3o quer dizer que ele n\u00e3o exista, apenas que n\u00e3o \u00e9 preciso escrev\u00ea-lo. O compilador infere a assinatura daquele m\u00e9todo e cria o delegado para voc\u00ea. Em alguns casos onde a infer\u00eancia n\u00e3o \u00e9 poss\u00edvel, d\u00e1 para usar um Func ou Action para substituir a declara\u00e7\u00e3o do delegado. Comparando com interfaces \u00b6 Uma interface se assemelha muito com um delegado, s\u00f3 que a interface concretiza o m\u00e9todo de forma fixa e \u00e9 definida em tempo de compila\u00e7\u00e3o. O delegado pode ser definido em tempo de execu\u00e7\u00e3o (ainda que o c\u00f3digo em si a ser executado tamb\u00e9m ser\u00e1 definido em tempo de compila\u00e7\u00e3o). Tipos de delegate \u00b6 Action \u00b6 O delegate Action encapsula um m\u00e9todo que n\u00e3o retorna nada (void) e pode receber de 0 a 4 par\u00e2metros de entrada. public delegate void Action (); public delegate void Action < in T1 >( T arg1 ); public delegate void Action < in T1 , in T2 >( T1 arg1 , T2 arg2 ); ... Usando delegate void ConcatStrings ( string string1 , string string2 ); ConcatStrings concat ; // ou Action < string , string > concat ; Usando com m\u00e9todos an\u00f4nimos Action < string , string > concat ; concat = delegate ( string s1 , string s2 ) { WriteToConsole ( s1 , s2 ); }; private static void WriteToConsole ( string string1 , string string2 ) { Console . WriteLine ( \"{0}\\n{1}\" , string1 , string2 ); } Usando com express\u00f5es l\u00e2mbidas Action < string , string > concat ; concat = ( s1 , s2 ) => WriteToConsole ( s1 , s2 ); private static void WriteToConsole ( string string1 , string string2 ) { Console . WriteLine ( \"{0}\\n{1}\" , string1 , string2 ); } Function \u00b6 O delegate Function encapsula um m\u00e9todo que retorna um valor do tipo especificado pelo par\u00e2metro TResult e pode receber de 0 a 16 par\u00e2metros de entrada. public delegate TResult Func < out TResult >(); public delegate TResult Func < in T1 , out TResult >( T1 arg1 ); public delegate TResult Func < in T1 , in T2 , out TResult >( T1 arg1 , T2 arg2 ); ... Usando delegate string ConvertMethod ( string inString ); // ou Func < string , string > selector ; Usando com m\u00e9todos an\u00f4nimos Func < string , string > convert = delegate ( string s ) { return s . ToUpper ();}; Usando com express\u00f5es l\u00e2mbidas Func < string , string > convert = s => s . ToUpper (); Predicate \u00b6 Representa o m\u00e9todo que define um conjunto de crit\u00e9rios e determina se o objeto especificado atende a esses crit\u00e9rios. retorna um valor booleano. public delegate bool Predicate < in T >( T arg ); Usando Point [] points = { new Point ( 100 , 200 ), new Point ( 150 , 250 ), new Point ( 250 , 375 ), new Point ( 275 , 395 ), new Point ( 295 , 450 ) }; Predicate < Point > predicate = FindPoints ; Point first = Array . Find ( points , predicate ); private static bool FindPoints ( Point obj ) { return obj . X * obj . Y > 100000 ; } Usando lambda Point first = Array . Find ( points , x => x . X * x . Y > 100000 );","title":"Delegate"},{"location":"dotnet/linguagem/delegate/#delegate","text":"Delegate Introdu\u00e7\u00e3o Forma mais moderna Comparando com interfaces Tipos de delegate Action Function Predicate","title":"Delegate"},{"location":"dotnet/linguagem/delegate/#introducao","text":"Um delegado (em ingl\u00eas, delegate ) \u00e9 um tipo que encapsula com seguran\u00e7a um m\u00e9todo, semelhante a um ponteiro de fun\u00e7\u00e3o em C e C++ . No entanto, ao contr\u00e1rio dos ponteiros de fun\u00e7\u00e3o de C , delegados s\u00e3o orientados a objeto, fortemente tipados e seguros. O tipo de um delegado \u00e9 definido pelo nome do delegado. O exemplo a seguir declara um delegado chamado Del que pode encapsular um m\u00e9todo que usa uma cadeia de caracteres como um argumento e retorna nulo: public delegate void Del ( string message ); Um objeto delegado \u00e9 normalmente constru\u00eddo fornecendo-se o nome do m\u00e9todo que o delegado encapsular\u00e1 ou com uma fun\u00e7\u00e3o an\u00f4nima. Quando um delegado \u00e9 instanciado, uma chamada de m\u00e9todo feita ao delegado ser\u00e1 passada pelo delegado para esse m\u00e9todo. Os par\u00e2metros passados para o delegado pelo chamador s\u00e3o passados para o m\u00e9todo e o valor de retorno, se houver, do m\u00e9todo \u00e9 retornado ao chamador pelo delegado. Isso \u00e9 conhecido como invocar o delegado. Um delegado instanciado pode ser invocado como se fosse o m\u00e9todo encapsulado em si. Por exemplo: // Declara o delegado public delegate void Del ( string message ); // Cria o m\u00e9todo para o delegado public static void DelegateMethod ( string message ) { System . Console . WriteLine ( message ); } // Instancia o delegado Del handler = DelegateMethod ; // Chama o delegado handler ( \"Hello World\" ); Veja mais aqui e aqui","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/delegate/#forma-mais-moderna","text":"Hoje, em C# , usamos mais a lambda , que \u00e9 uma fun\u00e7\u00e3o an\u00f4nima com uma sintaxe mais simples e que, em geral, dispensa a declara\u00e7\u00e3o do delegado. Isto n\u00e3o quer dizer que ele n\u00e3o exista, apenas que n\u00e3o \u00e9 preciso escrev\u00ea-lo. O compilador infere a assinatura daquele m\u00e9todo e cria o delegado para voc\u00ea. Em alguns casos onde a infer\u00eancia n\u00e3o \u00e9 poss\u00edvel, d\u00e1 para usar um Func ou Action para substituir a declara\u00e7\u00e3o do delegado.","title":"Forma mais moderna"},{"location":"dotnet/linguagem/delegate/#comparando-com-interfaces","text":"Uma interface se assemelha muito com um delegado, s\u00f3 que a interface concretiza o m\u00e9todo de forma fixa e \u00e9 definida em tempo de compila\u00e7\u00e3o. O delegado pode ser definido em tempo de execu\u00e7\u00e3o (ainda que o c\u00f3digo em si a ser executado tamb\u00e9m ser\u00e1 definido em tempo de compila\u00e7\u00e3o).","title":"Comparando com interfaces"},{"location":"dotnet/linguagem/delegate/#tipos-de-delegate","text":"","title":"Tipos de delegate"},{"location":"dotnet/linguagem/delegate/#action","text":"O delegate Action encapsula um m\u00e9todo que n\u00e3o retorna nada (void) e pode receber de 0 a 4 par\u00e2metros de entrada. public delegate void Action (); public delegate void Action < in T1 >( T arg1 ); public delegate void Action < in T1 , in T2 >( T1 arg1 , T2 arg2 ); ... Usando delegate void ConcatStrings ( string string1 , string string2 ); ConcatStrings concat ; // ou Action < string , string > concat ; Usando com m\u00e9todos an\u00f4nimos Action < string , string > concat ; concat = delegate ( string s1 , string s2 ) { WriteToConsole ( s1 , s2 ); }; private static void WriteToConsole ( string string1 , string string2 ) { Console . WriteLine ( \"{0}\\n{1}\" , string1 , string2 ); } Usando com express\u00f5es l\u00e2mbidas Action < string , string > concat ; concat = ( s1 , s2 ) => WriteToConsole ( s1 , s2 ); private static void WriteToConsole ( string string1 , string string2 ) { Console . WriteLine ( \"{0}\\n{1}\" , string1 , string2 ); }","title":"Action"},{"location":"dotnet/linguagem/delegate/#function","text":"O delegate Function encapsula um m\u00e9todo que retorna um valor do tipo especificado pelo par\u00e2metro TResult e pode receber de 0 a 16 par\u00e2metros de entrada. public delegate TResult Func < out TResult >(); public delegate TResult Func < in T1 , out TResult >( T1 arg1 ); public delegate TResult Func < in T1 , in T2 , out TResult >( T1 arg1 , T2 arg2 ); ... Usando delegate string ConvertMethod ( string inString ); // ou Func < string , string > selector ; Usando com m\u00e9todos an\u00f4nimos Func < string , string > convert = delegate ( string s ) { return s . ToUpper ();}; Usando com express\u00f5es l\u00e2mbidas Func < string , string > convert = s => s . ToUpper ();","title":"Function"},{"location":"dotnet/linguagem/delegate/#predicate","text":"Representa o m\u00e9todo que define um conjunto de crit\u00e9rios e determina se o objeto especificado atende a esses crit\u00e9rios. retorna um valor booleano. public delegate bool Predicate < in T >( T arg ); Usando Point [] points = { new Point ( 100 , 200 ), new Point ( 150 , 250 ), new Point ( 250 , 375 ), new Point ( 275 , 395 ), new Point ( 295 , 450 ) }; Predicate < Point > predicate = FindPoints ; Point first = Array . Find ( points , predicate ); private static bool FindPoints ( Point obj ) { return obj . X * obj . Y > 100000 ; } Usando lambda Point first = Array . Find ( points , x => x . X * x . Y > 100000 );","title":"Predicate"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/","text":"Instru\u00e7\u00f5es, express\u00f5es e operadores \u00b6 Instru\u00e7\u00f5es, express\u00f5es e operadores Instru\u00e7\u00f5es Instru\u00e7\u00f5es de declara\u00e7\u00e3o Instru\u00e7\u00f5es de express\u00e3o Instru\u00e7\u00f5es de sele\u00e7\u00e3o Instru\u00e7\u00f5es de itera\u00e7\u00e3o foreach while Instru\u00e7\u00f5es de salto yield Instru\u00e7\u00f5es para tratamento de exce\u00e7\u00f5es Instru\u00e7\u00f5es checked e unchecked Instru\u00e7\u00e3o await Instru\u00e7\u00e3o yield return Instru\u00e7\u00e3o fixed Instru\u00e7\u00e3o lock Instru\u00e7\u00f5es rotuladas Instru\u00e7\u00e3o vazia Operadores [[ TOC ]] O c\u00f3digo C# que comp\u00f5e um aplicativo consiste em instru\u00e7\u00f5es (em ingl\u00eas, statements ) compostas por palavras-chave, express\u00f5es e operadores. Instru\u00e7\u00f5es \u00b6 As a\u00e7\u00f5es que um programa realiza s\u00e3o expressas em instru\u00e7\u00f5es (em ingl\u00eas, statements ). A\u00e7\u00f5es comuns incluem declarar vari\u00e1veis, atribuir valores, chamar m\u00e9todos, la\u00e7\u00f5es de repeti\u00e7\u00e3o em cole\u00e7\u00f5es e execu\u00e7\u00e3o de um ou outro bloco de c\u00f3digo, dependendo de uma determinada condi\u00e7\u00e3o. A ordem na qual as instru\u00e7\u00f5es s\u00e3o executadas em um programa \u00e9 chamada de fluxo de controle ou fluxo de execu\u00e7\u00e3o. O fluxo de controle pode variar sempre que um programa \u00e9 executado, dependendo de como o programa reage \u00e0s entradas que recebe em tempo de execu\u00e7\u00e3o. Uma instru\u00e7\u00e3o pode consistir em uma \u00fanica linha de c\u00f3digo que termina em ( ; ) ou uma s\u00e9rie de instru\u00e7\u00f5es de uma linha em um bloco. Um bloco de instru\u00e7\u00e3o \u00e9 colocado entre ( {} ) e pode conter blocos aninhados. Instru\u00e7\u00f5es de declara\u00e7\u00e3o \u00b6 Uma declara\u00e7\u00e3o de instru\u00e7\u00e3o introduz uma nova vari\u00e1vel ou constante. Uma declara\u00e7\u00e3o vari\u00e1vel pode, opcionalmente, atribuir um valor \u00e0 vari\u00e1vel. Uma declara\u00e7\u00e3o constante, a atribui\u00e7\u00e3o \u00e9 obrigat\u00f3ria. // Instru\u00e7\u00e3o de declara\u00e7\u00e3o vari\u00e1vel. double area ; double radius = 2 ; // Instru\u00e7\u00e3o de declara\u00e7\u00e3o constante. const double pi = 3.14159 ; Instru\u00e7\u00f5es de express\u00e3o \u00b6 Uma express\u00e3o \u00e9 uma sequ\u00eancia de um ou mais operandos e zero ou mais operadores que podem ser avaliados como um valor, objeto, m\u00e9todo ou namespace \u00fanico. As express\u00f5es podem consistir de um valor literal, uma invoca\u00e7\u00e3o de m\u00e9todo, um operador e seus operandos ou um nome simples. Os nomes simples podem ser o nome de uma vari\u00e1vel, um membro de tipo, um par\u00e2metro de m\u00e9todo, um namespace ou um tipo. Leia mais aqui Instru\u00e7\u00f5es de sele\u00e7\u00e3o \u00b6 Instru\u00e7\u00f5es de sele\u00e7\u00e3o permitem que voc\u00ea ramifique para diferentes se\u00e7\u00f5es de c\u00f3digo, dependendo de uma ou mais condi\u00e7\u00f5es especificadas. Palavras-chave: if , else , switch , case // Exemplo 1: // if, else if ( condicaoA ) { // A } else { // # } // Exemplo 2 // if, else // Para uma \u00fanica instru\u00e7\u00e3o, as chaves s\u00e3o opcionais, mas recomendadas if ( condicaoA ) if ( condicaoB ) { // A e B } else { // A e # } // Exemplo 3 // if, else if, else if ( condicaoA ) { } else if ( condicaoB ) { } else if ( condicaoC ) { if ( condicaoD ) { } else { } } else { } // Exemplo 4 // switch, case switch ( valor ) { case 1 : Console . WriteLine ( \"Valor 1\" ); break ; case 2 : case 3 : Console . WriteLine ( $ \"Valor {caseSwitch}\" ); break ; default : Console . WriteLine ( $ \"Valor n\u00e3o esperado ({caseSwitch})\" ); break ; } Instru\u00e7\u00f5es de itera\u00e7\u00e3o \u00b6 Instru\u00e7\u00f5es de itera\u00e7\u00e3o permitem que voc\u00ea percorra cole\u00e7\u00f5es como matrizes ou execute o mesmo conjunto de instru\u00e7\u00f5es repetidamente at\u00e9 que uma determinada condi\u00e7\u00e3o seja atendida. Palavras-chave: do , for , foreach , in , while // Exemplo 1 // do int n = 0 ; do { Console . WriteLine ( n ); n ++; } while ( n < 5 ); // Exemplo 2 // for for ( int i = 0 ; i < 5 ; i ++) { Console . WriteLine ( i ); } // Exemplo 3 // for // Loop infinito for ( ; ; ) { } foreach \u00b6 Em qualquer ponto dentro do bloco de instru\u00e7\u00e3o foreach, voc\u00ea pode sair do loop usando a instru\u00e7\u00e3o break ou seguir para a pr\u00f3xima itera\u00e7\u00e3o no loop usando a instru\u00e7\u00e3o continue . Voc\u00ea tamb\u00e9m pode sair de um loop foreach com a instru\u00e7\u00e3o goto , return ou throw . Se a instru\u00e7\u00e3o foreach for aplicada a null , uma NullReferenceException ser\u00e1 lan\u00e7ada. Se a cole\u00e7\u00e3o de origem da instru\u00e7\u00e3o foreach estiver vazia, o corpo do loop foreach n\u00e3o ser\u00e1 executado e ser\u00e1 ignorado. // Exemplo 1 // foreach, in var fibNumbers = new List < int > { 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 }; foreach ( int element in fibNumbers ) { Console . WriteLine ( element ); } while \u00b6 A qualquer momento dentro do bloco de instru\u00e7\u00f5es while, interrompa o loop usando a instru\u00e7\u00e3o break . Voc\u00ea pode seguir diretamente para a avalia\u00e7\u00e3o da express\u00e3o while usando a instru\u00e7\u00e3o continue . Se a express\u00e3o for avaliada como true , a execu\u00e7\u00e3o continuar\u00e1 na primeira instru\u00e7\u00e3o do loop. Caso contr\u00e1rio, a execu\u00e7\u00e3o continuar\u00e1 na primeira instru\u00e7\u00e3o ap\u00f3s o loop. Voc\u00ea tamb\u00e9m pode sair de um loop while com a instru\u00e7\u00e3o goto , return ou throw . // Exemplo 1 // while int n = 0 ; while ( n < 5 ) { Console . WriteLine ( n ); n ++; } Instru\u00e7\u00f5es de salto \u00b6 Instru\u00e7\u00f5es de salto transferem o controle para outra se\u00e7\u00e3o de c\u00f3digo. Palavras-chave: break , continue , default , goto , return , yield // Exemplo 1 // goto switch ( n ) { case 1 : cost += 25 ; break ; case 2 : cost += 25 ; goto case 1 ; case 3 : cost += 50 ; goto case 1 ; default : Console . WriteLine ( \"Invalid selection.\" ); break ; } // Exemplo 1 // goto var achei = 5 ; if ( achei < 10 ) { goto Found ; } else { goto Finish ; } Found : Console . WriteLine ( \"Achei\" ); Finish : Console . WriteLine ( \"Fim\" ); // Saida: // Achei // Fim yield \u00b6 Quando voc\u00ea usa o yield (palavra-chave contextual em uma instru\u00e7\u00e3o), voc\u00ea indica que o m\u00e9todo, operador ou acessador de get no qual ele aparece \u00e9 um iterador. Usar yield para definir um iterador elimina a necessidade de uma classe adicional expl\u00edcita (a classe que mant\u00e9m o estado de uma enumera\u00e7\u00e3o) ao implementar o padr\u00e3o IEnumerable e IEnumerator para um tipo de cole\u00e7\u00e3o personalizado. Voc\u00ea usa uma instru\u00e7\u00e3o yield return para retornar cada elemento individualmente. A sequ\u00eancia retornada de um m\u00e9todo iterador pode ser consumida usando uma instru\u00e7\u00e3o foreach ou uma consulta LINQ. Cada itera\u00e7\u00e3o do loop foreach chama o m\u00e9todo iterador. Quando uma instru\u00e7\u00e3o yield return \u00e9 atingida no m\u00e9todo iterador, expression \u00e9 retornado e o local atual no c\u00f3digo \u00e9 retido. A execu\u00e7\u00e3o ser\u00e1 reiniciada desse local na pr\u00f3xima vez que a fun\u00e7\u00e3o iteradora for chamada. Voc\u00ea pode usar uma instru\u00e7\u00e3o yield break para terminar a itera\u00e7\u00e3o. O exemplo a seguir cont\u00e9m uma instru\u00e7\u00e3o yield return dentro de um loop for . Cada itera\u00e7\u00e3o do corpo da instru\u00e7\u00e3o foreach no m\u00e9todo Main cria uma chamada \u00e0 fun\u00e7\u00e3o iteradora Power . Cada chamada \u00e0 fun\u00e7\u00e3o iteradora prossegue para a pr\u00f3xima execu\u00e7\u00e3o da instru\u00e7\u00e3o yield return que ocorre durante a pr\u00f3xima itera\u00e7\u00e3o do loop for . O tipo de retorno do m\u00e9todo iterador \u00e9 IEnumerable que \u00e9 um tipo de interface de iterador. Quando o m\u00e9todo iterador \u00e9 chamado, ele retorna um objeto enumer\u00e1vel que cont\u00e9m as pot\u00eancias de um n\u00famero. public class PowersOf2 { static void Main () { // Exibe pot\u00eancias de 2 at\u00e9 o expoente de 8 foreach ( int i in Power ( 2 , 8 )) { Console . Write ( \"{0} \" , i ); } } public static IEnumerable < int > Power ( int number , int exponent ) { int result = 1 ; for ( int i = 0 ; i < exponent ; i ++) { result = result * number ; yield return result ; } } // Saida: 2 4 8 16 32 64 128 256 } Instru\u00e7\u00f5es para tratamento de exce\u00e7\u00f5es \u00b6 Instru\u00e7\u00f5es para tratamento de exce\u00e7\u00f5es permitem que voc\u00ea se recupere normalmente de condi\u00e7\u00f5es excepcionais que ocorrem em tempo de execu\u00e7\u00e3o. Para mais informa\u00e7\u00f5es, consulte os seguintes t\u00f3picos: Palavras-chave: throw , try-catch , try-finally , try-catch-finally // Exemplo 1 // throw if ( index < 0 || index >= numbers . Length ) { throw new IndexOutOfRangeException (); } // Exemplo 2 // try, catch, throw try { return Value [ 0 ]; } catch ( NullReferenceException e ) { throw ; } // Exemplo 3 // try, catch, finally try { file . ReadBlock ( buffer , index , buffer . Length ); } catch ( System . IO . IOException e ) { Console . WriteLine ( \"Error reading from {0}. Message = {1}\" , path , e . Message ); } finally { if ( file != null ) { file . Close (); } } Instru\u00e7\u00f5es checked e unchecked \u00b6 As instru\u00e7\u00f5es checked e unchecked permitem que voc\u00ea especifique se opera\u00e7\u00f5es num\u00e9ricas podem causar um estouro quando o resultado for armazenado em uma vari\u00e1vel que \u00e9 muito pequena para conter o valor resultante. // Causes erro em tempo de compila\u00e7\u00e3o porque 2147483647 \u00e9 o limite para inteiros. int i1 = 2147483647 + 10 ; // Causa erro em tempo de execu\u00e7\u00e3o. int ten = 10 ; int i2 = 2147483647 + ten ; // Expres\u00e3o Checked. Console . WriteLine ( checked ( 2147483647 + ten )); // Bloco Checked. checked { int i3 = 2147483647 + ten ; Console . WriteLine ( i3 ); } A palavra-chave unchecked pode ser usada para impedir a verifica\u00e7\u00e3o de estouro. // Expres\u00e3o Unchecked. int1 = unchecked ( ConstantMax + 10 ); // Bloco Unchecked. unchecked { // N\u00e3o ocorrer\u00e1 erro de compila\u00e7\u00e3o, o resultado ser\u00e1 \"-2,147,483,639\" int1 = 2147483647 + 10 ; } Instru\u00e7\u00e3o await \u00b6 Se marcar um m\u00e9todo com o modificador async , voc\u00ea poder\u00e1 usar o operador await no m\u00e9todo. Quando o controle atinge uma express\u00e3o await no m\u00e9todo ass\u00edncrono, ele retorna para o chamador e o progresso no m\u00e9todo \u00e9 suspenso at\u00e9 a tarefa aguardada ser conclu\u00edda. Quando a tarefa for conclu\u00edda, a execu\u00e7\u00e3o poder\u00e1 ser retomada no m\u00e9todo. Instru\u00e7\u00e3o yield return \u00b6 Um iterador realiza uma itera\u00e7\u00e3o personalizada em uma cole\u00e7\u00e3o, como uma lista ou uma matriz. Um iterador usa a instru\u00e7\u00e3o yield return para retornar um elemento de cada vez. Quando uma instru\u00e7\u00e3o yield return for atingida, o local atual no c\u00f3digo ser\u00e1 lembrado. A execu\u00e7\u00e3o ser\u00e1 reiniciada desse local quando o iterador for chamado na pr\u00f3xima vez. Instru\u00e7\u00e3o fixed \u00b6 A instru\u00e7\u00e3o fixed impede que o coletor de lixo fa\u00e7a a realoca\u00e7\u00e3o de uma vari\u00e1vel m\u00f3vel. A instru\u00e7\u00e3o fixed impede que o coletor de lixo fa\u00e7a a realoca\u00e7\u00e3o de uma vari\u00e1vel m\u00f3vel. A instru\u00e7\u00e3o fixed \u00e9 permitida somente em um contexto n\u00e3o seguro. Voc\u00ea tamb\u00e9m pode usar a palavra-chave fixed para criar buffers de tamanho fixo. A instru\u00e7\u00e3o fixed define um ponteiro para uma vari\u00e1vel gerenciada e \"fixa\" essa vari\u00e1vel durante a execu\u00e7\u00e3o da instru\u00e7\u00e3o. Os ponteiros m\u00f3veis gerenciados s\u00e3o \u00fateis apenas em um contexto fixed . Sem um contexto fixed , a coleta de lixo poderia realocar as vari\u00e1veis de forma imprevis\u00edvel. O compilador do C# s\u00f3 permite que voc\u00ea atribua um ponteiro a uma vari\u00e1vel gerenciada em uma instru\u00e7\u00e3o fixed . class Point { public int x ; public int y ; } unsafe private static void ModifyFixedStorage () { // A vari\u00e1vel pt \u00e9 uma vari\u00e1vel gerenciada, sujeita a coleta de lixo. Point pt = new Point (); // O uso de Fixed permite que o endere\u00e7o dos membros pt seja \"fixo\" e n\u00e3o ser\u00e1 realocado. fixed ( int * p = & pt . x ) { * p = 1 ; } } Instru\u00e7\u00e3o lock \u00b6 A instru\u00e7\u00e3o lock permite limitar o acesso a blocos de c\u00f3digo a apenas um thread por vez. A instru\u00e7\u00e3o lock obt\u00e9m o bloqueio de exclus\u00e3o m\u00fatua para um determinado objeto, executa um bloco de instru\u00e7\u00f5es e, em seguida, libera o bloqueio. Embora um bloqueio seja mantido, o thread que mant\u00e9m o bloqueio pode adquiri-lo novamente e liber\u00e1-lo. Qualquer outro thread \u00e9 impedido de adquirir o bloqueio e aguarda at\u00e9 que ele seja liberado. lock ( x ) { // Instru\u00e7\u00f5es... } Instru\u00e7\u00f5es rotuladas \u00b6 Voc\u00ea pode atribuir um r\u00f3tulo a uma instru\u00e7\u00e3o e, em seguida, usar a palavra-chave goto para ir diretamente para a instru\u00e7\u00e3o rotulada. Instru\u00e7\u00e3o vazia \u00b6 A instru\u00e7\u00e3o vazia consiste em um \u00fanico ( ; ). Ela n\u00e3o faz nada e pode ser usada em locais em que uma instru\u00e7\u00e3o \u00e9 necess\u00e1ria, mas nenhuma a\u00e7\u00e3o precisa ser executada. void ProcessMessages () { while ( ProcessMessage ()) ; // Instru\u00e7\u00e3o vazia. } void F () { if ( done ) goto exit ; exit : ; // Instru\u00e7\u00e3o vazia. } Operadores \u00b6 O C# oferece v\u00e1rios operadores predefinidos, compat\u00edveis com os tipos internos. Por exemplo, os operadores aritm\u00e9ticos executam opera\u00e7\u00f5es aritm\u00e9ticas com operandos num\u00e9ricos, j\u00e1 os operadores l\u00f3gicos boolianos executam opera\u00e7\u00f5es l\u00f3gicas com operandos bool. Determinados operadores podem ser sobrecarregados. Com a sobrecarga de operador, voc\u00ea pode especificar o comportamento do operador para os operandos de um tipo definido pelo usu\u00e1rio. Em uma express\u00e3o, a preced\u00eancia e a associa\u00e7\u00e3o dos operadores determinam a ordem na qual as opera\u00e7\u00f5es s\u00e3o executadas. Voc\u00ea pode usar par\u00eanteses para alterar a ordem de avalia\u00e7\u00e3o imposta pela prioridade e pela associa\u00e7\u00e3o dos operadores. Operadores Categoria ou nome x.y , x?.y , x?[y] , f(x) , a[i] , x++ , x-- , new , typeof , checked , unchecked , default , nameof , delegate , sizeof , stackalloc , x->y Prim\u00e1ria +x , -x , !x , ~x , ++x , --x , ^x , (T)x , await , &x , *x , true , false Un\u00e1rio X.. Y Intervalo x * y , x / y , x % y Multiplicativo x + y , x \u2013 y Aditiva < x < y , x >> y Turno x < y , x > y , x <= y , x >= y , is , as Teste de tipo e relacional x == y , x != y Igualit\u00e1rio x & y AND l\u00f3gico booliano ou AND l\u00f3gico bit a bit x ^ y XOR l\u00f3gico booliano ou XOR l\u00f3gico bit a bit x \\| y OR l\u00f3gico booliano ou OR l\u00f3gico bit a bit x && y AND condicional x \\|\\| y OR condicional x ?? y Operador de coalesc\u00eancia nula c ? t : f Operador condicional x = y , x += y , x -= y , x *= y , x /= y , x % = y , x &= y , x \\|= y , x ^ y , x <<= y , x >>= y , x ?? = y , => Declara\u00e7\u00e3o de atribui\u00e7\u00e3o e lambda Use () para alterar a ordem de avalia\u00e7\u00e3o imposta pela associa\u00e7\u00e3o de operador: int a = 13 / 5 / 2 ; int b = 13 / ( 5 / 2 ); Console . WriteLine ( $ \"a = {a}, b = {b}\" ); // sa\u00edda: a = 1, b = 6","title":"Instru\u00e7\u00f5es, express\u00f5es e operadores"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-expressoes-e-operadores","text":"Instru\u00e7\u00f5es, express\u00f5es e operadores Instru\u00e7\u00f5es Instru\u00e7\u00f5es de declara\u00e7\u00e3o Instru\u00e7\u00f5es de express\u00e3o Instru\u00e7\u00f5es de sele\u00e7\u00e3o Instru\u00e7\u00f5es de itera\u00e7\u00e3o foreach while Instru\u00e7\u00f5es de salto yield Instru\u00e7\u00f5es para tratamento de exce\u00e7\u00f5es Instru\u00e7\u00f5es checked e unchecked Instru\u00e7\u00e3o await Instru\u00e7\u00e3o yield return Instru\u00e7\u00e3o fixed Instru\u00e7\u00e3o lock Instru\u00e7\u00f5es rotuladas Instru\u00e7\u00e3o vazia Operadores [[ TOC ]] O c\u00f3digo C# que comp\u00f5e um aplicativo consiste em instru\u00e7\u00f5es (em ingl\u00eas, statements ) compostas por palavras-chave, express\u00f5es e operadores.","title":"Instru\u00e7\u00f5es, express\u00f5es e operadores"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes","text":"As a\u00e7\u00f5es que um programa realiza s\u00e3o expressas em instru\u00e7\u00f5es (em ingl\u00eas, statements ). A\u00e7\u00f5es comuns incluem declarar vari\u00e1veis, atribuir valores, chamar m\u00e9todos, la\u00e7\u00f5es de repeti\u00e7\u00e3o em cole\u00e7\u00f5es e execu\u00e7\u00e3o de um ou outro bloco de c\u00f3digo, dependendo de uma determinada condi\u00e7\u00e3o. A ordem na qual as instru\u00e7\u00f5es s\u00e3o executadas em um programa \u00e9 chamada de fluxo de controle ou fluxo de execu\u00e7\u00e3o. O fluxo de controle pode variar sempre que um programa \u00e9 executado, dependendo de como o programa reage \u00e0s entradas que recebe em tempo de execu\u00e7\u00e3o. Uma instru\u00e7\u00e3o pode consistir em uma \u00fanica linha de c\u00f3digo que termina em ( ; ) ou uma s\u00e9rie de instru\u00e7\u00f5es de uma linha em um bloco. Um bloco de instru\u00e7\u00e3o \u00e9 colocado entre ( {} ) e pode conter blocos aninhados.","title":"Instru\u00e7\u00f5es"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-de-declaracao","text":"Uma declara\u00e7\u00e3o de instru\u00e7\u00e3o introduz uma nova vari\u00e1vel ou constante. Uma declara\u00e7\u00e3o vari\u00e1vel pode, opcionalmente, atribuir um valor \u00e0 vari\u00e1vel. Uma declara\u00e7\u00e3o constante, a atribui\u00e7\u00e3o \u00e9 obrigat\u00f3ria. // Instru\u00e7\u00e3o de declara\u00e7\u00e3o vari\u00e1vel. double area ; double radius = 2 ; // Instru\u00e7\u00e3o de declara\u00e7\u00e3o constante. const double pi = 3.14159 ;","title":"Instru\u00e7\u00f5es de declara\u00e7\u00e3o"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-de-expressao","text":"Uma express\u00e3o \u00e9 uma sequ\u00eancia de um ou mais operandos e zero ou mais operadores que podem ser avaliados como um valor, objeto, m\u00e9todo ou namespace \u00fanico. As express\u00f5es podem consistir de um valor literal, uma invoca\u00e7\u00e3o de m\u00e9todo, um operador e seus operandos ou um nome simples. Os nomes simples podem ser o nome de uma vari\u00e1vel, um membro de tipo, um par\u00e2metro de m\u00e9todo, um namespace ou um tipo. Leia mais aqui","title":"Instru\u00e7\u00f5es de express\u00e3o"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-de-selecao","text":"Instru\u00e7\u00f5es de sele\u00e7\u00e3o permitem que voc\u00ea ramifique para diferentes se\u00e7\u00f5es de c\u00f3digo, dependendo de uma ou mais condi\u00e7\u00f5es especificadas. Palavras-chave: if , else , switch , case // Exemplo 1: // if, else if ( condicaoA ) { // A } else { // # } // Exemplo 2 // if, else // Para uma \u00fanica instru\u00e7\u00e3o, as chaves s\u00e3o opcionais, mas recomendadas if ( condicaoA ) if ( condicaoB ) { // A e B } else { // A e # } // Exemplo 3 // if, else if, else if ( condicaoA ) { } else if ( condicaoB ) { } else if ( condicaoC ) { if ( condicaoD ) { } else { } } else { } // Exemplo 4 // switch, case switch ( valor ) { case 1 : Console . WriteLine ( \"Valor 1\" ); break ; case 2 : case 3 : Console . WriteLine ( $ \"Valor {caseSwitch}\" ); break ; default : Console . WriteLine ( $ \"Valor n\u00e3o esperado ({caseSwitch})\" ); break ; }","title":"Instru\u00e7\u00f5es de sele\u00e7\u00e3o"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-de-iteracao","text":"Instru\u00e7\u00f5es de itera\u00e7\u00e3o permitem que voc\u00ea percorra cole\u00e7\u00f5es como matrizes ou execute o mesmo conjunto de instru\u00e7\u00f5es repetidamente at\u00e9 que uma determinada condi\u00e7\u00e3o seja atendida. Palavras-chave: do , for , foreach , in , while // Exemplo 1 // do int n = 0 ; do { Console . WriteLine ( n ); n ++; } while ( n < 5 ); // Exemplo 2 // for for ( int i = 0 ; i < 5 ; i ++) { Console . WriteLine ( i ); } // Exemplo 3 // for // Loop infinito for ( ; ; ) { }","title":"Instru\u00e7\u00f5es de itera\u00e7\u00e3o"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#foreach","text":"Em qualquer ponto dentro do bloco de instru\u00e7\u00e3o foreach, voc\u00ea pode sair do loop usando a instru\u00e7\u00e3o break ou seguir para a pr\u00f3xima itera\u00e7\u00e3o no loop usando a instru\u00e7\u00e3o continue . Voc\u00ea tamb\u00e9m pode sair de um loop foreach com a instru\u00e7\u00e3o goto , return ou throw . Se a instru\u00e7\u00e3o foreach for aplicada a null , uma NullReferenceException ser\u00e1 lan\u00e7ada. Se a cole\u00e7\u00e3o de origem da instru\u00e7\u00e3o foreach estiver vazia, o corpo do loop foreach n\u00e3o ser\u00e1 executado e ser\u00e1 ignorado. // Exemplo 1 // foreach, in var fibNumbers = new List < int > { 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 }; foreach ( int element in fibNumbers ) { Console . WriteLine ( element ); }","title":"foreach"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#while","text":"A qualquer momento dentro do bloco de instru\u00e7\u00f5es while, interrompa o loop usando a instru\u00e7\u00e3o break . Voc\u00ea pode seguir diretamente para a avalia\u00e7\u00e3o da express\u00e3o while usando a instru\u00e7\u00e3o continue . Se a express\u00e3o for avaliada como true , a execu\u00e7\u00e3o continuar\u00e1 na primeira instru\u00e7\u00e3o do loop. Caso contr\u00e1rio, a execu\u00e7\u00e3o continuar\u00e1 na primeira instru\u00e7\u00e3o ap\u00f3s o loop. Voc\u00ea tamb\u00e9m pode sair de um loop while com a instru\u00e7\u00e3o goto , return ou throw . // Exemplo 1 // while int n = 0 ; while ( n < 5 ) { Console . WriteLine ( n ); n ++; }","title":"while"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-de-salto","text":"Instru\u00e7\u00f5es de salto transferem o controle para outra se\u00e7\u00e3o de c\u00f3digo. Palavras-chave: break , continue , default , goto , return , yield // Exemplo 1 // goto switch ( n ) { case 1 : cost += 25 ; break ; case 2 : cost += 25 ; goto case 1 ; case 3 : cost += 50 ; goto case 1 ; default : Console . WriteLine ( \"Invalid selection.\" ); break ; } // Exemplo 1 // goto var achei = 5 ; if ( achei < 10 ) { goto Found ; } else { goto Finish ; } Found : Console . WriteLine ( \"Achei\" ); Finish : Console . WriteLine ( \"Fim\" ); // Saida: // Achei // Fim","title":"Instru\u00e7\u00f5es de salto"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#yield","text":"Quando voc\u00ea usa o yield (palavra-chave contextual em uma instru\u00e7\u00e3o), voc\u00ea indica que o m\u00e9todo, operador ou acessador de get no qual ele aparece \u00e9 um iterador. Usar yield para definir um iterador elimina a necessidade de uma classe adicional expl\u00edcita (a classe que mant\u00e9m o estado de uma enumera\u00e7\u00e3o) ao implementar o padr\u00e3o IEnumerable e IEnumerator para um tipo de cole\u00e7\u00e3o personalizado. Voc\u00ea usa uma instru\u00e7\u00e3o yield return para retornar cada elemento individualmente. A sequ\u00eancia retornada de um m\u00e9todo iterador pode ser consumida usando uma instru\u00e7\u00e3o foreach ou uma consulta LINQ. Cada itera\u00e7\u00e3o do loop foreach chama o m\u00e9todo iterador. Quando uma instru\u00e7\u00e3o yield return \u00e9 atingida no m\u00e9todo iterador, expression \u00e9 retornado e o local atual no c\u00f3digo \u00e9 retido. A execu\u00e7\u00e3o ser\u00e1 reiniciada desse local na pr\u00f3xima vez que a fun\u00e7\u00e3o iteradora for chamada. Voc\u00ea pode usar uma instru\u00e7\u00e3o yield break para terminar a itera\u00e7\u00e3o. O exemplo a seguir cont\u00e9m uma instru\u00e7\u00e3o yield return dentro de um loop for . Cada itera\u00e7\u00e3o do corpo da instru\u00e7\u00e3o foreach no m\u00e9todo Main cria uma chamada \u00e0 fun\u00e7\u00e3o iteradora Power . Cada chamada \u00e0 fun\u00e7\u00e3o iteradora prossegue para a pr\u00f3xima execu\u00e7\u00e3o da instru\u00e7\u00e3o yield return que ocorre durante a pr\u00f3xima itera\u00e7\u00e3o do loop for . O tipo de retorno do m\u00e9todo iterador \u00e9 IEnumerable que \u00e9 um tipo de interface de iterador. Quando o m\u00e9todo iterador \u00e9 chamado, ele retorna um objeto enumer\u00e1vel que cont\u00e9m as pot\u00eancias de um n\u00famero. public class PowersOf2 { static void Main () { // Exibe pot\u00eancias de 2 at\u00e9 o expoente de 8 foreach ( int i in Power ( 2 , 8 )) { Console . Write ( \"{0} \" , i ); } } public static IEnumerable < int > Power ( int number , int exponent ) { int result = 1 ; for ( int i = 0 ; i < exponent ; i ++) { result = result * number ; yield return result ; } } // Saida: 2 4 8 16 32 64 128 256 }","title":"yield"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-para-tratamento-de-excecoes","text":"Instru\u00e7\u00f5es para tratamento de exce\u00e7\u00f5es permitem que voc\u00ea se recupere normalmente de condi\u00e7\u00f5es excepcionais que ocorrem em tempo de execu\u00e7\u00e3o. Para mais informa\u00e7\u00f5es, consulte os seguintes t\u00f3picos: Palavras-chave: throw , try-catch , try-finally , try-catch-finally // Exemplo 1 // throw if ( index < 0 || index >= numbers . Length ) { throw new IndexOutOfRangeException (); } // Exemplo 2 // try, catch, throw try { return Value [ 0 ]; } catch ( NullReferenceException e ) { throw ; } // Exemplo 3 // try, catch, finally try { file . ReadBlock ( buffer , index , buffer . Length ); } catch ( System . IO . IOException e ) { Console . WriteLine ( \"Error reading from {0}. Message = {1}\" , path , e . Message ); } finally { if ( file != null ) { file . Close (); } }","title":"Instru\u00e7\u00f5es para tratamento de exce\u00e7\u00f5es"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-checked-e-unchecked","text":"As instru\u00e7\u00f5es checked e unchecked permitem que voc\u00ea especifique se opera\u00e7\u00f5es num\u00e9ricas podem causar um estouro quando o resultado for armazenado em uma vari\u00e1vel que \u00e9 muito pequena para conter o valor resultante. // Causes erro em tempo de compila\u00e7\u00e3o porque 2147483647 \u00e9 o limite para inteiros. int i1 = 2147483647 + 10 ; // Causa erro em tempo de execu\u00e7\u00e3o. int ten = 10 ; int i2 = 2147483647 + ten ; // Expres\u00e3o Checked. Console . WriteLine ( checked ( 2147483647 + ten )); // Bloco Checked. checked { int i3 = 2147483647 + ten ; Console . WriteLine ( i3 ); } A palavra-chave unchecked pode ser usada para impedir a verifica\u00e7\u00e3o de estouro. // Expres\u00e3o Unchecked. int1 = unchecked ( ConstantMax + 10 ); // Bloco Unchecked. unchecked { // N\u00e3o ocorrer\u00e1 erro de compila\u00e7\u00e3o, o resultado ser\u00e1 \"-2,147,483,639\" int1 = 2147483647 + 10 ; }","title":"Instru\u00e7\u00f5es checked e unchecked"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucao-await","text":"Se marcar um m\u00e9todo com o modificador async , voc\u00ea poder\u00e1 usar o operador await no m\u00e9todo. Quando o controle atinge uma express\u00e3o await no m\u00e9todo ass\u00edncrono, ele retorna para o chamador e o progresso no m\u00e9todo \u00e9 suspenso at\u00e9 a tarefa aguardada ser conclu\u00edda. Quando a tarefa for conclu\u00edda, a execu\u00e7\u00e3o poder\u00e1 ser retomada no m\u00e9todo.","title":"Instru\u00e7\u00e3o await"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucao-yield-return","text":"Um iterador realiza uma itera\u00e7\u00e3o personalizada em uma cole\u00e7\u00e3o, como uma lista ou uma matriz. Um iterador usa a instru\u00e7\u00e3o yield return para retornar um elemento de cada vez. Quando uma instru\u00e7\u00e3o yield return for atingida, o local atual no c\u00f3digo ser\u00e1 lembrado. A execu\u00e7\u00e3o ser\u00e1 reiniciada desse local quando o iterador for chamado na pr\u00f3xima vez.","title":"Instru\u00e7\u00e3o yield return"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucao-fixed","text":"A instru\u00e7\u00e3o fixed impede que o coletor de lixo fa\u00e7a a realoca\u00e7\u00e3o de uma vari\u00e1vel m\u00f3vel. A instru\u00e7\u00e3o fixed impede que o coletor de lixo fa\u00e7a a realoca\u00e7\u00e3o de uma vari\u00e1vel m\u00f3vel. A instru\u00e7\u00e3o fixed \u00e9 permitida somente em um contexto n\u00e3o seguro. Voc\u00ea tamb\u00e9m pode usar a palavra-chave fixed para criar buffers de tamanho fixo. A instru\u00e7\u00e3o fixed define um ponteiro para uma vari\u00e1vel gerenciada e \"fixa\" essa vari\u00e1vel durante a execu\u00e7\u00e3o da instru\u00e7\u00e3o. Os ponteiros m\u00f3veis gerenciados s\u00e3o \u00fateis apenas em um contexto fixed . Sem um contexto fixed , a coleta de lixo poderia realocar as vari\u00e1veis de forma imprevis\u00edvel. O compilador do C# s\u00f3 permite que voc\u00ea atribua um ponteiro a uma vari\u00e1vel gerenciada em uma instru\u00e7\u00e3o fixed . class Point { public int x ; public int y ; } unsafe private static void ModifyFixedStorage () { // A vari\u00e1vel pt \u00e9 uma vari\u00e1vel gerenciada, sujeita a coleta de lixo. Point pt = new Point (); // O uso de Fixed permite que o endere\u00e7o dos membros pt seja \"fixo\" e n\u00e3o ser\u00e1 realocado. fixed ( int * p = & pt . x ) { * p = 1 ; } }","title":"Instru\u00e7\u00e3o fixed"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucao-lock","text":"A instru\u00e7\u00e3o lock permite limitar o acesso a blocos de c\u00f3digo a apenas um thread por vez. A instru\u00e7\u00e3o lock obt\u00e9m o bloqueio de exclus\u00e3o m\u00fatua para um determinado objeto, executa um bloco de instru\u00e7\u00f5es e, em seguida, libera o bloqueio. Embora um bloqueio seja mantido, o thread que mant\u00e9m o bloqueio pode adquiri-lo novamente e liber\u00e1-lo. Qualquer outro thread \u00e9 impedido de adquirir o bloqueio e aguarda at\u00e9 que ele seja liberado. lock ( x ) { // Instru\u00e7\u00f5es... }","title":"Instru\u00e7\u00e3o lock"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucoes-rotuladas","text":"Voc\u00ea pode atribuir um r\u00f3tulo a uma instru\u00e7\u00e3o e, em seguida, usar a palavra-chave goto para ir diretamente para a instru\u00e7\u00e3o rotulada.","title":"Instru\u00e7\u00f5es rotuladas"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#instrucao-vazia","text":"A instru\u00e7\u00e3o vazia consiste em um \u00fanico ( ; ). Ela n\u00e3o faz nada e pode ser usada em locais em que uma instru\u00e7\u00e3o \u00e9 necess\u00e1ria, mas nenhuma a\u00e7\u00e3o precisa ser executada. void ProcessMessages () { while ( ProcessMessage ()) ; // Instru\u00e7\u00e3o vazia. } void F () { if ( done ) goto exit ; exit : ; // Instru\u00e7\u00e3o vazia. }","title":"Instru\u00e7\u00e3o vazia"},{"location":"dotnet/linguagem/instrucoes-e-expressoes-e-operadores/#operadores","text":"O C# oferece v\u00e1rios operadores predefinidos, compat\u00edveis com os tipos internos. Por exemplo, os operadores aritm\u00e9ticos executam opera\u00e7\u00f5es aritm\u00e9ticas com operandos num\u00e9ricos, j\u00e1 os operadores l\u00f3gicos boolianos executam opera\u00e7\u00f5es l\u00f3gicas com operandos bool. Determinados operadores podem ser sobrecarregados. Com a sobrecarga de operador, voc\u00ea pode especificar o comportamento do operador para os operandos de um tipo definido pelo usu\u00e1rio. Em uma express\u00e3o, a preced\u00eancia e a associa\u00e7\u00e3o dos operadores determinam a ordem na qual as opera\u00e7\u00f5es s\u00e3o executadas. Voc\u00ea pode usar par\u00eanteses para alterar a ordem de avalia\u00e7\u00e3o imposta pela prioridade e pela associa\u00e7\u00e3o dos operadores. Operadores Categoria ou nome x.y , x?.y , x?[y] , f(x) , a[i] , x++ , x-- , new , typeof , checked , unchecked , default , nameof , delegate , sizeof , stackalloc , x->y Prim\u00e1ria +x , -x , !x , ~x , ++x , --x , ^x , (T)x , await , &x , *x , true , false Un\u00e1rio X.. Y Intervalo x * y , x / y , x % y Multiplicativo x + y , x \u2013 y Aditiva < x < y , x >> y Turno x < y , x > y , x <= y , x >= y , is , as Teste de tipo e relacional x == y , x != y Igualit\u00e1rio x & y AND l\u00f3gico booliano ou AND l\u00f3gico bit a bit x ^ y XOR l\u00f3gico booliano ou XOR l\u00f3gico bit a bit x \\| y OR l\u00f3gico booliano ou OR l\u00f3gico bit a bit x && y AND condicional x \\|\\| y OR condicional x ?? y Operador de coalesc\u00eancia nula c ? t : f Operador condicional x = y , x += y , x -= y , x *= y , x /= y , x % = y , x &= y , x \\|= y , x ^ y , x <<= y , x >>= y , x ?? = y , => Declara\u00e7\u00e3o de atribui\u00e7\u00e3o e lambda Use () para alterar a ordem de avalia\u00e7\u00e3o imposta pela associa\u00e7\u00e3o de operador: int a = 13 / 5 / 2 ; int b = 13 / ( 5 / 2 ); Console . WriteLine ( $ \"a = {a}, b = {b}\" ); // sa\u00edda: a = 1, b = 6","title":"Operadores"},{"location":"dotnet/linguagem/introducao/","text":"Introdu\u00e7\u00e3o \u00b6 Introdu\u00e7\u00e3o Execu\u00e7\u00e3o do c\u00f3digo na CLR e o JIT Links Editores on-line C# \u00e9 uma linguagem de programa\u00e7\u00e3o, multiparadigma, de tipagem forte, desenvolvida pela Microsoft como parte da plataforma .NET . A sua sintaxe orientada a objetos foi baseada no C++ mas inclui muitas influ\u00eancias de outras linguagens de programa\u00e7\u00e3o, como Object Pascal e, principalmente, Java. O c\u00f3digo fonte \u00e9 compilado para Common Intermediate Language (CIL) que \u00e9 interpretado pela m\u00e1quina virtual Common Language Runtime (CLR). C# \u00e9 uma das linguagens projetadas para funcionar na Common Language Infrastructure (CLI) da plataforma .NET Framework. Execu\u00e7\u00e3o do c\u00f3digo na CLR e o JIT \u00b6 Para executarmos uma aplica\u00e7\u00e3o C#, precisamos passar o c\u00f3digo CIL do programa para a CLR, a m\u00e1quina virtual do .Net. A CLR por sua vez precisa executar o c\u00f3digo da aplica\u00e7\u00e3o no sistema operacional do usu\u00e1rio e, para isso, precisa emitir o c\u00f3digo de m\u00e1quina correto para o ambiente em que o programa est\u00e1 sendo executado. Mas a CLR n\u00e3o interpreta o CIL do programa, isso seria muito lento, ao inv\u00e9s disso, quando o programa C# \u00e9 carregado na mem\u00f3ria, a CLR converte automaticamente o c\u00f3digo CIL para c\u00f3digo de m\u00e1quina, esse processo \u00e9 feito por um compilador Just in Time (JIT) da CLR. Esse carregamento utilizando o JIT faz com que o c\u00f3digo escrito na linguagem C# execute com o desempenho m\u00e1ximo, o mesmo de um programa escrito em linguagens que compilam diretamente para o c\u00f3digo de m\u00e1quina, mas com a vantagem de executar no ambiente integrado do .Net. Links \u00b6 https://pt.wikipedia.org/wiki/C_Sharp https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference https://docs.microsoft.com/pt-br/dotnet/csharp/whats-new Editores on-line \u00b6 https://dotnetfiddle.net","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/introducao/#introducao","text":"Introdu\u00e7\u00e3o Execu\u00e7\u00e3o do c\u00f3digo na CLR e o JIT Links Editores on-line C# \u00e9 uma linguagem de programa\u00e7\u00e3o, multiparadigma, de tipagem forte, desenvolvida pela Microsoft como parte da plataforma .NET . A sua sintaxe orientada a objetos foi baseada no C++ mas inclui muitas influ\u00eancias de outras linguagens de programa\u00e7\u00e3o, como Object Pascal e, principalmente, Java. O c\u00f3digo fonte \u00e9 compilado para Common Intermediate Language (CIL) que \u00e9 interpretado pela m\u00e1quina virtual Common Language Runtime (CLR). C# \u00e9 uma das linguagens projetadas para funcionar na Common Language Infrastructure (CLI) da plataforma .NET Framework.","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/introducao/#execucao-do-codigo-na-clr-e-o-jit","text":"Para executarmos uma aplica\u00e7\u00e3o C#, precisamos passar o c\u00f3digo CIL do programa para a CLR, a m\u00e1quina virtual do .Net. A CLR por sua vez precisa executar o c\u00f3digo da aplica\u00e7\u00e3o no sistema operacional do usu\u00e1rio e, para isso, precisa emitir o c\u00f3digo de m\u00e1quina correto para o ambiente em que o programa est\u00e1 sendo executado. Mas a CLR n\u00e3o interpreta o CIL do programa, isso seria muito lento, ao inv\u00e9s disso, quando o programa C# \u00e9 carregado na mem\u00f3ria, a CLR converte automaticamente o c\u00f3digo CIL para c\u00f3digo de m\u00e1quina, esse processo \u00e9 feito por um compilador Just in Time (JIT) da CLR. Esse carregamento utilizando o JIT faz com que o c\u00f3digo escrito na linguagem C# execute com o desempenho m\u00e1ximo, o mesmo de um programa escrito em linguagens que compilam diretamente para o c\u00f3digo de m\u00e1quina, mas com a vantagem de executar no ambiente integrado do .Net.","title":"Execu\u00e7\u00e3o do c\u00f3digo na CLR e o JIT"},{"location":"dotnet/linguagem/introducao/#links","text":"https://pt.wikipedia.org/wiki/C_Sharp https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference https://docs.microsoft.com/pt-br/dotnet/csharp/whats-new","title":"Links"},{"location":"dotnet/linguagem/introducao/#editores-on-line","text":"https://dotnetfiddle.net","title":"Editores on-line"},{"location":"dotnet/linguagem/lambda/","text":"Lambda \u00b6 Lambda Introdu\u00e7\u00e3o Lambdas de express\u00e3o Lambdas de instru\u00e7\u00e3o Lambdas ass\u00edncronos Express\u00f5es lambda e tuplas Introdu\u00e7\u00e3o \u00b6 Uma express\u00e3o Lambda \u00e9 uma fun\u00e7\u00e3o an\u00f4nima que voc\u00ea pode usar para criar delegados ou tipos de \u00e1rvore de express\u00e3o. Ao usar express\u00f5es lambda, voc\u00ea pode escrever fun\u00e7\u00f5es locais que podem ser passadas como argumentos ou retornadas como o valor de chamadas de fun\u00e7\u00e3o. Essas express\u00f5es s\u00e3o particularmente \u00fateis para escrever express\u00f5es de consulta LINQ . Para facilitar o entendimento, a express\u00e3o lambda \u00e9 uma esp\u00e9cie de fun\u00e7\u00e3o, por\u00e9m sem nome. Ela realiza c\u00e1lculos, filtros e retorna valores ou cole\u00e7\u00f5es de valores. Use o operador de declara\u00e7\u00e3o lambda => para separar a lista de par\u00e2metros de lambda do corpo. Para criar uma express\u00e3o lambda, especifique os par\u00e2metros de entrada (se houver) no lado esquerdo do operador lambda e uma express\u00e3o ou um bloco de instru\u00e7\u00e3o do outro lado. Qualquer express\u00e3o lambda pode ser convertida para um tipo delegado. O tipo delegado no qual uma express\u00e3o lambda pode ser convertida \u00e9 definido pelos tipos de par\u00e2metros e pelo valor retornado. Se uma express\u00e3o lambda n\u00e3o retornar um valor, ela poder\u00e1 ser convertida em um dos tipos delegados Action ; caso contr\u00e1rio, ela poder\u00e1 ser convertida em um dos tipos delegados Func . Por exemplo, uma express\u00e3o lambda que tem dois par\u00e2metros e n\u00e3o retorna nenhum valor pode ser convertida em um delegado Action<T1,T2> . Uma express\u00e3o lambda que tem um par\u00e2metro e retorna um valor pode ser convertida em um delegado Func<T, TResult> . No seguinte exemplo, a express\u00e3o lambda x => x * x , que especifica um par\u00e2metro chamado x e retorna o valor de x ao quadrado, \u00e9 atribu\u00edda a uma vari\u00e1vel de um tipo delegado: Func < int , int > square = x => x * x ; Console . WriteLine ( square ( 5 )); // Saida: // > 25 As express\u00f5es lambdas tamb\u00e9m podem ser convertidas nos tipos de \u00e1rvore de express\u00e3o, como mostra o seguinte exemplo: System . Linq . Expressions . Expression < Func < int , int >> e = x => x * x ; Console . WriteLine ( e ); // saida: // > x => (x * x) Use express\u00f5es lambda em qualquer c\u00f3digo que exija inst\u00e2ncias de tipos delegados ou \u00e1rvores de express\u00e3o, como por exemplo, como um argumento ao m\u00e9todo Task.Run(Action) para passar o c\u00f3digo que deve ser executado em segundo plano. Use tamb\u00e9m express\u00f5es lambda ao escrever express\u00f5es de consulta LINQ, como mostra o seguinte exemplo: int [] numbers = { 2 , 3 , 4 , 5 }; var squaredNumbers = numbers . Select ( x => x * x ); Console . WriteLine ( string . Join ( \" \" , squaredNumbers )); // Saida: // > 4 9 16 25 Lambdas de express\u00e3o \u00b6 Formato: (< parametros >) => express\u00e3o Exemplos: // Sem par\u00e2metros de entrada Action line = () => Console . WriteLine (); // Dois ou mais par\u00e2metros de entrada // O \u00faltimo par\u00e2metro \u00e9 sempre o retorno Func < int , int , bool > isIgual = ( x , y ) => x == y ; // Especificando os tipos de entrada Func < int , string , bool > isMaior = ( int x , string s ) => s . Length > x ; Lambdas de instru\u00e7\u00e3o \u00b6 Formato: (< parametros ) => { < sequ\u00eancia de comandos > } Exemplo: Action < string > dizer = name => { string msg = $ \"Hello {name}!\" ; Console . WriteLine ( msg ); }; dizer ( \"World\" ); // Saida: // > Hello World! Lambdas ass\u00edncronos \u00b6 Exemplo: public partial class Form1 : Form { public Form1 () { InitializeComponent (); button1 . Click += async ( sender , e ) => { await ExemploAsync (); textBox1 . Text += \"Cliquei!\" ; }; } private async Task ExemploAsync () { await Task . Delay ( 1000 ); } } Express\u00f5es lambda e tuplas \u00b6 Normalmente, os campos de uma tupla s\u00e3o chamados de Item1, Item2, etc. // Par\u00e2metros de entrada e tipos de sa\u00eddas Func <( int , int , int ), ( int , int , int )> dobrar = ns => ( 2 * ns . Item1 , 2 * ns . Item2 , 2 * ns . Item3 ); var numeros = ( 2 , 3 , 4 ); var dobro = dobrar ( numeros ); Console . WriteLine ( $ \"O conjunto {numeros} e o dobro: {dobro}\" ); // Saida: // O conjunto (2, 3, 4) e o dobro: (4, 6, 8) Campos nomeados: // Par\u00e2metros de entrada e tipos de sa\u00eddas Func <( int n1 , int n2 , int n3 ), ( int , int , int )> dobrar = ns => ( 2 * ns . n1 , 2 * ns . n2 , 2 * ns . n3 ); var numeros = ( 2 , 3 , 4 ); var dobro = dobrar ( numeros ); Console . WriteLine ( $ \"O conjunto {numeros} e o dobro: {dobro}\" ); // Saida: // O conjunto (2, 3, 4) e o dobro: (4, 6, 8)","title":"Lambda"},{"location":"dotnet/linguagem/lambda/#lambda","text":"Lambda Introdu\u00e7\u00e3o Lambdas de express\u00e3o Lambdas de instru\u00e7\u00e3o Lambdas ass\u00edncronos Express\u00f5es lambda e tuplas","title":"Lambda"},{"location":"dotnet/linguagem/lambda/#introducao","text":"Uma express\u00e3o Lambda \u00e9 uma fun\u00e7\u00e3o an\u00f4nima que voc\u00ea pode usar para criar delegados ou tipos de \u00e1rvore de express\u00e3o. Ao usar express\u00f5es lambda, voc\u00ea pode escrever fun\u00e7\u00f5es locais que podem ser passadas como argumentos ou retornadas como o valor de chamadas de fun\u00e7\u00e3o. Essas express\u00f5es s\u00e3o particularmente \u00fateis para escrever express\u00f5es de consulta LINQ . Para facilitar o entendimento, a express\u00e3o lambda \u00e9 uma esp\u00e9cie de fun\u00e7\u00e3o, por\u00e9m sem nome. Ela realiza c\u00e1lculos, filtros e retorna valores ou cole\u00e7\u00f5es de valores. Use o operador de declara\u00e7\u00e3o lambda => para separar a lista de par\u00e2metros de lambda do corpo. Para criar uma express\u00e3o lambda, especifique os par\u00e2metros de entrada (se houver) no lado esquerdo do operador lambda e uma express\u00e3o ou um bloco de instru\u00e7\u00e3o do outro lado. Qualquer express\u00e3o lambda pode ser convertida para um tipo delegado. O tipo delegado no qual uma express\u00e3o lambda pode ser convertida \u00e9 definido pelos tipos de par\u00e2metros e pelo valor retornado. Se uma express\u00e3o lambda n\u00e3o retornar um valor, ela poder\u00e1 ser convertida em um dos tipos delegados Action ; caso contr\u00e1rio, ela poder\u00e1 ser convertida em um dos tipos delegados Func . Por exemplo, uma express\u00e3o lambda que tem dois par\u00e2metros e n\u00e3o retorna nenhum valor pode ser convertida em um delegado Action<T1,T2> . Uma express\u00e3o lambda que tem um par\u00e2metro e retorna um valor pode ser convertida em um delegado Func<T, TResult> . No seguinte exemplo, a express\u00e3o lambda x => x * x , que especifica um par\u00e2metro chamado x e retorna o valor de x ao quadrado, \u00e9 atribu\u00edda a uma vari\u00e1vel de um tipo delegado: Func < int , int > square = x => x * x ; Console . WriteLine ( square ( 5 )); // Saida: // > 25 As express\u00f5es lambdas tamb\u00e9m podem ser convertidas nos tipos de \u00e1rvore de express\u00e3o, como mostra o seguinte exemplo: System . Linq . Expressions . Expression < Func < int , int >> e = x => x * x ; Console . WriteLine ( e ); // saida: // > x => (x * x) Use express\u00f5es lambda em qualquer c\u00f3digo que exija inst\u00e2ncias de tipos delegados ou \u00e1rvores de express\u00e3o, como por exemplo, como um argumento ao m\u00e9todo Task.Run(Action) para passar o c\u00f3digo que deve ser executado em segundo plano. Use tamb\u00e9m express\u00f5es lambda ao escrever express\u00f5es de consulta LINQ, como mostra o seguinte exemplo: int [] numbers = { 2 , 3 , 4 , 5 }; var squaredNumbers = numbers . Select ( x => x * x ); Console . WriteLine ( string . Join ( \" \" , squaredNumbers )); // Saida: // > 4 9 16 25","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/lambda/#lambdas-de-expressao","text":"Formato: (< parametros >) => express\u00e3o Exemplos: // Sem par\u00e2metros de entrada Action line = () => Console . WriteLine (); // Dois ou mais par\u00e2metros de entrada // O \u00faltimo par\u00e2metro \u00e9 sempre o retorno Func < int , int , bool > isIgual = ( x , y ) => x == y ; // Especificando os tipos de entrada Func < int , string , bool > isMaior = ( int x , string s ) => s . Length > x ;","title":"Lambdas de express\u00e3o"},{"location":"dotnet/linguagem/lambda/#lambdas-de-instrucao","text":"Formato: (< parametros ) => { < sequ\u00eancia de comandos > } Exemplo: Action < string > dizer = name => { string msg = $ \"Hello {name}!\" ; Console . WriteLine ( msg ); }; dizer ( \"World\" ); // Saida: // > Hello World!","title":"Lambdas de instru\u00e7\u00e3o"},{"location":"dotnet/linguagem/lambda/#lambdas-assincronos","text":"Exemplo: public partial class Form1 : Form { public Form1 () { InitializeComponent (); button1 . Click += async ( sender , e ) => { await ExemploAsync (); textBox1 . Text += \"Cliquei!\" ; }; } private async Task ExemploAsync () { await Task . Delay ( 1000 ); } }","title":"Lambdas ass\u00edncronos"},{"location":"dotnet/linguagem/lambda/#expressoes-lambda-e-tuplas","text":"Normalmente, os campos de uma tupla s\u00e3o chamados de Item1, Item2, etc. // Par\u00e2metros de entrada e tipos de sa\u00eddas Func <( int , int , int ), ( int , int , int )> dobrar = ns => ( 2 * ns . Item1 , 2 * ns . Item2 , 2 * ns . Item3 ); var numeros = ( 2 , 3 , 4 ); var dobro = dobrar ( numeros ); Console . WriteLine ( $ \"O conjunto {numeros} e o dobro: {dobro}\" ); // Saida: // O conjunto (2, 3, 4) e o dobro: (4, 6, 8) Campos nomeados: // Par\u00e2metros de entrada e tipos de sa\u00eddas Func <( int n1 , int n2 , int n3 ), ( int , int , int )> dobrar = ns => ( 2 * ns . n1 , 2 * ns . n2 , 2 * ns . n3 ); var numeros = ( 2 , 3 , 4 ); var dobro = dobrar ( numeros ); Console . WriteLine ( $ \"O conjunto {numeros} e o dobro: {dobro}\" ); // Saida: // O conjunto (2, 3, 4) e o dobro: (4, 6, 8)","title":"Express\u00f5es lambda e tuplas"},{"location":"dotnet/linguagem/programacao-assincrona/","text":"Programa\u00e7\u00e3o ass\u00edncrona \u00b6 Programa\u00e7\u00e3o ass\u00edncrona Introdu\u00e7\u00e3o Tipos de retorno Async void Bloqueio WhenAll WhenAny Monitora\u00e7\u00e3o de estado Introdu\u00e7\u00e3o \u00b6 Se voc\u00ea tiver qualquer necessidade vinculada \u00e0 E/S (como a solicita\u00e7\u00e3o de dados de uma rede ou o acesso a um banco de dados), voc\u00ea desejar\u00e1 usar a programa\u00e7\u00e3o ass\u00edncrona. Voc\u00ea tamb\u00e9m pode ter c\u00f3digo vinculado \u00e0 CPU, como a execu\u00e7\u00e3o de um c\u00e1lculo dispendioso, que tamb\u00e9m \u00e9 um bom cen\u00e1rio para escrever c\u00f3digo ass\u00edncrono. O C# tem um modelo de programa\u00e7\u00e3o ass\u00edncrono em n\u00edvel de linguagem que permite escrever facilmente o c\u00f3digo ass\u00edncrono sem precisar manipular retornos de chamada ou estar em conformidade com uma biblioteca que d\u00e1 suporte \u00e0 assincronia. Ele segue o que \u00e9 conhecido como TAP - Task-based Asynchronous Pattern (Padr\u00e3o Ass\u00edncrono Baseado em Tarefa). O n\u00facleo da programa\u00e7\u00e3o ass\u00edncrona s\u00e3o os objetos Task e Task<T> , que modelam o trabalho que est\u00e1 sendo feito em segundo plano. Eles t\u00eam suporte das palavras-chave async e await . O modelo \u00e9 bastante simples na maioria dos casos: O c\u00f3digo ass\u00edncrono pode ser usado tanto para o c\u00f3digo vinculado \u00e0 E/S quanto vinculado \u00e0 CPU, mas de maneira diferente para cada cen\u00e1rio. Para o c\u00f3digo vinculado \u00e0 E/S, voc\u00ea espera ( await ) uma opera\u00e7\u00e3o que retorna uma tarefa ( Task ou Task<T> ) dentro de um m\u00e9todo ass\u00edncrono ( async ). Para o c\u00f3digo vinculado \u00e0 CPU, voc\u00ea espera ( await ) uma opera\u00e7\u00e3o que \u00e9 iniciada em um thread em segundo plano com o m\u00e9todo Task.Run . A palavra-chave async transforma um m\u00e9todo em um m\u00e9todo ass\u00edncrono, o que permite que voc\u00ea use a palavra-chave await em seu corpo. Quando a palavra-chave await \u00e9 aplicada, ela suspende o m\u00e9todo de chamada e transfere o controle de volta ao seu chamador at\u00e9 que a tarefa em espera seja conclu\u00edda. Segundo a conven\u00e7\u00e3o usada no .NET, voc\u00ea deve adicionar **\"Async\"** como o sufixo de cada nome de m\u00e9todo ass\u00edncrono que escrever. using System ; using System.Net.Http ; using System.Threading.Tasks ; namespace exemplo_async_await { class Program { private const string URL = \"https://docs.microsoft.com/en-us/dotnet/csharp/csharp\" ; static void Main ( string [] args ) { TrabalhoSincrono (); var tarefa = TrabalhoAssincrono (); TrabalhoAposEspera (); // Bloqueia o thread principal, de modo que o m\u00e9todo \"TrabalhoAssincrono()\" possa concluir // a execu\u00e7\u00e3o antes do encerramento do aplicativo. // Caso contr\u00e1rio os passos 4, 5 e 6 n\u00e3o seriam executados at\u00e9 fim de execu\u00e7\u00e3o do sistema. tarefa . Wait (); } public static void TrabalhoSincrono () { Console . WriteLine ( \"1. Trabalho s\u00edncrono\" ); } static async Task TrabalhoAssincrono () { Console . WriteLine ( \"2. Trabalho ass\u00edncrono!\" ); // Eperando o m\u00e9todo Async GetStringAsync await GetStringAsync (); } static async Task GetStringAsync () { using ( var httpClient = new HttpClient ()) { Console . WriteLine ( \"3. Esperando o resultado de GetStringAsync\" ); // Espera GetStringAsync (Task<string>) completar string result = await httpClient . GetStringAsync ( URL ); // Para as linha abaixo, a execu\u00e7\u00e3oo ser\u00e1 retomada assim que as espera for conclu\u00edda. Console . WriteLine ( \"4. A tarefa em espera foi completada\" ); Console . WriteLine ( $ \"5. O tamanho do http Get para {URL}\" ); Console . WriteLine ( $ \"6. {result.Length} caracteres\" ); } } static void TrabalhoAposEspera () { // Executa o trabalho enquanto aguarda a conclus\u00e3o da Tarefa ass\u00edncrona Console . WriteLine ( \"7. Trabalho enquanto aguardamos a conclus\u00e3o da tarefa ass\u00edncrona\" ); for ( var i = 0 ; i <= 5 ; i ++) { for ( var j = i ; j <= 5 ; j ++) { Console . Write ( \"*\" ); } Console . WriteLine (); } } } } // Saida // > 1. Trabalho s\u00edncrono // > 2. Trabalho ass\u00edncrono! // > 3. Esperando o resultado de GetStringAsync // > 7. Trabalho enquanto aguardamos a conclus\u00e3o da tarefa ass\u00edncrona // > ****** // > ***** // > **** // > *** // > ** // > * // > 4. A tarefa em espera foi completada // > 5. O tamanho do http Get para https://docs.microsoft.com/en-us/dotnet/csharp/csharp // > 6. 40165 caracteres Outro exemplo, mostrando o fluxo de funcionamento: ![exemplo-fluxo-assincrono](_programacao-assincrona/exemplo-fluxo-assincrono.png) Tipos de retorno \u00b6 M\u00e9todos ass\u00edncronos podem conter os seguintes tipos de retorno: Task<TResult> : para um m\u00e9todo ass\u00edncrono que retorna um valor. Task : para um m\u00e9todo ass\u00edncrono que executa uma opera\u00e7\u00e3o, mas n\u00e3o retorna nenhum valor. void : para um manipulador de eventos. Desde o C# 7.0 , qualquer tipo que tenha um m\u00e9todo acess\u00edvel GetAwaiter . O objeto retornado pelo m\u00e9todo GetAwaiter deve implementar a interface System.Runtime.CompilerServices.ICriticalNotifyCompletion . Veja mais Async void \u00b6 Async void s\u00f3 deve ser usado para manipuladores de eventos. O async void \u00e9 a \u00fanica maneira de permitir que os manipuladores de eventos ass\u00edncronos trabalhem, pois os eventos n\u00e3o t\u00eam tipos de retorno (portanto, n\u00e3o podem fazer uso de Task e Task<T> ). Qualquer outro uso de async void n\u00e3o segue o modelo TAP e pode ser um desafio utiliz\u00e1-lo, como: As exce\u00e7\u00f5es lan\u00e7adas em um m\u00e9todo async void n\u00e3o podem ser capturadas fora desse m\u00e9todo. Os m\u00e9todos async void s\u00e3o muito dif\u00edceis de testar. Os m\u00e9todos async void poder\u00e3o causar efeitos colaterais indesejados se o chamador n\u00e3o estiver esperando que eles sejam ass\u00edncronos. Bloqueio \u00b6 C\u00f3digo que bloqueia a thread atual como um meio de aguardar a conclus\u00e3o de uma tarefa pode resultar em deadlocks e threads de contexto bloqueados e pode exigir tratamento de erros significativamente mais complexo. A tabela a seguir fornece diretrizes de como lidar com a espera de tarefas de uma forma sem bloqueio: Use isto... Em vez disto... Quando desejar fazer isso await Task.Wait ou Task.Result Recupera\u00e7\u00e3o do resultado de uma tarefa em segundo plano await Task.WhenAny Task.WaitAny Aguardar a conclus\u00e3o de qualquer tarefa await Task.WhenAll Task.WaitAll Aguardar a conclus\u00e3o de todas as tarefas await Task.Delay Thread.Sleep Aguardar por um per\u00edodo de tempo Veja mais WhenAll \u00b6 Retorna um Task que \u00e9 conclu\u00eddo ao final de todas as tarefas na lista de argumentos: await Task . WhenAll ( eggTask , baconTask , toastTask ); Console . WriteLine ( \"eggs are ready\" ); Console . WriteLine ( \"bacon is ready\" ); Console . WriteLine ( \"toast is ready\" ); Console . WriteLine ( \"Breakfast is ready!\" ); WhenAny \u00b6 Retorna uma Task<Task> que \u00e9 conclu\u00edda quando qualquer um dos argumentos \u00e9 conclu\u00eddo. Voc\u00ea pode aguardar a tarefa retornada, sabendo que ela j\u00e1 foi conclu\u00edda. O c\u00f3digo a seguir mostra como voc\u00ea poderia usar WhenAny para aguardar a primeira tarefa concluir e, em seguida, processar seu resultado. Depois de processar o resultado da tarefa conclu\u00edda, voc\u00ea remove essa tarefa conclu\u00edda da lista de tarefas passada para WhenAny . var allTasks = new List < Task >{ eggsTask , baconTask , toastTask }; while ( allTasks . Any ()) { Task finished = await Task . WhenAny ( allTasks ); if ( finished == eggsTask ) { Console . WriteLine ( \"eggs are ready\" ); } else if ( finished == baconTask ) { Console . WriteLine ( \"bacon is ready\" ); } else if ( finished == toastTask ) { Console . WriteLine ( \"toast is ready\" ); } allTasks . Remove ( finished ); } Console . WriteLine ( \"Breakfast is ready!\" ); Monitora\u00e7\u00e3o de estado \u00b6 Devemos escrever c\u00f3digo que aguarda tarefas de uma maneira sem bloqueio. N\u00e3o depender do estado de objetos globais ou da execu\u00e7\u00e3o de determinados m\u00e9todos. Em vez disso, depender apenas dos valores retornados dos m\u00e9todos. Por qu\u00ea? Ser\u00e1 mais f\u00e1cil raciocinar sobre o c\u00f3digo. O c\u00f3digo ser\u00e1 mais f\u00e1cil de testar. Misturar c\u00f3digo ass\u00edncrono e s\u00edncrono ser\u00e1 muito mais simples. As condi\u00e7\u00f5es de corrida poder\u00e3o, normalmente, ser completamente evitadas. Dependendo dos valores retornados, a coordena\u00e7\u00e3o de c\u00f3digo ass\u00edncrono se tornar\u00e1 simples. Funciona muito bem com a inje\u00e7\u00e3o de depend\u00eancia.","title":"Programa\u00e7\u00e3o ass\u00edncrona"},{"location":"dotnet/linguagem/programacao-assincrona/#programacao-assincrona","text":"Programa\u00e7\u00e3o ass\u00edncrona Introdu\u00e7\u00e3o Tipos de retorno Async void Bloqueio WhenAll WhenAny Monitora\u00e7\u00e3o de estado","title":"Programa\u00e7\u00e3o ass\u00edncrona"},{"location":"dotnet/linguagem/programacao-assincrona/#introducao","text":"Se voc\u00ea tiver qualquer necessidade vinculada \u00e0 E/S (como a solicita\u00e7\u00e3o de dados de uma rede ou o acesso a um banco de dados), voc\u00ea desejar\u00e1 usar a programa\u00e7\u00e3o ass\u00edncrona. Voc\u00ea tamb\u00e9m pode ter c\u00f3digo vinculado \u00e0 CPU, como a execu\u00e7\u00e3o de um c\u00e1lculo dispendioso, que tamb\u00e9m \u00e9 um bom cen\u00e1rio para escrever c\u00f3digo ass\u00edncrono. O C# tem um modelo de programa\u00e7\u00e3o ass\u00edncrono em n\u00edvel de linguagem que permite escrever facilmente o c\u00f3digo ass\u00edncrono sem precisar manipular retornos de chamada ou estar em conformidade com uma biblioteca que d\u00e1 suporte \u00e0 assincronia. Ele segue o que \u00e9 conhecido como TAP - Task-based Asynchronous Pattern (Padr\u00e3o Ass\u00edncrono Baseado em Tarefa). O n\u00facleo da programa\u00e7\u00e3o ass\u00edncrona s\u00e3o os objetos Task e Task<T> , que modelam o trabalho que est\u00e1 sendo feito em segundo plano. Eles t\u00eam suporte das palavras-chave async e await . O modelo \u00e9 bastante simples na maioria dos casos: O c\u00f3digo ass\u00edncrono pode ser usado tanto para o c\u00f3digo vinculado \u00e0 E/S quanto vinculado \u00e0 CPU, mas de maneira diferente para cada cen\u00e1rio. Para o c\u00f3digo vinculado \u00e0 E/S, voc\u00ea espera ( await ) uma opera\u00e7\u00e3o que retorna uma tarefa ( Task ou Task<T> ) dentro de um m\u00e9todo ass\u00edncrono ( async ). Para o c\u00f3digo vinculado \u00e0 CPU, voc\u00ea espera ( await ) uma opera\u00e7\u00e3o que \u00e9 iniciada em um thread em segundo plano com o m\u00e9todo Task.Run . A palavra-chave async transforma um m\u00e9todo em um m\u00e9todo ass\u00edncrono, o que permite que voc\u00ea use a palavra-chave await em seu corpo. Quando a palavra-chave await \u00e9 aplicada, ela suspende o m\u00e9todo de chamada e transfere o controle de volta ao seu chamador at\u00e9 que a tarefa em espera seja conclu\u00edda. Segundo a conven\u00e7\u00e3o usada no .NET, voc\u00ea deve adicionar **\"Async\"** como o sufixo de cada nome de m\u00e9todo ass\u00edncrono que escrever. using System ; using System.Net.Http ; using System.Threading.Tasks ; namespace exemplo_async_await { class Program { private const string URL = \"https://docs.microsoft.com/en-us/dotnet/csharp/csharp\" ; static void Main ( string [] args ) { TrabalhoSincrono (); var tarefa = TrabalhoAssincrono (); TrabalhoAposEspera (); // Bloqueia o thread principal, de modo que o m\u00e9todo \"TrabalhoAssincrono()\" possa concluir // a execu\u00e7\u00e3o antes do encerramento do aplicativo. // Caso contr\u00e1rio os passos 4, 5 e 6 n\u00e3o seriam executados at\u00e9 fim de execu\u00e7\u00e3o do sistema. tarefa . Wait (); } public static void TrabalhoSincrono () { Console . WriteLine ( \"1. Trabalho s\u00edncrono\" ); } static async Task TrabalhoAssincrono () { Console . WriteLine ( \"2. Trabalho ass\u00edncrono!\" ); // Eperando o m\u00e9todo Async GetStringAsync await GetStringAsync (); } static async Task GetStringAsync () { using ( var httpClient = new HttpClient ()) { Console . WriteLine ( \"3. Esperando o resultado de GetStringAsync\" ); // Espera GetStringAsync (Task<string>) completar string result = await httpClient . GetStringAsync ( URL ); // Para as linha abaixo, a execu\u00e7\u00e3oo ser\u00e1 retomada assim que as espera for conclu\u00edda. Console . WriteLine ( \"4. A tarefa em espera foi completada\" ); Console . WriteLine ( $ \"5. O tamanho do http Get para {URL}\" ); Console . WriteLine ( $ \"6. {result.Length} caracteres\" ); } } static void TrabalhoAposEspera () { // Executa o trabalho enquanto aguarda a conclus\u00e3o da Tarefa ass\u00edncrona Console . WriteLine ( \"7. Trabalho enquanto aguardamos a conclus\u00e3o da tarefa ass\u00edncrona\" ); for ( var i = 0 ; i <= 5 ; i ++) { for ( var j = i ; j <= 5 ; j ++) { Console . Write ( \"*\" ); } Console . WriteLine (); } } } } // Saida // > 1. Trabalho s\u00edncrono // > 2. Trabalho ass\u00edncrono! // > 3. Esperando o resultado de GetStringAsync // > 7. Trabalho enquanto aguardamos a conclus\u00e3o da tarefa ass\u00edncrona // > ****** // > ***** // > **** // > *** // > ** // > * // > 4. A tarefa em espera foi completada // > 5. O tamanho do http Get para https://docs.microsoft.com/en-us/dotnet/csharp/csharp // > 6. 40165 caracteres Outro exemplo, mostrando o fluxo de funcionamento: ![exemplo-fluxo-assincrono](_programacao-assincrona/exemplo-fluxo-assincrono.png)","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/programacao-assincrona/#tipos-de-retorno","text":"M\u00e9todos ass\u00edncronos podem conter os seguintes tipos de retorno: Task<TResult> : para um m\u00e9todo ass\u00edncrono que retorna um valor. Task : para um m\u00e9todo ass\u00edncrono que executa uma opera\u00e7\u00e3o, mas n\u00e3o retorna nenhum valor. void : para um manipulador de eventos. Desde o C# 7.0 , qualquer tipo que tenha um m\u00e9todo acess\u00edvel GetAwaiter . O objeto retornado pelo m\u00e9todo GetAwaiter deve implementar a interface System.Runtime.CompilerServices.ICriticalNotifyCompletion . Veja mais","title":"Tipos de retorno"},{"location":"dotnet/linguagem/programacao-assincrona/#async-void","text":"Async void s\u00f3 deve ser usado para manipuladores de eventos. O async void \u00e9 a \u00fanica maneira de permitir que os manipuladores de eventos ass\u00edncronos trabalhem, pois os eventos n\u00e3o t\u00eam tipos de retorno (portanto, n\u00e3o podem fazer uso de Task e Task<T> ). Qualquer outro uso de async void n\u00e3o segue o modelo TAP e pode ser um desafio utiliz\u00e1-lo, como: As exce\u00e7\u00f5es lan\u00e7adas em um m\u00e9todo async void n\u00e3o podem ser capturadas fora desse m\u00e9todo. Os m\u00e9todos async void s\u00e3o muito dif\u00edceis de testar. Os m\u00e9todos async void poder\u00e3o causar efeitos colaterais indesejados se o chamador n\u00e3o estiver esperando que eles sejam ass\u00edncronos.","title":"Async void"},{"location":"dotnet/linguagem/programacao-assincrona/#bloqueio","text":"C\u00f3digo que bloqueia a thread atual como um meio de aguardar a conclus\u00e3o de uma tarefa pode resultar em deadlocks e threads de contexto bloqueados e pode exigir tratamento de erros significativamente mais complexo. A tabela a seguir fornece diretrizes de como lidar com a espera de tarefas de uma forma sem bloqueio: Use isto... Em vez disto... Quando desejar fazer isso await Task.Wait ou Task.Result Recupera\u00e7\u00e3o do resultado de uma tarefa em segundo plano await Task.WhenAny Task.WaitAny Aguardar a conclus\u00e3o de qualquer tarefa await Task.WhenAll Task.WaitAll Aguardar a conclus\u00e3o de todas as tarefas await Task.Delay Thread.Sleep Aguardar por um per\u00edodo de tempo Veja mais","title":"Bloqueio"},{"location":"dotnet/linguagem/programacao-assincrona/#whenall","text":"Retorna um Task que \u00e9 conclu\u00eddo ao final de todas as tarefas na lista de argumentos: await Task . WhenAll ( eggTask , baconTask , toastTask ); Console . WriteLine ( \"eggs are ready\" ); Console . WriteLine ( \"bacon is ready\" ); Console . WriteLine ( \"toast is ready\" ); Console . WriteLine ( \"Breakfast is ready!\" );","title":"WhenAll"},{"location":"dotnet/linguagem/programacao-assincrona/#whenany","text":"Retorna uma Task<Task> que \u00e9 conclu\u00edda quando qualquer um dos argumentos \u00e9 conclu\u00eddo. Voc\u00ea pode aguardar a tarefa retornada, sabendo que ela j\u00e1 foi conclu\u00edda. O c\u00f3digo a seguir mostra como voc\u00ea poderia usar WhenAny para aguardar a primeira tarefa concluir e, em seguida, processar seu resultado. Depois de processar o resultado da tarefa conclu\u00edda, voc\u00ea remove essa tarefa conclu\u00edda da lista de tarefas passada para WhenAny . var allTasks = new List < Task >{ eggsTask , baconTask , toastTask }; while ( allTasks . Any ()) { Task finished = await Task . WhenAny ( allTasks ); if ( finished == eggsTask ) { Console . WriteLine ( \"eggs are ready\" ); } else if ( finished == baconTask ) { Console . WriteLine ( \"bacon is ready\" ); } else if ( finished == toastTask ) { Console . WriteLine ( \"toast is ready\" ); } allTasks . Remove ( finished ); } Console . WriteLine ( \"Breakfast is ready!\" );","title":"WhenAny"},{"location":"dotnet/linguagem/programacao-assincrona/#monitoracao-de-estado","text":"Devemos escrever c\u00f3digo que aguarda tarefas de uma maneira sem bloqueio. N\u00e3o depender do estado de objetos globais ou da execu\u00e7\u00e3o de determinados m\u00e9todos. Em vez disso, depender apenas dos valores retornados dos m\u00e9todos. Por qu\u00ea? Ser\u00e1 mais f\u00e1cil raciocinar sobre o c\u00f3digo. O c\u00f3digo ser\u00e1 mais f\u00e1cil de testar. Misturar c\u00f3digo ass\u00edncrono e s\u00edncrono ser\u00e1 muito mais simples. As condi\u00e7\u00f5es de corrida poder\u00e3o, normalmente, ser completamente evitadas. Dependendo dos valores retornados, a coordena\u00e7\u00e3o de c\u00f3digo ass\u00edncrono se tornar\u00e1 simples. Funciona muito bem com a inje\u00e7\u00e3o de depend\u00eancia.","title":"Monitora\u00e7\u00e3o de estado"},{"location":"dotnet/linguagem/tipos/","text":"Tipos \u00b6 Tipos Introdu\u00e7\u00e3o Tipos internos Tipos de valor Tipos de refer\u00eancia Tipos personalizados Tipos gen\u00e9ricos Link [[ TOC ]] Introdu\u00e7\u00e3o \u00b6 As informa\u00e7\u00f5es armazenadas em um tipo podem incluir o seguinte: O espa\u00e7o de armazenamento que uma vari\u00e1vel do tipo requer. Os valores m\u00ednimo e m\u00e1ximo que ele pode representar. Os membros (m\u00e9todos, campos, eventos e etc.) que ele cont\u00e9m. O tipo base do qual ele herda. O local no qual a mem\u00f3ria para as vari\u00e1veis ser\u00e1 alocada em tempo de execu\u00e7\u00e3o. Os tipos de opera\u00e7\u00f5es que s\u00e3o permitidos. O compilador usa as informa\u00e7\u00f5es de tipo para garantir que todas as opera\u00e7\u00f5es que s\u00e3o realizadas em seu c\u00f3digo sejam fortemente tipadas. Quando declara uma vari\u00e1vel ou constante em um programa, voc\u00ea deve especificar o tipo da vari\u00e1vel ou usar a palavra-chave var para permitir que o compilador infira o tipo. Tipos internos \u00b6 A imagem a seguir mostra os tipos de valor e tipos de refer\u00eancia no CTS: ![tipo-valor-referencia](_tipos/tipos-referencia-e-valor.png) Tipos de valor \u00b6 Os tipos de valor derivam de System.ValueType , que deriva de System.Object . Os tipos que derivam de System.ValueType apresentam um comportamento especial no CLR. As vari\u00e1veis de tipo de valor cont\u00eam diretamente seus valores, o que significa que a mem\u00f3ria \u00e9 alocada embutida em qualquer contexto em que a vari\u00e1vel \u00e9 declarada. N\u00e3o h\u00e1 nenhuma aloca\u00e7\u00e3o de heap separada ou sobrecarga de coleta de lixo para vari\u00e1veis do tipo de valor. Um tipo de valor pode ser um dos dois tipos a seguir: um tipo de estrutura ( struct ), que encapsula dados e funcionalidades relacionadas. um tipo de enumera\u00e7\u00e3o ( enum ), que \u00e9 definido por um conjunto de constantes nomeadas e representa uma escolha ou uma combina\u00e7\u00e3o de escolhas. Os tipos num\u00e9ricos internos s\u00e3o structs e t\u00eam propriedades e m\u00e9todos que voc\u00ea pode acessar: // Static method on type byte. byte b = byte . MaxValue ; Mas voc\u00ea declara e atribui valores a eles como se fossem tipos de n\u00e3o agrega\u00e7\u00e3o simples: byte num = 0 xA ; int i = 5 ; char c = 'Z' ; Voc\u00ea usa a palavra-chave struct para criar seus pr\u00f3prios tipos de valor personalizados. Normalmente, um struct \u00e9 usado como um cont\u00eainer para um pequeno conjunto de vari\u00e1veis relacionadas, public struct Coords { public int x , y ; public Coords ( int p1 , int p2 ) { x = p1 ; y = p2 ; } } A outra categoria de tipos de valor \u00e9 enum . Uma enum define um conjunto de constantes integrais nomeadas. Por exemplo, a enumera\u00e7\u00e3o System.IO.FileMode na biblioteca de classes do .NET cont\u00e9m um conjunto de n\u00fameros inteiros constantes nomeados que especificam como um arquivo deve ser aberto. public enum FileMode { CreateNew = 1 , Create = 2 , Open = 3 , OpenOrCreate = 4 , Truncate = 5 , Append = 6 , } Tipos de valor incorporado C#: palavra-chave Tipo .NET bool System.Boolean byte System.Byte sbyte System.SByte char System.Char decimal System.Decimal double System.Double float System.Single int System.Int32 uint System.UInt32 long System.Int64 ulong System.UInt64 short System.Int16 ushort System.UInt16 Tipos de refer\u00eancia \u00b6 No tempo de execu\u00e7\u00e3o, quando voc\u00ea declara uma vari\u00e1vel de um tipo de refer\u00eancia, a vari\u00e1vel cont\u00e9m o valor null at\u00e9 voc\u00ea criar explicitamente um objeto usando o operador new ou atribuir a ele um objeto que foi criado em outro lugar com o operador new . Tipos de referencia: class interface delegate Tipos de refer\u00eancia incorporados: palavra-chave Tipo .NET object System.Object string System.String dynamic System.Dynamic Tipos personalizados \u00b6 Voc\u00ea usa os construtores struct , classe , interface e enum para criar seus pr\u00f3prios tipos personalizados. A biblioteca de classes do .NET em si \u00e9 uma cole\u00e7\u00e3o de tipos personalizados fornecida pela Microsoft, que voc\u00ea pode usar em seus pr\u00f3prios aplicativos. Tipos gen\u00e9ricos \u00b6 Um tipo pode ser declarado com um ou mais par\u00e2metros de tipo que servem como um espa\u00e7o reservado para o tipo real (o tipo concreto) que o c\u00f3digo cliente fornecer\u00e1 ao criar uma inst\u00e2ncia do tipo. Esses tipos s\u00e3o chamados de tipos gen\u00e9ricos. List < string > stringList = new List < string >(); stringList . Add ( \"String example\" ); // Erro em tempo de compila\u00e7\u00e3o. stringList . Add ( 4 ); Link \u00b6 https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/types","title":"Tipos"},{"location":"dotnet/linguagem/tipos/#tipos","text":"Tipos Introdu\u00e7\u00e3o Tipos internos Tipos de valor Tipos de refer\u00eancia Tipos personalizados Tipos gen\u00e9ricos Link [[ TOC ]]","title":"Tipos"},{"location":"dotnet/linguagem/tipos/#introducao","text":"As informa\u00e7\u00f5es armazenadas em um tipo podem incluir o seguinte: O espa\u00e7o de armazenamento que uma vari\u00e1vel do tipo requer. Os valores m\u00ednimo e m\u00e1ximo que ele pode representar. Os membros (m\u00e9todos, campos, eventos e etc.) que ele cont\u00e9m. O tipo base do qual ele herda. O local no qual a mem\u00f3ria para as vari\u00e1veis ser\u00e1 alocada em tempo de execu\u00e7\u00e3o. Os tipos de opera\u00e7\u00f5es que s\u00e3o permitidos. O compilador usa as informa\u00e7\u00f5es de tipo para garantir que todas as opera\u00e7\u00f5es que s\u00e3o realizadas em seu c\u00f3digo sejam fortemente tipadas. Quando declara uma vari\u00e1vel ou constante em um programa, voc\u00ea deve especificar o tipo da vari\u00e1vel ou usar a palavra-chave var para permitir que o compilador infira o tipo.","title":"Introdu\u00e7\u00e3o"},{"location":"dotnet/linguagem/tipos/#tipos-internos","text":"A imagem a seguir mostra os tipos de valor e tipos de refer\u00eancia no CTS: ![tipo-valor-referencia](_tipos/tipos-referencia-e-valor.png)","title":"Tipos internos"},{"location":"dotnet/linguagem/tipos/#tipos-de-valor","text":"Os tipos de valor derivam de System.ValueType , que deriva de System.Object . Os tipos que derivam de System.ValueType apresentam um comportamento especial no CLR. As vari\u00e1veis de tipo de valor cont\u00eam diretamente seus valores, o que significa que a mem\u00f3ria \u00e9 alocada embutida em qualquer contexto em que a vari\u00e1vel \u00e9 declarada. N\u00e3o h\u00e1 nenhuma aloca\u00e7\u00e3o de heap separada ou sobrecarga de coleta de lixo para vari\u00e1veis do tipo de valor. Um tipo de valor pode ser um dos dois tipos a seguir: um tipo de estrutura ( struct ), que encapsula dados e funcionalidades relacionadas. um tipo de enumera\u00e7\u00e3o ( enum ), que \u00e9 definido por um conjunto de constantes nomeadas e representa uma escolha ou uma combina\u00e7\u00e3o de escolhas. Os tipos num\u00e9ricos internos s\u00e3o structs e t\u00eam propriedades e m\u00e9todos que voc\u00ea pode acessar: // Static method on type byte. byte b = byte . MaxValue ; Mas voc\u00ea declara e atribui valores a eles como se fossem tipos de n\u00e3o agrega\u00e7\u00e3o simples: byte num = 0 xA ; int i = 5 ; char c = 'Z' ; Voc\u00ea usa a palavra-chave struct para criar seus pr\u00f3prios tipos de valor personalizados. Normalmente, um struct \u00e9 usado como um cont\u00eainer para um pequeno conjunto de vari\u00e1veis relacionadas, public struct Coords { public int x , y ; public Coords ( int p1 , int p2 ) { x = p1 ; y = p2 ; } } A outra categoria de tipos de valor \u00e9 enum . Uma enum define um conjunto de constantes integrais nomeadas. Por exemplo, a enumera\u00e7\u00e3o System.IO.FileMode na biblioteca de classes do .NET cont\u00e9m um conjunto de n\u00fameros inteiros constantes nomeados que especificam como um arquivo deve ser aberto. public enum FileMode { CreateNew = 1 , Create = 2 , Open = 3 , OpenOrCreate = 4 , Truncate = 5 , Append = 6 , } Tipos de valor incorporado C#: palavra-chave Tipo .NET bool System.Boolean byte System.Byte sbyte System.SByte char System.Char decimal System.Decimal double System.Double float System.Single int System.Int32 uint System.UInt32 long System.Int64 ulong System.UInt64 short System.Int16 ushort System.UInt16","title":"Tipos de valor"},{"location":"dotnet/linguagem/tipos/#tipos-de-referencia","text":"No tempo de execu\u00e7\u00e3o, quando voc\u00ea declara uma vari\u00e1vel de um tipo de refer\u00eancia, a vari\u00e1vel cont\u00e9m o valor null at\u00e9 voc\u00ea criar explicitamente um objeto usando o operador new ou atribuir a ele um objeto que foi criado em outro lugar com o operador new . Tipos de referencia: class interface delegate Tipos de refer\u00eancia incorporados: palavra-chave Tipo .NET object System.Object string System.String dynamic System.Dynamic","title":"Tipos de refer\u00eancia"},{"location":"dotnet/linguagem/tipos/#tipos-personalizados","text":"Voc\u00ea usa os construtores struct , classe , interface e enum para criar seus pr\u00f3prios tipos personalizados. A biblioteca de classes do .NET em si \u00e9 uma cole\u00e7\u00e3o de tipos personalizados fornecida pela Microsoft, que voc\u00ea pode usar em seus pr\u00f3prios aplicativos.","title":"Tipos personalizados"},{"location":"dotnet/linguagem/tipos/#tipos-genericos","text":"Um tipo pode ser declarado com um ou mais par\u00e2metros de tipo que servem como um espa\u00e7o reservado para o tipo real (o tipo concreto) que o c\u00f3digo cliente fornecer\u00e1 ao criar uma inst\u00e2ncia do tipo. Esses tipos s\u00e3o chamados de tipos gen\u00e9ricos. List < string > stringList = new List < string >(); stringList . Add ( \"String example\" ); // Erro em tempo de compila\u00e7\u00e3o. stringList . Add ( 4 );","title":"Tipos gen\u00e9ricos"},{"location":"dotnet/linguagem/tipos/#link","text":"https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/types","title":"Link"},{"location":"financas/acoes/","text":"A\u00e7\u00f5es \u00b6 Ordem limitada \u00b6 Esta ordem permite que se controle o pre\u00e7o da execu\u00e7\u00e3o. Isso porque o negociador define um limite de pre\u00e7o para a ordem ser executada. Na venda desta ordem h\u00e1 um valor m\u00ednimo que \u00e9 o limite, e, na compra, um valor m\u00e1ximo. N\u00e3o d\u00e1 garantia de que seja executada, pois o ativo pode n\u00e3o atingir o limite definido ou, no caso de atingi-lo, pode haver ordens de outros investidores com o mesmo pre\u00e7o limite antes da sua; \u00c9 executada por um pre\u00e7o igual ou melhor que o definido . Se o investidor colocar uma ordem de compra limitada por R$ 10, e existir um vendedor a R$ 9, a ordem executada vai ser a de R$ 9. Se for colocada uma ordem de R$ 9 para venda, e houver vendedor a R$ 10, a ordem de R$ 10 vai ser executada. Em resumo, os valores efetuados ser\u00e3o os das ordens que j\u00e1 est\u00e3o no livro de ofertas .","title":"A\u00e7\u00f5es"},{"location":"financas/acoes/#acoes","text":"","title":"A\u00e7\u00f5es"},{"location":"financas/acoes/#ordem-limitada","text":"Esta ordem permite que se controle o pre\u00e7o da execu\u00e7\u00e3o. Isso porque o negociador define um limite de pre\u00e7o para a ordem ser executada. Na venda desta ordem h\u00e1 um valor m\u00ednimo que \u00e9 o limite, e, na compra, um valor m\u00e1ximo. N\u00e3o d\u00e1 garantia de que seja executada, pois o ativo pode n\u00e3o atingir o limite definido ou, no caso de atingi-lo, pode haver ordens de outros investidores com o mesmo pre\u00e7o limite antes da sua; \u00c9 executada por um pre\u00e7o igual ou melhor que o definido . Se o investidor colocar uma ordem de compra limitada por R$ 10, e existir um vendedor a R$ 9, a ordem executada vai ser a de R$ 9. Se for colocada uma ordem de R$ 9 para venda, e houver vendedor a R$ 10, a ordem de R$ 10 vai ser executada. Em resumo, os valores efetuados ser\u00e3o os das ordens que j\u00e1 est\u00e3o no livro de ofertas .","title":"Ordem limitada"},{"location":"java/_sumario/","text":"Sum\u00e1rio \u00b6","title":"Sum\u00e1rio"},{"location":"java/_sumario/#sumario","text":"","title":"Sum\u00e1rio"},{"location":"java/criteria/","text":"Criteria API \u00b6 Criteria API Introdu\u00e7\u00e3o Refer\u00eancia Introdu\u00e7\u00e3o \u00b6 O Hibernate prov\u00ea quatro tipos diferentes para retornar informa\u00e7\u00f5es: HQL, JPQL, consultas nativas e a API Criteria. A API Criteria nos permite construir consultas estruturadas utilizando Java (type-safe), e ainda prov\u00ea uma checagem de sintaxe em tempo de compila\u00e7\u00e3o que n\u00e3o \u00e9 poss\u00edvel com uma linguagem de consulta como HQL, JPQL ou SQL. A API Criteria tamb\u00e9m fornece proje\u00e7\u00e3o, agrega\u00e7\u00e3o e outras funcionalidades. Refer\u00eancia \u00b6 http://www.devmedia.com.br/hibernate-api-criteria-realizando-consultas/29627 https://en.wikibooks.org/wiki/Java_Persistence/Criteria https://www.tutorialspoint.com/hibernate/hibernate_criteria_queries.htm https://thoughts-on-java.org/static-metamodel","title":"Criteria API"},{"location":"java/criteria/#criteria-api","text":"Criteria API Introdu\u00e7\u00e3o Refer\u00eancia","title":"Criteria API"},{"location":"java/criteria/#introducao","text":"O Hibernate prov\u00ea quatro tipos diferentes para retornar informa\u00e7\u00f5es: HQL, JPQL, consultas nativas e a API Criteria. A API Criteria nos permite construir consultas estruturadas utilizando Java (type-safe), e ainda prov\u00ea uma checagem de sintaxe em tempo de compila\u00e7\u00e3o que n\u00e3o \u00e9 poss\u00edvel com uma linguagem de consulta como HQL, JPQL ou SQL. A API Criteria tamb\u00e9m fornece proje\u00e7\u00e3o, agrega\u00e7\u00e3o e outras funcionalidades.","title":"Introdu\u00e7\u00e3o"},{"location":"java/criteria/#referencia","text":"http://www.devmedia.com.br/hibernate-api-criteria-realizando-consultas/29627 https://en.wikibooks.org/wiki/Java_Persistence/Criteria https://www.tutorialspoint.com/hibernate/hibernate_criteria_queries.htm https://thoughts-on-java.org/static-metamodel","title":"Refer\u00eancia"},{"location":"java/hql/","text":"HQL \u00b6 HQL Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 A Linguagem de Consulta do Hibernate ( HQL - Hibernate Query Language ) e a Linguagem de Consulta da Persist\u00eancia do Java ( JPQL - Java Persistence Query Language ) s\u00e3o linguagens de consulta focadas no modelo de objeto, semelhantes em natureza ao SQL. O JPQL \u00e9 o padr\u00e3o de linguagem de consulta do JPA, sendo um subconjunto fortemente inspirado no HQL. Uma consulta JPQL \u00e9 sempre uma consulta HQL v\u00e1lida, mas o inverso n\u00e3o \u00e9 verdadeiro.","title":"HQL"},{"location":"java/hql/#hql","text":"HQL Introdu\u00e7\u00e3o","title":"HQL"},{"location":"java/hql/#introducao","text":"A Linguagem de Consulta do Hibernate ( HQL - Hibernate Query Language ) e a Linguagem de Consulta da Persist\u00eancia do Java ( JPQL - Java Persistence Query Language ) s\u00e3o linguagens de consulta focadas no modelo de objeto, semelhantes em natureza ao SQL. O JPQL \u00e9 o padr\u00e3o de linguagem de consulta do JPA, sendo um subconjunto fortemente inspirado no HQL. Uma consulta JPQL \u00e9 sempre uma consulta HQL v\u00e1lida, mas o inverso n\u00e3o \u00e9 verdadeiro.","title":"Introdu\u00e7\u00e3o"},{"location":"java/jpa/","text":"JPA \u00b6 JPA Introdu\u00e7\u00e3o Anota\u00e7\u00f5es EntityManager Arquivo de configura\u00e7\u00e3o Links Introdu\u00e7\u00e3o \u00b6 A JPA ( Java Persistence API ) \u00e9 a API do Java que dita como os frameworks ORM ( Object-relational mapping ) devem ser implementados para prover a persist\u00eancia de dados em bancos relacionais. Constru\u00edda tendo como base a JDBC , a JPA abstrai detalhes dessa API base, simplificando o c\u00f3digo de persist\u00eancia. At\u00e9 a cria\u00e7\u00e3o da JPA, a solu\u00e7\u00e3o padr\u00e3o do Java utilizada diretamente para realizar a persist\u00eancia de dados era a JDBC. \u00c9 a partir da JDBC que conseguimos nos conectar ao banco de dados e executar comandos SQL para inser\u00e7\u00e3o, atualiza\u00e7\u00e3o, remo\u00e7\u00e3o e consulta a dados. Uma das principais limita\u00e7\u00f5es dessa API \u00e9 que ao lidar com ela precisamos nos preocupar com a convers\u00e3o dos dados recuperados no formato relacional, utilizado no banco de dados, para o formato orientado a objetos, utilizado no c\u00f3digo de nosso programa, e vice-versa. A essa diferen\u00e7a damos o nome de imped\u00e2ncia objeto-relacional. Ela simboliza o motivo central de v\u00e1rios problemas, prejudicando a produtividade dos programadores e, tamb\u00e9m, levando a um aumento na quantidade de erros ao longo do desenvolvimento do software. Com as limita\u00e7\u00f5es da JDBC, muitas empresas e programadores mais experientes come\u00e7aram a criar solu\u00e7\u00f5es pr\u00f3prias que buscavam simplificar a persist\u00eancia de dados. O principal objetivo desses inventos era reduzir o c\u00f3digo necess\u00e1rio para mapear as tabelas do banco \u00e0s classes Java, atendendo assim a um dos pontos mais cr\u00edticos naquela \u00e9poca: o mapeamento objeto-relacional. Em pouco tempo j\u00e1 existiam muitas solu\u00e7\u00f5es para abstrair as principais dificuldades de se trabalhar com a JDBC. Por\u00e9m, com todas essas solu\u00e7\u00f5es, outro problema acabou surgindo. Qual desses tantos inventos adotar em um projeto para facilitar a programa\u00e7\u00e3o da persist\u00eancia de dados? Sabendo que n\u00e3o havia uma padroniza\u00e7\u00e3o entre essas solu\u00e7\u00f5es, o programador ou o arquiteto tentava escolher a op\u00e7\u00e3o mais madura, pois sabia que com ela as chances de precisar migrar de uma solu\u00e7\u00e3o de persist\u00eancia para outra eram m\u00ednimas. Ainda assim, essa necessidade se tornou real em muitos projetos. Sem a padroniza\u00e7\u00e3o, como cada solu\u00e7\u00e3o resolvia cada problema de uma forma, era necess\u00e1rio reescrever grande parte da camada de acesso a dados quando a troca de tecnologia se fazia necess\u00e1ria. Observando esse problema, a comunidade Java optou pela cria\u00e7\u00e3o de uma especifica\u00e7\u00e3o que ditasse esse padr\u00e3o, e assim foi criada a JPA, ou Java Persistence API. A API JPA \u00e9 a especifica\u00e7\u00e3o que determina como os frameworks de mapeamento objeto-relacional Java devem ser implementados. Com ela, temos um padr\u00e3o para: Realizar o mapeamento objeto-relacional entre as classes Java e as tabelas do banco de dados; Escrever consultas SQL independentemente dos detalhes de implementa\u00e7\u00e3o da linguagem de cada banco de dados; E, por fim, temos uma refer\u00eancia, a qual deve ser seguida por todas as solu\u00e7\u00f5es de persist\u00eancia relacional. Assim, caso seja necess\u00e1rio adotar outra op\u00e7\u00e3o ORM, n\u00e3o ser\u00e1 necess\u00e1rio realizar muitas mudan\u00e7as no c\u00f3digo. Para concluir, \u00e9 importante informar que a JPA \u00e9 uma especifica\u00e7\u00e3o e, como tal, n\u00e3o podemos programar diretamente com ela. Isto \u00e9, precisamos de uma solu\u00e7\u00e3o que a implemente. Atualmente, a implementa\u00e7\u00e3o mais famosa \u00e9 o Hibernate . Al\u00e9m dele, no entanto, voc\u00ea tamb\u00e9m encontrar\u00e1 outras solu\u00e7\u00f5es, como a OpenJPA , da Funda\u00e7\u00e3o Apache, o EclipseLink JPA , da funda\u00e7\u00e3o Eclipse, entre outras. Anota\u00e7\u00f5es \u00b6 @Entity: informa que a classe \u00e9 uma entidade no banco de dados (tabela). @Entity public class Lembrete @Id : define qual campo da classe deve ser utilizado como chave prim\u00e1ria. @GeneratedValue : indica como a chave prim\u00e1ria ser\u00e1 persistida. Strategy : indica qual estrat\u00e9gia usada para gerenciar a sequ\u00eancia das chaves prim\u00e1rias. GenerationType.IDENTITY : usa as colunas especiais IDENTITY no banco de dados para atribuir automaticamente um id. Neste caso a sequencia \u00e9 gerenciada pelo pr\u00f3prio banco de dados. S\u00e3o suportadas em muitos bancos de dados, como MySQL , DB2 , SQL Server , Sybase e Postgres . O Oracle n\u00e3o suporta colunas IDENTITY. GenerationType.SEQUENCE* : usa objetos especiais SEQUENCE para gerar os ids. Geralmente um objeto SEQUENCE possui um nome, um INCREMENT e outros objetos de configura\u00e7\u00f5es. Neste caso o ORM ( Object-relational mapping ), como o Hibernate, ser\u00e1 respons\u00e1vel por obter e inserir o pr\u00f3ximo valor da sequ\u00eancia. Suportado nos bancos *Oracle , DB2 , e Postgres GenerationType.AUTO : deixa com o provedor de persist\u00eancia a escolha da estrat\u00e9gia mais adequada de acordo com o banco de dados. @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private long id ; @Column : indica que o campo ser\u00e1 uma coluna na tabela. nullable : indica se a coluna aceita valores mulos. @Column ( nullable = false ) private String titulo ; EntityManager \u00b6 Na JPA utilizamos a classe EntityManager para interagir com o contexto de persist\u00eancia. Um contexto de persist\u00eancia mant\u00e9m sob seu conhecimento as diferentes entidades que cont\u00eam dados a serem persistidos. Sendo assim, \u00e9 atrav\u00e9s do EntityManager que podemos manipular as entidades mapeadas e realizar a\u00e7\u00f5es relacionadas aos registros da tabela para a qual a entidade aponta. Atrav\u00e9s do EntityManager conseguimos adicionar, buscar, remover e realizar diferentes consultas no banco de dados. Um EntityManager \u00e9 criado a partir de uma EntityManagerFactory . Cada EntityManager \u00e9 criado para acesso a um \u00fanico banco de dados . As configura\u00e7\u00f5es transmitidas pelo EntityManagerFactory v\u00eam do arquivo persistence.xml e s\u00e3o lidas pela classe Persistence. Por isso iniciamos o EntityManagerFactory usando o m\u00e9todo Persistence.createEntityManagerFactory , que recebe como par\u00e2metro o nome da unidade de persist\u00eancia. Uma vez criada uma nova inst\u00e2ncia da entidade, podemos associ\u00e1-la ao EntityManager para torn\u00e1-la persistente com o m\u00e9todo persist . Com isso, a partir da estrat\u00e9gia definida para a chave prim\u00e1ria, um novo identificador ser\u00e1 gerado. Para atualizar \u00e9 utilizado o m\u00e9todo merge e para excluir remove . Uma entidade pode ter diferentes estados. Quando uma entidade \u00e9 criada, para a JPA seu estado \u00e9 new . Ao utilizar os m\u00e9todos persist , merge ou find , estamos alterando o estado dessa entidade para managed . Esse estado se mant\u00e9m at\u00e9 que a entidade seja removida, quando ela se torna removed , ou deliberadamente retirada do contexto de persist\u00eancia, momento em que ela se torna detached . No estado managed, a JPA passa a observar as altera\u00e7\u00f5es realizadas nesta entidade, permitindo que seus dados sejam atualizados ou removidos. Assim sendo, para atualizar um registro precisamos obter a inst\u00e2ncia da entidade a partir de uma consulta gerenciada pelo framework, como por exemplo, pelo m\u00e9todo find . import javax.persistence.EntityManager ; import javax.persistence.EntityManagerFactory ; import javax.persistence.Persistence ; public class Main { private static EntityManagerFactory entityManagerFactory ; public static void main ( String args [] ) { // Leitura do persistence.xml entityManagerFactory = Persistence . createEntityManagerFactory ( \"hibernatejpa\" ); // Cria um EntityManager EntityManager em = entityManagerFactory . createEntityManager (); List < Lembrete > lembretesSalvos ; List < Lembrete > lembretes = new ArrayList <> (); Lembrete lembreteSalvo ; lembretes . add ( new Lembrete ( \"Comprar leite\" , \"Hoje, 10h30\" )); lembretes . add ( new Lembrete ( \"Comprar ma\u00e7a\" , \"Hoje, 12h00\" )); lembretes . add ( new Lembrete ( \"Estudar\" , \"Amanh\u00e3, 08h15\" )); try { // -- PERSISTENCIA // Abrir uma nova transa\u00e7\u00e3o com o banco em . getTransaction (). begin (); // Envia a instru\u00e7\u00e3o de INSERT lembretes . forEach ( lembrete -> em . persist ( lembrete )); // Encerra a transa\u00e7\u00e3o, gravando os dados no banco em . getTransaction (). commit (); // -- UPDATE // Usando o m\u00e9todo find para pegar id=2 lembreteSalvo = em . find ( Lembrete . class , 2L ); lembreteSalvo . setTitulo ( \"Comprar caf\u00e9\" ); lembreteSalvo . setDescricao ( \"Segunda, 15h20\" ); em . getTransaction (). begin (); // Envia a instru\u00e7\u00e3o de UPDATE em . merge ( lembreteSalvo ); em . getTransaction (). commit (); // -- CONSULTAS // Usando JPQL + TypedQuery para buscar todos TypedQuery < Lembrete > query = em . createQuery ( \"from Lembrete\" , Lembrete . class ); lembretesSalvos = query . getResultList (); if ( lembretesSalvos != null ) { lembretesSalvos . forEach ( System . out :: println ); } } catch ( Exception e ) { // Rollback em caso de erro em . getTransaction (). rollback (); System . out . println ( \"ERRO: \" + e . getMessage ()); } finally { // Encerra a conex\u00e3o em . close (); } } } Arquivo de configura\u00e7\u00e3o \u00b6 Arquivo de configura\u00e7\u00e3o persistence.xml . Geralmente situado em: src/main/resources/META-INF/persistence.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <persistence xmlns= \"http://java.sun.com/xml/ns/persistence\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\" version= \"2.0\" > <!-- Identificador da unidade de persist\u00eancia --> <persistence-unit name= \"helloworld\" transaction-type= \"RESOURCE_LOCAL\" > <!-- Indica qual a implementacao do JPA usada --> <provider> org.hibernate.jpa.HibernatePersistenceProvider </provider> <!-- Entidade(s) mapeada(s). O Hiberbate faz o mapeamento autom\u00e1tico, portanto \u00e9 opcional --> <class> br.com.devmedia.java.hibernate.Lembrete </class> <properties> <property name= \"javax.persistence.jdbc.url\" value= \"jdbc:postgresql://localhost/jpa-exemplo\" /> <property name= \"javax.persistence.jdbc.user\" value= \"postgres\" /> <property name= \"javax.persistence.jdbc.password\" value= \"postgres\" /> <property name= \"javax.persistence.jdbc.driver\" value= \"org.postgresql.Driver\" /> <property name= \"hibernate.dialect\" value= \"org.hibernate.dialect.PostgreSQL94Dialect\" /> <!-- Mostrar SQL no console --> <property name= \"hibernate.show_sql\" value= \"true\" /> <!-- Mostrar SQL formatado --> <property name= \"hibernate.format_sql\" value= \"true\" /> <!-- Atualiza a estrutura do banco, gera as tabelas se for preciso --> <property name= \"hibernate.hbm2ddl.auto\" value= \"update\" /> </properties> </persistence-unit> </persistence> Links \u00b6 Curso introdut\u00f3rio: https://www.devmedia.com.br/view/viewaula.php?idcomp=38575 JPA 2.0: https://www.devmedia.com.br/jpa-2-0-persistencia-a-toda-prova/17437","title":"JPA"},{"location":"java/jpa/#jpa","text":"JPA Introdu\u00e7\u00e3o Anota\u00e7\u00f5es EntityManager Arquivo de configura\u00e7\u00e3o Links","title":"JPA"},{"location":"java/jpa/#introducao","text":"A JPA ( Java Persistence API ) \u00e9 a API do Java que dita como os frameworks ORM ( Object-relational mapping ) devem ser implementados para prover a persist\u00eancia de dados em bancos relacionais. Constru\u00edda tendo como base a JDBC , a JPA abstrai detalhes dessa API base, simplificando o c\u00f3digo de persist\u00eancia. At\u00e9 a cria\u00e7\u00e3o da JPA, a solu\u00e7\u00e3o padr\u00e3o do Java utilizada diretamente para realizar a persist\u00eancia de dados era a JDBC. \u00c9 a partir da JDBC que conseguimos nos conectar ao banco de dados e executar comandos SQL para inser\u00e7\u00e3o, atualiza\u00e7\u00e3o, remo\u00e7\u00e3o e consulta a dados. Uma das principais limita\u00e7\u00f5es dessa API \u00e9 que ao lidar com ela precisamos nos preocupar com a convers\u00e3o dos dados recuperados no formato relacional, utilizado no banco de dados, para o formato orientado a objetos, utilizado no c\u00f3digo de nosso programa, e vice-versa. A essa diferen\u00e7a damos o nome de imped\u00e2ncia objeto-relacional. Ela simboliza o motivo central de v\u00e1rios problemas, prejudicando a produtividade dos programadores e, tamb\u00e9m, levando a um aumento na quantidade de erros ao longo do desenvolvimento do software. Com as limita\u00e7\u00f5es da JDBC, muitas empresas e programadores mais experientes come\u00e7aram a criar solu\u00e7\u00f5es pr\u00f3prias que buscavam simplificar a persist\u00eancia de dados. O principal objetivo desses inventos era reduzir o c\u00f3digo necess\u00e1rio para mapear as tabelas do banco \u00e0s classes Java, atendendo assim a um dos pontos mais cr\u00edticos naquela \u00e9poca: o mapeamento objeto-relacional. Em pouco tempo j\u00e1 existiam muitas solu\u00e7\u00f5es para abstrair as principais dificuldades de se trabalhar com a JDBC. Por\u00e9m, com todas essas solu\u00e7\u00f5es, outro problema acabou surgindo. Qual desses tantos inventos adotar em um projeto para facilitar a programa\u00e7\u00e3o da persist\u00eancia de dados? Sabendo que n\u00e3o havia uma padroniza\u00e7\u00e3o entre essas solu\u00e7\u00f5es, o programador ou o arquiteto tentava escolher a op\u00e7\u00e3o mais madura, pois sabia que com ela as chances de precisar migrar de uma solu\u00e7\u00e3o de persist\u00eancia para outra eram m\u00ednimas. Ainda assim, essa necessidade se tornou real em muitos projetos. Sem a padroniza\u00e7\u00e3o, como cada solu\u00e7\u00e3o resolvia cada problema de uma forma, era necess\u00e1rio reescrever grande parte da camada de acesso a dados quando a troca de tecnologia se fazia necess\u00e1ria. Observando esse problema, a comunidade Java optou pela cria\u00e7\u00e3o de uma especifica\u00e7\u00e3o que ditasse esse padr\u00e3o, e assim foi criada a JPA, ou Java Persistence API. A API JPA \u00e9 a especifica\u00e7\u00e3o que determina como os frameworks de mapeamento objeto-relacional Java devem ser implementados. Com ela, temos um padr\u00e3o para: Realizar o mapeamento objeto-relacional entre as classes Java e as tabelas do banco de dados; Escrever consultas SQL independentemente dos detalhes de implementa\u00e7\u00e3o da linguagem de cada banco de dados; E, por fim, temos uma refer\u00eancia, a qual deve ser seguida por todas as solu\u00e7\u00f5es de persist\u00eancia relacional. Assim, caso seja necess\u00e1rio adotar outra op\u00e7\u00e3o ORM, n\u00e3o ser\u00e1 necess\u00e1rio realizar muitas mudan\u00e7as no c\u00f3digo. Para concluir, \u00e9 importante informar que a JPA \u00e9 uma especifica\u00e7\u00e3o e, como tal, n\u00e3o podemos programar diretamente com ela. Isto \u00e9, precisamos de uma solu\u00e7\u00e3o que a implemente. Atualmente, a implementa\u00e7\u00e3o mais famosa \u00e9 o Hibernate . Al\u00e9m dele, no entanto, voc\u00ea tamb\u00e9m encontrar\u00e1 outras solu\u00e7\u00f5es, como a OpenJPA , da Funda\u00e7\u00e3o Apache, o EclipseLink JPA , da funda\u00e7\u00e3o Eclipse, entre outras.","title":"Introdu\u00e7\u00e3o"},{"location":"java/jpa/#anotacoes","text":"@Entity: informa que a classe \u00e9 uma entidade no banco de dados (tabela). @Entity public class Lembrete @Id : define qual campo da classe deve ser utilizado como chave prim\u00e1ria. @GeneratedValue : indica como a chave prim\u00e1ria ser\u00e1 persistida. Strategy : indica qual estrat\u00e9gia usada para gerenciar a sequ\u00eancia das chaves prim\u00e1rias. GenerationType.IDENTITY : usa as colunas especiais IDENTITY no banco de dados para atribuir automaticamente um id. Neste caso a sequencia \u00e9 gerenciada pelo pr\u00f3prio banco de dados. S\u00e3o suportadas em muitos bancos de dados, como MySQL , DB2 , SQL Server , Sybase e Postgres . O Oracle n\u00e3o suporta colunas IDENTITY. GenerationType.SEQUENCE* : usa objetos especiais SEQUENCE para gerar os ids. Geralmente um objeto SEQUENCE possui um nome, um INCREMENT e outros objetos de configura\u00e7\u00f5es. Neste caso o ORM ( Object-relational mapping ), como o Hibernate, ser\u00e1 respons\u00e1vel por obter e inserir o pr\u00f3ximo valor da sequ\u00eancia. Suportado nos bancos *Oracle , DB2 , e Postgres GenerationType.AUTO : deixa com o provedor de persist\u00eancia a escolha da estrat\u00e9gia mais adequada de acordo com o banco de dados. @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private long id ; @Column : indica que o campo ser\u00e1 uma coluna na tabela. nullable : indica se a coluna aceita valores mulos. @Column ( nullable = false ) private String titulo ;","title":"Anota\u00e7\u00f5es"},{"location":"java/jpa/#entitymanager","text":"Na JPA utilizamos a classe EntityManager para interagir com o contexto de persist\u00eancia. Um contexto de persist\u00eancia mant\u00e9m sob seu conhecimento as diferentes entidades que cont\u00eam dados a serem persistidos. Sendo assim, \u00e9 atrav\u00e9s do EntityManager que podemos manipular as entidades mapeadas e realizar a\u00e7\u00f5es relacionadas aos registros da tabela para a qual a entidade aponta. Atrav\u00e9s do EntityManager conseguimos adicionar, buscar, remover e realizar diferentes consultas no banco de dados. Um EntityManager \u00e9 criado a partir de uma EntityManagerFactory . Cada EntityManager \u00e9 criado para acesso a um \u00fanico banco de dados . As configura\u00e7\u00f5es transmitidas pelo EntityManagerFactory v\u00eam do arquivo persistence.xml e s\u00e3o lidas pela classe Persistence. Por isso iniciamos o EntityManagerFactory usando o m\u00e9todo Persistence.createEntityManagerFactory , que recebe como par\u00e2metro o nome da unidade de persist\u00eancia. Uma vez criada uma nova inst\u00e2ncia da entidade, podemos associ\u00e1-la ao EntityManager para torn\u00e1-la persistente com o m\u00e9todo persist . Com isso, a partir da estrat\u00e9gia definida para a chave prim\u00e1ria, um novo identificador ser\u00e1 gerado. Para atualizar \u00e9 utilizado o m\u00e9todo merge e para excluir remove . Uma entidade pode ter diferentes estados. Quando uma entidade \u00e9 criada, para a JPA seu estado \u00e9 new . Ao utilizar os m\u00e9todos persist , merge ou find , estamos alterando o estado dessa entidade para managed . Esse estado se mant\u00e9m at\u00e9 que a entidade seja removida, quando ela se torna removed , ou deliberadamente retirada do contexto de persist\u00eancia, momento em que ela se torna detached . No estado managed, a JPA passa a observar as altera\u00e7\u00f5es realizadas nesta entidade, permitindo que seus dados sejam atualizados ou removidos. Assim sendo, para atualizar um registro precisamos obter a inst\u00e2ncia da entidade a partir de uma consulta gerenciada pelo framework, como por exemplo, pelo m\u00e9todo find . import javax.persistence.EntityManager ; import javax.persistence.EntityManagerFactory ; import javax.persistence.Persistence ; public class Main { private static EntityManagerFactory entityManagerFactory ; public static void main ( String args [] ) { // Leitura do persistence.xml entityManagerFactory = Persistence . createEntityManagerFactory ( \"hibernatejpa\" ); // Cria um EntityManager EntityManager em = entityManagerFactory . createEntityManager (); List < Lembrete > lembretesSalvos ; List < Lembrete > lembretes = new ArrayList <> (); Lembrete lembreteSalvo ; lembretes . add ( new Lembrete ( \"Comprar leite\" , \"Hoje, 10h30\" )); lembretes . add ( new Lembrete ( \"Comprar ma\u00e7a\" , \"Hoje, 12h00\" )); lembretes . add ( new Lembrete ( \"Estudar\" , \"Amanh\u00e3, 08h15\" )); try { // -- PERSISTENCIA // Abrir uma nova transa\u00e7\u00e3o com o banco em . getTransaction (). begin (); // Envia a instru\u00e7\u00e3o de INSERT lembretes . forEach ( lembrete -> em . persist ( lembrete )); // Encerra a transa\u00e7\u00e3o, gravando os dados no banco em . getTransaction (). commit (); // -- UPDATE // Usando o m\u00e9todo find para pegar id=2 lembreteSalvo = em . find ( Lembrete . class , 2L ); lembreteSalvo . setTitulo ( \"Comprar caf\u00e9\" ); lembreteSalvo . setDescricao ( \"Segunda, 15h20\" ); em . getTransaction (). begin (); // Envia a instru\u00e7\u00e3o de UPDATE em . merge ( lembreteSalvo ); em . getTransaction (). commit (); // -- CONSULTAS // Usando JPQL + TypedQuery para buscar todos TypedQuery < Lembrete > query = em . createQuery ( \"from Lembrete\" , Lembrete . class ); lembretesSalvos = query . getResultList (); if ( lembretesSalvos != null ) { lembretesSalvos . forEach ( System . out :: println ); } } catch ( Exception e ) { // Rollback em caso de erro em . getTransaction (). rollback (); System . out . println ( \"ERRO: \" + e . getMessage ()); } finally { // Encerra a conex\u00e3o em . close (); } } }","title":"EntityManager"},{"location":"java/jpa/#arquivo-de-configuracao","text":"Arquivo de configura\u00e7\u00e3o persistence.xml . Geralmente situado em: src/main/resources/META-INF/persistence.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <persistence xmlns= \"http://java.sun.com/xml/ns/persistence\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\" version= \"2.0\" > <!-- Identificador da unidade de persist\u00eancia --> <persistence-unit name= \"helloworld\" transaction-type= \"RESOURCE_LOCAL\" > <!-- Indica qual a implementacao do JPA usada --> <provider> org.hibernate.jpa.HibernatePersistenceProvider </provider> <!-- Entidade(s) mapeada(s). O Hiberbate faz o mapeamento autom\u00e1tico, portanto \u00e9 opcional --> <class> br.com.devmedia.java.hibernate.Lembrete </class> <properties> <property name= \"javax.persistence.jdbc.url\" value= \"jdbc:postgresql://localhost/jpa-exemplo\" /> <property name= \"javax.persistence.jdbc.user\" value= \"postgres\" /> <property name= \"javax.persistence.jdbc.password\" value= \"postgres\" /> <property name= \"javax.persistence.jdbc.driver\" value= \"org.postgresql.Driver\" /> <property name= \"hibernate.dialect\" value= \"org.hibernate.dialect.PostgreSQL94Dialect\" /> <!-- Mostrar SQL no console --> <property name= \"hibernate.show_sql\" value= \"true\" /> <!-- Mostrar SQL formatado --> <property name= \"hibernate.format_sql\" value= \"true\" /> <!-- Atualiza a estrutura do banco, gera as tabelas se for preciso --> <property name= \"hibernate.hbm2ddl.auto\" value= \"update\" /> </properties> </persistence-unit> </persistence>","title":"Arquivo de configura\u00e7\u00e3o"},{"location":"java/jpa/#links","text":"Curso introdut\u00f3rio: https://www.devmedia.com.br/view/viewaula.php?idcomp=38575 JPA 2.0: https://www.devmedia.com.br/jpa-2-0-persistencia-a-toda-prova/17437","title":"Links"},{"location":"java/jpql/","text":"JPQL \u00b6 JPQL Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 A Linguagem de Consulta do Hibernate ( HQL - Hibernate Query Language ) e a Linguagem de Consulta da Persist\u00eancia do Java ( JPQL - Java Persistence Query Language ) s\u00e3o linguagens de consulta focadas no modelo de objeto, semelhantes em natureza ao SQL. O JPQL \u00e9 o padr\u00e3o de linguagem de consulta do JPA, sendo um subconjunto fortemente inspirado no HQL. Uma consulta JPQL \u00e9 sempre uma consulta HQL v\u00e1lida, mas o inverso n\u00e3o \u00e9 verdadeiro.","title":"JPQL"},{"location":"java/jpql/#jpql","text":"JPQL Introdu\u00e7\u00e3o","title":"JPQL"},{"location":"java/jpql/#introducao","text":"A Linguagem de Consulta do Hibernate ( HQL - Hibernate Query Language ) e a Linguagem de Consulta da Persist\u00eancia do Java ( JPQL - Java Persistence Query Language ) s\u00e3o linguagens de consulta focadas no modelo de objeto, semelhantes em natureza ao SQL. O JPQL \u00e9 o padr\u00e3o de linguagem de consulta do JPA, sendo um subconjunto fortemente inspirado no HQL. Uma consulta JPQL \u00e9 sempre uma consulta HQL v\u00e1lida, mas o inverso n\u00e3o \u00e9 verdadeiro.","title":"Introdu\u00e7\u00e3o"},{"location":"java/boas-praticas/estrutura-projeto/","text":"Estrutura de projetos \u00b6 Estrutura de projetos Camadas Controller Model Service Repository View Value Objects Organiza\u00e7\u00e3o de pacotes Organiza\u00e7\u00e3o por camadas Pr\u00f3s Contras Organiza\u00e7\u00e3o por features Pr\u00f3s Contras Camadas \u00b6 Controller \u00b6 A camada de controle (em ingl\u00eas, controller) gerencia e orquestra o trabalho, mas n\u00e3o faz o trabalho. Em outras palavras, faz alguma verifica\u00e7\u00e3o/valida\u00e7\u00e3o para descobrir para quais servi\u00e7os os dados da requisi\u00e7\u00e3o HTTP devem ser enviados e orquestra essas chamadas de servi\u00e7o. Atribui\u00e7\u00f5es: Gerencia as requisi\u00e7\u00f5es HTTP recebidas Decide qual servi\u00e7o deve fazer o trabalho Divide o trabalho em unidades consider\u00e1veis Passa os dados necess\u00e1rios das requisi\u00e7\u00f5es HTTP para o(s) servi\u00e7o(s) Se o trabalho exigir v\u00e1rios servi\u00e7os trabalhando em v\u00e1rias coisas, orquestra as chamadas dos servi\u00e7os. O controlador n\u00e3o deve estar fazendo o trabalho. Model \u00b6 A camada de modelo (em ingl\u00eas, model) representa o dom\u00ednio do problema, mant\u00e9m o estado e fornecer m\u00e9todos para acessar e alterar o estado da aplica\u00e7\u00e3o. Service \u00b6 A camada de servi\u00e7o (em ingl\u00eas, service) \u00e9 respons\u00e1vel por concluir o trabalho e devolv\u00ea-lo ao controller . Ele cont\u00e9m a l\u00f3gica de neg\u00f3cio necess\u00e1ria para realmente atender aos requisitos e retornar o que o consumidor da API est\u00e1 solicitando. Atribui\u00e7\u00f5es: Recebe os dados de que precisa do gerente para executar suas tarefas Descobre os algoritmos, l\u00f3gica de neg\u00f3cios, chamadas ao banco de dados, etc envolvidos na conclus\u00e3o da solicita\u00e7\u00e3o. Geralmente se preocupa apenas com as tarefas que ele deve concluir N\u00e3o \u00e9 respons\u00e1vel por orquestrar as diferentes chamadas de servi\u00e7o Realiza o trabalho real necess\u00e1rio para concluir as tarefas/solicita\u00e7\u00e3o Retorna uma resposta para o controller A camada de servi\u00e7o (em ingl\u00eas, service) \u00e9 um padr\u00e3o interessante para aplica\u00e7\u00f5es que possuem regras de neg\u00f3cio/fluxos de funcionamento complexos e, al\u00e9m disso, para aplica\u00e7\u00f5es que possuem diferentes interfaces para um mesmo conjunto de dados (aplica\u00e7\u00f5es web, web services, desktop, etc). Ao usar esse padr\u00e3o passamos a ter um ponto bem claro na arquitetura em que vamos codificar regras de neg\u00f3cio complexas, como aquelas que envolvem v\u00e1rias entidades e a\u00e7\u00f5es distintas. Por exemplo, imagine um sistema de gerenciamento escolar que conta com a funcionalidade de \"trancamento de curso\". Ao trancar o curso algumas regras devem ser aplicadas: O status do aluno deve ser alterado para INATIVO; Todas as disciplinas em que o aluno est\u00e1 matriculado devem ser tamb\u00e9m trancadas; O coordenador deve ser notificado do trancamento via e-mail. Perceba que s\u00e3o regras que envolvem v\u00e1rias entidades (diferente de um simples CRUD) e a\u00e7\u00f5es espec\u00edficas (enviar e-mail). Se tiv\u00e9ssemos uma aplica\u00e7\u00e3o MVC apenas, a parte de acesso a dados j\u00e1 estaria no model, mas as regras de neg\u00f3cio talvez acabassem sendo implementadas no controller . Posteriormente, quando precis\u00e1ssemos criar um web servisse para permitir que essa funcionalidade seja acessada via app mobile, a l\u00f3gica seria repetida e a\u00ed j\u00e1 ter\u00edamos um problema de duplica\u00e7\u00e3o de c\u00f3digo. Como essa funcionalidade \u00e9 comum para as diversas \"interfaces\" do sistema, podemos codifica-la na camada de servi\u00e7o, que passaria a ser consumida pelas camadas superiores (camada de apresenta\u00e7\u00e3o - web, servi\u00e7os). Repository \u00b6 O Repository \u00e9 considerado um padr\u00e3o de dom\u00ednio e faz parte das regras de neg\u00f3cios de uma aplica\u00e7\u00e3o. \u00c9 uma interface que n\u00e3o sabe nada da infra-estrutura. Ele n\u00e3o conhece o banco de dados. O que ele conhece \u00e9 o dom\u00ednio da aplica\u00e7\u00e3o. O Repository acessa o DAO que por sua vez devolve os dados de uma consulta. Portanto, Repository se torna apenas um \"reposit\u00f3rio de dom\u00ednio\". O padr\u00e3o Repository tem o objetivo de dar apoio ao dom\u00ednio (modelo) fornecendo persist\u00eancia ou n\u00e3o. Ao contr\u00e1rio do DAO, que \u00e9 um objeto de infra-estrutura da aplica\u00e7\u00e3o e faz parte da camada de persist\u00eancia. O Repository faz parte do modelo de dom\u00ednio que \u00e9 parte da camada de neg\u00f3cios. O Repository inclusive n\u00e3o precisa apenas ser usado em acesso a dados que venham de uma base de dados, podem servir para outros tipos de opera\u00e7\u00f5es. View \u00b6 A camada de visualiza\u00e7\u00e3o (em ingl\u00eas, view) converte dados em uma renderiza\u00e7\u00e3o visual para resposta ao cliente (por exemplo, navegador da Web ou outro consumidor). Os dados ser\u00e3o fornecidos principalmente pelo controller ; no entanto, a view tamb\u00e9m pode ter um auxiliar que pode recuperar dados associados \u00e0 renderiza\u00e7\u00e3o e n\u00e3o necessariamente \u00e0 solicita\u00e7\u00e3o atual (por exemplo, dados aside , dados de rodap\u00e9). Atribui\u00e7\u00f5es: \u00c9 a camada que exibe uma representa\u00e7\u00e3o dos dados. \u00c9 camada de interface com usu\u00e1rio ( client-side ). Faz a exibi\u00e7\u00e3o dos dados, utilizando-se de HTML, XML, etc. Value Objects \u00b6 As entidades t\u00eam identidades (ID), os value objects n\u00e3o. Se as identidades de duas entidades forem diferentes, elas ser\u00e3o consideradas objetos/entidades diferentes, mesmo que todas as propriedades dessas entidades sejam iguais. Imagine duas pessoas diferentes que t\u00eam o mesmo nome, sobrenome e idade, mas s\u00e3o pessoas diferentes (seus n\u00fameros de identidade s\u00e3o diferentes). Para uma classe Endere\u00e7o (que \u00e9 um value object cl\u00e1ssico), se os dois endere\u00e7os tiverem o mesmo pa\u00eds, cidade e n\u00famero da rua, etc., eles ser\u00e3o considerados o mesmo endere\u00e7o. No DDD - Domain Driven Design (Design Orientado a Dom\u00ednio), o value object \u00e9 outro tipo de objeto de dom\u00ednio que pode incluir l\u00f3gica de neg\u00f3cios e \u00e9 uma parte essencial do dom\u00ednio. Organiza\u00e7\u00e3o de pacotes \u00b6 Da perspectiva da linguagem, os pacotes em Java fornecem dois features importantes, que s\u00e3o utilizados pelo compilador. Defini\u00e7\u00e3o de namespace para classes. V\u00e1rias classes com o mesmo nome podem ser usadas em um \u00fanico projeto, desde que perten\u00e7am a pacotes diferentes que distinguem uma classe da outra. Permitir definir modificadores de acesso para membros espec\u00edficos de um projeto. A acessibilidade de uma classe, interface, campos ou m\u00e9todos, pode ser limitada ou completamente proibida para membros de pacotes diferentes. Organiza\u00e7\u00e3o por camadas \u00b6 Organiza a estrutura de classes por camadas. ![organizar_pacote_camada](_estrutura-projeto/organizar_pacote_camada.png) Pr\u00f3s \u00b6 Encontrar o lugar certo para uma nova classe em um aplicativo como esse \u00e9 realmente uma opera\u00e7\u00e3o f\u00e1cil. A estrutura \u00e9 criada no in\u00edcio do desenvolvimento e mantida inalterada durante toda a exist\u00eancia do projeto. A simplicidade permite manter o projeto em ordem, mesmo por desenvolvedores menos experientes, pois a estrutura \u00e9 facilmente compreens\u00edvel. Contras \u00b6 Uma grande desvantagem da abordagem do pacote por camada \u00e9 o uso excessivo do modificador de acesso p\u00fablico. A exposi\u00e7\u00e3o de um reposit\u00f3rio apenas a uma \u00fanica classe de servi\u00e7o requer que o reposit\u00f3rio seja p\u00fablico. Como efeito colateral, o reposit\u00f3rio \u00e9 acess\u00edvel a todas as outras classes do projeto, mesmo a partir de camadas que n\u00e3o devem se comunicar diretamente com ele. Essa abordagem incentiva a cria\u00e7\u00e3o de c\u00f3digo espaguete n\u00e3o sustent\u00e1vel e resulta em alto acoplamento entre pacotes. Mais dif\u00edcil avaliar a complexidade de um feature apenas observando o c\u00f3digo \u00e0 medida que as classes se espalham por v\u00e1rios diret\u00f3rios. O nome de um pacote deveria fornecer detalhes adicionais sobre seu conte\u00fado. Na abordagem pacote por camada, todos os pacotes descrevem a arquitetura da solu\u00e7\u00e3o, mas, separadamente, eles n\u00e3o fornecem informa\u00e7\u00f5es \u00fateis. Na verdade, em muitos casos, eles duplicam as informa\u00e7\u00f5es presentes nos nomes das classes de seus membros. Organiza\u00e7\u00e3o por features \u00b6 Organiza a estrutura de classes em torno de features (funcionalidades) ou modelos de dom\u00ednio. ![organizar_pacote_dominio](_estrutura-projeto/organizar_pacote_dominio.png) Pr\u00f3s \u00b6 Quando todas as classes de features est\u00e3o em um \u00fanico pacote, o modificador de acesso p\u00fablico \u00e9 muito mais expressivo, pois permite descrever qual parte de um feature deve ser acess\u00edvel por outras partes da aplica\u00e7\u00e3o. Dentro de um pacote, voc\u00ea deve favorecer o uso do modificador privado do pacote para melhorar a modulariza\u00e7\u00e3o. Tornar algo p\u00fablico deve ser uma decis\u00e3o consciente. Menos conex\u00f5es entre classes de pacotes diferentes levar\u00e3o a uma base de c\u00f3digo mais limpa e mais sustent\u00e1vel. Os pacotes t\u00eam nomes muito mais significativos que descrevem sua finalidade funcional. Apenas olhando a estrutura do projeto, voc\u00ea provavelmente pode adivinhar o que os usu\u00e1rios podem fazer com a aplica\u00e7\u00e3o. A abordagem tamb\u00e9m expressa conex\u00f5es hier\u00e1rquicas entre features . As ra\u00edzes agregadas do dom\u00ednio podem ser facilmente identificadas, pois existem no n\u00edvel mais baixo da \u00e1rvore de pacotes. A estrutura do pacote documenta o aplicativo. Com a crescente popularidade da arquitetura de microsservi\u00e7o, \u00e9 muito mais f\u00e1cil converter em um servi\u00e7o monol\u00edtico que j\u00e1 \u00e9 cortado por features , muito mais f\u00e1cil de converter em servi\u00e7os separados do que em um projeto que organiza classes por camadas. A ado\u00e7\u00e3o do pacote por abordagem de features prepara seu aplicativo para um crescimento escal\u00e1vel. Contras \u00b6 Juntamente com o desenvolvimento do projeto, a estrutura dos pacotes requer mais cuidado. \u00c9 importante entender que a \u00e1rvore de pacotes evolui com o tempo \u00e0 medida que o aplicativo se torna mais complexo. De tempos em tempos, voc\u00ea ter\u00e1 que parar um pouco e considerar mover um pacote para um n\u00f3 diferente ou dividi-lo em outros menores. A clareza da estrutura n\u00e3o \u00e9 de gra\u00e7a. A equipe \u00e9 respons\u00e1vel por manter uma boa forma com o alinhamento ao conhecimento sobre o dom\u00ednio. Compreender o dom\u00ednio \u00e9 o elemento chave da estrutura limpa do projeto. A escolha do local certo para um novo feature pode ser problem\u00e1tica, especialmente para os rec\u00e9m-chegados da equipe, pois requer conhecimento sobre os neg\u00f3cios por tr\u00e1s do seu aplicativo. Algumas pessoas podem considerar isso uma vantagem, pois a abordagem incentiva o compartilhamento de conhecimento entre os membros da equipe. A introdu\u00e7\u00e3o de um novo desenvolvedor no projeto consome um pouco mais de tempo, mas pode ser vista como um investimento.","title":"Estrutura de projetos"},{"location":"java/boas-praticas/estrutura-projeto/#estrutura-de-projetos","text":"Estrutura de projetos Camadas Controller Model Service Repository View Value Objects Organiza\u00e7\u00e3o de pacotes Organiza\u00e7\u00e3o por camadas Pr\u00f3s Contras Organiza\u00e7\u00e3o por features Pr\u00f3s Contras","title":"Estrutura de projetos"},{"location":"java/boas-praticas/estrutura-projeto/#camadas","text":"","title":"Camadas"},{"location":"java/boas-praticas/estrutura-projeto/#controller","text":"A camada de controle (em ingl\u00eas, controller) gerencia e orquestra o trabalho, mas n\u00e3o faz o trabalho. Em outras palavras, faz alguma verifica\u00e7\u00e3o/valida\u00e7\u00e3o para descobrir para quais servi\u00e7os os dados da requisi\u00e7\u00e3o HTTP devem ser enviados e orquestra essas chamadas de servi\u00e7o. Atribui\u00e7\u00f5es: Gerencia as requisi\u00e7\u00f5es HTTP recebidas Decide qual servi\u00e7o deve fazer o trabalho Divide o trabalho em unidades consider\u00e1veis Passa os dados necess\u00e1rios das requisi\u00e7\u00f5es HTTP para o(s) servi\u00e7o(s) Se o trabalho exigir v\u00e1rios servi\u00e7os trabalhando em v\u00e1rias coisas, orquestra as chamadas dos servi\u00e7os. O controlador n\u00e3o deve estar fazendo o trabalho.","title":"Controller"},{"location":"java/boas-praticas/estrutura-projeto/#model","text":"A camada de modelo (em ingl\u00eas, model) representa o dom\u00ednio do problema, mant\u00e9m o estado e fornecer m\u00e9todos para acessar e alterar o estado da aplica\u00e7\u00e3o.","title":"Model"},{"location":"java/boas-praticas/estrutura-projeto/#service","text":"A camada de servi\u00e7o (em ingl\u00eas, service) \u00e9 respons\u00e1vel por concluir o trabalho e devolv\u00ea-lo ao controller . Ele cont\u00e9m a l\u00f3gica de neg\u00f3cio necess\u00e1ria para realmente atender aos requisitos e retornar o que o consumidor da API est\u00e1 solicitando. Atribui\u00e7\u00f5es: Recebe os dados de que precisa do gerente para executar suas tarefas Descobre os algoritmos, l\u00f3gica de neg\u00f3cios, chamadas ao banco de dados, etc envolvidos na conclus\u00e3o da solicita\u00e7\u00e3o. Geralmente se preocupa apenas com as tarefas que ele deve concluir N\u00e3o \u00e9 respons\u00e1vel por orquestrar as diferentes chamadas de servi\u00e7o Realiza o trabalho real necess\u00e1rio para concluir as tarefas/solicita\u00e7\u00e3o Retorna uma resposta para o controller A camada de servi\u00e7o (em ingl\u00eas, service) \u00e9 um padr\u00e3o interessante para aplica\u00e7\u00f5es que possuem regras de neg\u00f3cio/fluxos de funcionamento complexos e, al\u00e9m disso, para aplica\u00e7\u00f5es que possuem diferentes interfaces para um mesmo conjunto de dados (aplica\u00e7\u00f5es web, web services, desktop, etc). Ao usar esse padr\u00e3o passamos a ter um ponto bem claro na arquitetura em que vamos codificar regras de neg\u00f3cio complexas, como aquelas que envolvem v\u00e1rias entidades e a\u00e7\u00f5es distintas. Por exemplo, imagine um sistema de gerenciamento escolar que conta com a funcionalidade de \"trancamento de curso\". Ao trancar o curso algumas regras devem ser aplicadas: O status do aluno deve ser alterado para INATIVO; Todas as disciplinas em que o aluno est\u00e1 matriculado devem ser tamb\u00e9m trancadas; O coordenador deve ser notificado do trancamento via e-mail. Perceba que s\u00e3o regras que envolvem v\u00e1rias entidades (diferente de um simples CRUD) e a\u00e7\u00f5es espec\u00edficas (enviar e-mail). Se tiv\u00e9ssemos uma aplica\u00e7\u00e3o MVC apenas, a parte de acesso a dados j\u00e1 estaria no model, mas as regras de neg\u00f3cio talvez acabassem sendo implementadas no controller . Posteriormente, quando precis\u00e1ssemos criar um web servisse para permitir que essa funcionalidade seja acessada via app mobile, a l\u00f3gica seria repetida e a\u00ed j\u00e1 ter\u00edamos um problema de duplica\u00e7\u00e3o de c\u00f3digo. Como essa funcionalidade \u00e9 comum para as diversas \"interfaces\" do sistema, podemos codifica-la na camada de servi\u00e7o, que passaria a ser consumida pelas camadas superiores (camada de apresenta\u00e7\u00e3o - web, servi\u00e7os).","title":"Service"},{"location":"java/boas-praticas/estrutura-projeto/#repository","text":"O Repository \u00e9 considerado um padr\u00e3o de dom\u00ednio e faz parte das regras de neg\u00f3cios de uma aplica\u00e7\u00e3o. \u00c9 uma interface que n\u00e3o sabe nada da infra-estrutura. Ele n\u00e3o conhece o banco de dados. O que ele conhece \u00e9 o dom\u00ednio da aplica\u00e7\u00e3o. O Repository acessa o DAO que por sua vez devolve os dados de uma consulta. Portanto, Repository se torna apenas um \"reposit\u00f3rio de dom\u00ednio\". O padr\u00e3o Repository tem o objetivo de dar apoio ao dom\u00ednio (modelo) fornecendo persist\u00eancia ou n\u00e3o. Ao contr\u00e1rio do DAO, que \u00e9 um objeto de infra-estrutura da aplica\u00e7\u00e3o e faz parte da camada de persist\u00eancia. O Repository faz parte do modelo de dom\u00ednio que \u00e9 parte da camada de neg\u00f3cios. O Repository inclusive n\u00e3o precisa apenas ser usado em acesso a dados que venham de uma base de dados, podem servir para outros tipos de opera\u00e7\u00f5es.","title":"Repository"},{"location":"java/boas-praticas/estrutura-projeto/#view","text":"A camada de visualiza\u00e7\u00e3o (em ingl\u00eas, view) converte dados em uma renderiza\u00e7\u00e3o visual para resposta ao cliente (por exemplo, navegador da Web ou outro consumidor). Os dados ser\u00e3o fornecidos principalmente pelo controller ; no entanto, a view tamb\u00e9m pode ter um auxiliar que pode recuperar dados associados \u00e0 renderiza\u00e7\u00e3o e n\u00e3o necessariamente \u00e0 solicita\u00e7\u00e3o atual (por exemplo, dados aside , dados de rodap\u00e9). Atribui\u00e7\u00f5es: \u00c9 a camada que exibe uma representa\u00e7\u00e3o dos dados. \u00c9 camada de interface com usu\u00e1rio ( client-side ). Faz a exibi\u00e7\u00e3o dos dados, utilizando-se de HTML, XML, etc.","title":"View"},{"location":"java/boas-praticas/estrutura-projeto/#value-objects","text":"As entidades t\u00eam identidades (ID), os value objects n\u00e3o. Se as identidades de duas entidades forem diferentes, elas ser\u00e3o consideradas objetos/entidades diferentes, mesmo que todas as propriedades dessas entidades sejam iguais. Imagine duas pessoas diferentes que t\u00eam o mesmo nome, sobrenome e idade, mas s\u00e3o pessoas diferentes (seus n\u00fameros de identidade s\u00e3o diferentes). Para uma classe Endere\u00e7o (que \u00e9 um value object cl\u00e1ssico), se os dois endere\u00e7os tiverem o mesmo pa\u00eds, cidade e n\u00famero da rua, etc., eles ser\u00e3o considerados o mesmo endere\u00e7o. No DDD - Domain Driven Design (Design Orientado a Dom\u00ednio), o value object \u00e9 outro tipo de objeto de dom\u00ednio que pode incluir l\u00f3gica de neg\u00f3cios e \u00e9 uma parte essencial do dom\u00ednio.","title":"Value Objects"},{"location":"java/boas-praticas/estrutura-projeto/#organizacao-de-pacotes","text":"Da perspectiva da linguagem, os pacotes em Java fornecem dois features importantes, que s\u00e3o utilizados pelo compilador. Defini\u00e7\u00e3o de namespace para classes. V\u00e1rias classes com o mesmo nome podem ser usadas em um \u00fanico projeto, desde que perten\u00e7am a pacotes diferentes que distinguem uma classe da outra. Permitir definir modificadores de acesso para membros espec\u00edficos de um projeto. A acessibilidade de uma classe, interface, campos ou m\u00e9todos, pode ser limitada ou completamente proibida para membros de pacotes diferentes.","title":"Organiza\u00e7\u00e3o de pacotes"},{"location":"java/boas-praticas/estrutura-projeto/#organizacao-por-camadas","text":"Organiza a estrutura de classes por camadas. ![organizar_pacote_camada](_estrutura-projeto/organizar_pacote_camada.png)","title":"Organiza\u00e7\u00e3o por camadas"},{"location":"java/boas-praticas/estrutura-projeto/#pros","text":"Encontrar o lugar certo para uma nova classe em um aplicativo como esse \u00e9 realmente uma opera\u00e7\u00e3o f\u00e1cil. A estrutura \u00e9 criada no in\u00edcio do desenvolvimento e mantida inalterada durante toda a exist\u00eancia do projeto. A simplicidade permite manter o projeto em ordem, mesmo por desenvolvedores menos experientes, pois a estrutura \u00e9 facilmente compreens\u00edvel.","title":"Pr\u00f3s"},{"location":"java/boas-praticas/estrutura-projeto/#contras","text":"Uma grande desvantagem da abordagem do pacote por camada \u00e9 o uso excessivo do modificador de acesso p\u00fablico. A exposi\u00e7\u00e3o de um reposit\u00f3rio apenas a uma \u00fanica classe de servi\u00e7o requer que o reposit\u00f3rio seja p\u00fablico. Como efeito colateral, o reposit\u00f3rio \u00e9 acess\u00edvel a todas as outras classes do projeto, mesmo a partir de camadas que n\u00e3o devem se comunicar diretamente com ele. Essa abordagem incentiva a cria\u00e7\u00e3o de c\u00f3digo espaguete n\u00e3o sustent\u00e1vel e resulta em alto acoplamento entre pacotes. Mais dif\u00edcil avaliar a complexidade de um feature apenas observando o c\u00f3digo \u00e0 medida que as classes se espalham por v\u00e1rios diret\u00f3rios. O nome de um pacote deveria fornecer detalhes adicionais sobre seu conte\u00fado. Na abordagem pacote por camada, todos os pacotes descrevem a arquitetura da solu\u00e7\u00e3o, mas, separadamente, eles n\u00e3o fornecem informa\u00e7\u00f5es \u00fateis. Na verdade, em muitos casos, eles duplicam as informa\u00e7\u00f5es presentes nos nomes das classes de seus membros.","title":"Contras"},{"location":"java/boas-praticas/estrutura-projeto/#organizacao-por-features","text":"Organiza a estrutura de classes em torno de features (funcionalidades) ou modelos de dom\u00ednio. ![organizar_pacote_dominio](_estrutura-projeto/organizar_pacote_dominio.png)","title":"Organiza\u00e7\u00e3o por features"},{"location":"java/boas-praticas/estrutura-projeto/#pros_1","text":"Quando todas as classes de features est\u00e3o em um \u00fanico pacote, o modificador de acesso p\u00fablico \u00e9 muito mais expressivo, pois permite descrever qual parte de um feature deve ser acess\u00edvel por outras partes da aplica\u00e7\u00e3o. Dentro de um pacote, voc\u00ea deve favorecer o uso do modificador privado do pacote para melhorar a modulariza\u00e7\u00e3o. Tornar algo p\u00fablico deve ser uma decis\u00e3o consciente. Menos conex\u00f5es entre classes de pacotes diferentes levar\u00e3o a uma base de c\u00f3digo mais limpa e mais sustent\u00e1vel. Os pacotes t\u00eam nomes muito mais significativos que descrevem sua finalidade funcional. Apenas olhando a estrutura do projeto, voc\u00ea provavelmente pode adivinhar o que os usu\u00e1rios podem fazer com a aplica\u00e7\u00e3o. A abordagem tamb\u00e9m expressa conex\u00f5es hier\u00e1rquicas entre features . As ra\u00edzes agregadas do dom\u00ednio podem ser facilmente identificadas, pois existem no n\u00edvel mais baixo da \u00e1rvore de pacotes. A estrutura do pacote documenta o aplicativo. Com a crescente popularidade da arquitetura de microsservi\u00e7o, \u00e9 muito mais f\u00e1cil converter em um servi\u00e7o monol\u00edtico que j\u00e1 \u00e9 cortado por features , muito mais f\u00e1cil de converter em servi\u00e7os separados do que em um projeto que organiza classes por camadas. A ado\u00e7\u00e3o do pacote por abordagem de features prepara seu aplicativo para um crescimento escal\u00e1vel.","title":"Pr\u00f3s"},{"location":"java/boas-praticas/estrutura-projeto/#contras_1","text":"Juntamente com o desenvolvimento do projeto, a estrutura dos pacotes requer mais cuidado. \u00c9 importante entender que a \u00e1rvore de pacotes evolui com o tempo \u00e0 medida que o aplicativo se torna mais complexo. De tempos em tempos, voc\u00ea ter\u00e1 que parar um pouco e considerar mover um pacote para um n\u00f3 diferente ou dividi-lo em outros menores. A clareza da estrutura n\u00e3o \u00e9 de gra\u00e7a. A equipe \u00e9 respons\u00e1vel por manter uma boa forma com o alinhamento ao conhecimento sobre o dom\u00ednio. Compreender o dom\u00ednio \u00e9 o elemento chave da estrutura limpa do projeto. A escolha do local certo para um novo feature pode ser problem\u00e1tica, especialmente para os rec\u00e9m-chegados da equipe, pois requer conhecimento sobre os neg\u00f3cios por tr\u00e1s do seu aplicativo. Algumas pessoas podem considerar isso uma vantagem, pois a abordagem incentiva o compartilhamento de conhecimento entre os membros da equipe. A introdu\u00e7\u00e3o de um novo desenvolvedor no projeto consome um pouco mais de tempo, mas pode ser vista como um investimento.","title":"Contras"},{"location":"java/boas-praticas/inversao-dependencia/","text":"Invers\u00e3o de Depend\u00eancia \u00b6 Invers\u00e3o de Depend\u00eancia Introdu\u00e7\u00e3o Exemplo de viola\u00e7\u00e3o Invertendo a depend\u00eancia Conclus\u00e3o Introdu\u00e7\u00e3o \u00b6 O Princ\u00edpio da Invers\u00e3o de Depend\u00eancia (Dependency Inversion Principle), ou simplesmente DIP \u00e9 base para um bom design orientado a objetos e extremamente importante para o projeto de uma arquitetura de software flex\u00edvel e focada no dom\u00ednio. O DIP diz que: M\u00f3dulos de alto n\u00edvel n\u00e3o devem depender de m\u00f3dulos de baixo n\u00edvel. Ambos devem depender de abstra\u00e7\u00f5es; Abstra\u00e7\u00f5es n\u00e3o devem depender de detalhes. Detalhes devem depender de abstra\u00e7\u00f5es. Inverter a depend\u00eancia faz com que um cliente n\u00e3o fique fr\u00e1gil a mudan\u00e7as relacionadas a detalhes de implementa\u00e7\u00e3o. Isto \u00e9, alterar o detalhe n\u00e3o quebra o cliente. Al\u00e9m disso, o mesmo cliente pode ser reutilizado com outro detalhe de implementa\u00e7\u00e3o. Exemplo de viola\u00e7\u00e3o \u00b6 Vejam o exemplo do bot\u00e3o e da l\u00e2mpada, onde ambas as classes Botao e Lampada s\u00e3o classes concretas: public class Botao { private Lampada _lampada ; public void Acionar () { if ( condicao ) _lampada . Ligar (); } } O design acima viola o DIP uma vez que Botao depende de uma classe concreta Lampada . Ou seja, Botao conhece detalhes de implementa\u00e7\u00e3o ao inv\u00e9s de termos identificado uma abstra\u00e7\u00e3o para o design. Que abstra\u00e7\u00e3o seria essa? Botao deve ser capaz de tratar alguma a\u00e7\u00e3o e ligar ou desligar algum dispositivo, seja ele qual for: uma l\u00e2mpada, um motor, um alarme, etc. Invertendo a depend\u00eancia \u00b6 A solu\u00e7\u00e3o abaixo inverte a depend\u00eancia de bot\u00e3o para a l\u00e2mpada, fazendo com que ambos agora dependam da abstra\u00e7\u00e3o Dispositivo: public class Botao { private Dispositivo _dispositivo ; public void Acionar (){ if ( condicao ) _dispositivo . Ligar (); } } public interface Dispositivo { void Ligar (); void Desligar (); } public class Lampada : Dispositivo { public void Ligar () { // ligar lampada } public void Desligar () { // desligar lampada } } Ilustrando com UML, o que antes era: ![exemplo_sem_dip](_inversao_dependencia/exemplo_sem_dip.png) Passa a ser: ![exemplo_com_dip](_inversao_dependencia/exemplo_com_dip.png) O Princ\u00edpio da Invers\u00e3o de Depend\u00eancia \u00e9 um dos pilares para uma boa arquitetura de software, focada na resolu\u00e7\u00e3o do problema e flex\u00edvel quanto a detalhes de implementa\u00e7\u00e3o, como bancos de dados, servi\u00e7os web, leitura/escrita de arquivos, etc. Este princ\u00edpio refor\u00e7a que a abstra\u00e7\u00e3o est\u00e1 mais relacionada ao seu cliente do que ao servidor (a classe que realiza a abstra\u00e7\u00e3o). No exemplo ilustrado acima, Dispositivo (a abstra\u00e7\u00e3o) est\u00e1 diretamente ligado ao cliente ( Botao ). Sua implementa\u00e7\u00e3o ( Lampada ) \u00e9 um mero detalhe. Sendo assim, Dispositivo ficaria no mesmo pacote (ou componente) do Botao e n\u00e3o junto com sua implementa\u00e7\u00e3o Lampada . (Esta separa\u00e7\u00e3o de interface e implementa\u00e7\u00e3o em componentes distintos \u00e9 um padr\u00e3o conhecido por Separated Interface .) Outro exemplo bem comum deste padr\u00e3o est\u00e1 no uso do padr\u00e3o Reposit\u00f3rio. Neste caso, aplicamos o DIP para que nosso dom\u00ednio dependa de uma abstra\u00e7\u00e3o do Reposit\u00f3rio, ficando totalmente isolado de detalhes sobre persist\u00eancia: ![exemplo_com_dip_dominio](_inversao_dependencia/exemplo_com_dip_dominio.png) Levando a interface para junto do cliente, estamos dizendo \"o cliente funciona dessa maneira\" e quem implementa a interface (em outro componente) \u00e9 que deve atender a essa exig\u00eancia. Ou seja, a interface s\u00f3 mudar\u00e1 por necessidade do cliente . Por fim, quando h\u00e1 v\u00e1rios clientes em componentes distintos para a mesma interface, esta fica em um componente a parte. Voltando ao exemplo do Bot\u00e3o, ao colocar Dispositivo em um componente pr\u00f3prio (nem com o cliente nem com o servidor), ele poderia ser utilizado por Botao e por qualquer outro objeto capaz de ligar/desligar um dispositivo: ![exemplo_com_dip_dominio_clientes](_inversao_dependencia/exemplo_com_dip_dominio_clientes.png) Conclus\u00e3o \u00b6 O Princ\u00edpio da Invers\u00e3o de Depend\u00eancia \u00e9 um princ\u00edpio essencial para um bom design orientado a objetos, ao passo que o oposto leva a um design engessado e procedural. Identificar abstra\u00e7\u00f5es e inverter as depend\u00eancias garantem que o software seja mais flex\u00edvel e robusto, estando melhor preparado para mudan\u00e7as. Encerramos assim a s\u00e9rie sobre os princ\u00edpios SOLID, que juntos formam um conjunto de boas pr\u00e1ticas que devemos ter em nosso cinto de utilidades e que devemos aplicar sempre que pudermos para melhorar a qualidade do design e da arquitetura do software.","title":"Invers\u00e3o de Depend\u00eancia"},{"location":"java/boas-praticas/inversao-dependencia/#inversao-de-dependencia","text":"Invers\u00e3o de Depend\u00eancia Introdu\u00e7\u00e3o Exemplo de viola\u00e7\u00e3o Invertendo a depend\u00eancia Conclus\u00e3o","title":"Invers\u00e3o de Depend\u00eancia"},{"location":"java/boas-praticas/inversao-dependencia/#introducao","text":"O Princ\u00edpio da Invers\u00e3o de Depend\u00eancia (Dependency Inversion Principle), ou simplesmente DIP \u00e9 base para um bom design orientado a objetos e extremamente importante para o projeto de uma arquitetura de software flex\u00edvel e focada no dom\u00ednio. O DIP diz que: M\u00f3dulos de alto n\u00edvel n\u00e3o devem depender de m\u00f3dulos de baixo n\u00edvel. Ambos devem depender de abstra\u00e7\u00f5es; Abstra\u00e7\u00f5es n\u00e3o devem depender de detalhes. Detalhes devem depender de abstra\u00e7\u00f5es. Inverter a depend\u00eancia faz com que um cliente n\u00e3o fique fr\u00e1gil a mudan\u00e7as relacionadas a detalhes de implementa\u00e7\u00e3o. Isto \u00e9, alterar o detalhe n\u00e3o quebra o cliente. Al\u00e9m disso, o mesmo cliente pode ser reutilizado com outro detalhe de implementa\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"java/boas-praticas/inversao-dependencia/#exemplo-de-violacao","text":"Vejam o exemplo do bot\u00e3o e da l\u00e2mpada, onde ambas as classes Botao e Lampada s\u00e3o classes concretas: public class Botao { private Lampada _lampada ; public void Acionar () { if ( condicao ) _lampada . Ligar (); } } O design acima viola o DIP uma vez que Botao depende de uma classe concreta Lampada . Ou seja, Botao conhece detalhes de implementa\u00e7\u00e3o ao inv\u00e9s de termos identificado uma abstra\u00e7\u00e3o para o design. Que abstra\u00e7\u00e3o seria essa? Botao deve ser capaz de tratar alguma a\u00e7\u00e3o e ligar ou desligar algum dispositivo, seja ele qual for: uma l\u00e2mpada, um motor, um alarme, etc.","title":"Exemplo de viola\u00e7\u00e3o"},{"location":"java/boas-praticas/inversao-dependencia/#invertendo-a-dependencia","text":"A solu\u00e7\u00e3o abaixo inverte a depend\u00eancia de bot\u00e3o para a l\u00e2mpada, fazendo com que ambos agora dependam da abstra\u00e7\u00e3o Dispositivo: public class Botao { private Dispositivo _dispositivo ; public void Acionar (){ if ( condicao ) _dispositivo . Ligar (); } } public interface Dispositivo { void Ligar (); void Desligar (); } public class Lampada : Dispositivo { public void Ligar () { // ligar lampada } public void Desligar () { // desligar lampada } } Ilustrando com UML, o que antes era: ![exemplo_sem_dip](_inversao_dependencia/exemplo_sem_dip.png) Passa a ser: ![exemplo_com_dip](_inversao_dependencia/exemplo_com_dip.png) O Princ\u00edpio da Invers\u00e3o de Depend\u00eancia \u00e9 um dos pilares para uma boa arquitetura de software, focada na resolu\u00e7\u00e3o do problema e flex\u00edvel quanto a detalhes de implementa\u00e7\u00e3o, como bancos de dados, servi\u00e7os web, leitura/escrita de arquivos, etc. Este princ\u00edpio refor\u00e7a que a abstra\u00e7\u00e3o est\u00e1 mais relacionada ao seu cliente do que ao servidor (a classe que realiza a abstra\u00e7\u00e3o). No exemplo ilustrado acima, Dispositivo (a abstra\u00e7\u00e3o) est\u00e1 diretamente ligado ao cliente ( Botao ). Sua implementa\u00e7\u00e3o ( Lampada ) \u00e9 um mero detalhe. Sendo assim, Dispositivo ficaria no mesmo pacote (ou componente) do Botao e n\u00e3o junto com sua implementa\u00e7\u00e3o Lampada . (Esta separa\u00e7\u00e3o de interface e implementa\u00e7\u00e3o em componentes distintos \u00e9 um padr\u00e3o conhecido por Separated Interface .) Outro exemplo bem comum deste padr\u00e3o est\u00e1 no uso do padr\u00e3o Reposit\u00f3rio. Neste caso, aplicamos o DIP para que nosso dom\u00ednio dependa de uma abstra\u00e7\u00e3o do Reposit\u00f3rio, ficando totalmente isolado de detalhes sobre persist\u00eancia: ![exemplo_com_dip_dominio](_inversao_dependencia/exemplo_com_dip_dominio.png) Levando a interface para junto do cliente, estamos dizendo \"o cliente funciona dessa maneira\" e quem implementa a interface (em outro componente) \u00e9 que deve atender a essa exig\u00eancia. Ou seja, a interface s\u00f3 mudar\u00e1 por necessidade do cliente . Por fim, quando h\u00e1 v\u00e1rios clientes em componentes distintos para a mesma interface, esta fica em um componente a parte. Voltando ao exemplo do Bot\u00e3o, ao colocar Dispositivo em um componente pr\u00f3prio (nem com o cliente nem com o servidor), ele poderia ser utilizado por Botao e por qualquer outro objeto capaz de ligar/desligar um dispositivo: ![exemplo_com_dip_dominio_clientes](_inversao_dependencia/exemplo_com_dip_dominio_clientes.png)","title":"Invertendo a depend\u00eancia"},{"location":"java/boas-praticas/inversao-dependencia/#conclusao","text":"O Princ\u00edpio da Invers\u00e3o de Depend\u00eancia \u00e9 um princ\u00edpio essencial para um bom design orientado a objetos, ao passo que o oposto leva a um design engessado e procedural. Identificar abstra\u00e7\u00f5es e inverter as depend\u00eancias garantem que o software seja mais flex\u00edvel e robusto, estando melhor preparado para mudan\u00e7as. Encerramos assim a s\u00e9rie sobre os princ\u00edpios SOLID, que juntos formam um conjunto de boas pr\u00e1ticas que devemos ter em nosso cinto de utilidades e que devemos aplicar sempre que pudermos para melhorar a qualidade do design e da arquitetura do software.","title":"Conclus\u00e3o"},{"location":"java/frameworks/play-framework/","text":"Play Framework \u00b6 Play Framework Comandos Criar uma aplica\u00e7\u00e3o Executar aplica\u00e7\u00e3o Evolutions Verificar Aplicar Comandos \u00b6 Criar uma aplica\u00e7\u00e3o \u00b6 play new <NOME> Executar aplica\u00e7\u00e3o \u00b6 play run Evolutions \u00b6 Verificar \u00b6 play evolutions Aplicar \u00b6 play evolutions:apply","title":"Play Framework"},{"location":"java/frameworks/play-framework/#play-framework","text":"Play Framework Comandos Criar uma aplica\u00e7\u00e3o Executar aplica\u00e7\u00e3o Evolutions Verificar Aplicar","title":"Play Framework"},{"location":"java/frameworks/play-framework/#comandos","text":"","title":"Comandos"},{"location":"java/frameworks/play-framework/#criar-uma-aplicacao","text":"play new <NOME>","title":"Criar uma aplica\u00e7\u00e3o"},{"location":"java/frameworks/play-framework/#executar-aplicacao","text":"play run","title":"Executar aplica\u00e7\u00e3o"},{"location":"java/frameworks/play-framework/#evolutions","text":"","title":"Evolutions"},{"location":"java/frameworks/play-framework/#verificar","text":"play evolutions","title":"Verificar"},{"location":"java/frameworks/play-framework/#aplicar","text":"play evolutions:apply","title":"Aplicar"},{"location":"java/frameworks/spring-boot/_sumario/","text":"Sum\u00e1rio \u00b6 Iniciando Introdu\u00e7\u00e3o Hello World Guia R\u00e1pido Anota\u00e7\u00f5es M\u00e9todos","title":"Sum\u00e1rio"},{"location":"java/frameworks/spring-boot/_sumario/#sumario","text":"Iniciando Introdu\u00e7\u00e3o Hello World Guia R\u00e1pido Anota\u00e7\u00f5es M\u00e9todos","title":"Sum\u00e1rio"},{"location":"java/frameworks/spring-boot/anotacoes/","text":"Anota\u00e7\u00f5es \u00b6 Anota\u00e7\u00f5es Anota\u00e7\u00f5es do Spring Framework Core Anota\u00e7\u00f5es geral @Required @Autowired @Qualifier @Configuration @ComponentScan @Bean @Value @Valid @Lazy @DependsOn @Lookup @Primary @Scope @Order Anota\u00e7\u00f5es de estere\u00f3tipo @Component @Controller @Service @Repository @Configuration Anota\u00e7\u00f5es de configura\u00e7\u00e3o do contexto @Profile @Import @ImportResource @PropertySource @PropertySources Anota\u00e7\u00f5es do Spring Framework MVC @Controller @CookieValue @CrossOrigin @RequestMapping Variantes que comp\u00f5em @RequestMapping @ModelAttribute @GetMapping @PostMapping @PutMapping @DeleteMapping @PatchMapping @ExceptionHandler @InitBinder @Mappings e @Mapping @MatrixVariable @PathVariable @RequestAttribute @RequestBody @RequestHeader @RequestParam @RequestPart @ResponseBody @ResponseStatus @ControllerAdvice @RestController @RestControllerAdvice @SessionAttribute @SessionAttributes Anota\u00e7\u00f5es do Spring Boot @SpringBootApplication @EnableAutoConfiguration Condicionais da autoconfigura\u00e7\u00e3o @ConditionalOnClass e @ConditionalOnMissingClass @ConditionalOnBean e @ConditionalOnMissingBean @ConditionalOnProperty @ConditionalOnResource @ConditionalOnWebApplication e @ConditionalOnNotWebApplication @ConditionalExpression @Conditional Anota\u00e7\u00f5es do Spring Framework Scheduling @EnableAsync @EnableScheduling @Async @Scheduled @Schedules Anota\u00e7\u00f5es do Spring Framework Cloud @EnableConfigServer @EnableEurekaServer @EnableDiscoveryClient @EnableCircuitBreaker @HystrixCommand Anota\u00e7\u00f5es do Spring Framework DataAccess @Transactional @NoRepositoryBean @Param @Id @Transient @CreatedBy, @LastModifiedBy, @CreatedDate, @LastModifiedDate Anota\u00e7\u00f5es do Spring Framework Data JPA @Query @Procedure @Lock @Modifying @EnableJpaRepositories Anota\u00e7\u00f5es do Spring Framework Cache-Based @Cacheable @CachePut @CacheEvict @CacheConfig Anota\u00e7\u00f5es do Spring Framework Testing @BootstrapWith @ContextConfiguration @WebAppConfiguration @Timed @Repeat @Commit @RollBack @DirtiesContext @BeforeTransaction @AfterTransaction @Sql @SqlConfig @SqlGroup @SpringBootTest @DataJpaTest @DataMongoTest @WebMVCTest @AutoConfigureMockMVC @MockBean @JsonTest @TestPropertySource Links Anota\u00e7\u00f5es do Spring Framework Core \u00b6 Anota\u00e7\u00f5es geral \u00b6 @Required \u00b6 Essa anota\u00e7\u00e3o indica que o m\u00e9todo setter de um bean deve ser configurado para receber inje\u00e7\u00e3o de depend\u00eancia com a propriedade necess\u00e1ria no momento da configura\u00e7\u00e3o. Em outras palavras, indica que o bean deve ser preenchido no momento da configura\u00e7\u00e3o com a propriedade necess\u00e1ria. Exemplo usando @Required nos m\u00e9todos setter para marcar depend\u00eancias que queremos preencher atrav\u00e9s do XML: @Required void setColor ( String color ) { this . color = color ; } <bean class= \"com.javaguides.spring.Car\" > <property name= \"color\" value= \"verde\" /> </bean> @Autowired \u00b6 Permite a inje\u00e7\u00e3o da depend\u00eancia do objeto implicitamente, ou seja, marca uma depend\u00eancia que o Spring resolver\u00e1 e injetar\u00e1. Veja mais @Qualifier \u00b6 Indica qual bean ser\u00e1 usada cosa haja mais de um bean do mesmo tipo. Veja mais @Configuration \u00b6 Indica que uma classe declara um ou mais m\u00e9todos @Bean e pode ser processada pelo cont\u00eainer Spring para gerar defini\u00e7\u00f5es de bean e solicita\u00e7\u00f5es de servi\u00e7o para esses beans em tempo de execu\u00e7\u00e3o. @Configuration engloba a anota\u00e7\u00e3o @Component . Veja mais @ComponentScan \u00b6 Essa anota\u00e7\u00e3o \u00e9 usada com a anota\u00e7\u00e3o @Configuration para permitir que o Spring conhe\u00e7a os pacotes que ser\u00e3o analisados em busca das nota\u00e7\u00f5es. Tamb\u00e9m \u00e9 poss\u00edvel especificar pacotes externos para serem inclusos na an\u00e1lise atrav\u00e9s dos atributos basePackageClasses ou basePackage . Se pacotes espec\u00edficos n\u00e3o forem definidos, a an\u00e1lise ocorrer\u00e1 a partir do pacote da classe que declara essa anota\u00e7\u00e3o e prosseguir\u00e1 pelos sub-pacotes apenas. Veja mais @Bean \u00b6 Esta anota\u00e7\u00e3o \u00e9 usada no n\u00edvel do m\u00e9todo. A anota\u00e7\u00e3o @Bean \u00e9 usada juntamente com o @Configuration para criar beans Spring. O m\u00e9todo anotado com esta anota\u00e7\u00e3o funciona como ID do bean e cria e retorna o bean real. O bean resultante tem o mesmo nome que o factory method . Para usar um nome diferente, ele deve ser passado como argumento. @Bean ( \"engine\" ) Engine getEngine () { return new Engine (); } @Value \u00b6 A anota\u00e7\u00e3o @Value indica o valor padr\u00e3o para o campo ou par\u00e2metro do construtor ou m\u00e9todo setter . Veja mais @Valid \u00b6 O Spring fornece suporte para valida\u00e7\u00e3o declarativa com JSR-303. Esse suporte \u00e9 ativado automaticamente se um provedor JSR-303, como o Hibernate Validator, estiver presente no seu CLASSPATH . Quando ativado, voc\u00ea pode acionar a valida\u00e7\u00e3o simplesmente anotando um par\u00e2metro do m\u00e9todo Controller com a anota\u00e7\u00e3o @Valid . @PostMapping ( \"/users\" ) ResponseEntity < String > addUser ( @Valid @RequestBody User user ) { // persisting the user return ResponseEntity . ok ( \"User is valid\" ); } @Lazy \u00b6 @DependsOn \u00b6 @Lookup \u00b6 @Primary \u00b6 @Scope \u00b6 @Order \u00b6 Anota\u00e7\u00f5es de estere\u00f3tipo \u00b6 @Component \u00b6 Esta anota\u00e7\u00e3o \u00e9 usada em classes para indicar que \u00e9 componente Spring. A anota\u00e7\u00e3o @Component marca a classe para que o mecanismo de busca de componente do Spring a adicione ao contexto da aplica\u00e7\u00e3o. Por padr\u00e3o, as inst\u00e2ncias de bean destas classes t\u00eam o mesmo nome que o nome da classe com uma inicial em min\u00fascula . Entretanto, podemos especificar um nome diferente usando o argumento de valor opcional desta anota\u00e7\u00e3o. Como @Repository , @Service , @Configuration e @Controller s\u00e3o todos meta-anota\u00e7\u00f5es de @Component , eles compartilham o mesmo comportamento de nomea\u00e7\u00e3o de beans . Al\u00e9m disso, o Spring os coleta automaticamente durante o processo de busca de componentes. @Controller \u00b6 A anota\u00e7\u00e3o que informa ao cont\u00eainer Spring IOC que a classe \u00e9 um controlador do Spring MVC. @Service \u00b6 Anota\u00e7\u00e3o que informa que \u00e9 uma classe que executa algum servi\u00e7o, como l\u00f3gica de neg\u00f3cios, c\u00e1lculos e chamar APIs externas. Portanto, define que \u00e9 uma classe que pertence a camada de servi\u00e7os. @Repository \u00b6 Esta anota\u00e7\u00e3o \u00e9 usada nas classes que est\u00e3o trabalhando diretamente com a camada de banco de dados. As classes anotadas com @Repository capturam exce\u00e7\u00f5es espec\u00edficas da plataforma do banco de dados e as lan\u00e7am novamente como uma das exce\u00e7\u00f5es das subclasses de DataAccessExeption do Spring. @Configuration \u00b6 Presente em outra se\u00e7\u00e3o Anota\u00e7\u00f5es de configura\u00e7\u00e3o do contexto \u00b6 @Profile \u00b6 @Import \u00b6 @ImportResource \u00b6 @PropertySource \u00b6 @PropertySources \u00b6 Anota\u00e7\u00f5es do Spring Framework MVC \u00b6 @Controller \u00b6 Presente em outra se\u00e7\u00e3o @CookieValue \u00b6 @CrossOrigin \u00b6 @RequestMapping \u00b6 Esta anota\u00e7\u00e3o \u00e9 usada no n\u00edvel de classe ou de m\u00e9todo. A anota\u00e7\u00e3o @RequestMapping \u00e9 usada para mapear requisi\u00e7\u00f5es Web para classes e m\u00e9todos espec\u00edficos que fazem parte de um @Controller . Veja mais Variantes que comp\u00f5em @RequestMapping \u00b6 @ModelAttribute \u00b6 Com esta anota\u00e7\u00e3o, podemos acessar elementos que est\u00e3o no Model de um MVC @Controller , passando o nome do Model como par\u00e2metro. @PostMapping ( \"/teste\" ) void assembleExemplo ( @ModelAttribute ( \"exemploClass\" ) ExemploClass exemplo ) { } /* Sem par\u00e2metro Spring ir\u00e1 usar o mesmo nome do argumento*/ @PostMapping ( \"/teste\" ) void assembleExemplo ( @ModelAttribute ExemploClass exemploClass ) { } Se anotarmos um m\u00e9todo, o Spring adicionar\u00e1 automaticamente o valor de retorno do m\u00e9todo ao modelo. @ModelAttribute ( \"exemploClass\" ) ExemploClass getExemplo () { } /* Sem par\u00e2metro Spring ir\u00e1 usar o mesmo nome do m\u00e9todo*/ @ModelAttribute ExemploClass exemploClass () { } @GetMapping \u00b6 Mapeia requisi\u00e7\u00f5es HTTP GET para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.GET) . @GetMapping ( \"/exemplo\" ) public List < Exemplo > getAllExemplos () { return exemploRepository . findAll (); } /* ou */ @GetMapping ( \"/exemplo/{id}\" ) public ResponseEntity < Exemplo > getExemploById ( @PathVariable ( value = \"id\" ) Long id ) { } @PostMapping \u00b6 Mapeia requisi\u00e7\u00f5es HTTP POST para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.POST) . @PutMapping \u00b6 Mapeia requisi\u00e7\u00f5es HTTP PUT para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.PUT) . @DeleteMapping \u00b6 Mapeia requisi\u00e7\u00f5es HTTP DELETE para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.DELETE) . @PatchMapping \u00b6 Mapeia requisi\u00e7\u00f5es HTTP PATCH para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.PATCH) . As requisi\u00e7\u00f5es PUT e PATCH s\u00e3o usadas para indicar um requisi\u00e7\u00e3o de altera\u00e7\u00e3o de dados. O PUT, indica que a altera\u00e7\u00e3o do dado ser\u00e1 com refer\u00eancia a entidade completa. J\u00e1 o PATCH indica atualiza\u00e7\u00e3o parcial, ou seja, somente alguns campos da entidade. @ExceptionHandler \u00b6 @InitBinder \u00b6 @Mappings e @Mapping \u00b6 @MatrixVariable \u00b6 @PathVariable \u00b6 Esta anota\u00e7\u00e3o indica que um argumento de m\u00e9todo est\u00e1 vinculado a uma vari\u00e1vel de template do URI. @RequestMapping ( \"exemplo/{id}\" ) Exemplo getExemplo ( @PathVariable ( \"id\" ) long id ) { } /* Sem par\u00e2metro Spring ir\u00e1 usar o mesmo nome do argumento */ @RequestMapping ( \"exemplo/{id}\" ) Exemplo getExemplo ( @PathVariable long id ) { } Podemos marcar a vari\u00e1vel como n\u00e3o obrigat\u00f3ria. @RequestMapping ( \"/{id}\" ) Exemplo getExemplo ( @PathVariable ( required = false ) long id ) { } @RequestAttribute \u00b6 @RequestBody \u00b6 A anota\u00e7\u00e3o @RequestBody indica que um par\u00e2metro do m\u00e9todo deve ser vinculado ao valor do corpo da requisi\u00e7\u00e3o HTTP ( HttpRequest ). Em outras palavras, a anota\u00e7\u00e3o @RequestBody mapeia o corpo HttpRequest (JSON) para um objeto Java. O HttpMessageConveter \u00e9 respons\u00e1vel pela convers\u00e3o da mensagem de requisi\u00e7\u00e3o HTTP para o objeto. No exemplo abaixo, o corpo HttpRequest ser\u00e1 convertido para o objeto da classe ClasseExemplo . @PostMapping ( \"/teste\" ) public ResponseEntity funcao ( @RequestBody ClasseExemplo exemplo ) { } @RequestHeader \u00b6 @RequestParam \u00b6 @RequestPart \u00b6 @ResponseBody \u00b6 A anota\u00e7\u00e3o @ResponseBody indica que o objeto retornado no m\u00e9todo ser\u00e1 serializado automaticamente em JSON e gravado na resposta HTTP ( HttpResponse ). Assim como no @RequestBody , o HttpMessageConveter tamb\u00e9m \u00e9 respons\u00e1vel pela convers\u00e3o do objeto para a resposta HTTP. @ResponseBody @PostMapping ( \"/teste\" ) public ResponseEntity funcao () { return new ClasseExemplo (); } Se anotarmos uma classe @Controller com @ResponseBody , a anota\u00e7\u00e3o ser\u00e1 aplicada em todos m\u00e9todos, equivalendo a anota\u00e7\u00e3o @RestController . @ResponseStatus \u00b6 @ControllerAdvice \u00b6 @RestController \u00b6 Incorpora o conjunto de anota\u00e7\u00f5es: @Controller e @ResponseBody . Com a anota\u00e7\u00e3o @RestController , todos m\u00e9todos da classe ter\u00e3o implicitamente a anota\u00e7\u00e3o @ResponseBody . @RestControllerAdvice \u00b6 @SessionAttribute \u00b6 @SessionAttributes \u00b6 Anota\u00e7\u00f5es do Spring Boot \u00b6 @SpringBootApplication \u00b6 Incorpora o conjunto de anota\u00e7\u00f5es: @EnableAutoConfiguration + @ComponentScan + @Configuration + @ConfigurationPropertiesScan . Veja mais @EnableAutoConfiguration \u00b6 Configura a aplica\u00e7\u00e3o automaticamente baseando nos JARs presentes no CLASSPATH e em como os beans foram definidos. Veja mais Condicionais da autoconfigura\u00e7\u00e3o \u00b6 @ConditionalOnClass e @ConditionalOnMissingClass \u00b6 A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se a classe no argumento da anota\u00e7\u00e3o estiver presente/ausente. @Configuration @ConditionalOnClass ( DataSource . class ) class MySQLAutoconfiguration { } @ConditionalOnBean e @ConditionalOnMissingBean \u00b6 A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se o bean no argumento da anota\u00e7\u00e3o estiver presente/ausente. @Bean @ConditionalOnBean ( name = \"dataSource\" ) LocalContainerEntityManagerFactoryBean entityManagerFactory () { } @ConditionalOnProperty \u00b6 A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se os valores das propriedades (campos) corresponderem as valores do argumento da anota\u00e7\u00e3o. @Bean @ConditionalOnProperty ( name = \"usemysql\" , havingValue = \"local\" ) DataSource dataSource () { } @ConditionalOnResource \u00b6 A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se o recurso no argumento da anota\u00e7\u00e3o estiver presente/ausente. @ConditionalOnResource ( resources = \"classpath:mysql.properties\" ) Properties additionalProperties () { } @ConditionalOnWebApplication e @ConditionalOnNotWebApplication \u00b6 A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se a aplica\u00e7\u00e3o atual \u00e9 ou n\u00e3o uma aplica\u00e7\u00e3o Web. @ConditionalOnWebApplication HealthCheckController healthCheckController () { } @ConditionalExpression \u00b6 A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se a express\u00e3o SpEL (Spring Expression Language) for verdadeira. @Bean @ConditionalOnExpression ( \"${usemysql} && ${mysqlserver == 'local'}\" ) DataSource dataSource () { } @Conditional \u00b6 A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se satisfazer a condi\u00e7\u00e3o personalizada da classe passada como par\u00e2metro. @Conditional ( ExemploCondition . class ) Properties additionalProperties () { } Anota\u00e7\u00f5es do Spring Framework Scheduling \u00b6 @EnableAsync \u00b6 @EnableScheduling \u00b6 @Async \u00b6 @Scheduled \u00b6 @Schedules \u00b6 Anota\u00e7\u00f5es do Spring Framework Cloud \u00b6 @EnableConfigServer \u00b6 @EnableEurekaServer \u00b6 @EnableDiscoveryClient \u00b6 @EnableCircuitBreaker \u00b6 @HystrixCommand \u00b6 Anota\u00e7\u00f5es do Spring Framework DataAccess \u00b6 @Transactional \u00b6 @NoRepositoryBean \u00b6 @Param \u00b6 @Id \u00b6 @Transient \u00b6 @CreatedBy, @LastModifiedBy, @CreatedDate, @LastModifiedDate \u00b6 Anota\u00e7\u00f5es do Spring Framework Data JPA \u00b6 @Query \u00b6 @Procedure \u00b6 @Lock \u00b6 @Modifying \u00b6 @EnableJpaRepositories \u00b6 Anota\u00e7\u00f5es do Spring Framework Cache-Based \u00b6 @Cacheable \u00b6 @CachePut \u00b6 @CacheEvict \u00b6 @CacheConfig \u00b6 Anota\u00e7\u00f5es do Spring Framework Testing \u00b6 @BootstrapWith \u00b6 @ContextConfiguration \u00b6 @WebAppConfiguration \u00b6 @Timed \u00b6 @Repeat \u00b6 @Commit \u00b6 @RollBack \u00b6 @DirtiesContext \u00b6 @BeforeTransaction \u00b6 @AfterTransaction \u00b6 @Sql \u00b6 @SqlConfig \u00b6 @SqlGroup \u00b6 @SpringBootTest \u00b6 @DataJpaTest \u00b6 @DataMongoTest \u00b6 @WebMVCTest \u00b6 @AutoConfigureMockMVC \u00b6 @MockBean \u00b6 @JsonTest \u00b6 @TestPropertySource \u00b6 Links \u00b6 https://www.baeldung.com/spring-core-annotations https://springframework.guru/spring-framework-annotations https://www.javaguides.net/2018/10/15-spring-core-annotations.html https://www.javadevjournal.com/spring/spring-annotations/","title":"Anota\u00e7\u00f5es"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes","text":"Anota\u00e7\u00f5es Anota\u00e7\u00f5es do Spring Framework Core Anota\u00e7\u00f5es geral @Required @Autowired @Qualifier @Configuration @ComponentScan @Bean @Value @Valid @Lazy @DependsOn @Lookup @Primary @Scope @Order Anota\u00e7\u00f5es de estere\u00f3tipo @Component @Controller @Service @Repository @Configuration Anota\u00e7\u00f5es de configura\u00e7\u00e3o do contexto @Profile @Import @ImportResource @PropertySource @PropertySources Anota\u00e7\u00f5es do Spring Framework MVC @Controller @CookieValue @CrossOrigin @RequestMapping Variantes que comp\u00f5em @RequestMapping @ModelAttribute @GetMapping @PostMapping @PutMapping @DeleteMapping @PatchMapping @ExceptionHandler @InitBinder @Mappings e @Mapping @MatrixVariable @PathVariable @RequestAttribute @RequestBody @RequestHeader @RequestParam @RequestPart @ResponseBody @ResponseStatus @ControllerAdvice @RestController @RestControllerAdvice @SessionAttribute @SessionAttributes Anota\u00e7\u00f5es do Spring Boot @SpringBootApplication @EnableAutoConfiguration Condicionais da autoconfigura\u00e7\u00e3o @ConditionalOnClass e @ConditionalOnMissingClass @ConditionalOnBean e @ConditionalOnMissingBean @ConditionalOnProperty @ConditionalOnResource @ConditionalOnWebApplication e @ConditionalOnNotWebApplication @ConditionalExpression @Conditional Anota\u00e7\u00f5es do Spring Framework Scheduling @EnableAsync @EnableScheduling @Async @Scheduled @Schedules Anota\u00e7\u00f5es do Spring Framework Cloud @EnableConfigServer @EnableEurekaServer @EnableDiscoveryClient @EnableCircuitBreaker @HystrixCommand Anota\u00e7\u00f5es do Spring Framework DataAccess @Transactional @NoRepositoryBean @Param @Id @Transient @CreatedBy, @LastModifiedBy, @CreatedDate, @LastModifiedDate Anota\u00e7\u00f5es do Spring Framework Data JPA @Query @Procedure @Lock @Modifying @EnableJpaRepositories Anota\u00e7\u00f5es do Spring Framework Cache-Based @Cacheable @CachePut @CacheEvict @CacheConfig Anota\u00e7\u00f5es do Spring Framework Testing @BootstrapWith @ContextConfiguration @WebAppConfiguration @Timed @Repeat @Commit @RollBack @DirtiesContext @BeforeTransaction @AfterTransaction @Sql @SqlConfig @SqlGroup @SpringBootTest @DataJpaTest @DataMongoTest @WebMVCTest @AutoConfigureMockMVC @MockBean @JsonTest @TestPropertySource Links","title":"Anota\u00e7\u00f5es"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-core","text":"","title":"Anota\u00e7\u00f5es do Spring Framework Core"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-geral","text":"","title":"Anota\u00e7\u00f5es geral"},{"location":"java/frameworks/spring-boot/anotacoes/#required","text":"Essa anota\u00e7\u00e3o indica que o m\u00e9todo setter de um bean deve ser configurado para receber inje\u00e7\u00e3o de depend\u00eancia com a propriedade necess\u00e1ria no momento da configura\u00e7\u00e3o. Em outras palavras, indica que o bean deve ser preenchido no momento da configura\u00e7\u00e3o com a propriedade necess\u00e1ria. Exemplo usando @Required nos m\u00e9todos setter para marcar depend\u00eancias que queremos preencher atrav\u00e9s do XML: @Required void setColor ( String color ) { this . color = color ; } <bean class= \"com.javaguides.spring.Car\" > <property name= \"color\" value= \"verde\" /> </bean>","title":"@Required"},{"location":"java/frameworks/spring-boot/anotacoes/#autowired","text":"Permite a inje\u00e7\u00e3o da depend\u00eancia do objeto implicitamente, ou seja, marca uma depend\u00eancia que o Spring resolver\u00e1 e injetar\u00e1. Veja mais","title":"@Autowired"},{"location":"java/frameworks/spring-boot/anotacoes/#qualifier","text":"Indica qual bean ser\u00e1 usada cosa haja mais de um bean do mesmo tipo. Veja mais","title":"@Qualifier"},{"location":"java/frameworks/spring-boot/anotacoes/#configuration","text":"Indica que uma classe declara um ou mais m\u00e9todos @Bean e pode ser processada pelo cont\u00eainer Spring para gerar defini\u00e7\u00f5es de bean e solicita\u00e7\u00f5es de servi\u00e7o para esses beans em tempo de execu\u00e7\u00e3o. @Configuration engloba a anota\u00e7\u00e3o @Component . Veja mais","title":" @Configuration"},{"location":"java/frameworks/spring-boot/anotacoes/#componentscan","text":"Essa anota\u00e7\u00e3o \u00e9 usada com a anota\u00e7\u00e3o @Configuration para permitir que o Spring conhe\u00e7a os pacotes que ser\u00e3o analisados em busca das nota\u00e7\u00f5es. Tamb\u00e9m \u00e9 poss\u00edvel especificar pacotes externos para serem inclusos na an\u00e1lise atrav\u00e9s dos atributos basePackageClasses ou basePackage . Se pacotes espec\u00edficos n\u00e3o forem definidos, a an\u00e1lise ocorrer\u00e1 a partir do pacote da classe que declara essa anota\u00e7\u00e3o e prosseguir\u00e1 pelos sub-pacotes apenas. Veja mais","title":"@ComponentScan"},{"location":"java/frameworks/spring-boot/anotacoes/#bean","text":"Esta anota\u00e7\u00e3o \u00e9 usada no n\u00edvel do m\u00e9todo. A anota\u00e7\u00e3o @Bean \u00e9 usada juntamente com o @Configuration para criar beans Spring. O m\u00e9todo anotado com esta anota\u00e7\u00e3o funciona como ID do bean e cria e retorna o bean real. O bean resultante tem o mesmo nome que o factory method . Para usar um nome diferente, ele deve ser passado como argumento. @Bean ( \"engine\" ) Engine getEngine () { return new Engine (); }","title":"@Bean"},{"location":"java/frameworks/spring-boot/anotacoes/#value","text":"A anota\u00e7\u00e3o @Value indica o valor padr\u00e3o para o campo ou par\u00e2metro do construtor ou m\u00e9todo setter . Veja mais","title":"@Value"},{"location":"java/frameworks/spring-boot/anotacoes/#valid","text":"O Spring fornece suporte para valida\u00e7\u00e3o declarativa com JSR-303. Esse suporte \u00e9 ativado automaticamente se um provedor JSR-303, como o Hibernate Validator, estiver presente no seu CLASSPATH . Quando ativado, voc\u00ea pode acionar a valida\u00e7\u00e3o simplesmente anotando um par\u00e2metro do m\u00e9todo Controller com a anota\u00e7\u00e3o @Valid . @PostMapping ( \"/users\" ) ResponseEntity < String > addUser ( @Valid @RequestBody User user ) { // persisting the user return ResponseEntity . ok ( \"User is valid\" ); }","title":"@Valid"},{"location":"java/frameworks/spring-boot/anotacoes/#lazy","text":"","title":"@Lazy"},{"location":"java/frameworks/spring-boot/anotacoes/#dependson","text":"","title":"@DependsOn"},{"location":"java/frameworks/spring-boot/anotacoes/#lookup","text":"","title":"@Lookup"},{"location":"java/frameworks/spring-boot/anotacoes/#primary","text":"","title":"@Primary"},{"location":"java/frameworks/spring-boot/anotacoes/#scope","text":"","title":"@Scope"},{"location":"java/frameworks/spring-boot/anotacoes/#order","text":"","title":"@Order"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-de-estereotipo","text":"","title":"Anota\u00e7\u00f5es de estere\u00f3tipo"},{"location":"java/frameworks/spring-boot/anotacoes/#component","text":"Esta anota\u00e7\u00e3o \u00e9 usada em classes para indicar que \u00e9 componente Spring. A anota\u00e7\u00e3o @Component marca a classe para que o mecanismo de busca de componente do Spring a adicione ao contexto da aplica\u00e7\u00e3o. Por padr\u00e3o, as inst\u00e2ncias de bean destas classes t\u00eam o mesmo nome que o nome da classe com uma inicial em min\u00fascula . Entretanto, podemos especificar um nome diferente usando o argumento de valor opcional desta anota\u00e7\u00e3o. Como @Repository , @Service , @Configuration e @Controller s\u00e3o todos meta-anota\u00e7\u00f5es de @Component , eles compartilham o mesmo comportamento de nomea\u00e7\u00e3o de beans . Al\u00e9m disso, o Spring os coleta automaticamente durante o processo de busca de componentes.","title":"@Component"},{"location":"java/frameworks/spring-boot/anotacoes/#controller","text":"A anota\u00e7\u00e3o que informa ao cont\u00eainer Spring IOC que a classe \u00e9 um controlador do Spring MVC.","title":"@Controller"},{"location":"java/frameworks/spring-boot/anotacoes/#service","text":"Anota\u00e7\u00e3o que informa que \u00e9 uma classe que executa algum servi\u00e7o, como l\u00f3gica de neg\u00f3cios, c\u00e1lculos e chamar APIs externas. Portanto, define que \u00e9 uma classe que pertence a camada de servi\u00e7os.","title":"@Service"},{"location":"java/frameworks/spring-boot/anotacoes/#repository","text":"Esta anota\u00e7\u00e3o \u00e9 usada nas classes que est\u00e3o trabalhando diretamente com a camada de banco de dados. As classes anotadas com @Repository capturam exce\u00e7\u00f5es espec\u00edficas da plataforma do banco de dados e as lan\u00e7am novamente como uma das exce\u00e7\u00f5es das subclasses de DataAccessExeption do Spring.","title":"@Repository"},{"location":"java/frameworks/spring-boot/anotacoes/#configuration_1","text":"Presente em outra se\u00e7\u00e3o","title":"@Configuration"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-de-configuracao-do-contexto","text":"","title":"Anota\u00e7\u00f5es de configura\u00e7\u00e3o do contexto"},{"location":"java/frameworks/spring-boot/anotacoes/#profile","text":"","title":"@Profile"},{"location":"java/frameworks/spring-boot/anotacoes/#import","text":"","title":"@Import"},{"location":"java/frameworks/spring-boot/anotacoes/#importresource","text":"","title":"@ImportResource"},{"location":"java/frameworks/spring-boot/anotacoes/#propertysource","text":"","title":"@PropertySource"},{"location":"java/frameworks/spring-boot/anotacoes/#propertysources","text":"","title":"@PropertySources"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-mvc","text":"","title":"Anota\u00e7\u00f5es do Spring Framework MVC"},{"location":"java/frameworks/spring-boot/anotacoes/#controller_1","text":"Presente em outra se\u00e7\u00e3o","title":"@Controller"},{"location":"java/frameworks/spring-boot/anotacoes/#cookievalue","text":"","title":"@CookieValue"},{"location":"java/frameworks/spring-boot/anotacoes/#crossorigin","text":"","title":"@CrossOrigin"},{"location":"java/frameworks/spring-boot/anotacoes/#requestmapping","text":"Esta anota\u00e7\u00e3o \u00e9 usada no n\u00edvel de classe ou de m\u00e9todo. A anota\u00e7\u00e3o @RequestMapping \u00e9 usada para mapear requisi\u00e7\u00f5es Web para classes e m\u00e9todos espec\u00edficos que fazem parte de um @Controller . Veja mais","title":"@RequestMapping"},{"location":"java/frameworks/spring-boot/anotacoes/#variantes-que-compoem-requestmapping","text":"","title":"Variantes que comp\u00f5em @RequestMapping"},{"location":"java/frameworks/spring-boot/anotacoes/#modelattribute","text":"Com esta anota\u00e7\u00e3o, podemos acessar elementos que est\u00e3o no Model de um MVC @Controller , passando o nome do Model como par\u00e2metro. @PostMapping ( \"/teste\" ) void assembleExemplo ( @ModelAttribute ( \"exemploClass\" ) ExemploClass exemplo ) { } /* Sem par\u00e2metro Spring ir\u00e1 usar o mesmo nome do argumento*/ @PostMapping ( \"/teste\" ) void assembleExemplo ( @ModelAttribute ExemploClass exemploClass ) { } Se anotarmos um m\u00e9todo, o Spring adicionar\u00e1 automaticamente o valor de retorno do m\u00e9todo ao modelo. @ModelAttribute ( \"exemploClass\" ) ExemploClass getExemplo () { } /* Sem par\u00e2metro Spring ir\u00e1 usar o mesmo nome do m\u00e9todo*/ @ModelAttribute ExemploClass exemploClass () { }","title":"@ModelAttribute"},{"location":"java/frameworks/spring-boot/anotacoes/#getmapping","text":"Mapeia requisi\u00e7\u00f5es HTTP GET para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.GET) . @GetMapping ( \"/exemplo\" ) public List < Exemplo > getAllExemplos () { return exemploRepository . findAll (); } /* ou */ @GetMapping ( \"/exemplo/{id}\" ) public ResponseEntity < Exemplo > getExemploById ( @PathVariable ( value = \"id\" ) Long id ) { }","title":"@GetMapping"},{"location":"java/frameworks/spring-boot/anotacoes/#postmapping","text":"Mapeia requisi\u00e7\u00f5es HTTP POST para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.POST) .","title":"@PostMapping"},{"location":"java/frameworks/spring-boot/anotacoes/#putmapping","text":"Mapeia requisi\u00e7\u00f5es HTTP PUT para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.PUT) .","title":"@PutMapping"},{"location":"java/frameworks/spring-boot/anotacoes/#deletemapping","text":"Mapeia requisi\u00e7\u00f5es HTTP DELETE para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.DELETE) .","title":"@DeleteMapping"},{"location":"java/frameworks/spring-boot/anotacoes/#patchmapping","text":"Mapeia requisi\u00e7\u00f5es HTTP PATCH para os m\u00e9todos que ir\u00e3o manipul\u00e1-los. Equivale a @RequestMapping(method = RequestMethod.PATCH) . As requisi\u00e7\u00f5es PUT e PATCH s\u00e3o usadas para indicar um requisi\u00e7\u00e3o de altera\u00e7\u00e3o de dados. O PUT, indica que a altera\u00e7\u00e3o do dado ser\u00e1 com refer\u00eancia a entidade completa. J\u00e1 o PATCH indica atualiza\u00e7\u00e3o parcial, ou seja, somente alguns campos da entidade.","title":"@PatchMapping"},{"location":"java/frameworks/spring-boot/anotacoes/#exceptionhandler","text":"","title":"@ExceptionHandler"},{"location":"java/frameworks/spring-boot/anotacoes/#initbinder","text":"","title":"@InitBinder"},{"location":"java/frameworks/spring-boot/anotacoes/#mappings-e-mapping","text":"","title":"@Mappings e @Mapping"},{"location":"java/frameworks/spring-boot/anotacoes/#matrixvariable","text":"","title":"@MatrixVariable"},{"location":"java/frameworks/spring-boot/anotacoes/#pathvariable","text":"Esta anota\u00e7\u00e3o indica que um argumento de m\u00e9todo est\u00e1 vinculado a uma vari\u00e1vel de template do URI. @RequestMapping ( \"exemplo/{id}\" ) Exemplo getExemplo ( @PathVariable ( \"id\" ) long id ) { } /* Sem par\u00e2metro Spring ir\u00e1 usar o mesmo nome do argumento */ @RequestMapping ( \"exemplo/{id}\" ) Exemplo getExemplo ( @PathVariable long id ) { } Podemos marcar a vari\u00e1vel como n\u00e3o obrigat\u00f3ria. @RequestMapping ( \"/{id}\" ) Exemplo getExemplo ( @PathVariable ( required = false ) long id ) { }","title":"@PathVariable"},{"location":"java/frameworks/spring-boot/anotacoes/#requestattribute","text":"","title":"@RequestAttribute"},{"location":"java/frameworks/spring-boot/anotacoes/#requestbody","text":"A anota\u00e7\u00e3o @RequestBody indica que um par\u00e2metro do m\u00e9todo deve ser vinculado ao valor do corpo da requisi\u00e7\u00e3o HTTP ( HttpRequest ). Em outras palavras, a anota\u00e7\u00e3o @RequestBody mapeia o corpo HttpRequest (JSON) para um objeto Java. O HttpMessageConveter \u00e9 respons\u00e1vel pela convers\u00e3o da mensagem de requisi\u00e7\u00e3o HTTP para o objeto. No exemplo abaixo, o corpo HttpRequest ser\u00e1 convertido para o objeto da classe ClasseExemplo . @PostMapping ( \"/teste\" ) public ResponseEntity funcao ( @RequestBody ClasseExemplo exemplo ) { }","title":"@RequestBody"},{"location":"java/frameworks/spring-boot/anotacoes/#requestheader","text":"","title":"@RequestHeader"},{"location":"java/frameworks/spring-boot/anotacoes/#requestparam","text":"","title":"@RequestParam"},{"location":"java/frameworks/spring-boot/anotacoes/#requestpart","text":"","title":"@RequestPart"},{"location":"java/frameworks/spring-boot/anotacoes/#responsebody","text":"A anota\u00e7\u00e3o @ResponseBody indica que o objeto retornado no m\u00e9todo ser\u00e1 serializado automaticamente em JSON e gravado na resposta HTTP ( HttpResponse ). Assim como no @RequestBody , o HttpMessageConveter tamb\u00e9m \u00e9 respons\u00e1vel pela convers\u00e3o do objeto para a resposta HTTP. @ResponseBody @PostMapping ( \"/teste\" ) public ResponseEntity funcao () { return new ClasseExemplo (); } Se anotarmos uma classe @Controller com @ResponseBody , a anota\u00e7\u00e3o ser\u00e1 aplicada em todos m\u00e9todos, equivalendo a anota\u00e7\u00e3o @RestController .","title":"@ResponseBody"},{"location":"java/frameworks/spring-boot/anotacoes/#responsestatus","text":"","title":"@ResponseStatus"},{"location":"java/frameworks/spring-boot/anotacoes/#controlleradvice","text":"","title":"@ControllerAdvice"},{"location":"java/frameworks/spring-boot/anotacoes/#restcontroller","text":"Incorpora o conjunto de anota\u00e7\u00f5es: @Controller e @ResponseBody . Com a anota\u00e7\u00e3o @RestController , todos m\u00e9todos da classe ter\u00e3o implicitamente a anota\u00e7\u00e3o @ResponseBody .","title":"@RestController"},{"location":"java/frameworks/spring-boot/anotacoes/#restcontrolleradvice","text":"","title":"@RestControllerAdvice"},{"location":"java/frameworks/spring-boot/anotacoes/#sessionattribute","text":"","title":"@SessionAttribute"},{"location":"java/frameworks/spring-boot/anotacoes/#sessionattributes","text":"","title":"@SessionAttributes"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-boot","text":"","title":"Anota\u00e7\u00f5es do Spring Boot"},{"location":"java/frameworks/spring-boot/anotacoes/#springbootapplication","text":"Incorpora o conjunto de anota\u00e7\u00f5es: @EnableAutoConfiguration + @ComponentScan + @Configuration + @ConfigurationPropertiesScan . Veja mais","title":"@SpringBootApplication"},{"location":"java/frameworks/spring-boot/anotacoes/#enableautoconfiguration","text":"Configura a aplica\u00e7\u00e3o automaticamente baseando nos JARs presentes no CLASSPATH e em como os beans foram definidos. Veja mais","title":"@EnableAutoConfiguration"},{"location":"java/frameworks/spring-boot/anotacoes/#condicionais-da-autoconfiguracao","text":"","title":"Condicionais da autoconfigura\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/anotacoes/#conditionalonclass-e-conditionalonmissingclass","text":"A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se a classe no argumento da anota\u00e7\u00e3o estiver presente/ausente. @Configuration @ConditionalOnClass ( DataSource . class ) class MySQLAutoconfiguration { }","title":"@ConditionalOnClass e @ConditionalOnMissingClass"},{"location":"java/frameworks/spring-boot/anotacoes/#conditionalonbean-e-conditionalonmissingbean","text":"A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se o bean no argumento da anota\u00e7\u00e3o estiver presente/ausente. @Bean @ConditionalOnBean ( name = \"dataSource\" ) LocalContainerEntityManagerFactoryBean entityManagerFactory () { }","title":"@ConditionalOnBean e @ConditionalOnMissingBean"},{"location":"java/frameworks/spring-boot/anotacoes/#conditionalonproperty","text":"A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se os valores das propriedades (campos) corresponderem as valores do argumento da anota\u00e7\u00e3o. @Bean @ConditionalOnProperty ( name = \"usemysql\" , havingValue = \"local\" ) DataSource dataSource () { }","title":"@ConditionalOnProperty"},{"location":"java/frameworks/spring-boot/anotacoes/#conditionalonresource","text":"A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se o recurso no argumento da anota\u00e7\u00e3o estiver presente/ausente. @ConditionalOnResource ( resources = \"classpath:mysql.properties\" ) Properties additionalProperties () { }","title":"@ConditionalOnResource"},{"location":"java/frameworks/spring-boot/anotacoes/#conditionalonwebapplication-e-conditionalonnotwebapplication","text":"A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se a aplica\u00e7\u00e3o atual \u00e9 ou n\u00e3o uma aplica\u00e7\u00e3o Web. @ConditionalOnWebApplication HealthCheckController healthCheckController () { }","title":"@ConditionalOnWebApplication e @ConditionalOnNotWebApplication"},{"location":"java/frameworks/spring-boot/anotacoes/#conditionalexpression","text":"A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se a express\u00e3o SpEL (Spring Expression Language) for verdadeira. @Bean @ConditionalOnExpression ( \"${usemysql} && ${mysqlserver == 'local'}\" ) DataSource dataSource () { }","title":"@ConditionalExpression"},{"location":"java/frameworks/spring-boot/anotacoes/#conditional","text":"A classe anotada ser\u00e1 considerada pela configura\u00e7\u00e3o autom\u00e1tica somente se satisfazer a condi\u00e7\u00e3o personalizada da classe passada como par\u00e2metro. @Conditional ( ExemploCondition . class ) Properties additionalProperties () { }","title":"@Conditional"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-scheduling","text":"","title":"Anota\u00e7\u00f5es do Spring Framework Scheduling"},{"location":"java/frameworks/spring-boot/anotacoes/#enableasync","text":"","title":"@EnableAsync"},{"location":"java/frameworks/spring-boot/anotacoes/#enablescheduling","text":"","title":"@EnableScheduling"},{"location":"java/frameworks/spring-boot/anotacoes/#async","text":"","title":"@Async"},{"location":"java/frameworks/spring-boot/anotacoes/#scheduled","text":"","title":"@Scheduled"},{"location":"java/frameworks/spring-boot/anotacoes/#schedules","text":"","title":"@Schedules"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-cloud","text":"","title":"Anota\u00e7\u00f5es do Spring Framework Cloud"},{"location":"java/frameworks/spring-boot/anotacoes/#enableconfigserver","text":"","title":"@EnableConfigServer"},{"location":"java/frameworks/spring-boot/anotacoes/#enableeurekaserver","text":"","title":"@EnableEurekaServer"},{"location":"java/frameworks/spring-boot/anotacoes/#enablediscoveryclient","text":"","title":"@EnableDiscoveryClient"},{"location":"java/frameworks/spring-boot/anotacoes/#enablecircuitbreaker","text":"","title":"@EnableCircuitBreaker"},{"location":"java/frameworks/spring-boot/anotacoes/#hystrixcommand","text":"","title":"@HystrixCommand"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-dataaccess","text":"","title":"Anota\u00e7\u00f5es do Spring Framework DataAccess"},{"location":"java/frameworks/spring-boot/anotacoes/#transactional","text":"","title":"@Transactional"},{"location":"java/frameworks/spring-boot/anotacoes/#norepositorybean","text":"","title":"@NoRepositoryBean"},{"location":"java/frameworks/spring-boot/anotacoes/#param","text":"","title":"@Param"},{"location":"java/frameworks/spring-boot/anotacoes/#id","text":"","title":"@Id"},{"location":"java/frameworks/spring-boot/anotacoes/#transient","text":"","title":"@Transient"},{"location":"java/frameworks/spring-boot/anotacoes/#createdby-lastmodifiedby-createddate-lastmodifieddate","text":"","title":"@CreatedBy, @LastModifiedBy, @CreatedDate, @LastModifiedDate"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-data-jpa","text":"","title":"Anota\u00e7\u00f5es do Spring Framework Data JPA"},{"location":"java/frameworks/spring-boot/anotacoes/#query","text":"","title":"@Query"},{"location":"java/frameworks/spring-boot/anotacoes/#procedure","text":"","title":"@Procedure"},{"location":"java/frameworks/spring-boot/anotacoes/#lock","text":"","title":"@Lock"},{"location":"java/frameworks/spring-boot/anotacoes/#modifying","text":"","title":"@Modifying"},{"location":"java/frameworks/spring-boot/anotacoes/#enablejparepositories","text":"","title":"@EnableJpaRepositories"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-cache-based","text":"","title":"Anota\u00e7\u00f5es do Spring Framework Cache-Based"},{"location":"java/frameworks/spring-boot/anotacoes/#cacheable","text":"","title":"@Cacheable"},{"location":"java/frameworks/spring-boot/anotacoes/#cacheput","text":"","title":"@CachePut"},{"location":"java/frameworks/spring-boot/anotacoes/#cacheevict","text":"","title":"@CacheEvict"},{"location":"java/frameworks/spring-boot/anotacoes/#cacheconfig","text":"","title":"@CacheConfig"},{"location":"java/frameworks/spring-boot/anotacoes/#anotacoes-do-spring-framework-testing","text":"","title":"Anota\u00e7\u00f5es do Spring Framework Testing"},{"location":"java/frameworks/spring-boot/anotacoes/#bootstrapwith","text":"","title":"@BootstrapWith"},{"location":"java/frameworks/spring-boot/anotacoes/#contextconfiguration","text":"","title":"@ContextConfiguration"},{"location":"java/frameworks/spring-boot/anotacoes/#webappconfiguration","text":"","title":"@WebAppConfiguration"},{"location":"java/frameworks/spring-boot/anotacoes/#timed","text":"","title":"@Timed"},{"location":"java/frameworks/spring-boot/anotacoes/#repeat","text":"","title":"@Repeat"},{"location":"java/frameworks/spring-boot/anotacoes/#commit","text":"","title":"@Commit"},{"location":"java/frameworks/spring-boot/anotacoes/#rollback","text":"","title":"@RollBack"},{"location":"java/frameworks/spring-boot/anotacoes/#dirtiescontext","text":"","title":"@DirtiesContext"},{"location":"java/frameworks/spring-boot/anotacoes/#beforetransaction","text":"","title":"@BeforeTransaction"},{"location":"java/frameworks/spring-boot/anotacoes/#aftertransaction","text":"","title":"@AfterTransaction"},{"location":"java/frameworks/spring-boot/anotacoes/#sql","text":"","title":"@Sql"},{"location":"java/frameworks/spring-boot/anotacoes/#sqlconfig","text":"","title":"@SqlConfig"},{"location":"java/frameworks/spring-boot/anotacoes/#sqlgroup","text":"","title":"@SqlGroup"},{"location":"java/frameworks/spring-boot/anotacoes/#springboottest","text":"","title":"@SpringBootTest"},{"location":"java/frameworks/spring-boot/anotacoes/#datajpatest","text":"","title":"@DataJpaTest"},{"location":"java/frameworks/spring-boot/anotacoes/#datamongotest","text":"","title":"@DataMongoTest"},{"location":"java/frameworks/spring-boot/anotacoes/#webmvctest","text":"","title":"@WebMVCTest"},{"location":"java/frameworks/spring-boot/anotacoes/#autoconfiguremockmvc","text":"","title":"@AutoConfigureMockMVC"},{"location":"java/frameworks/spring-boot/anotacoes/#mockbean","text":"","title":"@MockBean"},{"location":"java/frameworks/spring-boot/anotacoes/#jsontest","text":"","title":"@JsonTest"},{"location":"java/frameworks/spring-boot/anotacoes/#testpropertysource","text":"","title":"@TestPropertySource"},{"location":"java/frameworks/spring-boot/anotacoes/#links","text":"https://www.baeldung.com/spring-core-annotations https://springframework.guru/spring-framework-annotations https://www.javaguides.net/2018/10/15-spring-core-annotations.html https://www.javadevjournal.com/spring/spring-annotations/","title":"Links"},{"location":"java/frameworks/spring-boot/hello-world/","text":"Hello World \u00b6 Hello World Inicializadores Configura\u00e7\u00e3o Inicializadores \u00b6 Os inicializadores s\u00e3o parte importante da magia do Spring Boot , usados para limitar a quantia de configura\u00e7\u00e3o de depend\u00eancia manual que precisa ser feita. Para utilizar o Spring Boot de forma eficaz, \u00e9 necess\u00e1rio conhecer os inicializadores. Um inicializador \u00e9, essencialmente, um conjunto de depend\u00eancias (como um POM Maven) espec\u00edficas do tipo de aplicativo que o inicializador representa. Todos os inicializadores usam a conven\u00e7\u00e3o de nomenclatura: spring-boot-starter-XYZ , em que XYZ \u00e9 o tipo de aplicativo que voc\u00ea deseja desenvolver. Estes s\u00e3o alguns inicializadores populares do Spring Boot : spring-boot-starter-web : \u00e9 utilizado para desenvolver servi\u00e7os da web RESTful usando Spring MVC e Tomcat como cont\u00eainer do aplicativo integrado. spring-boot-starter-jersey : \u00e9 uma alternativa ao spring-boot-starter-web que usa o Apache Jersey em vez do Spring MVC. spring-boot-starter-jdbc \u00e9 utilizado para defini\u00e7\u00e3o do conjunto de conex\u00f5es do JDBC. Baseia-se na implementa\u00e7\u00e3o do conjunto de conex\u00f5es do JDBC do Tomcat. Configura\u00e7\u00e3o \u00b6 Para iniciar um projeto \u00e9 necess\u00e1rio criar arquivo de configura\u00e7\u00e3o pom.xml . Este arquivo tamb\u00e9m pode ser gerado pelo site http://start.spring.io . Para executar o exemplo Hello World ser\u00e1 usado o iniciador spring-boot-starter-web , portanto deve estar presentes nas depend\u00eancias do projeto. O arquivo pom.xml gerado ser\u00e1 algo como: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.2.0.BUILD-SNAPSHOT </version> <relativePath/> </parent> <groupId> com.example </groupId> <artifactId> hello_world </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> hello_world </name> <description> Hello World </description> <properties> <java.version> 12 </java.version> </properties> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> <exclusions> <exclusion> <groupId> org.junit.vintage </groupId> <artifactId> junit-vintage-engine </artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> <repositories> ... </repositories> <pluginRepositories> ... </pluginRepositories> </project> A estrutura criada ser\u00e1 algo como: . |-- pom.xml |-- src | |-- main | |-- java | |--HelloWorldApplication.java |-- target A classe gerada \u00e9 mostrada abaixo: package com.example.hello_world ; /* imports */ @SpringBootApplication public class HelloWorldApplication { public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } De maneira geral, o Spring Boot se preocupa com 4 coisas principais em sua inicializa\u00e7\u00e3o: Configurar automaticamente o seu projeto a partir das depend\u00eancias que voc\u00ea declara no sistema de build ( pom.xml ) sobre o qual o projeto \u00e9 constru\u00eddo. Isso \u00e9 feito pela anota\u00e7\u00e3o @EnableAutoConfiguration . Varrer a aplica\u00e7\u00e3o em busca de classes que possuam certas anota\u00e7\u00f5es espec\u00edficas ( @Repository , @Service , @Configuration e @Controller ) que informem que essas classes devem ter seu ciclo de vida gerenciado pelo Spring. Essas classes s\u00e3o os beans e o fruto desse gerenciamento nada mais \u00e9 do que a inje\u00e7\u00e3o de depend\u00eancia ( @Autowired ). O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ComponentScan . Varrer a aplica\u00e7\u00e3o em busca de classes com nota\u00e7\u00e3o @ConfigurationProperties . O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ConfigurationPropertiesScan Definir que a pr\u00f3pria classe que cont\u00e9m o m\u00e9todo main seja ela mesma um bean , anotando-a com @Configuration . Por qu\u00ea? Para permitir que voc\u00ea possa, caso queria, ter outros beans (j\u00e1 previamente escaneados pelo item 2) injetados nessa classe, poupando voc\u00ea da necessidade de criar classes adicionais para isso. Lembrando que s\u00f3 uma classe bean (ou seja, gerenciada pelo Spring) pode ter injetados nela outros beans . Para conveni\u00eancia, a anota\u00e7\u00e3o @SpringBootApplication incorpora as quatro anota\u00e7\u00f5es acima. Na aplica\u00e7\u00e3o, deve ser adicionada somente uma \u00fanica anota\u00e7\u00e3o @SpringBootApplication ou @EnableAutoConfiguration . Geralmente, \u00e9 recomendado que seja adicionado apenas um ou outro \u00e0 classe @Configuration principal. Para testar a aplica\u00e7\u00e3o Web modificamos a classe HelloWorldApplication.java para: package com.example.hello_world ; /* imports */ @SpringBootApplication @RestController public class HelloWorldApplication { @RequestMapping ( \"/\" ) String home () { return \"Hello World!\" ; } public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } Onde: @RestController : define a classe que ir\u00e1 executar papel do controlador Web, ou seja, ir\u00e1 lidar com as requisi\u00e7\u00f5es REST. @RequestMapping : define o mapeamento ente a rota da requisi\u00e7\u00e3o e o m\u00e9todo que ser\u00e1 chamado. Para rodar a aplica\u00e7\u00e3o devemos executar o comando run do plugin spring-boot : mvn spring-boot:run Para testar basta acessar o endere\u00e7o http://localhost:8080 pelo navegador. O Spring Boot empacota o aplicativo e suas depend\u00eancias em um \u00fanico JAR execut\u00e1vel, criando algo denominado Fat JAR . Para executar a aplica\u00e7\u00e3o atrav\u00e9s do JAR , primeiramente execute o comando abaixo para criar o Fat JAR . mvn clean package Para rodar o JAR , execute: java -jar CAMINHO/target/hello_world-0.0.1-SNAPSHOT.jar","title":"Hello World"},{"location":"java/frameworks/spring-boot/hello-world/#hello-world","text":"Hello World Inicializadores Configura\u00e7\u00e3o","title":"Hello World"},{"location":"java/frameworks/spring-boot/hello-world/#inicializadores","text":"Os inicializadores s\u00e3o parte importante da magia do Spring Boot , usados para limitar a quantia de configura\u00e7\u00e3o de depend\u00eancia manual que precisa ser feita. Para utilizar o Spring Boot de forma eficaz, \u00e9 necess\u00e1rio conhecer os inicializadores. Um inicializador \u00e9, essencialmente, um conjunto de depend\u00eancias (como um POM Maven) espec\u00edficas do tipo de aplicativo que o inicializador representa. Todos os inicializadores usam a conven\u00e7\u00e3o de nomenclatura: spring-boot-starter-XYZ , em que XYZ \u00e9 o tipo de aplicativo que voc\u00ea deseja desenvolver. Estes s\u00e3o alguns inicializadores populares do Spring Boot : spring-boot-starter-web : \u00e9 utilizado para desenvolver servi\u00e7os da web RESTful usando Spring MVC e Tomcat como cont\u00eainer do aplicativo integrado. spring-boot-starter-jersey : \u00e9 uma alternativa ao spring-boot-starter-web que usa o Apache Jersey em vez do Spring MVC. spring-boot-starter-jdbc \u00e9 utilizado para defini\u00e7\u00e3o do conjunto de conex\u00f5es do JDBC. Baseia-se na implementa\u00e7\u00e3o do conjunto de conex\u00f5es do JDBC do Tomcat.","title":"Inicializadores"},{"location":"java/frameworks/spring-boot/hello-world/#configuracao","text":"Para iniciar um projeto \u00e9 necess\u00e1rio criar arquivo de configura\u00e7\u00e3o pom.xml . Este arquivo tamb\u00e9m pode ser gerado pelo site http://start.spring.io . Para executar o exemplo Hello World ser\u00e1 usado o iniciador spring-boot-starter-web , portanto deve estar presentes nas depend\u00eancias do projeto. O arquivo pom.xml gerado ser\u00e1 algo como: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.2.0.BUILD-SNAPSHOT </version> <relativePath/> </parent> <groupId> com.example </groupId> <artifactId> hello_world </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> hello_world </name> <description> Hello World </description> <properties> <java.version> 12 </java.version> </properties> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> <exclusions> <exclusion> <groupId> org.junit.vintage </groupId> <artifactId> junit-vintage-engine </artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> <repositories> ... </repositories> <pluginRepositories> ... </pluginRepositories> </project> A estrutura criada ser\u00e1 algo como: . |-- pom.xml |-- src | |-- main | |-- java | |--HelloWorldApplication.java |-- target A classe gerada \u00e9 mostrada abaixo: package com.example.hello_world ; /* imports */ @SpringBootApplication public class HelloWorldApplication { public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } De maneira geral, o Spring Boot se preocupa com 4 coisas principais em sua inicializa\u00e7\u00e3o: Configurar automaticamente o seu projeto a partir das depend\u00eancias que voc\u00ea declara no sistema de build ( pom.xml ) sobre o qual o projeto \u00e9 constru\u00eddo. Isso \u00e9 feito pela anota\u00e7\u00e3o @EnableAutoConfiguration . Varrer a aplica\u00e7\u00e3o em busca de classes que possuam certas anota\u00e7\u00f5es espec\u00edficas ( @Repository , @Service , @Configuration e @Controller ) que informem que essas classes devem ter seu ciclo de vida gerenciado pelo Spring. Essas classes s\u00e3o os beans e o fruto desse gerenciamento nada mais \u00e9 do que a inje\u00e7\u00e3o de depend\u00eancia ( @Autowired ). O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ComponentScan . Varrer a aplica\u00e7\u00e3o em busca de classes com nota\u00e7\u00e3o @ConfigurationProperties . O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ConfigurationPropertiesScan Definir que a pr\u00f3pria classe que cont\u00e9m o m\u00e9todo main seja ela mesma um bean , anotando-a com @Configuration . Por qu\u00ea? Para permitir que voc\u00ea possa, caso queria, ter outros beans (j\u00e1 previamente escaneados pelo item 2) injetados nessa classe, poupando voc\u00ea da necessidade de criar classes adicionais para isso. Lembrando que s\u00f3 uma classe bean (ou seja, gerenciada pelo Spring) pode ter injetados nela outros beans . Para conveni\u00eancia, a anota\u00e7\u00e3o @SpringBootApplication incorpora as quatro anota\u00e7\u00f5es acima. Na aplica\u00e7\u00e3o, deve ser adicionada somente uma \u00fanica anota\u00e7\u00e3o @SpringBootApplication ou @EnableAutoConfiguration . Geralmente, \u00e9 recomendado que seja adicionado apenas um ou outro \u00e0 classe @Configuration principal. Para testar a aplica\u00e7\u00e3o Web modificamos a classe HelloWorldApplication.java para: package com.example.hello_world ; /* imports */ @SpringBootApplication @RestController public class HelloWorldApplication { @RequestMapping ( \"/\" ) String home () { return \"Hello World!\" ; } public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } Onde: @RestController : define a classe que ir\u00e1 executar papel do controlador Web, ou seja, ir\u00e1 lidar com as requisi\u00e7\u00f5es REST. @RequestMapping : define o mapeamento ente a rota da requisi\u00e7\u00e3o e o m\u00e9todo que ser\u00e1 chamado. Para rodar a aplica\u00e7\u00e3o devemos executar o comando run do plugin spring-boot : mvn spring-boot:run Para testar basta acessar o endere\u00e7o http://localhost:8080 pelo navegador. O Spring Boot empacota o aplicativo e suas depend\u00eancias em um \u00fanico JAR execut\u00e1vel, criando algo denominado Fat JAR . Para executar a aplica\u00e7\u00e3o atrav\u00e9s do JAR , primeiramente execute o comando abaixo para criar o Fat JAR . mvn clean package Para rodar o JAR , execute: java -jar CAMINHO/target/hello_world-0.0.1-SNAPSHOT.jar","title":"Configura\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/introducao/","text":"Introdu\u00e7\u00e3o \u00b6 Introdu\u00e7\u00e3o Spring Framework Spring Boot Links Spring Framework \u00b6 O Spring \u00e9 um framework open source para a plataforma Java criado por Rod Johnson e descrito em seu livro \" Expert One-on-One: JEE Design e Development \". O Spring \u00e9 um framework Java criado com o objetivo de facilitar o desenvolvimento de aplica\u00e7\u00f5es, explorando, para isso, os conceitos de Invers\u00e3o de Controle (IoC) e Inje\u00e7\u00e3o de Depend\u00eancias. Dessa forma, ao adot\u00e1-lo, temos \u00e0 nossa disposi\u00e7\u00e3o uma tecnologia que nos fornece n\u00e3o apenas recursos necess\u00e1rios \u00e0 grande parte das aplica\u00e7\u00f5es, como m\u00f3dulos para persist\u00eancia de dados, integra\u00e7\u00e3o, seguran\u00e7a, testes, desenvolvimento web, como tamb\u00e9m um conceito a seguir que nos permite criar solu\u00e7\u00f5es menos acopladas, mais coesas e, consequentemente, mais f\u00e1ceis de compreender e manter. O Spring foi criado por causa das dificuldades que os programadores enfrentavam ao criar determinado tipo de aplica\u00e7\u00e3o, mais precisamente, aplica\u00e7\u00f5es corporativas. Na \u00e9poca, a plataforma Java voltada para isso, de nome J2EE, ainda era jovem, com \u00f3timas ideias para a constru\u00e7\u00e3o de aplica\u00e7\u00f5es leves, distribu\u00eddas, com um amplo leque de op\u00e7\u00f5es/ferramentas, mas com algumas limita\u00e7\u00f5es. Essas limita\u00e7\u00f5es levavam a uma programa\u00e7\u00e3o dependente de muitas interfaces e com muitas configura\u00e7\u00f5es. Ao final, era comum ter uma solu\u00e7\u00e3o pesada e que trazia consigo muito mais do que o que realmente era necess\u00e1rio. E para completar, precis\u00e1vamos utilizar servidores de aplica\u00e7\u00e3o pesados, o que tornava a programa\u00e7\u00e3o e a depura\u00e7\u00e3o das aplica\u00e7\u00f5es ainda mais lento. Seguindo um caminho diferente, em pouco tempo o Spring conquistou seu espa\u00e7o na comunidade. Mas, que caminho diferente foi esse? A primeira diferen\u00e7a \u00e9 que ele n\u00e3o precisa de um servidor de aplica\u00e7\u00e3o para funcionar. Fazendo uso apenas da JVM, o Spring traz para o programador recursos que antes s\u00f3 estavam dispon\u00edveis para solu\u00e7\u00f5es corporativas; Com Spring tamb\u00e9m passamos a utilizar apenas aquilo que \u00e9 necess\u00e1rio para o projeto. Como mencionado agora h\u00e1 pouco, a plataforma J2EE e os EJBs nos levavam a implementar comportamentos que n\u00e3o eram necess\u00e1rios. Esse diferencial do Spring torna a arquitetura mais leve, f\u00e1cil de compreender, manter e evoluir; Outro diferencial \u00e9 que ele \u00e9 baseado na invers\u00e3o de controle e inje\u00e7\u00e3o de depend\u00eancia, fornecendo para isso um container, que representa o n\u00facleo do framework e que \u00e9 respons\u00e1vel por criar e gerenciar os componentes da aplica\u00e7\u00e3o, os quais s\u00e3o comumente chamados de beans . Spring Boot \u00b6 O Spring Boot \u00e9 um projeto da Spring que veio para facilitar o processo de configura\u00e7\u00e3o e publica\u00e7\u00e3o de nossas aplica\u00e7\u00f5es. A inten\u00e7\u00e3o \u00e9 ter o seu projeto rodando o mais r\u00e1pido poss\u00edvel e sem complica\u00e7\u00e3o. Ele consegue isso favorecendo a conven\u00e7\u00e3o sobre a configura\u00e7\u00e3o. Basta que voc\u00ea diga pra ele quais m\u00f3dulos deseja utilizar (WEB, Template, Persist\u00eancia, Seguran\u00e7a, etc.) que ele vai reconhecer e configurar. Voc\u00ea escolhe os m\u00f3dulos que deseja atrav\u00e9s dos starters que inclui no pom.xml do seu projeto. Eles, basicamente, s\u00e3o depend\u00eancias que agrupam outras depend\u00eancias. Inclusive, como temos esse grupo de depend\u00eancias representadas pelo starter, nosso pom.xml acaba por ficar mais organizado. Apesar do Spring Boot, atrav\u00e9s da conven\u00e7\u00e3o, j\u00e1 deixar tudo configurado, nada impede que voc\u00ea crie as suas customiza\u00e7\u00f5es caso sejam necess\u00e1rias. O maior benef\u00edcio do Spring Boot \u00e9 que ele nos deixa mais livres para pensarmos nas regras de neg\u00f3cio da nossa aplica\u00e7\u00e3o. Links \u00b6 Documenta\u00e7\u00e3o oficial https://docs.spring.io/spring-boot/docs/2.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#getting-started-first-application","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/introducao/#introducao","text":"Introdu\u00e7\u00e3o Spring Framework Spring Boot Links","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/introducao/#spring-framework","text":"O Spring \u00e9 um framework open source para a plataforma Java criado por Rod Johnson e descrito em seu livro \" Expert One-on-One: JEE Design e Development \". O Spring \u00e9 um framework Java criado com o objetivo de facilitar o desenvolvimento de aplica\u00e7\u00f5es, explorando, para isso, os conceitos de Invers\u00e3o de Controle (IoC) e Inje\u00e7\u00e3o de Depend\u00eancias. Dessa forma, ao adot\u00e1-lo, temos \u00e0 nossa disposi\u00e7\u00e3o uma tecnologia que nos fornece n\u00e3o apenas recursos necess\u00e1rios \u00e0 grande parte das aplica\u00e7\u00f5es, como m\u00f3dulos para persist\u00eancia de dados, integra\u00e7\u00e3o, seguran\u00e7a, testes, desenvolvimento web, como tamb\u00e9m um conceito a seguir que nos permite criar solu\u00e7\u00f5es menos acopladas, mais coesas e, consequentemente, mais f\u00e1ceis de compreender e manter. O Spring foi criado por causa das dificuldades que os programadores enfrentavam ao criar determinado tipo de aplica\u00e7\u00e3o, mais precisamente, aplica\u00e7\u00f5es corporativas. Na \u00e9poca, a plataforma Java voltada para isso, de nome J2EE, ainda era jovem, com \u00f3timas ideias para a constru\u00e7\u00e3o de aplica\u00e7\u00f5es leves, distribu\u00eddas, com um amplo leque de op\u00e7\u00f5es/ferramentas, mas com algumas limita\u00e7\u00f5es. Essas limita\u00e7\u00f5es levavam a uma programa\u00e7\u00e3o dependente de muitas interfaces e com muitas configura\u00e7\u00f5es. Ao final, era comum ter uma solu\u00e7\u00e3o pesada e que trazia consigo muito mais do que o que realmente era necess\u00e1rio. E para completar, precis\u00e1vamos utilizar servidores de aplica\u00e7\u00e3o pesados, o que tornava a programa\u00e7\u00e3o e a depura\u00e7\u00e3o das aplica\u00e7\u00f5es ainda mais lento. Seguindo um caminho diferente, em pouco tempo o Spring conquistou seu espa\u00e7o na comunidade. Mas, que caminho diferente foi esse? A primeira diferen\u00e7a \u00e9 que ele n\u00e3o precisa de um servidor de aplica\u00e7\u00e3o para funcionar. Fazendo uso apenas da JVM, o Spring traz para o programador recursos que antes s\u00f3 estavam dispon\u00edveis para solu\u00e7\u00f5es corporativas; Com Spring tamb\u00e9m passamos a utilizar apenas aquilo que \u00e9 necess\u00e1rio para o projeto. Como mencionado agora h\u00e1 pouco, a plataforma J2EE e os EJBs nos levavam a implementar comportamentos que n\u00e3o eram necess\u00e1rios. Esse diferencial do Spring torna a arquitetura mais leve, f\u00e1cil de compreender, manter e evoluir; Outro diferencial \u00e9 que ele \u00e9 baseado na invers\u00e3o de controle e inje\u00e7\u00e3o de depend\u00eancia, fornecendo para isso um container, que representa o n\u00facleo do framework e que \u00e9 respons\u00e1vel por criar e gerenciar os componentes da aplica\u00e7\u00e3o, os quais s\u00e3o comumente chamados de beans .","title":"Spring Framework"},{"location":"java/frameworks/spring-boot/introducao/#spring-boot","text":"O Spring Boot \u00e9 um projeto da Spring que veio para facilitar o processo de configura\u00e7\u00e3o e publica\u00e7\u00e3o de nossas aplica\u00e7\u00f5es. A inten\u00e7\u00e3o \u00e9 ter o seu projeto rodando o mais r\u00e1pido poss\u00edvel e sem complica\u00e7\u00e3o. Ele consegue isso favorecendo a conven\u00e7\u00e3o sobre a configura\u00e7\u00e3o. Basta que voc\u00ea diga pra ele quais m\u00f3dulos deseja utilizar (WEB, Template, Persist\u00eancia, Seguran\u00e7a, etc.) que ele vai reconhecer e configurar. Voc\u00ea escolhe os m\u00f3dulos que deseja atrav\u00e9s dos starters que inclui no pom.xml do seu projeto. Eles, basicamente, s\u00e3o depend\u00eancias que agrupam outras depend\u00eancias. Inclusive, como temos esse grupo de depend\u00eancias representadas pelo starter, nosso pom.xml acaba por ficar mais organizado. Apesar do Spring Boot, atrav\u00e9s da conven\u00e7\u00e3o, j\u00e1 deixar tudo configurado, nada impede que voc\u00ea crie as suas customiza\u00e7\u00f5es caso sejam necess\u00e1rias. O maior benef\u00edcio do Spring Boot \u00e9 que ele nos deixa mais livres para pensarmos nas regras de neg\u00f3cio da nossa aplica\u00e7\u00e3o.","title":"Spring Boot"},{"location":"java/frameworks/spring-boot/introducao/#links","text":"Documenta\u00e7\u00e3o oficial https://docs.spring.io/spring-boot/docs/2.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#getting-started-first-application","title":"Links"},{"location":"java/frameworks/spring-boot/metodos/","text":"M\u00e9todos \u00b6 M\u00e9todos SpringApplication() SpringApplication() \u00b6 Inicializa o aplicativo, iniciando o Spring, que, por sua vez, inicia o servidor web Tomcat configurado automaticamente. A classe principal \u00e9 passada como um par\u00e2metro para o m\u00e9todo run para informar ao SpringApplication qual \u00e9 o principal componente Spring.","title":"M\u00e9todos"},{"location":"java/frameworks/spring-boot/metodos/#metodos","text":"M\u00e9todos SpringApplication()","title":"M\u00e9todos"},{"location":"java/frameworks/spring-boot/metodos/#springapplication","text":"Inicializa o aplicativo, iniciando o Spring, que, por sua vez, inicia o servidor web Tomcat configurado automaticamente. A classe principal \u00e9 passada como um par\u00e2metro para o m\u00e9todo run para informar ao SpringApplication qual \u00e9 o principal componente Spring.","title":"SpringApplication()"},{"location":"java/frameworks/spring-boot/wildfly/","text":"Wildfly \u00b6 Wildfly Introdu\u00e7\u00e3o Execu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Wildfly, tamb\u00e9m conhecido como JBoss \u00e9 um servidor de aplica\u00e7\u00e3o de c\u00f3digo fonte aberto baseado na plataforma JEE e implementado completamente na linguagem de programa\u00e7\u00e3o Java. Em Abril de 2006, foi anunciada sua aquisi\u00e7\u00e3o pela Red Hat. Cont\u00e9m implementa\u00e7\u00f5es robusta de WebSocket, Processamento Batch, JSON, Concorr\u00eancia, JMS 2, JAX-RS 2 (REST), CDI 1.1 e todas as demais tecnologias que fazem parte do Java EE 7. A partir da vers\u00e3o 8 o JBoss passou a se chamar Wildfly, al\u00e9m da troca de nomes teve v\u00e1rias melhorias e mudan\u00e7as como a troca do container que era o JBossWeb para o Undertow, que foi projetado para um maior throughput e escalabilidade, incluindo ambientes com milh\u00f5es de conex\u00f5es simult\u00e2neas. O n\u00famero de portas foi reduzido atrav\u00e9s da multiplexa\u00e7\u00e3o de protocolos em HTTP. Execu\u00e7\u00e3o \u00b6 Baixar a vers\u00e3o \"Java EE7 Full & Web Distribution\" no site oficial. Executar o comando: CAMINHO \\b in \\s tandalone.sh --server-config = standalone-full.xml","title":"Wildfly"},{"location":"java/frameworks/spring-boot/wildfly/#wildfly","text":"Wildfly Introdu\u00e7\u00e3o Execu\u00e7\u00e3o","title":"Wildfly"},{"location":"java/frameworks/spring-boot/wildfly/#introducao","text":"Wildfly, tamb\u00e9m conhecido como JBoss \u00e9 um servidor de aplica\u00e7\u00e3o de c\u00f3digo fonte aberto baseado na plataforma JEE e implementado completamente na linguagem de programa\u00e7\u00e3o Java. Em Abril de 2006, foi anunciada sua aquisi\u00e7\u00e3o pela Red Hat. Cont\u00e9m implementa\u00e7\u00f5es robusta de WebSocket, Processamento Batch, JSON, Concorr\u00eancia, JMS 2, JAX-RS 2 (REST), CDI 1.1 e todas as demais tecnologias que fazem parte do Java EE 7. A partir da vers\u00e3o 8 o JBoss passou a se chamar Wildfly, al\u00e9m da troca de nomes teve v\u00e1rias melhorias e mudan\u00e7as como a troca do container que era o JBossWeb para o Undertow, que foi projetado para um maior throughput e escalabilidade, incluindo ambientes com milh\u00f5es de conex\u00f5es simult\u00e2neas. O n\u00famero de portas foi reduzido atrav\u00e9s da multiplexa\u00e7\u00e3o de protocolos em HTTP.","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/wildfly/#execucao","text":"Baixar a vers\u00e3o \"Java EE7 Full & Web Distribution\" no site oficial. Executar o comando: CAMINHO \\b in \\s tandalone.sh --server-config = standalone-full.xml","title":"Execu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/auto-wired/","text":"AutoWired \u00b6 AutoWired Introdu\u00e7\u00e3o Prioridade do auto wiring Correspond\u00eancia por tipo Correspond\u00eancia por qualificador Correspond\u00eancia por nome Introdu\u00e7\u00e3o \u00b6 Permite a inje\u00e7\u00e3o da depend\u00eancia do objeto implicitamente, ou seja, marca uma depend\u00eancia que o Spring resolver\u00e1 e injetar\u00e1. De forma resumida, @AutoWired indica para o Spring que ele precisa instanciar o objeto para n\u00f3s. A vari\u00e1vel de refer\u00eancia (depend\u00eancia) anotada com @Autowired , ser\u00e1 injetada pelo cont\u00eainer Spring com o @Bean correspondente seja @Component , @Repository , @Service , @Configuration ou @Controller . Auto wiring no Spring significa que o cont\u00eainer Spring pode resolver automaticamente a depend\u00eancias entre beans inspecionando o conte\u00fado do ApplicationContext . A anota\u00e7\u00e3o @Autowired ser utilizada em: Campos public class ClasseA { @Autowired private ClasseB classeB ; } Construtores public class ClasseA { private ClasseB classeB ; @Autowired ClasseA ( ClasseB classeB ) { this . classeB = classeB } } M\u00e9todos (mais comumente, os setters) public class ClasseA { private ClasseB classeB ; @Autowired void setClasseB ( ClasseB classeB ) { this . classeB = classeB } } Sem a nota\u00e7\u00e3o @Autowire o cliente precisa saber instanciar os objetos no qual depende. package com.example.auto_wired ; /* imports */ @SpringBootApplication public class AutoWiredApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredApplication . class . getPackage (). getName ()); context . refresh (); /** * Com @AutoWired */ UserClassWired objWired = context . getBean ( UserClassWired . class ); objWired . doSomething (); /** * Sem @AutoWired */ UserClassNoWired objNoWired = context . getBean ( UserClassNoWired . class ); objNoWired . doSomething (); } } @Component class ClassA { ClassB classB ; ClassA ( ClassB classB ){ this . classB = classB ; } void metodo () { System . out . println ( \"Metodo do A\" ); this . classB . metodo (); } } @Component class ClassB { ClassC classC ; ClassB ( ClassC classC ){ this . classC = classC ; } void metodo () { System . out . println ( \"Metodo do B\" ); } } @Component class ClassC { ClassC (){} } @Component class UserClassWired { ClassA classA ; @Autowired UserClassWired ( ClassA classA ) { this . classA = classA ; } UserClassWired () {} void doSomething () { classA . metodo (); } } @Component class UserClassNoWired { ClassA classA ; UserClassNoWired ( ClassA classA ) { this . classA = classA ; } UserClassNoWired () {} /** * Sem @AutoWired o UserClassNoWired passa a ter responsabilidade de saber todas as * depend\u00eancias para instanciar um objeto de ClassA. */ void doSomething (){ ClassC classC = new ClassC (); ClassB classB = new ClassB ( classC ); this . classA = new ClassA ( classB ); classA . metodo (); } } // Saida: // > Metodo do A // > Metodo do B // > Metodo do A // > Metodo do B - O Spring n\u00e3o tem o requisito para o construtor com nota\u00e7\u00e3o `@Autowire` ser p\u00fablico. - Classes que possuem somente um construtor n\u00e3o precisam declarar a nota\u00e7\u00e3o `@Autowire`, pois a nota\u00e7\u00e3o est\u00e1 presente implicitamente. - Se usarmos a nota\u00e7\u00e3o `@Autowire` no construtor, todos os argumentos do construtor ser\u00e3o obrigat\u00f3rios. - S\u00f3 uma classe *bean* (ou seja, gerenciada pelo Spring) pode ter injetados nela outros *beans*. Prioridade do auto wiring \u00b6 Por padr\u00e3o, sempre que os cont\u00eaineres do Spring encontrarem a nota\u00e7\u00e3o @Autowire , ele conectar\u00e1 automaticamente o bean levando em considera\u00e7\u00e3o a ordem de prioridade. Correspond\u00eancia por tipo Correspond\u00eancia por qualificador (@Qualifier) Correspond\u00eancia por nome (@Component(value=\"nome\")) Correspond\u00eancia por tipo \u00b6 package com.example.auto_wired_match_type ; /* imports */ @SpringBootApplication public class AutoWiredMatchTypeApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchTypeApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchTypeApplication . class . getPackage (). getName ()); context . refresh (); /** * Com @AutoWired */ ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Inje\u00e7\u00e3o ocorrer\u00e1 apartir da ClasseC, que retorna o bean de tipo classB */ @Autowired ClassB classB ; void metodo () { classB . metodoB (); } } @Configuration class ClassB { void metodoB () { System . out . println ( \"M\u00e9todo B\" ); } } @Configuration class ClassC { @Bean ClassB getClassB (){ return new ClassB (); } } // Saida: // > M\u00e9todo B Correspond\u00eancia por qualificador \u00b6 package com.example.auto_wired_match_qualifier ; /* imports */ @SpringBootApplication public class AutoWiredMatchQualifierApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchQualifierApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchQualifierApplication . class . getPackage (). getName ()); context . refresh (); ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Indicando a classe que retornou o bean */ @Autowired @Qualifier ( \"classB1\" ) ClassB classB ; /* * Indicando o m\u00e9todo que retornou o bean */ @Autowired @Qualifier ( \"getClassC1\" ) ClassC classC ; void metodo () { System . out . println ( classB . getClass (). getSimpleName (). substring ( 0 , 7 )); System . out . println ( classC . metodoUsado ); } } @Configuration class ClassB1 extends ClassB { @Bean ClassB1 getClassB1 (){ return new ClassB1 (); } } @Configuration class ClassB2 extends ClassB { @Bean ClassB2 getClassB2 (){ return new ClassB2 (); } } class ClassB { } @Configuration class ClassC { String metodoUsado ; ClassC () {} ClassC ( String metodoUsado ) { this . metodoUsado = metodoUsado ; } @Bean ClassC getClassC1 (){ return new ClassC ( \"metodo getClassC1\" ); } @Bean ClassC getClassC2 (){ return new ClassC ( \"metodo getClassC2\" ); } } // Saida: // > ClassB1 // > metodo getClassC1 Correspond\u00eancia por nome \u00b6 package com.example.auto_wired_match_nome ; /* imports */ @SpringBootApplication public class AutoWiredMatchNomeApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchNomeApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchNomeApplication . class . getPackage (). getName ()); context . refresh (); ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Inje\u00e7\u00e3o ocorrer\u00e1 verificando @Component(value=\"testeClassB\") */ @Autowired ClassB testeClassB ; void metodo () { System . out . println ( testeClassB . getClass (). getSimpleName (). substring ( 0 , 7 )); } } @Configuration ( value = \"testeClassB\" ) class ClassB1 extends ClassB { } @Configuration class ClassB2 extends ClassB { } abstract class ClassB { } // Saida: // > ClassB1","title":"AutoWired"},{"location":"java/frameworks/spring-boot/_anotacoes/auto-wired/#autowired","text":"AutoWired Introdu\u00e7\u00e3o Prioridade do auto wiring Correspond\u00eancia por tipo Correspond\u00eancia por qualificador Correspond\u00eancia por nome","title":"AutoWired"},{"location":"java/frameworks/spring-boot/_anotacoes/auto-wired/#introducao","text":"Permite a inje\u00e7\u00e3o da depend\u00eancia do objeto implicitamente, ou seja, marca uma depend\u00eancia que o Spring resolver\u00e1 e injetar\u00e1. De forma resumida, @AutoWired indica para o Spring que ele precisa instanciar o objeto para n\u00f3s. A vari\u00e1vel de refer\u00eancia (depend\u00eancia) anotada com @Autowired , ser\u00e1 injetada pelo cont\u00eainer Spring com o @Bean correspondente seja @Component , @Repository , @Service , @Configuration ou @Controller . Auto wiring no Spring significa que o cont\u00eainer Spring pode resolver automaticamente a depend\u00eancias entre beans inspecionando o conte\u00fado do ApplicationContext . A anota\u00e7\u00e3o @Autowired ser utilizada em: Campos public class ClasseA { @Autowired private ClasseB classeB ; } Construtores public class ClasseA { private ClasseB classeB ; @Autowired ClasseA ( ClasseB classeB ) { this . classeB = classeB } } M\u00e9todos (mais comumente, os setters) public class ClasseA { private ClasseB classeB ; @Autowired void setClasseB ( ClasseB classeB ) { this . classeB = classeB } } Sem a nota\u00e7\u00e3o @Autowire o cliente precisa saber instanciar os objetos no qual depende. package com.example.auto_wired ; /* imports */ @SpringBootApplication public class AutoWiredApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredApplication . class . getPackage (). getName ()); context . refresh (); /** * Com @AutoWired */ UserClassWired objWired = context . getBean ( UserClassWired . class ); objWired . doSomething (); /** * Sem @AutoWired */ UserClassNoWired objNoWired = context . getBean ( UserClassNoWired . class ); objNoWired . doSomething (); } } @Component class ClassA { ClassB classB ; ClassA ( ClassB classB ){ this . classB = classB ; } void metodo () { System . out . println ( \"Metodo do A\" ); this . classB . metodo (); } } @Component class ClassB { ClassC classC ; ClassB ( ClassC classC ){ this . classC = classC ; } void metodo () { System . out . println ( \"Metodo do B\" ); } } @Component class ClassC { ClassC (){} } @Component class UserClassWired { ClassA classA ; @Autowired UserClassWired ( ClassA classA ) { this . classA = classA ; } UserClassWired () {} void doSomething () { classA . metodo (); } } @Component class UserClassNoWired { ClassA classA ; UserClassNoWired ( ClassA classA ) { this . classA = classA ; } UserClassNoWired () {} /** * Sem @AutoWired o UserClassNoWired passa a ter responsabilidade de saber todas as * depend\u00eancias para instanciar um objeto de ClassA. */ void doSomething (){ ClassC classC = new ClassC (); ClassB classB = new ClassB ( classC ); this . classA = new ClassA ( classB ); classA . metodo (); } } // Saida: // > Metodo do A // > Metodo do B // > Metodo do A // > Metodo do B - O Spring n\u00e3o tem o requisito para o construtor com nota\u00e7\u00e3o `@Autowire` ser p\u00fablico. - Classes que possuem somente um construtor n\u00e3o precisam declarar a nota\u00e7\u00e3o `@Autowire`, pois a nota\u00e7\u00e3o est\u00e1 presente implicitamente. - Se usarmos a nota\u00e7\u00e3o `@Autowire` no construtor, todos os argumentos do construtor ser\u00e3o obrigat\u00f3rios. - S\u00f3 uma classe *bean* (ou seja, gerenciada pelo Spring) pode ter injetados nela outros *beans*.","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/auto-wired/#prioridade-do-auto-wiring","text":"Por padr\u00e3o, sempre que os cont\u00eaineres do Spring encontrarem a nota\u00e7\u00e3o @Autowire , ele conectar\u00e1 automaticamente o bean levando em considera\u00e7\u00e3o a ordem de prioridade. Correspond\u00eancia por tipo Correspond\u00eancia por qualificador (@Qualifier) Correspond\u00eancia por nome (@Component(value=\"nome\"))","title":"Prioridade do auto wiring"},{"location":"java/frameworks/spring-boot/_anotacoes/auto-wired/#correspondencia-por-tipo","text":"package com.example.auto_wired_match_type ; /* imports */ @SpringBootApplication public class AutoWiredMatchTypeApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchTypeApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchTypeApplication . class . getPackage (). getName ()); context . refresh (); /** * Com @AutoWired */ ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Inje\u00e7\u00e3o ocorrer\u00e1 apartir da ClasseC, que retorna o bean de tipo classB */ @Autowired ClassB classB ; void metodo () { classB . metodoB (); } } @Configuration class ClassB { void metodoB () { System . out . println ( \"M\u00e9todo B\" ); } } @Configuration class ClassC { @Bean ClassB getClassB (){ return new ClassB (); } } // Saida: // > M\u00e9todo B","title":"Correspond\u00eancia por tipo"},{"location":"java/frameworks/spring-boot/_anotacoes/auto-wired/#correspondencia-por-qualificador","text":"package com.example.auto_wired_match_qualifier ; /* imports */ @SpringBootApplication public class AutoWiredMatchQualifierApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchQualifierApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchQualifierApplication . class . getPackage (). getName ()); context . refresh (); ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Indicando a classe que retornou o bean */ @Autowired @Qualifier ( \"classB1\" ) ClassB classB ; /* * Indicando o m\u00e9todo que retornou o bean */ @Autowired @Qualifier ( \"getClassC1\" ) ClassC classC ; void metodo () { System . out . println ( classB . getClass (). getSimpleName (). substring ( 0 , 7 )); System . out . println ( classC . metodoUsado ); } } @Configuration class ClassB1 extends ClassB { @Bean ClassB1 getClassB1 (){ return new ClassB1 (); } } @Configuration class ClassB2 extends ClassB { @Bean ClassB2 getClassB2 (){ return new ClassB2 (); } } class ClassB { } @Configuration class ClassC { String metodoUsado ; ClassC () {} ClassC ( String metodoUsado ) { this . metodoUsado = metodoUsado ; } @Bean ClassC getClassC1 (){ return new ClassC ( \"metodo getClassC1\" ); } @Bean ClassC getClassC2 (){ return new ClassC ( \"metodo getClassC2\" ); } } // Saida: // > ClassB1 // > metodo getClassC1","title":"Correspond\u00eancia por qualificador"},{"location":"java/frameworks/spring-boot/_anotacoes/auto-wired/#correspondencia-por-nome","text":"package com.example.auto_wired_match_nome ; /* imports */ @SpringBootApplication public class AutoWiredMatchNomeApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchNomeApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchNomeApplication . class . getPackage (). getName ()); context . refresh (); ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Inje\u00e7\u00e3o ocorrer\u00e1 verificando @Component(value=\"testeClassB\") */ @Autowired ClassB testeClassB ; void metodo () { System . out . println ( testeClassB . getClass (). getSimpleName (). substring ( 0 , 7 )); } } @Configuration ( value = \"testeClassB\" ) class ClassB1 extends ClassB { } @Configuration class ClassB2 extends ClassB { } abstract class ClassB { } // Saida: // > ClassB1","title":"Correspond\u00eancia por nome"},{"location":"java/frameworks/spring-boot/_anotacoes/component-scan/","text":"ComponentScan e ComponentScans \u00b6 ComponentScan e ComponentScans Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Essa anota\u00e7\u00e3o \u00e9 usada com a anota\u00e7\u00e3o @Configuration para permitir que o Spring conhe\u00e7a os pacotes que ser\u00e3o analisados em busca das nota\u00e7\u00f5es. Tamb\u00e9m \u00e9 poss\u00edvel especificar pacotes externos para serem inclusos na an\u00e1lise atrav\u00e9s dos atributos basePackageClasses ou basePackage . Se pacotes espec\u00edficos n\u00e3o forem definidos, a an\u00e1lise ocorrer\u00e1 a partir do pacote da classe que declara essa anota\u00e7\u00e3o e prosseguir\u00e1 pelos sub-pacotes apenas. Definindo os pacotes a serem analisados. @Configuration @ComponentScan ( basePackages = { \"com.exemplo.um\" , \"com.exemplo.dois\" }) class VehicleFactoryConfig {} Especificando as classes do pacote que ser\u00e3o analisadas. @Configuration @ComponentScan ( basePackageClasses = { ClasseUm . class , ClasseDois . class }) class VehicleFactoryConfig {} Especificando as classes dos pacotes que ser\u00e3o analisadas. Se as classes existirem em mais de um pacote, todas ser\u00e3o consideradas. @Configuration @ComponentScan ( basePackages = { \"com.exemplo.um\" , \"com.exemplo.dois\" }) @ComponentScan ( basePackageClasses = { ClasseUm . class , ClasseDois . class }) class VehicleFactoryConfig {} Especifica qual classe de cada pacote ser\u00e1 analisada. @Configuration @ComponentScans ({ @ComponentScan ( basePackages = \"com.exemplo.um\" ), @ComponentScan ( basePackageClasses = ClasseUm . class ) } @ComponentScans ({ @ComponentScan ( basePackages = \"com.exemplo.dois\" ), @ComponentScan ( basePackageClasses = ClasseDois . class ) } ) class VehicleFactoryConfig {}","title":"ComponentScan e ComponentScans"},{"location":"java/frameworks/spring-boot/_anotacoes/component-scan/#componentscan-e-componentscans","text":"ComponentScan e ComponentScans Introdu\u00e7\u00e3o","title":"ComponentScan e ComponentScans"},{"location":"java/frameworks/spring-boot/_anotacoes/component-scan/#introducao","text":"Essa anota\u00e7\u00e3o \u00e9 usada com a anota\u00e7\u00e3o @Configuration para permitir que o Spring conhe\u00e7a os pacotes que ser\u00e3o analisados em busca das nota\u00e7\u00f5es. Tamb\u00e9m \u00e9 poss\u00edvel especificar pacotes externos para serem inclusos na an\u00e1lise atrav\u00e9s dos atributos basePackageClasses ou basePackage . Se pacotes espec\u00edficos n\u00e3o forem definidos, a an\u00e1lise ocorrer\u00e1 a partir do pacote da classe que declara essa anota\u00e7\u00e3o e prosseguir\u00e1 pelos sub-pacotes apenas. Definindo os pacotes a serem analisados. @Configuration @ComponentScan ( basePackages = { \"com.exemplo.um\" , \"com.exemplo.dois\" }) class VehicleFactoryConfig {} Especificando as classes do pacote que ser\u00e3o analisadas. @Configuration @ComponentScan ( basePackageClasses = { ClasseUm . class , ClasseDois . class }) class VehicleFactoryConfig {} Especificando as classes dos pacotes que ser\u00e3o analisadas. Se as classes existirem em mais de um pacote, todas ser\u00e3o consideradas. @Configuration @ComponentScan ( basePackages = { \"com.exemplo.um\" , \"com.exemplo.dois\" }) @ComponentScan ( basePackageClasses = { ClasseUm . class , ClasseDois . class }) class VehicleFactoryConfig {} Especifica qual classe de cada pacote ser\u00e1 analisada. @Configuration @ComponentScans ({ @ComponentScan ( basePackages = \"com.exemplo.um\" ), @ComponentScan ( basePackageClasses = ClasseUm . class ) } @ComponentScans ({ @ComponentScan ( basePackages = \"com.exemplo.dois\" ), @ComponentScan ( basePackageClasses = ClasseDois . class ) } ) class VehicleFactoryConfig {}","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/configuration/","text":"Configuration \u00b6 Configuration Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Indica que uma classe declara um ou mais m\u00e9todos @Bean e pode ser processada pelo cont\u00eainer Spring para gerar defini\u00e7\u00f5es de bean e solicita\u00e7\u00f5es de servi\u00e7o para esses beans em tempo de execu\u00e7\u00e3o. @Configuration engloba a anota\u00e7\u00e3o @Component . Classes anotadas com @Configuration m\u00e3o devem ser classes final . @Configuration public static class Config { @Bean public ClasseA getClasseA () { return new ClasseA (); } @Bean public ClasseB getClasseB () { return new ClasseB ( getClasseA ()); } } Se a anota\u00e7\u00e3o @Component for usada no lugar de @Configuration o spring criar\u00e1 um bean singleton de ClasseA , mas ClasseB obter\u00e1 outra inst\u00e2ncia de ClasseA que est\u00e1 fora do controle de contexto do spring. Se voc\u00ea usar @Configuration , todos os m\u00e9todos marcados como @Bean ser\u00e3o agrupados em um wrapper CGLIB que funciona como se fosse a primeira chamada desse m\u00e9todo, o corpo do m\u00e9todo original ser\u00e1 executado e o objeto resultante ser\u00e1 registrado no contexto do Spring. Todas as chamadas adicionais retornam o bean recuperado do contexto. @Component public static class Config { @Bean public ClasseA getClasseA () { return new ClasseA (); } @Bean public ClasseB getClasseB () { return new ClasseB ( getClasseA ()); } } Usando @Component a forma equivalente seria: @Component public static class Config { @Autowired ClasseA classeA ; @Bean public ClasseA getClasseA () { return new ClasseA (); } @Bean public ClasseB getClasseB () { return new ClasseB ( classeA ); } }","title":"Configuration"},{"location":"java/frameworks/spring-boot/_anotacoes/configuration/#configuration","text":"Configuration Introdu\u00e7\u00e3o","title":"Configuration"},{"location":"java/frameworks/spring-boot/_anotacoes/configuration/#introducao","text":"Indica que uma classe declara um ou mais m\u00e9todos @Bean e pode ser processada pelo cont\u00eainer Spring para gerar defini\u00e7\u00f5es de bean e solicita\u00e7\u00f5es de servi\u00e7o para esses beans em tempo de execu\u00e7\u00e3o. @Configuration engloba a anota\u00e7\u00e3o @Component . Classes anotadas com @Configuration m\u00e3o devem ser classes final . @Configuration public static class Config { @Bean public ClasseA getClasseA () { return new ClasseA (); } @Bean public ClasseB getClasseB () { return new ClasseB ( getClasseA ()); } } Se a anota\u00e7\u00e3o @Component for usada no lugar de @Configuration o spring criar\u00e1 um bean singleton de ClasseA , mas ClasseB obter\u00e1 outra inst\u00e2ncia de ClasseA que est\u00e1 fora do controle de contexto do spring. Se voc\u00ea usar @Configuration , todos os m\u00e9todos marcados como @Bean ser\u00e3o agrupados em um wrapper CGLIB que funciona como se fosse a primeira chamada desse m\u00e9todo, o corpo do m\u00e9todo original ser\u00e1 executado e o objeto resultante ser\u00e1 registrado no contexto do Spring. Todas as chamadas adicionais retornam o bean recuperado do contexto. @Component public static class Config { @Bean public ClasseA getClasseA () { return new ClasseA (); } @Bean public ClasseB getClasseB () { return new ClasseB ( getClasseA ()); } } Usando @Component a forma equivalente seria: @Component public static class Config { @Autowired ClasseA classeA ; @Bean public ClasseA getClasseA () { return new ClasseA (); } @Bean public ClasseB getClasseB () { return new ClasseB ( classeA ); } }","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/enable-auto-configuration/","text":"EnableAutoConfiguration \u00b6 EnableAutoConfiguration Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Configura a aplica\u00e7\u00e3o automaticamente baseando nos JARs presentes no CLASSPATH e em como os beans foram definidos: O Spring Boot utiliza os JARs cuja presen\u00e7a no CLASSPATH foi especificada para formar uma opini\u00e3o acerca de como configurar um comportamento autom\u00e1tico espec\u00edfico. Por exemplo, se voc\u00ea tem o JAR do banco de dados H2 no seu caminho de classe e n\u00e3o configurou nenhum outro bean DataSource , seu aplicativo ser\u00e1 configurado automaticamente com um banco de dados em mem\u00f3ria. O Spring Boot usa a maneira como os beans foram definidos para determinar como se configurar automaticamente. Por exemplo, se seus beans JPA forem anotados com @Entity , o Spring Boot configurar\u00e1 o JPA automaticamente para n\u00e3o haver necessidade de um arquivo persistence.xml . @EnableAutoConfiguration public class HelloWorldApplication { public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } Para ignorar as configura\u00e7\u00f5es de uma classe utilize: @EnableAutoConfiguration ( exclude = { Exemplo . class })","title":"EnableAutoConfiguration"},{"location":"java/frameworks/spring-boot/_anotacoes/enable-auto-configuration/#enableautoconfiguration","text":"EnableAutoConfiguration Introdu\u00e7\u00e3o","title":"EnableAutoConfiguration"},{"location":"java/frameworks/spring-boot/_anotacoes/enable-auto-configuration/#introducao","text":"Configura a aplica\u00e7\u00e3o automaticamente baseando nos JARs presentes no CLASSPATH e em como os beans foram definidos: O Spring Boot utiliza os JARs cuja presen\u00e7a no CLASSPATH foi especificada para formar uma opini\u00e3o acerca de como configurar um comportamento autom\u00e1tico espec\u00edfico. Por exemplo, se voc\u00ea tem o JAR do banco de dados H2 no seu caminho de classe e n\u00e3o configurou nenhum outro bean DataSource , seu aplicativo ser\u00e1 configurado automaticamente com um banco de dados em mem\u00f3ria. O Spring Boot usa a maneira como os beans foram definidos para determinar como se configurar automaticamente. Por exemplo, se seus beans JPA forem anotados com @Entity , o Spring Boot configurar\u00e1 o JPA automaticamente para n\u00e3o haver necessidade de um arquivo persistence.xml . @EnableAutoConfiguration public class HelloWorldApplication { public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } Para ignorar as configura\u00e7\u00f5es de uma classe utilize: @EnableAutoConfiguration ( exclude = { Exemplo . class })","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/qualifier/","text":"Qualifier \u00b6 Qualifier Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Esta anota\u00e7\u00e3o \u00e9 usada junto com a anota\u00e7\u00e3o @Autowired . Essa anota\u00e7\u00e3o \u00e9 usada para evitar confus\u00e3o que ocorre quando voc\u00ea cria mais de um bean do mesmo tipo e deseja conectar apenas um deles a uma propriedade. @Qualifier pode ser especificado em argumentos de construtores individuais ou par\u00e2metros de m\u00e9todo. package com.example.auto_wired_match_qualifier ; /* imports */ @SpringBootApplication public class AutoWiredMatchQualifierApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchQualifierApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchQualifierApplication . class . getPackage (). getName ()); context . refresh (); ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Indicando a classe que retornou o bean */ @Autowired @Qualifier ( \"classB1\" ) ClassB classB ; /* * Indicando o m\u00e9todo que retornou o bean */ @Autowired @Qualifier ( \"getClassC1\" ) ClassC classC ; void metodo () { System . out . println ( classB . getClass (). getName ()); System . out . println ( classC . metodoUsado ); } } @Component class ClassB1 extends ClassB { @Bean ClassB1 getClassB1 (){ return new ClassB1 (); } } @Component class ClassB2 extends ClassB { @Bean ClassB2 getClassB2 (){ return new ClassB2 (); } } class ClassB { } @Component class ClassC { String metodoUsado ; ClassC () {} ClassC ( String metodoUsado ) { this . metodoUsado = metodoUsado ; } @Bean ClassC getClassC1 (){ return new ClassC ( \"metodo getClassC1\" ); } @Bean ClassC getClassC2 (){ return new ClassC ( \"metodo getClassC2\" ); } } // Saida: // > com.example.auto_wired_match_qualifier.ClassB1 // > metodo getClassC1","title":"Qualifier"},{"location":"java/frameworks/spring-boot/_anotacoes/qualifier/#qualifier","text":"Qualifier Introdu\u00e7\u00e3o","title":"Qualifier"},{"location":"java/frameworks/spring-boot/_anotacoes/qualifier/#introducao","text":"Esta anota\u00e7\u00e3o \u00e9 usada junto com a anota\u00e7\u00e3o @Autowired . Essa anota\u00e7\u00e3o \u00e9 usada para evitar confus\u00e3o que ocorre quando voc\u00ea cria mais de um bean do mesmo tipo e deseja conectar apenas um deles a uma propriedade. @Qualifier pode ser especificado em argumentos de construtores individuais ou par\u00e2metros de m\u00e9todo. package com.example.auto_wired_match_qualifier ; /* imports */ @SpringBootApplication public class AutoWiredMatchQualifierApplication { public static void main ( String [] args ) { SpringApplication . run ( AutoWiredMatchQualifierApplication . class , args ); AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . scan ( AutoWiredMatchQualifierApplication . class . getPackage (). getName ()); context . refresh (); ClassA classA = context . getBean ( ClassA . class ); classA . metodo (); } } @Component class ClassA { /* * Indicando a classe que retornou o bean */ @Autowired @Qualifier ( \"classB1\" ) ClassB classB ; /* * Indicando o m\u00e9todo que retornou o bean */ @Autowired @Qualifier ( \"getClassC1\" ) ClassC classC ; void metodo () { System . out . println ( classB . getClass (). getName ()); System . out . println ( classC . metodoUsado ); } } @Component class ClassB1 extends ClassB { @Bean ClassB1 getClassB1 (){ return new ClassB1 (); } } @Component class ClassB2 extends ClassB { @Bean ClassB2 getClassB2 (){ return new ClassB2 (); } } class ClassB { } @Component class ClassC { String metodoUsado ; ClassC () {} ClassC ( String metodoUsado ) { this . metodoUsado = metodoUsado ; } @Bean ClassC getClassC1 (){ return new ClassC ( \"metodo getClassC1\" ); } @Bean ClassC getClassC2 (){ return new ClassC ( \"metodo getClassC2\" ); } } // Saida: // > com.example.auto_wired_match_qualifier.ClassB1 // > metodo getClassC1","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/request-mapping/","text":"RequestMapping \u00b6 RequestMapping Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Esta anota\u00e7\u00e3o \u00e9 usada no n\u00edvel de classe ou de m\u00e9todo. A anota\u00e7\u00e3o @RequestMapping \u00e9 usada para mapear requisi\u00e7\u00f5es Web para classes e m\u00e9todos espec\u00edficos que fazem parte de um @Controller . Quando o @RequestMapping \u00e9 usado no n\u00edvel da classe, ele cria um URI base para o qual o controlador ser\u00e1 usado. Quando essa anota\u00e7\u00e3o \u00e9 usada nos m\u00e9todos, ele fornece o URI no qual os m\u00e9todos do manipulador ser\u00e3o executados. A partir disso, \u00e9 poss\u00edvel inferir que o mapeamento de requisi\u00e7\u00e3o no n\u00edvel de classe permanecer\u00e1 o mesmo, enquanto cada m\u00e9todo ter\u00e1 seu pr\u00f3prio mapeamento de requisi\u00e7\u00e3o. @RequestMapping pode ser configurado usando: Caminho ou seus aliases , nome e valor : da URL que ser\u00e1 mapeada para o m\u00e9todo. M\u00e9todo : m\u00e9todos HTTP compat\u00edveis Par\u00e2metros : filtra solicita\u00e7\u00f5es com base na presen\u00e7a, aus\u00eancia ou valor de par\u00e2metros HTTP Cabe\u00e7alhos : filtra solicita\u00e7\u00f5es com base na presen\u00e7a, aus\u00eancia ou valor dos cabe\u00e7alhos HTTP Consumidor : quais tipos de m\u00eddia o m\u00e9todo pode consumir no corpo da solicita\u00e7\u00e3o HTTP Produtor : quais tipos de m\u00eddia o m\u00e9todo pode produzir no corpo da resposta HTTP. Usando em n\u00edvel de classe: @Controller class EmployeeController { /* * Manipula requisi\u00e7\u00f5es Web de ender\u00e7o \"/employees/home\" do tipo GET */ @RequestMapping ( value = \"/employees/home\" , method = RequestMethod . GET ) String home () { return \"home\" ; } } Usando em n\u00edvel de m\u00e9todo: @Controller @RequestMapping ( value = \"/employees\" , method = RequestMethod . GET ) class EmployeeController { @RequestMapping ( \"/home\" ) String home () { return \"home\" ; } } Outro exemplo: @Controller public class SpringMVCController { @RequestMapping ( value = { \"/greetings\" , \"/hello-world\" }, method = { RequestMethod . GET , RequestMethod . POST }, consumes = { \"application/json\" , \"application/xml\" }, produces = { \"application/json\" }, headers = { \"application/json\" }) public String hellpWorld () { return \"Hello\" ; } } Al\u00e9m disso, @GetMapping , @PostMapping , @PutMapping , @DeleteMapping e @PatchMapping s\u00e3o variantes diferentes de @RequestMapping com o m\u00e9todo HTTP j\u00e1 definido como GET, POST, PUT, DELETE e PATCH, respectivamente.","title":"RequestMapping"},{"location":"java/frameworks/spring-boot/_anotacoes/request-mapping/#requestmapping","text":"RequestMapping Introdu\u00e7\u00e3o","title":"RequestMapping"},{"location":"java/frameworks/spring-boot/_anotacoes/request-mapping/#introducao","text":"Esta anota\u00e7\u00e3o \u00e9 usada no n\u00edvel de classe ou de m\u00e9todo. A anota\u00e7\u00e3o @RequestMapping \u00e9 usada para mapear requisi\u00e7\u00f5es Web para classes e m\u00e9todos espec\u00edficos que fazem parte de um @Controller . Quando o @RequestMapping \u00e9 usado no n\u00edvel da classe, ele cria um URI base para o qual o controlador ser\u00e1 usado. Quando essa anota\u00e7\u00e3o \u00e9 usada nos m\u00e9todos, ele fornece o URI no qual os m\u00e9todos do manipulador ser\u00e3o executados. A partir disso, \u00e9 poss\u00edvel inferir que o mapeamento de requisi\u00e7\u00e3o no n\u00edvel de classe permanecer\u00e1 o mesmo, enquanto cada m\u00e9todo ter\u00e1 seu pr\u00f3prio mapeamento de requisi\u00e7\u00e3o. @RequestMapping pode ser configurado usando: Caminho ou seus aliases , nome e valor : da URL que ser\u00e1 mapeada para o m\u00e9todo. M\u00e9todo : m\u00e9todos HTTP compat\u00edveis Par\u00e2metros : filtra solicita\u00e7\u00f5es com base na presen\u00e7a, aus\u00eancia ou valor de par\u00e2metros HTTP Cabe\u00e7alhos : filtra solicita\u00e7\u00f5es com base na presen\u00e7a, aus\u00eancia ou valor dos cabe\u00e7alhos HTTP Consumidor : quais tipos de m\u00eddia o m\u00e9todo pode consumir no corpo da solicita\u00e7\u00e3o HTTP Produtor : quais tipos de m\u00eddia o m\u00e9todo pode produzir no corpo da resposta HTTP. Usando em n\u00edvel de classe: @Controller class EmployeeController { /* * Manipula requisi\u00e7\u00f5es Web de ender\u00e7o \"/employees/home\" do tipo GET */ @RequestMapping ( value = \"/employees/home\" , method = RequestMethod . GET ) String home () { return \"home\" ; } } Usando em n\u00edvel de m\u00e9todo: @Controller @RequestMapping ( value = \"/employees\" , method = RequestMethod . GET ) class EmployeeController { @RequestMapping ( \"/home\" ) String home () { return \"home\" ; } } Outro exemplo: @Controller public class SpringMVCController { @RequestMapping ( value = { \"/greetings\" , \"/hello-world\" }, method = { RequestMethod . GET , RequestMethod . POST }, consumes = { \"application/json\" , \"application/xml\" }, produces = { \"application/json\" }, headers = { \"application/json\" }) public String hellpWorld () { return \"Hello\" ; } } Al\u00e9m disso, @GetMapping , @PostMapping , @PutMapping , @DeleteMapping e @PatchMapping s\u00e3o variantes diferentes de @RequestMapping com o m\u00e9todo HTTP j\u00e1 definido como GET, POST, PUT, DELETE e PATCH, respectivamente.","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/spring-boot-application/","text":"SpringBootApplication \u00b6 SpringBootApplication Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 O mesmo que @EnableAutoConfiguration + @ComponentScan + @Configuration + @ConfigurationPropertiesScan . De maneira geral, o Spring Boot se preocupa com 4 coisas principais em sua inicializa\u00e7\u00e3o: Configurar automaticamente o seu projeto a partir das depend\u00eancias que voc\u00ea declara no sistema de build ( pom.xml ) sobre o qual o projeto \u00e9 constru\u00eddo. Isso \u00e9 feito pela anota\u00e7\u00e3o @EnableAutoConfiguration . Varrer a aplica\u00e7\u00e3o em busca de classes que possuam certas anota\u00e7\u00f5es espec\u00edficas ( @Repository , @Service , @Configuration e @Controller ) que informem que essas classes devem ter seu ciclo de vida gerenciado pelo Spring. Essas classes s\u00e3o os beans e o fruto desse gerenciamento nada mais \u00e9 do que a inje\u00e7\u00e3o de depend\u00eancia ( @Autowired ). O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ComponentScan . Varrer a aplica\u00e7\u00e3o em busca de classes com nota\u00e7\u00e3o @ConfigurationProperties . O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ConfigurationPropertiesScan Definir que a pr\u00f3pria classe que cont\u00e9m o m\u00e9todo main seja ela mesma um bean , anotando-a com @Configuration . Por qu\u00ea? Para permitir que voc\u00ea possa, caso queria, ter outros beans (j\u00e1 previamente escaneados pelo item 2) injetados nessa classe, poupando voc\u00ea da necessidade de criar classes adicionais para isso. Lembrando que s\u00f3 uma classe bean (ou seja, gerenciada pelo Spring) pode ter injetados nela outros beans . Para conveni\u00eancia, a anota\u00e7\u00e3o @SpringBootApplication incorpora as quatro anota\u00e7\u00f5es acima. Na aplica\u00e7\u00e3o, deve ser adicionada somente uma \u00fanica anota\u00e7\u00e3o @SpringBootApplication ou @EnableAutoConfiguration . Geralmente, \u00e9 recomendado que seja adicionado apenas um ou outro \u00e0 classe @Configuration principal. @SpringBootApplication public class HelloWorldApplication { public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } Sem a nota\u00e7\u00e3o @ConfigurationPropertiesScan ou @ComponentScan , as classes anotadas com @Component e @ConfigurationProperties devem ser incorporadas atrav\u00e9s de @Import . Como no exemplo: @Configuration ( proxyBeanMethods = false ) @EnableAutoConfiguration @Import ({ MyConfig . class , MyAnotherConfig . class }) public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } }","title":"SpringBootApplication"},{"location":"java/frameworks/spring-boot/_anotacoes/spring-boot-application/#springbootapplication","text":"SpringBootApplication Introdu\u00e7\u00e3o","title":"SpringBootApplication"},{"location":"java/frameworks/spring-boot/_anotacoes/spring-boot-application/#introducao","text":"O mesmo que @EnableAutoConfiguration + @ComponentScan + @Configuration + @ConfigurationPropertiesScan . De maneira geral, o Spring Boot se preocupa com 4 coisas principais em sua inicializa\u00e7\u00e3o: Configurar automaticamente o seu projeto a partir das depend\u00eancias que voc\u00ea declara no sistema de build ( pom.xml ) sobre o qual o projeto \u00e9 constru\u00eddo. Isso \u00e9 feito pela anota\u00e7\u00e3o @EnableAutoConfiguration . Varrer a aplica\u00e7\u00e3o em busca de classes que possuam certas anota\u00e7\u00f5es espec\u00edficas ( @Repository , @Service , @Configuration e @Controller ) que informem que essas classes devem ter seu ciclo de vida gerenciado pelo Spring. Essas classes s\u00e3o os beans e o fruto desse gerenciamento nada mais \u00e9 do que a inje\u00e7\u00e3o de depend\u00eancia ( @Autowired ). O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ComponentScan . Varrer a aplica\u00e7\u00e3o em busca de classes com nota\u00e7\u00e3o @ConfigurationProperties . O ato de varrer \u00e9 disparado pela anota\u00e7\u00e3o @ConfigurationPropertiesScan Definir que a pr\u00f3pria classe que cont\u00e9m o m\u00e9todo main seja ela mesma um bean , anotando-a com @Configuration . Por qu\u00ea? Para permitir que voc\u00ea possa, caso queria, ter outros beans (j\u00e1 previamente escaneados pelo item 2) injetados nessa classe, poupando voc\u00ea da necessidade de criar classes adicionais para isso. Lembrando que s\u00f3 uma classe bean (ou seja, gerenciada pelo Spring) pode ter injetados nela outros beans . Para conveni\u00eancia, a anota\u00e7\u00e3o @SpringBootApplication incorpora as quatro anota\u00e7\u00f5es acima. Na aplica\u00e7\u00e3o, deve ser adicionada somente uma \u00fanica anota\u00e7\u00e3o @SpringBootApplication ou @EnableAutoConfiguration . Geralmente, \u00e9 recomendado que seja adicionado apenas um ou outro \u00e0 classe @Configuration principal. @SpringBootApplication public class HelloWorldApplication { public static void main ( String [] args ) { SpringApplication . run ( HelloWorldApplication . class , args ); } } Sem a nota\u00e7\u00e3o @ConfigurationPropertiesScan ou @ComponentScan , as classes anotadas com @Component e @ConfigurationProperties devem ser incorporadas atrav\u00e9s de @Import . Como no exemplo: @Configuration ( proxyBeanMethods = false ) @EnableAutoConfiguration @Import ({ MyConfig . class , MyAnotherConfig . class }) public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } }","title":"Introdu\u00e7\u00e3o"},{"location":"java/frameworks/spring-boot/_anotacoes/value/","text":"Value \u00b6 Value Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 A anota\u00e7\u00e3o @Value indica o valor padr\u00e3o para o campo ou par\u00e2metro do construtor ou m\u00e9todo setter . \u00c9 semelhante \u00e0 anota\u00e7\u00e3o @Autowire , mas a anota\u00e7\u00e3o @Value injeta valores das propriedades no bean . Exemplo de formas de passagem de valores: /* campo */ @Value ( \"8\" ) int cylinderCount ; /* construtor */ Engine ( @Value ( \"8\" ) int cylinderCount ) { this . cylinderCount = cylinderCount ; } /* m\u00e9todo setter */ @Autowired void setCylinderCount ( @Value ( \"8\" ) int cylinderCount ) { this . cylinderCount = cylinderCount ; } /* m\u00e9todo setter segunda forma */ @Value ( \"8\" ) void setCylinderCount ( int cylinderCount ) { this . cylinderCount = cylinderCount ; } Exemplo de valores que podem ser passados: /* string */ @Value ( \"Sem nome\" ) private String defaultName ; /* booleano */ @Value ( \"true\" ) private boolean defaultBoolean ; /* inteiro */ @Value ( \"10\" ) private int defaultInt ; /* propriedades do ambiente Spring */ @Value ( \"${APP_NAME_NOT_FOUND}\" ) private String defaultAppName ; /* vari\u00e1veis do sistema */ @Value ( \"${java.home}\" ) private String javaHome ; /* vari\u00e1veis do sistema */ @Value ( \"${HOME}\" ) private String homeDir ; /* Spring Expression Language (SpEL) */ @Value ( \"#{systemProperties['java.home']}\" ) private String javaHome ;","title":"Value"},{"location":"java/frameworks/spring-boot/_anotacoes/value/#value","text":"Value Introdu\u00e7\u00e3o","title":"Value"},{"location":"java/frameworks/spring-boot/_anotacoes/value/#introducao","text":"A anota\u00e7\u00e3o @Value indica o valor padr\u00e3o para o campo ou par\u00e2metro do construtor ou m\u00e9todo setter . \u00c9 semelhante \u00e0 anota\u00e7\u00e3o @Autowire , mas a anota\u00e7\u00e3o @Value injeta valores das propriedades no bean . Exemplo de formas de passagem de valores: /* campo */ @Value ( \"8\" ) int cylinderCount ; /* construtor */ Engine ( @Value ( \"8\" ) int cylinderCount ) { this . cylinderCount = cylinderCount ; } /* m\u00e9todo setter */ @Autowired void setCylinderCount ( @Value ( \"8\" ) int cylinderCount ) { this . cylinderCount = cylinderCount ; } /* m\u00e9todo setter segunda forma */ @Value ( \"8\" ) void setCylinderCount ( int cylinderCount ) { this . cylinderCount = cylinderCount ; } Exemplo de valores que podem ser passados: /* string */ @Value ( \"Sem nome\" ) private String defaultName ; /* booleano */ @Value ( \"true\" ) private boolean defaultBoolean ; /* inteiro */ @Value ( \"10\" ) private int defaultInt ; /* propriedades do ambiente Spring */ @Value ( \"${APP_NAME_NOT_FOUND}\" ) private String defaultAppName ; /* vari\u00e1veis do sistema */ @Value ( \"${java.home}\" ) private String javaHome ; /* vari\u00e1veis do sistema */ @Value ( \"${HOME}\" ) private String homeDir ; /* Spring Expression Language (SpEL) */ @Value ( \"#{systemProperties['java.home']}\" ) private String javaHome ;","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/classe/","text":"Classe \u00b6 Classe Introdu\u00e7\u00e3o Classes aninhadas Classe interna comum Classe interna a um m\u00e9todo Classe interna an\u00f4nima Classe est\u00e1tica Classe abstrata Classe final Links Introdu\u00e7\u00e3o \u00b6 Uma classe \u00e9 uma estrutura que abstrai um conjunto de objetos com caracter\u00edsticas similares. Uma classe define o comportamento de seus objetos - atrav\u00e9s de m\u00e9todos - e os estados poss\u00edveis destes objetos - atrav\u00e9s de campos. Em outras palavras, uma classe descreve os servi\u00e7os oferecidos por seus objetos e quais informa\u00e7\u00f5es eles podem armazenar. Classes aninhadas \u00b6 A palavra \"aninhada\" em programa\u00e7\u00e3o ( nested , em ingl\u00eas) diz respeito que \u00e9 uma subrotina encapsulada noutra. O escopo da subrotina aninhada \u00e9 limitado a subrotina que a encapsula. Isso significa que ela pode ser chamada somente pela subrotina que a encapsula, ou pelas subrotinas diretamente ou indiretamente aninhadas pela mesma subrotina encapsuladora. O aninhamento \u00e9 teoricamente ilimitado, ainda que na pr\u00e1tica somente alguns n\u00edveis s\u00e3o aceitos, o que depende da implementa\u00e7\u00e3o. Porque dever\u00edamos criar uma classe aninhada em vez de uma top-level? Quais as vantagens no seu uso? Agrupamento de classes que s\u00e3o usadas em apenas um lugar : Se voc\u00ea possui uma classe B que com certeza ser\u00e1 usada apenas dentro da classe A, o melhor \u00e9 criar a classe B como interna a classe A. Aumento de Encapsulamento : Sendo que a classe B e A s\u00e3o duas classes top-level e B precisa acessar os membros de A, poder\u00edamos colocar a classe B dentro de A e colocar os membros de A como privados e ainda assim B conseguiria continuar acessando os membros de A por ser uma classe aninhada. C\u00f3digo mais leg\u00edvel e de f\u00e1cil manuten\u00e7\u00e3o : Colocar classes pequenas dentro de classes top-level, j\u00e1 que apenas esta a usar\u00e1, faz com que a l\u00f3gica da classe top-level seja mais f\u00e1cil de ser identificada, consequentemente tornando o c\u00f3digo mais leg\u00edvel e de f\u00e1cil manuten\u00e7\u00e3o. Classes Aninhadas s\u00e3o dividas em quatro categorias: Interna comum (N\u00e3o-Est\u00e1tica) Interna a um m\u00e9todo Interna an\u00f4nima. Est\u00e1tica Classe interna comum \u00b6 Uma classe interna comum s\u00f3 pode ser instanciada se estiver dentro de um objeto da classe externa. - Uma classe interna tem acesso aos membros est\u00e1ticos e aos membros da inst\u00e2ncia da classe externa. - Classes aninhadas n\u00e3o podem ter campos ou m\u00e9todos est\u00e1ticos. package _classe.exemplo_aninhada_interna ; class Externa { private String attrExternoPrv = \"campo externo privado\" ; private String attrExternoPub = \"campo externo publico\" ; class InternaA { /* * Classes aninhadas n\u00e3o podem ter campos ou m\u00e9todos est\u00e1ticos. */ // static String atr = \"valor\"; // ERRO! String attrInternoA = \"campo interno A\" ; void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada A\" ); System . out . println ( attrExternoPrv ); System . out . println ( attrExternoPub ); } } class InternaB { void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada B\" ); /* * Necess\u00e1rio uma inst\u00e2ncia da Classe InternaA */ System . out . println ( new InternaA (). attrInternoA ); } } } class Exemplo { public static void main ( String [] args ) { /* * Necess\u00e1rio uma inst\u00e2ncia da Classe Externa */ // Externa.InternaA internaA = new Externa.InternaA(); // ERRO! Externa externa = new Externa (); Externa . InternaA internaA = externa . new InternaA (); internaA . imprime (); Externa . InternaB internaB = externa . new InternaB (); internaB . imprime (); } } // Saida: // > m\u00e9todo da classe aninhada A // > campo externo privado // > campo externo publico // > m\u00e9todo da classe aninhada B // > campo interno A Classe interna a um m\u00e9todo \u00b6 Uma classe Interna a um m\u00e9todo, s\u00f3 pode ser instanciada dentro deste pr\u00f3prio m\u00e9todo. Portanto o modificador padr\u00e3o de acesso de uma classe de m\u00e9todo possui comportamento do modificador private , visto que esse n\u00e3o pode ser instanciado de nenhum local fora do m\u00e9todo. Os modificadores de podem ser aplicados a este tipo de classe s\u00e3o: default , abstract e final . H\u00e1 uma exce\u00e7\u00e3o a ser notada quando utilizamos classes de m\u00e9todos, n\u00e3o podemos fazer refer\u00eancia as vari\u00e1veis do m\u00e9todo. package exemplo_aninhada_interna_metodo ; class Externa { String attrExterno = \"Campo externo\" ; void metodoExterno () { class Interna { void metodoInterno () { System . out . println ( \"m\u00e9todo da classe interna ao m\u00e9todo\" ); System . out . println ( attrExterno ); } } Interna interna = new Interna (); interna . metodoInterno (); } } class Exemplo { public static void main ( String [] args ) { Externa externa = new Externa (); externa . metodoExterno (); /* * N\u00e3o possui acesso fora do m\u00e9todo */ // Externa.Interna = externa.new Interna(); //ERRO! } } // Saida: // > m\u00e9todo da classe interna ao m\u00e9todo // > Campo externo Classe interna an\u00f4nima \u00b6 Classe an\u00f4nima nada mais \u00e9 do que a heran\u00e7a de determinada classe em um local exclusivo, ou seja, apenas em um determinado escopo foi preciso redefinir a classe-pai. package exemplo_aninhada_interna_anonima ; class Funcionario { void trabalhar () { System . out . println ( \"trabalhar\" ); } } class Exemplo { Funcionario gerente = new Funcionario () { /* * Sobrescreve o fun\u00e7\u00e3o trabalhar do funcion\u00e1rio */ void trabalhar () { System . out . println ( \"mandar\" ); } }; Funcionario peao = new Funcionario () { /* * Sobrescreve o fun\u00e7\u00e3o trabalhar do funcion\u00e1rio */ void trabalhar () { System . out . println ( \"executar\" ); } /* * M\u00e9todo descansar n\u00e3o poder\u00e1 ser usado, pois n\u00e3o foi definido em Funcionario */ void descansar () { System . out . println ( \"descansar\" ); } }; public static void main ( String [] args ) { Exemplo a = new Exemplo (); a . gerente . trabalhar (); a . peao . trabalhar (); /* * M\u00e9todo descansar n\u00e3o existe na classe Funcionario */ // a.peao.descansar(); // ERRO! } } // Saida: // > mandar // > executar Se fossemos fazer uma heran\u00e7a \"comum\", ter\u00edamos que criar uma classe Peao extends Funcionario e mudar o comportamento do m\u00e9todo trabalhar, e tamb\u00e9m criar\u00edamos uma classe Gerente extends Funcionario , isso \u00e9 o que normalmente se faz quando h\u00e1 necessidade do uso de tais comportamentos distintos em v\u00e1rios locais distintos, mas em nosso caso s\u00f3 precisamos desses comportamentos dentro da classe Exemplo e a melhor pr\u00e1tica \u00e9 usar classes an\u00f4nimas. As classes an\u00f4nimas ainda tem algo muito interessante, o uso de Interfaces. package exemplo_aninhada_interna_anonima_interface ; interface Evento { abstract void clicar (); abstract void arrastar (); } class Exemplo { static void acao ( Evento e ) { e . clicar (); e . arrastar (); } public static void main ( String [] args ) { acao ( new Evento () { public void clicar () { System . out . println ( \"clicou\" ); } public void arrastar () { System . out . println ( \"arrastou\" ); } }); } } // Saida: // > clicou // > arrastou O que voc\u00ea provavelmente percebeu com o c\u00f3digo acima \u00e9 que estamos fazendo uma instancia\u00e7\u00e3o da interface Evento como uma classe an\u00f4nima, mas como isso \u00e9 poss\u00edvel se o java n\u00e3o permite que uma interface seja instanciada? Acontece que ao chamar a interface usando a express\u00e3o new Evento() , \u00e9 criada uma classe an\u00f4nima (oculta) que estende a interface Evento e n\u00e3o a interface \u00e9 instanciada diretamente, tanto que \u00e9 obrigat\u00f3rio usar todos os m\u00e9todos que est\u00e3o na interface. Classe est\u00e1tica \u00b6 A palavra-chave static significa que \u00e9 algo pertence diretamente a classe e que n\u00e3o precisa de uma inst\u00e2ncia dessa classe para poder acess\u00e1-lo. Portanto classes est\u00e1ticas devem ser sempre aninhadas (internas), j\u00e1 que estruturas est\u00e1ticas pertencem diretamente \u00e0s classes. Uma classe est\u00e1tica n\u00e3o tem acesso aos membros da inst\u00e2ncia da classe externa, somente aos membros est\u00e1ticos. package exemplo_aninhada_estatica ; class Externa { static String attrEstatico = \"campo est\u00e1tico\" ; String attrNaoEstatico = \"campo N\u00c3O est\u00e1tico\" ; static class Estatica { void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada est\u00e1tica\" ); System . out . println ( attrEstatico ); /* * Uma classe est\u00e1tica n\u00e3o tem acesso aos membros da inst\u00e2ncia da classe * externa. Possui acesso somente aos membros est\u00e1ticos. */ // System.out.println(attrNaoEstatico); //ERRO! } } class NaoEstatica { void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada N\u00c3O est\u00e1tica\" ); System . out . println ( attrEstatico ); System . out . println ( attrNaoEstatico ); } } } class Exemplo { public static void main ( String [] args ) { /* * N\u00e3o \u00e9 necess\u00e1rio uma inst\u00e2ncia da Classe Externa */ Externa . Estatica estatica = new Externa . Estatica (); estatica . imprime (); /* * Necess\u00e1rio uma inst\u00e2ncia da Classe Externa */ // Externa.NaoEstatica naoEstatica = new Externa.NaoEstatica(); // ERRO! Externa . NaoEstatica naoEstatica = new Externa (). new NaoEstatica (); naoEstatica . imprime (); } } // Saida: // > m\u00e9todo da classe aninhada est\u00e1tica // > campo est\u00e1tico // > m\u00e9todo da classe aninhada N\u00c3O est\u00e1tica // > campo est\u00e1tico // > campo N\u00c3O est\u00e1tico Classe abstrata \u00b6 As classes abstratas servem como \"modelo\" para outras classes que dela herdem, n\u00e3o podendo ser instanciada por si s\u00f3. Para ter um objeto de uma classe abstrata \u00e9 necess\u00e1rio criar uma classe herdando dela e ent\u00e3o instanciar essa nova classe. Os m\u00e9todos abstratos da classe abstrata devem ent\u00e3o serem sobrescritos nas classes filhas. - As classes abstratas devem conter pelo menos um m\u00e9todo abstrato, que n\u00e3o tem corpo. - Diferente de interfaces, n\u00e3o h\u00e1 como criar m\u00e9todos `default` que possuem corpo. - \u00c9 um tipo especial de classe que n\u00e3o h\u00e1 como criar inst\u00e2ncias dela. - \u00c9 usada apenas para ser herdada, funciona como uma super classe. - Uma grande vantagem \u00e9 que for\u00e7a a hierarquia para todas as subclasses. - \u00c9 um tipo de contrato que faz com que as subclasses contemplem as mesmas hierarquias e/ou padr\u00f5es. package exemplo_abstrata ; abstract class Abstract { String funcaoNaoAbstrata () { return \"m\u00e9todo n\u00e3o abstrato\" ; }; abstract String funcaoAbstrata (); } class Exemplo extends Abstract { /* * Obrigado a implementar os m\u00e9todos abstratos da classe pai */ String funcaoAbstrata () { return \"m\u00e9todo abstrato implementado\" ; } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . funcaoAbstrata ()); System . out . println ( t . funcaoNaoAbstrata ()); /* * N\u00e3o \u00e9 poss\u00edvel instanciar uma classe abstrata */ // Abstract a = new Abstract(); // ERRO! } } // Saida: // > m\u00e9todo abstrato implementado // > m\u00e9todo n\u00e3o abstrato Classe final \u00b6 Uma classe final , \u00e9 uma classe que n\u00e3o permite que seja criada subclasses dela. Ou seja, ela n\u00e3o pode ser herdada. package exemplo_final ; final class Exemplo { void funcaoNAbstrata () { System . out . println ( \"Fun\u00e7\u00e3o n\u00e3o abstrata\" ); } } /* * N\u00e3o pode haver heran\u00e7a de uma classe declarada como \"final\" */ // class Teste extends Exemplo { } // ERRO! Links \u00b6 Classes an\u00f4nimas e aninhadas","title":"Classe"},{"location":"java/linguagem/classe/#classe","text":"Classe Introdu\u00e7\u00e3o Classes aninhadas Classe interna comum Classe interna a um m\u00e9todo Classe interna an\u00f4nima Classe est\u00e1tica Classe abstrata Classe final Links","title":"Classe"},{"location":"java/linguagem/classe/#introducao","text":"Uma classe \u00e9 uma estrutura que abstrai um conjunto de objetos com caracter\u00edsticas similares. Uma classe define o comportamento de seus objetos - atrav\u00e9s de m\u00e9todos - e os estados poss\u00edveis destes objetos - atrav\u00e9s de campos. Em outras palavras, uma classe descreve os servi\u00e7os oferecidos por seus objetos e quais informa\u00e7\u00f5es eles podem armazenar.","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/classe/#classes-aninhadas","text":"A palavra \"aninhada\" em programa\u00e7\u00e3o ( nested , em ingl\u00eas) diz respeito que \u00e9 uma subrotina encapsulada noutra. O escopo da subrotina aninhada \u00e9 limitado a subrotina que a encapsula. Isso significa que ela pode ser chamada somente pela subrotina que a encapsula, ou pelas subrotinas diretamente ou indiretamente aninhadas pela mesma subrotina encapsuladora. O aninhamento \u00e9 teoricamente ilimitado, ainda que na pr\u00e1tica somente alguns n\u00edveis s\u00e3o aceitos, o que depende da implementa\u00e7\u00e3o. Porque dever\u00edamos criar uma classe aninhada em vez de uma top-level? Quais as vantagens no seu uso? Agrupamento de classes que s\u00e3o usadas em apenas um lugar : Se voc\u00ea possui uma classe B que com certeza ser\u00e1 usada apenas dentro da classe A, o melhor \u00e9 criar a classe B como interna a classe A. Aumento de Encapsulamento : Sendo que a classe B e A s\u00e3o duas classes top-level e B precisa acessar os membros de A, poder\u00edamos colocar a classe B dentro de A e colocar os membros de A como privados e ainda assim B conseguiria continuar acessando os membros de A por ser uma classe aninhada. C\u00f3digo mais leg\u00edvel e de f\u00e1cil manuten\u00e7\u00e3o : Colocar classes pequenas dentro de classes top-level, j\u00e1 que apenas esta a usar\u00e1, faz com que a l\u00f3gica da classe top-level seja mais f\u00e1cil de ser identificada, consequentemente tornando o c\u00f3digo mais leg\u00edvel e de f\u00e1cil manuten\u00e7\u00e3o. Classes Aninhadas s\u00e3o dividas em quatro categorias: Interna comum (N\u00e3o-Est\u00e1tica) Interna a um m\u00e9todo Interna an\u00f4nima. Est\u00e1tica","title":"Classes aninhadas"},{"location":"java/linguagem/classe/#classe-interna-comum","text":"Uma classe interna comum s\u00f3 pode ser instanciada se estiver dentro de um objeto da classe externa. - Uma classe interna tem acesso aos membros est\u00e1ticos e aos membros da inst\u00e2ncia da classe externa. - Classes aninhadas n\u00e3o podem ter campos ou m\u00e9todos est\u00e1ticos. package _classe.exemplo_aninhada_interna ; class Externa { private String attrExternoPrv = \"campo externo privado\" ; private String attrExternoPub = \"campo externo publico\" ; class InternaA { /* * Classes aninhadas n\u00e3o podem ter campos ou m\u00e9todos est\u00e1ticos. */ // static String atr = \"valor\"; // ERRO! String attrInternoA = \"campo interno A\" ; void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada A\" ); System . out . println ( attrExternoPrv ); System . out . println ( attrExternoPub ); } } class InternaB { void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada B\" ); /* * Necess\u00e1rio uma inst\u00e2ncia da Classe InternaA */ System . out . println ( new InternaA (). attrInternoA ); } } } class Exemplo { public static void main ( String [] args ) { /* * Necess\u00e1rio uma inst\u00e2ncia da Classe Externa */ // Externa.InternaA internaA = new Externa.InternaA(); // ERRO! Externa externa = new Externa (); Externa . InternaA internaA = externa . new InternaA (); internaA . imprime (); Externa . InternaB internaB = externa . new InternaB (); internaB . imprime (); } } // Saida: // > m\u00e9todo da classe aninhada A // > campo externo privado // > campo externo publico // > m\u00e9todo da classe aninhada B // > campo interno A","title":"Classe interna comum"},{"location":"java/linguagem/classe/#classe-interna-a-um-metodo","text":"Uma classe Interna a um m\u00e9todo, s\u00f3 pode ser instanciada dentro deste pr\u00f3prio m\u00e9todo. Portanto o modificador padr\u00e3o de acesso de uma classe de m\u00e9todo possui comportamento do modificador private , visto que esse n\u00e3o pode ser instanciado de nenhum local fora do m\u00e9todo. Os modificadores de podem ser aplicados a este tipo de classe s\u00e3o: default , abstract e final . H\u00e1 uma exce\u00e7\u00e3o a ser notada quando utilizamos classes de m\u00e9todos, n\u00e3o podemos fazer refer\u00eancia as vari\u00e1veis do m\u00e9todo. package exemplo_aninhada_interna_metodo ; class Externa { String attrExterno = \"Campo externo\" ; void metodoExterno () { class Interna { void metodoInterno () { System . out . println ( \"m\u00e9todo da classe interna ao m\u00e9todo\" ); System . out . println ( attrExterno ); } } Interna interna = new Interna (); interna . metodoInterno (); } } class Exemplo { public static void main ( String [] args ) { Externa externa = new Externa (); externa . metodoExterno (); /* * N\u00e3o possui acesso fora do m\u00e9todo */ // Externa.Interna = externa.new Interna(); //ERRO! } } // Saida: // > m\u00e9todo da classe interna ao m\u00e9todo // > Campo externo","title":"Classe interna a um m\u00e9todo"},{"location":"java/linguagem/classe/#classe-interna-anonima","text":"Classe an\u00f4nima nada mais \u00e9 do que a heran\u00e7a de determinada classe em um local exclusivo, ou seja, apenas em um determinado escopo foi preciso redefinir a classe-pai. package exemplo_aninhada_interna_anonima ; class Funcionario { void trabalhar () { System . out . println ( \"trabalhar\" ); } } class Exemplo { Funcionario gerente = new Funcionario () { /* * Sobrescreve o fun\u00e7\u00e3o trabalhar do funcion\u00e1rio */ void trabalhar () { System . out . println ( \"mandar\" ); } }; Funcionario peao = new Funcionario () { /* * Sobrescreve o fun\u00e7\u00e3o trabalhar do funcion\u00e1rio */ void trabalhar () { System . out . println ( \"executar\" ); } /* * M\u00e9todo descansar n\u00e3o poder\u00e1 ser usado, pois n\u00e3o foi definido em Funcionario */ void descansar () { System . out . println ( \"descansar\" ); } }; public static void main ( String [] args ) { Exemplo a = new Exemplo (); a . gerente . trabalhar (); a . peao . trabalhar (); /* * M\u00e9todo descansar n\u00e3o existe na classe Funcionario */ // a.peao.descansar(); // ERRO! } } // Saida: // > mandar // > executar Se fossemos fazer uma heran\u00e7a \"comum\", ter\u00edamos que criar uma classe Peao extends Funcionario e mudar o comportamento do m\u00e9todo trabalhar, e tamb\u00e9m criar\u00edamos uma classe Gerente extends Funcionario , isso \u00e9 o que normalmente se faz quando h\u00e1 necessidade do uso de tais comportamentos distintos em v\u00e1rios locais distintos, mas em nosso caso s\u00f3 precisamos desses comportamentos dentro da classe Exemplo e a melhor pr\u00e1tica \u00e9 usar classes an\u00f4nimas. As classes an\u00f4nimas ainda tem algo muito interessante, o uso de Interfaces. package exemplo_aninhada_interna_anonima_interface ; interface Evento { abstract void clicar (); abstract void arrastar (); } class Exemplo { static void acao ( Evento e ) { e . clicar (); e . arrastar (); } public static void main ( String [] args ) { acao ( new Evento () { public void clicar () { System . out . println ( \"clicou\" ); } public void arrastar () { System . out . println ( \"arrastou\" ); } }); } } // Saida: // > clicou // > arrastou O que voc\u00ea provavelmente percebeu com o c\u00f3digo acima \u00e9 que estamos fazendo uma instancia\u00e7\u00e3o da interface Evento como uma classe an\u00f4nima, mas como isso \u00e9 poss\u00edvel se o java n\u00e3o permite que uma interface seja instanciada? Acontece que ao chamar a interface usando a express\u00e3o new Evento() , \u00e9 criada uma classe an\u00f4nima (oculta) que estende a interface Evento e n\u00e3o a interface \u00e9 instanciada diretamente, tanto que \u00e9 obrigat\u00f3rio usar todos os m\u00e9todos que est\u00e3o na interface.","title":"Classe interna an\u00f4nima"},{"location":"java/linguagem/classe/#classe-estatica","text":"A palavra-chave static significa que \u00e9 algo pertence diretamente a classe e que n\u00e3o precisa de uma inst\u00e2ncia dessa classe para poder acess\u00e1-lo. Portanto classes est\u00e1ticas devem ser sempre aninhadas (internas), j\u00e1 que estruturas est\u00e1ticas pertencem diretamente \u00e0s classes. Uma classe est\u00e1tica n\u00e3o tem acesso aos membros da inst\u00e2ncia da classe externa, somente aos membros est\u00e1ticos. package exemplo_aninhada_estatica ; class Externa { static String attrEstatico = \"campo est\u00e1tico\" ; String attrNaoEstatico = \"campo N\u00c3O est\u00e1tico\" ; static class Estatica { void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada est\u00e1tica\" ); System . out . println ( attrEstatico ); /* * Uma classe est\u00e1tica n\u00e3o tem acesso aos membros da inst\u00e2ncia da classe * externa. Possui acesso somente aos membros est\u00e1ticos. */ // System.out.println(attrNaoEstatico); //ERRO! } } class NaoEstatica { void imprime () { System . out . println ( \"m\u00e9todo da classe aninhada N\u00c3O est\u00e1tica\" ); System . out . println ( attrEstatico ); System . out . println ( attrNaoEstatico ); } } } class Exemplo { public static void main ( String [] args ) { /* * N\u00e3o \u00e9 necess\u00e1rio uma inst\u00e2ncia da Classe Externa */ Externa . Estatica estatica = new Externa . Estatica (); estatica . imprime (); /* * Necess\u00e1rio uma inst\u00e2ncia da Classe Externa */ // Externa.NaoEstatica naoEstatica = new Externa.NaoEstatica(); // ERRO! Externa . NaoEstatica naoEstatica = new Externa (). new NaoEstatica (); naoEstatica . imprime (); } } // Saida: // > m\u00e9todo da classe aninhada est\u00e1tica // > campo est\u00e1tico // > m\u00e9todo da classe aninhada N\u00c3O est\u00e1tica // > campo est\u00e1tico // > campo N\u00c3O est\u00e1tico","title":"Classe est\u00e1tica"},{"location":"java/linguagem/classe/#classe-abstrata","text":"As classes abstratas servem como \"modelo\" para outras classes que dela herdem, n\u00e3o podendo ser instanciada por si s\u00f3. Para ter um objeto de uma classe abstrata \u00e9 necess\u00e1rio criar uma classe herdando dela e ent\u00e3o instanciar essa nova classe. Os m\u00e9todos abstratos da classe abstrata devem ent\u00e3o serem sobrescritos nas classes filhas. - As classes abstratas devem conter pelo menos um m\u00e9todo abstrato, que n\u00e3o tem corpo. - Diferente de interfaces, n\u00e3o h\u00e1 como criar m\u00e9todos `default` que possuem corpo. - \u00c9 um tipo especial de classe que n\u00e3o h\u00e1 como criar inst\u00e2ncias dela. - \u00c9 usada apenas para ser herdada, funciona como uma super classe. - Uma grande vantagem \u00e9 que for\u00e7a a hierarquia para todas as subclasses. - \u00c9 um tipo de contrato que faz com que as subclasses contemplem as mesmas hierarquias e/ou padr\u00f5es. package exemplo_abstrata ; abstract class Abstract { String funcaoNaoAbstrata () { return \"m\u00e9todo n\u00e3o abstrato\" ; }; abstract String funcaoAbstrata (); } class Exemplo extends Abstract { /* * Obrigado a implementar os m\u00e9todos abstratos da classe pai */ String funcaoAbstrata () { return \"m\u00e9todo abstrato implementado\" ; } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . funcaoAbstrata ()); System . out . println ( t . funcaoNaoAbstrata ()); /* * N\u00e3o \u00e9 poss\u00edvel instanciar uma classe abstrata */ // Abstract a = new Abstract(); // ERRO! } } // Saida: // > m\u00e9todo abstrato implementado // > m\u00e9todo n\u00e3o abstrato","title":"Classe abstrata"},{"location":"java/linguagem/classe/#classe-final","text":"Uma classe final , \u00e9 uma classe que n\u00e3o permite que seja criada subclasses dela. Ou seja, ela n\u00e3o pode ser herdada. package exemplo_final ; final class Exemplo { void funcaoNAbstrata () { System . out . println ( \"Fun\u00e7\u00e3o n\u00e3o abstrata\" ); } } /* * N\u00e3o pode haver heran\u00e7a de uma classe declarada como \"final\" */ // class Teste extends Exemplo { } // ERRO!","title":"Classe final"},{"location":"java/linguagem/classe/#links","text":"Classes an\u00f4nimas e aninhadas","title":"Links"},{"location":"java/linguagem/colecoes/","text":"Cole\u00e7\u00f5es \u00b6 Cole\u00e7\u00f5es Introdu\u00e7\u00e3o List ArrayList Vector Stack LinkedList Queue PriorityQueue ArrayDeque Set HashSet LinkedHashSet TreeSet Map HashMap LinkedHashMap TreeMap Iterando cole\u00e7\u00f5es For Enumeration Iterator ListIterator Enhanced-for ForEach M\u00e9todos equals() e hashCode() Boas pr\u00e1ticas Introdu\u00e7\u00e3o \u00b6 Uma cole\u00e7\u00e3o \u00e9 uma estrutura de dados que permite armazenar e manipular um grupo de objetos. Para a manipula\u00e7\u00e3o das cole\u00e7\u00f5es, Java disponibiliza um conjunto de interfaces e classes denominado Collections Framework , que faz parte do pacote java.util . ![java-hierarquia-colecoes](_colecoes/java-hierarquia-colecoes.png) A hierarquia da Collections Framework tem uma segunda \u00e1rvore. S\u00e3o as classes e interfaces relacionadas a mapas, que n\u00e3o s\u00e3o derivadas de Collection . Essas interfaces, mesmo n\u00e3o sendo consideradas cole\u00e7\u00f5es em Java, podem ser manipuladas como tal. ![java-hierarquia-map](_colecoes/java-hierarquia-map.png) Existem tr\u00eas tipos gen\u00e9ricos de cole\u00e7\u00e3o: Listas ordenadas : As listas ordenadas permitem que o programador insira itens em uma determinada ordem e recupere esses itens em uma ordem pr\u00e9-determinada. As interfaces base para listas ordenadas s\u00e3o chamadas de List e Queue . Conjuntos : Conjuntos s\u00e3o cole\u00e7\u00f5es n\u00e3o ordenadas que podem ser iteradas e cont\u00eam cada elemento no m\u00e1ximo uma vez. A interface base para conjuntos \u00e9 chamada de Set . Mapas (ou dicion\u00e1rios) : Os mapas armazenam refer\u00eancias a objetos com uma chave de pesquisa para acessar os valores do objeto. A interface base para mapas \u00e9 denominada Map . List \u00b6 Uma lista (em ingl\u00eas list ) \u00e9 uma cole\u00e7\u00e3o que permite elementos duplicados e mant\u00e9m uma ordena\u00e7\u00e3o espec\u00edfica entre os elementos. Quando a lista \u00e9 percorrida os elementos ser\u00e3o encontrados em uma ordem pr\u00e9-determinada, definida na hora da inser\u00e7\u00e3o destes elementos. A interface de List \u00e9 implementada pelas classes ArrayList , LinkedList , Vector e Stack . ArrayList \u00b6 A classe ArrayList usa uma lista din\u00e2mica para armazenar os elementos. Para cada remo\u00e7\u00e3o ou adi\u00e7\u00e3o em uma posi\u00e7\u00e3o da lista, os elementos das posi\u00e7\u00f5es posteriores devem ser realocados. Possui as seguintes caracter\u00edsticas: Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o \u00e9 sincronizado. Pode acessar elementos aleatoriamente. Performance melhor acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. package _colecoes.exemplo_array_list ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > list = new ArrayList < String > (); list . addAll ( Arrays . asList ( \"A\" , \"B\" , \"D\" )); // adicionar v\u00e1rios list . add ( 2 , \"C\" ); // adicionar na posi\u00e7\u00e3o list . add ( \"E\" ); // adicionar no final System . out . println ( list . contains ( \"C\" )); // se existe o objeto System . out . println ( list . indexOf ( \"C\" )); // posi\u00e7\u00e3o do objeto System . out . println ( list . get ( 2 )); // obter objeto na posi\u00e7\u00e3o list . remove ( 3 ); // remover na posi\u00e7\u00e3o System . out . println ( list . size ()); // tamanho da lista /* * Percorrendo a lista atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = list . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > true // > 2 // > C // > 4 // > A // > B // > C // > E Vector \u00b6 A classe Vector \u00e9 semelhante ao ArrayList , no entanto, ela \u00e9 sincronizada , ou seja, somente uma thread pode acessar a lista por vez. Possui as seguintes caracter\u00edsticas: Mant\u00e9m a ordem de inser\u00e7\u00e3o. Sincronizado (seguro para multithread ). Pode acessar elementos aleatoriamente. Maior overhead devido a sincroniza\u00e7\u00e3o. Performance melhor acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. Pode percorrer a lista usando enumera\u00e7\u00e3o. Devido ao maior *overhead* causado pela sincroniza\u00e7\u00e3o, e por ser uma classe legada, a classe `CopyOnWriteArrayList` pode ser considerada uma melhor op\u00e7\u00e3o para trabalhar com *multithread*. package _colecoes.exemplo_vector ; import java.util.Vector ; class Exemplo { public static void main ( String [] args ) { Vector < String > list = new Vector < String > (); } } Stack \u00b6 A classe Stack (pilha) \u00e9 a subclasse de Vector que implementa a estrutura de dados last-in-first-out (o \u00faltimo a entrar \u00e9 o primeiro a sair). Mant\u00e9m a ordem de inser\u00e7\u00e3o. Sincronizado (seguro para multithread ). Pode acessar elementos aleatoriamente. Maior overhead devido a sincroniza\u00e7\u00e3o. Performance melhor acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. Pode percorrer a lista usando enumera\u00e7\u00e3o. Devido ao maior *overhead* causado pela sincroniza\u00e7\u00e3o, e por ser uma classe legada, as classes que implementam a interface `Deque` como por exemplo, `ConcurrentLinkedDeque` pode ser considerada uma melhor op\u00e7\u00e3o para trabalhar com *multithread*. package _colecoes.exemplo_stack ; import java.util.Arrays ; import java.util.Iterator ; import java.util.Stack ; class Exemplo { public static void main ( String [] args ) { /* * Al\u00e9m dos m\u00e9todos do Vector, Stack possui outros m\u00e9todos */ Stack < String > list = new Stack < String > (); list . addAll ( Arrays . asList ( \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios System . out . println ( list . empty ()); // verifica se lista vazia list . push ( \"A\" ); // adiciona elemento no inicio System . out . println ( list . peek ()); // obt\u00e9m primeiro elemento list . pop (); // remove primeiro elemento /* * Retorna posi\u00e7\u00e3o elemento com base 1 */ System . out . println ( list . search ( \"C\" )); /* * Percorrendo a lista atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = list . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > false // > A // > 2 // > B // > C // > D LinkedList \u00b6 A classe LinkedList usa uma lista duplamente encadeada para armazenar os elementos, sendo assim n\u00e3o precisa realocar os elementos durante inser\u00e7\u00f5es e remo\u00e7\u00f5es na lista, consequentemente realiza manipula\u00e7\u00f5es na lista de forma mais r\u00e1pida. Possui as seguintes caracter\u00edsticas: Atua como lista e fila (implementa List e Deque ). Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o \u00e9 sincronizado. N\u00e3o pode acessar elementos aleatoriamente. Performance pior para acessar dados. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. A classe `LinkedList` tamb\u00e9m pode implementar uma pilha, mas sem sincroniza\u00e7\u00e3o. package _colecoes.exemplo_linked_list ; import java.util.Arrays ; import java.util.Iterator ; import java.util.LinkedList ; class Exemplo { public static void main ( String [] args ) { /* * Al\u00e9m dos m\u00e9todos do ArrayList, LinkedList possui outros m\u00e9todos */ LinkedList < String > list = new LinkedList < String > (); list . addAll ( Arrays . asList ( \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios list . addFirst ( \"A\" ); // adiciona no in\u00edcio list . addLast ( \"E\" ); // adiciona no final /* * Obt\u00e9m o primeiro e \u00faltimo objeto */ System . out . println ( list . getFirst ()); System . out . println ( list . getLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto. Se a lista for vazia retorna null */ System . out . println ( list . peekFirst ()); // ou list.peek() System . out . println ( list . peekLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto e o remove da lista. Se a lista for * vazia retorna null. */ list . pollFirst (); // ou list.poll() list . pollLast (); /* * Adiciona e remove um objeto como em uma pilha, ou seja, adiciona no * in\u00edcio (primeira posi\u00e7\u00e3o) e tamb\u00e9m remove o primeiro. */ list . push ( \"A\" ); list . pop (); /* * Percorrendo a lista atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = list . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > A // > E // > A // > E // > B // > C // > D Queue \u00b6 Uma fila (em ingl\u00eas queue ) \u00e9 uma cole\u00e7\u00e3o que ordena o elemento na maneira first-in-first-out (o primeiro a entrar \u00e9 o primeiro a sair). N\u00e3o suportam ordena\u00e7\u00e3o, j\u00e1 que n\u00e3o s\u00e3o listas. A interface de Queue \u00e9 implementada pela classe PriorityQueue e pelas classes ArrayDeque e LinkedList atrav\u00e9s da subinterface Deque . PriorityQueue \u00b6 Na classe PriorityQueue , os elementos n\u00e3o s\u00e3o ordenados de maneira first-in-first-out , e sim por sua ordem natural padr\u00e3o, ou por prioridade atrav\u00e9s do m\u00e9todo compare de uma classe que implementa a interface Comparator . Possui as seguintes caracter\u00edsticas: Ordem de inser\u00e7\u00e3o baseado em n\u00edvel de prioridade (se existir). Os objetos da fila devem ser compar\u00e1veis. N\u00e3o \u00e9 sincronizado ( PriorityBlockingQueue \u00e9 sua vers\u00e3o sincronizada). N\u00e3o pode acessar elementos aleatoriamente. N\u00e3o permite elemento null . Performance melhor para acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. Exemplo de ordena\u00e7\u00e3o por ordem natural padr\u00e3o: package _colecoes.exemplo_priority_queue ; import java.util.Arrays ; import java.util.PriorityQueue ; class Exemplo { public static void main ( String [] args ) { PriorityQueue < String > fila = new PriorityQueue < String > (); fila . addAll ( Arrays . asList ( \"C\" , \"E\" , \"A\" )); // adicionar v\u00e1rios fila . add ( \"D\" ); fila . add ( \"B\" ); /* * Remove e retorna a cabe\u00e7a da fila. A fila \u00e9 ordenada em sua ordem * natural (A-Z). */ while ( ! fila . isEmpty ()) { System . out . println ( fila . remove ()); } } } // Saida: // > A // > B // > C // > D // > E Exemplo de ordena\u00e7\u00e3o por m\u00e9todo de compara\u00e7\u00e3o: package _colecoes.exemplo_priority_queue_comparator ; import java.util.Arrays ; import java.util.Comparator ; import java.util.PriorityQueue ; class Exemplo { public static void main ( String [] args ) { /* * Capacidade inicial (quantidade de elementos que podem ser adicionados * sem a necessidade de realizar uma nova realoca\u00e7\u00e3o de mem\u00f3ria) e o * m\u00e9todo usado para a ordena\u00e7\u00e3o da fila. */ PriorityQueue < String > fila = new PriorityQueue < String > ( 10 , new Comparador ()); fila . addAll ( Arrays . asList ( \"CC\" , \"E\" , \"AAA\" )); fila . add ( \"D\" ); fila . add ( \"BBBB\" ); /* * Remove e retorna a cabe\u00e7a da fila. A fila \u00e9 ordenada de acordo com * o m\u00e9todo compare de Comparador. */ while ( ! fila . isEmpty ()) { System . out . println ( fila . remove ()); } } } class Comparador implements Comparator < String > { @Override public int compare ( String x , String y ) { return x . length () - y . length (); } } // Saida // > E // > D // > CC // > AAA // > BBBB ArrayDeque \u00b6 A classe ArrayDeque \u00e9 uma fila que suporta inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos nas duas extremidades. Deque \u00e9 um acr\u00f4nimo para \" double ended queue \". Tanto LinkedList quanto ArrayDeque implementam a interface Deque , portanto possui m\u00e9todos em comum. Remover o \u00faltimo elemento de LinkedList tem complexidade O(n) j\u00e1 que percorre toda a lista para chegar ao fim. Portanto para adicionar ou remover elementos de ambas as extremidades, deve-se escolher ArrayDeque , que possui complexidade O(1) . Possui as seguintes caracter\u00edsticas: Diferente de filas, pode adicionar ou remover elementos em ambos lados. N\u00e3o \u00e9 sincronizado ( PriorityBlockingQueue \u00e9 sua vers\u00e3o sincronizada). N\u00e3o pode acessar elementos aleatoriamente. N\u00e3o permite elemento null . Performance pior para acessar dados. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. package _colecoes.exemplo_array_deque ; import java.util.ArrayDeque ; import java.util.Arrays ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { ArrayDeque < String > fila = new ArrayDeque <> (); fila . addAll ( Arrays . asList ( \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios fila . addFirst ( \"A\" ); // adiciona no in\u00edcio fila . addLast ( \"E\" ); // adiciona no final /* * Obt\u00e9m o primeiro e \u00faltimo objeto */ System . out . println ( fila . getFirst ()); System . out . println ( fila . getLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto. Se a fila for vazia retorna null */ System . out . println ( fila . peekFirst ()); // ou fila.peek() System . out . println ( fila . peekLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto e o remove da fila. Se a filaa for * vazia retorna null. */ fila . pollFirst (); // ou fila.poll() fila . pollLast (); /* * Adiciona e remove um objeto como em uma pilha, ou seja, adiciona no * in\u00edcio (primeira posi\u00e7\u00e3o) e tamb\u00e9m remove o primeiro. */ fila . push ( \"A\" ); fila . pop (); /* * Percorrendo a fila atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = fila . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > A // > E // > A // > E // > B // > C // > D Set \u00b6 Um conjunto (em ingl\u00eas set ) funciona de forma an\u00e1loga aos conjuntos da matem\u00e1tica, ele \u00e9 uma cole\u00e7\u00e3o que n\u00e3o permite elementos duplicados. Al\u00e9m disso, a ordem em que os elementos s\u00e3o armazenados pode n\u00e3o ser a ordem na qual eles foram inseridos no conjunto. A interface n\u00e3o define como deve ser este comportamento. Tal ordem varia de implementa\u00e7\u00e3o para implementa\u00e7\u00e3o. A interface de Set \u00e9 implementada pelas classes HashSet , LinkedHashSet , TreeSet . HashSet \u00b6 A classe HashSet \u00e9 usada para criar uma cole\u00e7\u00e3o que usa uma tabela hash para armazenamento. Possui as seguintes caracter\u00edsticas: Armazena os elementos usando um mecanismo chamado hashing . N\u00e3o mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. N\u00e3o pode acessar elementos aleatoriamente. Permite valor nulo. Performance melhor para opera\u00e7\u00f5es de busca. package _colecoes.exemplo_hash_set ; import java.util.Arrays ; import java.util.HashSet ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { HashSet < String > set = new HashSet <> (); set . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios /* * Conjuntos n\u00e3o permitem valores duplicados, portanto n\u00e3o ser\u00e1 * adicionado. */ set . add ( \"B\" ); /* * Remove objeto */ set . remove ( \"C\" ); System . out . println ( set . size ()); // n\u00famero de elementos no conjunto /* * Percorrendo a fila atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = set . iterator (); while ( itr . hasNext ()){ Object obj = itr . next (); System . out . println ( obj + \" - \" + obj . hashCode ()); } } } // Saida: // > 3 // > A - 65 // > B - 66 // > D - 68 LinkedHashSet \u00b6 A classe LinkedHashSet \u00e9 uma lista duplamente encadeada para armazenar os elementos, sendo assim n\u00e3o precisa realocar os elementos durante inser\u00e7\u00f5es e remo\u00e7\u00f5es no conjunto, consequentemente realiza manipula\u00e7\u00f5es no conjunto de forma mais r\u00e1pida. Possui as seguintes caracter\u00edsticas: Armazena os elementos usando um mecanismo chamado hashing . Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. Permite valor nulo. N\u00e3o pode acessar elementos aleatoriamente. Performance melhor para opera\u00e7\u00f5es de busca. package _colecoes.exemplo_linked_hash_set ; import java.util.LinkedHashSet ; class Exemplo { public static void main ( String [] args ) { LinkedHashSet < String > set = new LinkedHashSet <> (); } } TreeSet \u00b6 A classe TreeSet \u00e9 semelhante a HashSet , entretanto mant\u00e9m a ordem ascendente dos elementos. Possui as seguintes caracter\u00edsticas: Armazena os elementos usando um mecanismo chamado hashing . Mant\u00e9m a ordem ascendente. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o permite valor nulo. N\u00e3o \u00e9 sincronizado. Melhor performance para opera\u00e7\u00f5es de busca. N\u00e3o pode acessar elementos aleatoriamente. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. package _colecoes.exemplo_tree_set ; import java.util.Arrays ; import java.util.Iterator ; import java.util.TreeSet ; class Exemplo { public static void main ( String [] args ) { TreeSet < String > set = new TreeSet <> (); set . addAll ( Arrays . asList ( \"B\" , \"A\" , \"D\" , \"C\" )); // adicionar v\u00e1rios /* * Percorrendo a fila atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = set . iterator (); while ( itr . hasNext ()){ Object obj = itr . next (); System . out . println ( obj + \" - \" + obj . hashCode ()); } } } // Saida: // > A - 65 // > B - 66 // > C - 67 // > D - 68 Map \u00b6 Um mapa (em ingl\u00eas map ) \u00e9 composto por um conjunto de associa\u00e7\u00f5es entre um objeto chave a um objeto valor. \u00c9 equivalente ao conceito de dicion\u00e1rio, usado em v\u00e1rias linguagens. A busca de um objeto valor atrav\u00e9s de sua chave permite uma performance muito superior para busca de dados em rela\u00e7\u00e3o as outra cole\u00e7\u00f5es. A interface de Map \u00e9 implementada pelas classes HashMap , LinkedHashMap , TreeMap . A classe `HashTable` tamb\u00e9m implementa a interface `Map`. Ela foi a primeira cole\u00e7\u00e3o baseada em tabela *hash*. Entretanto, o seu uso n\u00e3o \u00e9 recomendado por ser uma classe legada e por possuir *overhead* causado pela sincroniza\u00e7\u00e3o. A classe `ConcurrentHashMap` \u00e9 a classe recomendada para uma solu\u00e7\u00e3o segura para *multithread*. A interface `Map` n\u00e3o deriva de `Collection`, portanto n\u00e3o se pode usar `iterators` diretamente. HashMap \u00b6 A classe HashMap assim como os conjuntos, \u00e9 usada para criar uma cole\u00e7\u00e3o que usa uma tabela hash para armazenamento. Entretanto a chave usada na tabela hash \u00e9 fornecida pelo usu\u00e1rio. Possui as seguintes caracter\u00edsticas: Armazena os elementos baseando em chaves ( hash ). N\u00e3o mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. Permite uma chave nula e m\u00faltiplos elementos nulos. N\u00e3o pode acessar elementos aleatoriamente. Performance melhor para opera\u00e7\u00f5es de busca. package _colecoes.exemplo_hash_map ; import java.util.HashMap ; class Exemplo { public static void main ( String [] args ) { HashMap < Integer , String > map = new HashMap <> (); map . put ( 100 , \"A\" ); // adiciona o par chave-valor map . put ( 101 , \"B\" ); map . put ( 102 , \"C\" ); map . put ( 100 , \"X\" ); // sobrescreve o valor correspondente a chave map . putIfAbsent ( 100 , \"Z\" ); // adiciona somente se chave n\u00e3o existe System . out . println ( map . get ( 100 )); // obt\u00e9m o valor correspondente a chave /* * Substitui o valor correspondente a chave */ map . replace ( 100 , \"A\" ); /* * Substitui o valor correspondente a chave somente se o valor corresponde */ map . replace ( 100 , \"W\" , \"Z\" ); System . out . println ( map . containsValue ( \"C\" )); // se possui o valor System . out . println ( map . containsKey ( 102 )); // se possui a chave System . out . println ( map . entrySet ()); // retorna a vis\u00e3o do mapa System . out . println ( map . keySet ()); // retorna a vis\u00e3o das chaves System . out . println ( map . size ()); // retorna a quantidade de elementos } } // Saida: // > X // > true // > true // > [100=A, 101=B, 102=C] // > [100, 101, 102] // > 3 LinkedHashMap \u00b6 A classe LinkedHashMap implementa a interface Hashtable e Linked list de Map . Armazena os elementos baseando em chaves ( hash ). N\u00e3o cont\u00e9m valores duplicados. Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o \u00e9 sincronizado. Permite uma chave nula e m\u00faltiplos elementos nulos. N\u00e3o pode acessar elementos aleatoriamente. Performance pior para acessar dados. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de elementos. package _colecoes.exemplo_linked_hash_map ; import java.util.LinkedHashMap ; class Exemplo { public static void main ( String [] args ) { LinkedHashMap < Integer , String > map = new LinkedHashMap <> (); } } TreeMap \u00b6 A classe TreeMap implementa a interface SortedMap que por sua vez implementa a interface Map . Ela \u00e9 uma implementa\u00e7\u00e3o baseada na \u00e1rvore rubro-negra que possui formas eficientes de armazenar pares chave-valor de forma ordenada. Armazena os elementos baseando em chaves ( hash ). Mant\u00e9m a ordem ascendente (chaves). N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. N\u00e3o pode acessar elementos aleatoriamente. N\u00e3o permite chave nula mas permite m\u00faltiplos elementos nulos. Performance melhor para acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de elementos. package _colecoes.exemplo_tree_map ; import java.util.Iterator ; import java.util.Map ; import java.util.TreeMap ; class Exemplo { public static void main ( String [] args ) { TreeMap < Integer , String > map = new TreeMap <> (); map . put ( 101 , \"B\" ); map . put ( 103 , \"A\" ); map . put ( 102 , \"C\" ); System . out . println ( map . entrySet ()); /* * Classes que implementam Map n\u00e3o deriva de Collection, portanto n\u00e3o possuem * o m\u00e9todo iterator(). */ Iterator < Integer > keyIterator = map . keySet (). iterator (); while ( keyIterator . hasNext ()) { Integer chave = keyIterator . next (); String valor = map . get ( chave ); System . out . print ( chave + \"=\" + valor + \" \" ); } System . out . println ( \"\\n\" + map . higherKey ( 101 )); // a maior chave na sequencia System . out . println ( map . lowerKey ( 103 )); // a menor chave na sequencia System . out . println ( map . firstEntry ()); // primeiro par chave-valor System . out . println ( map . lastEntry ()); // \u00faltimo par chave-valor System . out . println ( map . firstKey ()); // primeiro chave System . out . println ( map . lastKey ()); // \u00faltima chave System . out . println ( map . containsKey ( 101 )); // se cont\u00e9m a chave System . out . println ( map . containsValue ( \"C\" )); // se cont\u00e9m o valor } } // Saida: // > [101=B, 102=C, 103=A] // > 101=B 102=C 103=A // > 102 // > 102 // > 101=B // > 103=A // > 101 // > 103 // > true // > true Iterando cole\u00e7\u00f5es \u00b6 Java fornece cinco m\u00e9todos para iterar sobre cole\u00e7\u00f5es: for , enumeration , iterator , enhanced-for , forEach . For \u00b6 Esta \u00e9 a constru\u00e7\u00e3o mais familiar na programa\u00e7\u00e3o, entretanto exige que a cole\u00e7\u00e3o armazene elementos em forma de \u00edndice. Portanto poder\u00e1 ser usado apenas para cole\u00e7\u00f5es que implementam a interface List , como por exemplo: ArrayList , LinkedList , Vector e Stack . package _colecoes.exemplo_iteracao_for ; import java.util.* ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > arrayList = new ArrayList <> (); arrayList . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); for ( int i = 0 ; i < arrayList . size (); i ++ ) { System . out . print ( arrayList . get ( i ) + \" \" ); } } } // Saida: // > A B C Enumeration \u00b6 Usado para iterar cole\u00e7\u00f5es legadas como: Vector , Stack e Hashtable , package _colecoes.exemplo_iteracao_enumeration ; import java.util.* ; class Exemplo { public static void main ( String [] args ) { Vector < String > vector = new Vector <> (); vector . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); Enumeration e = vector . elements (); while ( e . hasMoreElements ()) { System . out . print ( e . nextElement () + \" \" ); } } } // Saida: // > A B C Iterator \u00b6 Devido \u00e0s limita\u00e7\u00f5es do for cl\u00e1ssico, o m\u00e9todo iterator() foi criado para nos permitir iterar todos os tipos de cole\u00e7\u00f5es que implementam a interface Collection , uma vez que esta interface define que cada cole\u00e7\u00e3o deve implementar este o m\u00e9todo. Portanto, classes que implementam a interface map n\u00e3o possuem o m\u00e9todo iterator() . package _colecoes.exemplo_iteracao_iterator ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > arrayList = new ArrayList <> (); arrayList . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); Iterator < String > iterator = arrayList . iterator (); /* * hasNext(): retorna true se h\u00e1 mais elementos na itera\u00e7\u00e3o * next(): retorna o pr\u00f3ximo elemento da itera\u00e7\u00e3o * remove(): remove o atual elemento do itera\u00e7\u00e3o */ while ( iterator . hasNext ()) { String valor = iterator . next (); System . out . print ( valor + \" \" ); if ( valor . equals ( \"B\" )) { iterator . remove (); } } /* * Reiniciando a itera\u00e7\u00e3o */ iterator = arrayList . iterator (); System . out . println (); while ( iterator . hasNext ()) { System . out . print ( iterator . next () + \" \" ); } } } // Saida: // > A B C // > A C Para cole\u00e7\u00f5es que implementam a interface map , podemos utilizar o m\u00e9todo iterator() da seguinte forma: package _colecoes.exemplo_iteracao_iterator_map ; import java.util.HashMap ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { HashMap < Integer , String > hashMap = new HashMap <> (); hashMap . put ( 100 , \"A\" ); hashMap . put ( 101 , \"B\" ); hashMap . put ( 102 , \"C\" ); Iterator < Integer > keyIterator = hashMap . keySet (). iterator (); while ( keyIterator . hasNext ()) { Integer chave = keyIterator . next (); String valor = hashMap . get ( chave ); System . out . println ( chave + \"=\" + valor ); } } } // Saida: // > A B C // > A C ListIterator \u00b6 Para iterar cole\u00e7\u00f5es que implementam a interface List tamb\u00e9m podemos utilizar ListIterator , que fornece meios para realizar a itera\u00e7\u00e3o bidirecionalmente. package _colecoes.exemplo_iteracao_list_iterator ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.ListIterator ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > arrayList = new ArrayList <> (); arrayList . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); ListIterator < String > listIterator = arrayList . listIterator (); while ( listIterator . hasNext ()) { System . out . print ( listIterator . next () + \" \" ); } /* * hasPrevious(): retorna true se h\u00e1 mais elementos anteriores na itera\u00e7\u00e3o * previous(): retorna o elemento anterior da itera\u00e7\u00e3o */ System . out . println (); while ( listIterator . hasPrevious ()) { System . out . print ( listIterator . previous () + \" \" ); } } } // Saida: // > A B C // > C B A Enhanced-for \u00b6 O loop for aprimorado \u00e9 uma sintaxe mais sucinta para percorrer uma cole\u00e7\u00e3o. package _colecoes.exemplo_iteracao_enhanced_for ; import java.util.* ; class Exemplo { public static void main ( String [] args ) { /* * Classes que implementam Collection */ HashSet < String > hashSet = new HashSet <> (); hashSet . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); for ( String hs : hashSet ) { System . out . print ( hs + \" \" ); } /* * Classes que implementam Map */ HashMap < Integer , String > hashMap = new HashMap <> (); hashMap . put ( 100 , \"A\" ); hashMap . put ( 101 , \"B\" ); hashMap . put ( 102 , \"C\" ); System . out . println (); for ( Integer key : hashMap . keySet ()) { System . out . print ( key + \"=\" + hashMap . get ( key ) + \" \" ); } } } // Saida: // > A B C // > 100=A 101=B 102=C ForEach \u00b6 O Java 8 com express\u00f5es Lambda introduziu uma maneira totalmente nova de iterar sobre cole\u00e7\u00f5es usando o m\u00e9todo forEach . package _colecoes.exemplo_iteracao_for_each ; import java.util.Arrays ; import java.util.HashMap ; import java.util.HashSet ; class Exemplo { public static void main ( String [] args ) { /* * Classes que implementam Collection */ HashSet < String > hashSet = new HashSet <> (); hashSet . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); hashSet . forEach ( name -> System . out . print ( name + \" \" )); /* * Classes que implementam Map */ HashMap < Integer , String > hashMap = new HashMap <> (); hashMap . put ( 100 , \"A\" ); hashMap . put ( 101 , \"B\" ); hashMap . put ( 102 , \"C\" ); System . out . println (); hashMap . forEach (( key , value ) -> System . out . print ( key + \"=\" + value + \" \" )); } } // Saida: // > A B C // > 100=A 101=B 102=C M\u00e9todos equals() e hashCode() \u00b6 O m\u00e9todo equals(Object o) \u00e9 usado para indicar se algum outro objeto ( Object o ) \u00e9 igual ao objeto atual (no qual o m\u00e9todo foi invocado). Por padr\u00e3o simplesmente verifica as refer\u00eancias dos dois objetos para verificar sua igualdade, que por padr\u00e3o, \u00e9 o endere\u00e7o de mem\u00f3ria. O m\u00e9todo hashCode() retorna um valor inteiro exclusivo para o objeto em tempo de execu\u00e7\u00e3o. Por padr\u00e3o, o valor inteiro \u00e9 derivado principalmente do endere\u00e7o de mem\u00f3ria do objeto na pilha (mas n\u00e3o \u00e9 obrigat\u00f3rio sempre). Esse c\u00f3digo hash \u00e9 usado para determinar o local do bucket , quando esse objeto precisa ser armazenado em alguma estrutura de dados como o HashTable . Em geral, \u00e9 necess\u00e1rio substituir o m\u00e9todo hashCode() sempre que o m\u00e9todo equals() for sobrescrito, de modo a manter o contrato geral para o m\u00e9todo hashCode() , que declara que objetos iguais devem ter c\u00f3digos hash iguais . Durante a execu\u00e7\u00e3o de um aplicativo Java, em um mesmo objeto, o hashCode deve retornar o mesmo n\u00famero inteiro, desde que nenhuma informa\u00e7\u00e3o usada nas compara\u00e7\u00f5es de equals() seja modificada. Se os objetos forem iguais de acordo com o m\u00e9todo equals() , eles tamb\u00e9m devem ter o mesmo c\u00f3digo hash . Se os objetos tiverem o mesmo c\u00f3digo hash , eles n\u00e3o ter\u00e3o que ser necessariamente iguais. package _colecoes.exemplo_equals_hashcode ; import java.util.ArrayList ; import java.util.List ; import java.util.stream.Stream ; public class Exemplo { public static void main ( String [] args ) { List < Livro > livros = new ArrayList <> (); livros . add ( new Livro ( \"Harry Potter\" , 100.0 )); livros . add ( new Livro ( \"Harry Potter\" , 100.0 )); livros . add ( new Livro ( \"Romeu e Julieta\" , 100.0 )); livros . add ( new Livro ( \"Romeu e Julieta\" , 100.0 )); livros . add ( new Livro ( \"Alice\" , 100.0 )); livros . add ( new Livro ( \"Alice\" , 200.0 )); livros . add ( new Livro ( \"Dom Casmurro\" , 100.0 )); livros . add ( new Livro ( \"Dom Casmurro\" , 200.0 )); Stream < Livro > sDistinct = livros . stream (). distinct (); sDistinct . forEach ( System . out :: println ); } } class Livro { String nome ; Double preco ; Livro (){} Livro ( String nome , Double preco ) { this . preco = preco ; this . nome = nome ; } @Override public String toString () { return this . nome ; } /* * Livros com mesmo nome tem o mesmo c\u00f3digo hash */ @Override public int hashCode () { return this . nome . hashCode (); } /* * Livros com mesmo nome tem o mesmo c\u00f3digo hash, mas somente os que possuem o mesmo * pre\u00e7o s\u00e3o considerados iguais. */ @Override public boolean equals ( Object obj ) { Livro livro = ( Livro ) obj ; return livro . nome . equals ( this . nome ) && livro . preco . equals ( this . preco ); } } Boas pr\u00e1ticas \u00b6 Evite usar cole\u00e7\u00f5es que guardam os elementos pela sua ordem de compara\u00e7\u00e3o quando n\u00e3o h\u00e1 necessidade. Um TreeSet gasta computacionalmente O(log(n)) para inserir (ele utiliza uma \u00e1rvore rubro-negra como implementa\u00e7\u00e3o), enquanto o HashSet gasta apenas O(1) . N\u00e3o itere sobre uma List utilizando um for (i=0; i < list.size(); i++) e get(i) para receber os objetos. Enquanto isso parece atraente, algumas implementa\u00e7\u00f5es de List n\u00e3o s\u00e3o de acesso aleat\u00f3rio como a LinkedList , fazendo esse c\u00f3digo ter uma p\u00e9ssima performance computacional.","title":"Cole\u00e7\u00f5es"},{"location":"java/linguagem/colecoes/#colecoes","text":"Cole\u00e7\u00f5es Introdu\u00e7\u00e3o List ArrayList Vector Stack LinkedList Queue PriorityQueue ArrayDeque Set HashSet LinkedHashSet TreeSet Map HashMap LinkedHashMap TreeMap Iterando cole\u00e7\u00f5es For Enumeration Iterator ListIterator Enhanced-for ForEach M\u00e9todos equals() e hashCode() Boas pr\u00e1ticas","title":"Cole\u00e7\u00f5es"},{"location":"java/linguagem/colecoes/#introducao","text":"Uma cole\u00e7\u00e3o \u00e9 uma estrutura de dados que permite armazenar e manipular um grupo de objetos. Para a manipula\u00e7\u00e3o das cole\u00e7\u00f5es, Java disponibiliza um conjunto de interfaces e classes denominado Collections Framework , que faz parte do pacote java.util . ![java-hierarquia-colecoes](_colecoes/java-hierarquia-colecoes.png) A hierarquia da Collections Framework tem uma segunda \u00e1rvore. S\u00e3o as classes e interfaces relacionadas a mapas, que n\u00e3o s\u00e3o derivadas de Collection . Essas interfaces, mesmo n\u00e3o sendo consideradas cole\u00e7\u00f5es em Java, podem ser manipuladas como tal. ![java-hierarquia-map](_colecoes/java-hierarquia-map.png) Existem tr\u00eas tipos gen\u00e9ricos de cole\u00e7\u00e3o: Listas ordenadas : As listas ordenadas permitem que o programador insira itens em uma determinada ordem e recupere esses itens em uma ordem pr\u00e9-determinada. As interfaces base para listas ordenadas s\u00e3o chamadas de List e Queue . Conjuntos : Conjuntos s\u00e3o cole\u00e7\u00f5es n\u00e3o ordenadas que podem ser iteradas e cont\u00eam cada elemento no m\u00e1ximo uma vez. A interface base para conjuntos \u00e9 chamada de Set . Mapas (ou dicion\u00e1rios) : Os mapas armazenam refer\u00eancias a objetos com uma chave de pesquisa para acessar os valores do objeto. A interface base para mapas \u00e9 denominada Map .","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/colecoes/#list","text":"Uma lista (em ingl\u00eas list ) \u00e9 uma cole\u00e7\u00e3o que permite elementos duplicados e mant\u00e9m uma ordena\u00e7\u00e3o espec\u00edfica entre os elementos. Quando a lista \u00e9 percorrida os elementos ser\u00e3o encontrados em uma ordem pr\u00e9-determinada, definida na hora da inser\u00e7\u00e3o destes elementos. A interface de List \u00e9 implementada pelas classes ArrayList , LinkedList , Vector e Stack .","title":"List"},{"location":"java/linguagem/colecoes/#arraylist","text":"A classe ArrayList usa uma lista din\u00e2mica para armazenar os elementos. Para cada remo\u00e7\u00e3o ou adi\u00e7\u00e3o em uma posi\u00e7\u00e3o da lista, os elementos das posi\u00e7\u00f5es posteriores devem ser realocados. Possui as seguintes caracter\u00edsticas: Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o \u00e9 sincronizado. Pode acessar elementos aleatoriamente. Performance melhor acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. package _colecoes.exemplo_array_list ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > list = new ArrayList < String > (); list . addAll ( Arrays . asList ( \"A\" , \"B\" , \"D\" )); // adicionar v\u00e1rios list . add ( 2 , \"C\" ); // adicionar na posi\u00e7\u00e3o list . add ( \"E\" ); // adicionar no final System . out . println ( list . contains ( \"C\" )); // se existe o objeto System . out . println ( list . indexOf ( \"C\" )); // posi\u00e7\u00e3o do objeto System . out . println ( list . get ( 2 )); // obter objeto na posi\u00e7\u00e3o list . remove ( 3 ); // remover na posi\u00e7\u00e3o System . out . println ( list . size ()); // tamanho da lista /* * Percorrendo a lista atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = list . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > true // > 2 // > C // > 4 // > A // > B // > C // > E","title":"ArrayList"},{"location":"java/linguagem/colecoes/#vector","text":"A classe Vector \u00e9 semelhante ao ArrayList , no entanto, ela \u00e9 sincronizada , ou seja, somente uma thread pode acessar a lista por vez. Possui as seguintes caracter\u00edsticas: Mant\u00e9m a ordem de inser\u00e7\u00e3o. Sincronizado (seguro para multithread ). Pode acessar elementos aleatoriamente. Maior overhead devido a sincroniza\u00e7\u00e3o. Performance melhor acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. Pode percorrer a lista usando enumera\u00e7\u00e3o. Devido ao maior *overhead* causado pela sincroniza\u00e7\u00e3o, e por ser uma classe legada, a classe `CopyOnWriteArrayList` pode ser considerada uma melhor op\u00e7\u00e3o para trabalhar com *multithread*. package _colecoes.exemplo_vector ; import java.util.Vector ; class Exemplo { public static void main ( String [] args ) { Vector < String > list = new Vector < String > (); } }","title":"Vector"},{"location":"java/linguagem/colecoes/#stack","text":"A classe Stack (pilha) \u00e9 a subclasse de Vector que implementa a estrutura de dados last-in-first-out (o \u00faltimo a entrar \u00e9 o primeiro a sair). Mant\u00e9m a ordem de inser\u00e7\u00e3o. Sincronizado (seguro para multithread ). Pode acessar elementos aleatoriamente. Maior overhead devido a sincroniza\u00e7\u00e3o. Performance melhor acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. Pode percorrer a lista usando enumera\u00e7\u00e3o. Devido ao maior *overhead* causado pela sincroniza\u00e7\u00e3o, e por ser uma classe legada, as classes que implementam a interface `Deque` como por exemplo, `ConcurrentLinkedDeque` pode ser considerada uma melhor op\u00e7\u00e3o para trabalhar com *multithread*. package _colecoes.exemplo_stack ; import java.util.Arrays ; import java.util.Iterator ; import java.util.Stack ; class Exemplo { public static void main ( String [] args ) { /* * Al\u00e9m dos m\u00e9todos do Vector, Stack possui outros m\u00e9todos */ Stack < String > list = new Stack < String > (); list . addAll ( Arrays . asList ( \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios System . out . println ( list . empty ()); // verifica se lista vazia list . push ( \"A\" ); // adiciona elemento no inicio System . out . println ( list . peek ()); // obt\u00e9m primeiro elemento list . pop (); // remove primeiro elemento /* * Retorna posi\u00e7\u00e3o elemento com base 1 */ System . out . println ( list . search ( \"C\" )); /* * Percorrendo a lista atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = list . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > false // > A // > 2 // > B // > C // > D","title":"Stack"},{"location":"java/linguagem/colecoes/#linkedlist","text":"A classe LinkedList usa uma lista duplamente encadeada para armazenar os elementos, sendo assim n\u00e3o precisa realocar os elementos durante inser\u00e7\u00f5es e remo\u00e7\u00f5es na lista, consequentemente realiza manipula\u00e7\u00f5es na lista de forma mais r\u00e1pida. Possui as seguintes caracter\u00edsticas: Atua como lista e fila (implementa List e Deque ). Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o \u00e9 sincronizado. N\u00e3o pode acessar elementos aleatoriamente. Performance pior para acessar dados. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. A classe `LinkedList` tamb\u00e9m pode implementar uma pilha, mas sem sincroniza\u00e7\u00e3o. package _colecoes.exemplo_linked_list ; import java.util.Arrays ; import java.util.Iterator ; import java.util.LinkedList ; class Exemplo { public static void main ( String [] args ) { /* * Al\u00e9m dos m\u00e9todos do ArrayList, LinkedList possui outros m\u00e9todos */ LinkedList < String > list = new LinkedList < String > (); list . addAll ( Arrays . asList ( \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios list . addFirst ( \"A\" ); // adiciona no in\u00edcio list . addLast ( \"E\" ); // adiciona no final /* * Obt\u00e9m o primeiro e \u00faltimo objeto */ System . out . println ( list . getFirst ()); System . out . println ( list . getLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto. Se a lista for vazia retorna null */ System . out . println ( list . peekFirst ()); // ou list.peek() System . out . println ( list . peekLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto e o remove da lista. Se a lista for * vazia retorna null. */ list . pollFirst (); // ou list.poll() list . pollLast (); /* * Adiciona e remove um objeto como em uma pilha, ou seja, adiciona no * in\u00edcio (primeira posi\u00e7\u00e3o) e tamb\u00e9m remove o primeiro. */ list . push ( \"A\" ); list . pop (); /* * Percorrendo a lista atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = list . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > A // > E // > A // > E // > B // > C // > D","title":"LinkedList"},{"location":"java/linguagem/colecoes/#queue","text":"Uma fila (em ingl\u00eas queue ) \u00e9 uma cole\u00e7\u00e3o que ordena o elemento na maneira first-in-first-out (o primeiro a entrar \u00e9 o primeiro a sair). N\u00e3o suportam ordena\u00e7\u00e3o, j\u00e1 que n\u00e3o s\u00e3o listas. A interface de Queue \u00e9 implementada pela classe PriorityQueue e pelas classes ArrayDeque e LinkedList atrav\u00e9s da subinterface Deque .","title":"Queue"},{"location":"java/linguagem/colecoes/#priorityqueue","text":"Na classe PriorityQueue , os elementos n\u00e3o s\u00e3o ordenados de maneira first-in-first-out , e sim por sua ordem natural padr\u00e3o, ou por prioridade atrav\u00e9s do m\u00e9todo compare de uma classe que implementa a interface Comparator . Possui as seguintes caracter\u00edsticas: Ordem de inser\u00e7\u00e3o baseado em n\u00edvel de prioridade (se existir). Os objetos da fila devem ser compar\u00e1veis. N\u00e3o \u00e9 sincronizado ( PriorityBlockingQueue \u00e9 sua vers\u00e3o sincronizada). N\u00e3o pode acessar elementos aleatoriamente. N\u00e3o permite elemento null . Performance melhor para acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. Exemplo de ordena\u00e7\u00e3o por ordem natural padr\u00e3o: package _colecoes.exemplo_priority_queue ; import java.util.Arrays ; import java.util.PriorityQueue ; class Exemplo { public static void main ( String [] args ) { PriorityQueue < String > fila = new PriorityQueue < String > (); fila . addAll ( Arrays . asList ( \"C\" , \"E\" , \"A\" )); // adicionar v\u00e1rios fila . add ( \"D\" ); fila . add ( \"B\" ); /* * Remove e retorna a cabe\u00e7a da fila. A fila \u00e9 ordenada em sua ordem * natural (A-Z). */ while ( ! fila . isEmpty ()) { System . out . println ( fila . remove ()); } } } // Saida: // > A // > B // > C // > D // > E Exemplo de ordena\u00e7\u00e3o por m\u00e9todo de compara\u00e7\u00e3o: package _colecoes.exemplo_priority_queue_comparator ; import java.util.Arrays ; import java.util.Comparator ; import java.util.PriorityQueue ; class Exemplo { public static void main ( String [] args ) { /* * Capacidade inicial (quantidade de elementos que podem ser adicionados * sem a necessidade de realizar uma nova realoca\u00e7\u00e3o de mem\u00f3ria) e o * m\u00e9todo usado para a ordena\u00e7\u00e3o da fila. */ PriorityQueue < String > fila = new PriorityQueue < String > ( 10 , new Comparador ()); fila . addAll ( Arrays . asList ( \"CC\" , \"E\" , \"AAA\" )); fila . add ( \"D\" ); fila . add ( \"BBBB\" ); /* * Remove e retorna a cabe\u00e7a da fila. A fila \u00e9 ordenada de acordo com * o m\u00e9todo compare de Comparador. */ while ( ! fila . isEmpty ()) { System . out . println ( fila . remove ()); } } } class Comparador implements Comparator < String > { @Override public int compare ( String x , String y ) { return x . length () - y . length (); } } // Saida // > E // > D // > CC // > AAA // > BBBB","title":"PriorityQueue"},{"location":"java/linguagem/colecoes/#arraydeque","text":"A classe ArrayDeque \u00e9 uma fila que suporta inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos nas duas extremidades. Deque \u00e9 um acr\u00f4nimo para \" double ended queue \". Tanto LinkedList quanto ArrayDeque implementam a interface Deque , portanto possui m\u00e9todos em comum. Remover o \u00faltimo elemento de LinkedList tem complexidade O(n) j\u00e1 que percorre toda a lista para chegar ao fim. Portanto para adicionar ou remover elementos de ambas as extremidades, deve-se escolher ArrayDeque , que possui complexidade O(1) . Possui as seguintes caracter\u00edsticas: Diferente de filas, pode adicionar ou remover elementos em ambos lados. N\u00e3o \u00e9 sincronizado ( PriorityBlockingQueue \u00e9 sua vers\u00e3o sincronizada). N\u00e3o pode acessar elementos aleatoriamente. N\u00e3o permite elemento null . Performance pior para acessar dados. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. package _colecoes.exemplo_array_deque ; import java.util.ArrayDeque ; import java.util.Arrays ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { ArrayDeque < String > fila = new ArrayDeque <> (); fila . addAll ( Arrays . asList ( \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios fila . addFirst ( \"A\" ); // adiciona no in\u00edcio fila . addLast ( \"E\" ); // adiciona no final /* * Obt\u00e9m o primeiro e \u00faltimo objeto */ System . out . println ( fila . getFirst ()); System . out . println ( fila . getLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto. Se a fila for vazia retorna null */ System . out . println ( fila . peekFirst ()); // ou fila.peek() System . out . println ( fila . peekLast ()); /* * Obt\u00e9m o primeiro e \u00faltimo objeto e o remove da fila. Se a filaa for * vazia retorna null. */ fila . pollFirst (); // ou fila.poll() fila . pollLast (); /* * Adiciona e remove um objeto como em uma pilha, ou seja, adiciona no * in\u00edcio (primeira posi\u00e7\u00e3o) e tamb\u00e9m remove o primeiro. */ fila . push ( \"A\" ); fila . pop (); /* * Percorrendo a fila atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = fila . iterator (); while ( itr . hasNext ()){ System . out . println ( itr . next ()); } } } // Saida: // > A // > E // > A // > E // > B // > C // > D","title":"ArrayDeque"},{"location":"java/linguagem/colecoes/#set","text":"Um conjunto (em ingl\u00eas set ) funciona de forma an\u00e1loga aos conjuntos da matem\u00e1tica, ele \u00e9 uma cole\u00e7\u00e3o que n\u00e3o permite elementos duplicados. Al\u00e9m disso, a ordem em que os elementos s\u00e3o armazenados pode n\u00e3o ser a ordem na qual eles foram inseridos no conjunto. A interface n\u00e3o define como deve ser este comportamento. Tal ordem varia de implementa\u00e7\u00e3o para implementa\u00e7\u00e3o. A interface de Set \u00e9 implementada pelas classes HashSet , LinkedHashSet , TreeSet .","title":"Set"},{"location":"java/linguagem/colecoes/#hashset","text":"A classe HashSet \u00e9 usada para criar uma cole\u00e7\u00e3o que usa uma tabela hash para armazenamento. Possui as seguintes caracter\u00edsticas: Armazena os elementos usando um mecanismo chamado hashing . N\u00e3o mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. N\u00e3o pode acessar elementos aleatoriamente. Permite valor nulo. Performance melhor para opera\u00e7\u00f5es de busca. package _colecoes.exemplo_hash_set ; import java.util.Arrays ; import java.util.HashSet ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { HashSet < String > set = new HashSet <> (); set . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" , \"D\" )); // adicionar v\u00e1rios /* * Conjuntos n\u00e3o permitem valores duplicados, portanto n\u00e3o ser\u00e1 * adicionado. */ set . add ( \"B\" ); /* * Remove objeto */ set . remove ( \"C\" ); System . out . println ( set . size ()); // n\u00famero de elementos no conjunto /* * Percorrendo a fila atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = set . iterator (); while ( itr . hasNext ()){ Object obj = itr . next (); System . out . println ( obj + \" - \" + obj . hashCode ()); } } } // Saida: // > 3 // > A - 65 // > B - 66 // > D - 68","title":"HashSet"},{"location":"java/linguagem/colecoes/#linkedhashset","text":"A classe LinkedHashSet \u00e9 uma lista duplamente encadeada para armazenar os elementos, sendo assim n\u00e3o precisa realocar os elementos durante inser\u00e7\u00f5es e remo\u00e7\u00f5es no conjunto, consequentemente realiza manipula\u00e7\u00f5es no conjunto de forma mais r\u00e1pida. Possui as seguintes caracter\u00edsticas: Armazena os elementos usando um mecanismo chamado hashing . Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. Permite valor nulo. N\u00e3o pode acessar elementos aleatoriamente. Performance melhor para opera\u00e7\u00f5es de busca. package _colecoes.exemplo_linked_hash_set ; import java.util.LinkedHashSet ; class Exemplo { public static void main ( String [] args ) { LinkedHashSet < String > set = new LinkedHashSet <> (); } }","title":"LinkedHashSet"},{"location":"java/linguagem/colecoes/#treeset","text":"A classe TreeSet \u00e9 semelhante a HashSet , entretanto mant\u00e9m a ordem ascendente dos elementos. Possui as seguintes caracter\u00edsticas: Armazena os elementos usando um mecanismo chamado hashing . Mant\u00e9m a ordem ascendente. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o permite valor nulo. N\u00e3o \u00e9 sincronizado. Melhor performance para opera\u00e7\u00f5es de busca. N\u00e3o pode acessar elementos aleatoriamente. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de dados. package _colecoes.exemplo_tree_set ; import java.util.Arrays ; import java.util.Iterator ; import java.util.TreeSet ; class Exemplo { public static void main ( String [] args ) { TreeSet < String > set = new TreeSet <> (); set . addAll ( Arrays . asList ( \"B\" , \"A\" , \"D\" , \"C\" )); // adicionar v\u00e1rios /* * Percorrendo a fila atrav\u00e9s do Iterator */ System . out . println (); Iterator itr = set . iterator (); while ( itr . hasNext ()){ Object obj = itr . next (); System . out . println ( obj + \" - \" + obj . hashCode ()); } } } // Saida: // > A - 65 // > B - 66 // > C - 67 // > D - 68","title":"TreeSet"},{"location":"java/linguagem/colecoes/#map","text":"Um mapa (em ingl\u00eas map ) \u00e9 composto por um conjunto de associa\u00e7\u00f5es entre um objeto chave a um objeto valor. \u00c9 equivalente ao conceito de dicion\u00e1rio, usado em v\u00e1rias linguagens. A busca de um objeto valor atrav\u00e9s de sua chave permite uma performance muito superior para busca de dados em rela\u00e7\u00e3o as outra cole\u00e7\u00f5es. A interface de Map \u00e9 implementada pelas classes HashMap , LinkedHashMap , TreeMap . A classe `HashTable` tamb\u00e9m implementa a interface `Map`. Ela foi a primeira cole\u00e7\u00e3o baseada em tabela *hash*. Entretanto, o seu uso n\u00e3o \u00e9 recomendado por ser uma classe legada e por possuir *overhead* causado pela sincroniza\u00e7\u00e3o. A classe `ConcurrentHashMap` \u00e9 a classe recomendada para uma solu\u00e7\u00e3o segura para *multithread*. A interface `Map` n\u00e3o deriva de `Collection`, portanto n\u00e3o se pode usar `iterators` diretamente.","title":"Map"},{"location":"java/linguagem/colecoes/#hashmap","text":"A classe HashMap assim como os conjuntos, \u00e9 usada para criar uma cole\u00e7\u00e3o que usa uma tabela hash para armazenamento. Entretanto a chave usada na tabela hash \u00e9 fornecida pelo usu\u00e1rio. Possui as seguintes caracter\u00edsticas: Armazena os elementos baseando em chaves ( hash ). N\u00e3o mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. Permite uma chave nula e m\u00faltiplos elementos nulos. N\u00e3o pode acessar elementos aleatoriamente. Performance melhor para opera\u00e7\u00f5es de busca. package _colecoes.exemplo_hash_map ; import java.util.HashMap ; class Exemplo { public static void main ( String [] args ) { HashMap < Integer , String > map = new HashMap <> (); map . put ( 100 , \"A\" ); // adiciona o par chave-valor map . put ( 101 , \"B\" ); map . put ( 102 , \"C\" ); map . put ( 100 , \"X\" ); // sobrescreve o valor correspondente a chave map . putIfAbsent ( 100 , \"Z\" ); // adiciona somente se chave n\u00e3o existe System . out . println ( map . get ( 100 )); // obt\u00e9m o valor correspondente a chave /* * Substitui o valor correspondente a chave */ map . replace ( 100 , \"A\" ); /* * Substitui o valor correspondente a chave somente se o valor corresponde */ map . replace ( 100 , \"W\" , \"Z\" ); System . out . println ( map . containsValue ( \"C\" )); // se possui o valor System . out . println ( map . containsKey ( 102 )); // se possui a chave System . out . println ( map . entrySet ()); // retorna a vis\u00e3o do mapa System . out . println ( map . keySet ()); // retorna a vis\u00e3o das chaves System . out . println ( map . size ()); // retorna a quantidade de elementos } } // Saida: // > X // > true // > true // > [100=A, 101=B, 102=C] // > [100, 101, 102] // > 3","title":"HashMap"},{"location":"java/linguagem/colecoes/#linkedhashmap","text":"A classe LinkedHashMap implementa a interface Hashtable e Linked list de Map . Armazena os elementos baseando em chaves ( hash ). N\u00e3o cont\u00e9m valores duplicados. Mant\u00e9m a ordem de inser\u00e7\u00e3o. N\u00e3o \u00e9 sincronizado. Permite uma chave nula e m\u00faltiplos elementos nulos. N\u00e3o pode acessar elementos aleatoriamente. Performance pior para acessar dados. Performance melhor para adi\u00e7\u00e3o e remo\u00e7\u00e3o de elementos. package _colecoes.exemplo_linked_hash_map ; import java.util.LinkedHashMap ; class Exemplo { public static void main ( String [] args ) { LinkedHashMap < Integer , String > map = new LinkedHashMap <> (); } }","title":"LinkedHashMap"},{"location":"java/linguagem/colecoes/#treemap","text":"A classe TreeMap implementa a interface SortedMap que por sua vez implementa a interface Map . Ela \u00e9 uma implementa\u00e7\u00e3o baseada na \u00e1rvore rubro-negra que possui formas eficientes de armazenar pares chave-valor de forma ordenada. Armazena os elementos baseando em chaves ( hash ). Mant\u00e9m a ordem ascendente (chaves). N\u00e3o cont\u00e9m valores duplicados. N\u00e3o \u00e9 sincronizado. N\u00e3o pode acessar elementos aleatoriamente. N\u00e3o permite chave nula mas permite m\u00faltiplos elementos nulos. Performance melhor para acessar dados. Performance pior para adi\u00e7\u00e3o e remo\u00e7\u00e3o de elementos. package _colecoes.exemplo_tree_map ; import java.util.Iterator ; import java.util.Map ; import java.util.TreeMap ; class Exemplo { public static void main ( String [] args ) { TreeMap < Integer , String > map = new TreeMap <> (); map . put ( 101 , \"B\" ); map . put ( 103 , \"A\" ); map . put ( 102 , \"C\" ); System . out . println ( map . entrySet ()); /* * Classes que implementam Map n\u00e3o deriva de Collection, portanto n\u00e3o possuem * o m\u00e9todo iterator(). */ Iterator < Integer > keyIterator = map . keySet (). iterator (); while ( keyIterator . hasNext ()) { Integer chave = keyIterator . next (); String valor = map . get ( chave ); System . out . print ( chave + \"=\" + valor + \" \" ); } System . out . println ( \"\\n\" + map . higherKey ( 101 )); // a maior chave na sequencia System . out . println ( map . lowerKey ( 103 )); // a menor chave na sequencia System . out . println ( map . firstEntry ()); // primeiro par chave-valor System . out . println ( map . lastEntry ()); // \u00faltimo par chave-valor System . out . println ( map . firstKey ()); // primeiro chave System . out . println ( map . lastKey ()); // \u00faltima chave System . out . println ( map . containsKey ( 101 )); // se cont\u00e9m a chave System . out . println ( map . containsValue ( \"C\" )); // se cont\u00e9m o valor } } // Saida: // > [101=B, 102=C, 103=A] // > 101=B 102=C 103=A // > 102 // > 102 // > 101=B // > 103=A // > 101 // > 103 // > true // > true","title":"TreeMap"},{"location":"java/linguagem/colecoes/#iterando-colecoes","text":"Java fornece cinco m\u00e9todos para iterar sobre cole\u00e7\u00f5es: for , enumeration , iterator , enhanced-for , forEach .","title":"Iterando cole\u00e7\u00f5es"},{"location":"java/linguagem/colecoes/#for","text":"Esta \u00e9 a constru\u00e7\u00e3o mais familiar na programa\u00e7\u00e3o, entretanto exige que a cole\u00e7\u00e3o armazene elementos em forma de \u00edndice. Portanto poder\u00e1 ser usado apenas para cole\u00e7\u00f5es que implementam a interface List , como por exemplo: ArrayList , LinkedList , Vector e Stack . package _colecoes.exemplo_iteracao_for ; import java.util.* ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > arrayList = new ArrayList <> (); arrayList . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); for ( int i = 0 ; i < arrayList . size (); i ++ ) { System . out . print ( arrayList . get ( i ) + \" \" ); } } } // Saida: // > A B C","title":"For"},{"location":"java/linguagem/colecoes/#enumeration","text":"Usado para iterar cole\u00e7\u00f5es legadas como: Vector , Stack e Hashtable , package _colecoes.exemplo_iteracao_enumeration ; import java.util.* ; class Exemplo { public static void main ( String [] args ) { Vector < String > vector = new Vector <> (); vector . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); Enumeration e = vector . elements (); while ( e . hasMoreElements ()) { System . out . print ( e . nextElement () + \" \" ); } } } // Saida: // > A B C","title":"Enumeration"},{"location":"java/linguagem/colecoes/#iterator","text":"Devido \u00e0s limita\u00e7\u00f5es do for cl\u00e1ssico, o m\u00e9todo iterator() foi criado para nos permitir iterar todos os tipos de cole\u00e7\u00f5es que implementam a interface Collection , uma vez que esta interface define que cada cole\u00e7\u00e3o deve implementar este o m\u00e9todo. Portanto, classes que implementam a interface map n\u00e3o possuem o m\u00e9todo iterator() . package _colecoes.exemplo_iteracao_iterator ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > arrayList = new ArrayList <> (); arrayList . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); Iterator < String > iterator = arrayList . iterator (); /* * hasNext(): retorna true se h\u00e1 mais elementos na itera\u00e7\u00e3o * next(): retorna o pr\u00f3ximo elemento da itera\u00e7\u00e3o * remove(): remove o atual elemento do itera\u00e7\u00e3o */ while ( iterator . hasNext ()) { String valor = iterator . next (); System . out . print ( valor + \" \" ); if ( valor . equals ( \"B\" )) { iterator . remove (); } } /* * Reiniciando a itera\u00e7\u00e3o */ iterator = arrayList . iterator (); System . out . println (); while ( iterator . hasNext ()) { System . out . print ( iterator . next () + \" \" ); } } } // Saida: // > A B C // > A C Para cole\u00e7\u00f5es que implementam a interface map , podemos utilizar o m\u00e9todo iterator() da seguinte forma: package _colecoes.exemplo_iteracao_iterator_map ; import java.util.HashMap ; import java.util.Iterator ; class Exemplo { public static void main ( String [] args ) { HashMap < Integer , String > hashMap = new HashMap <> (); hashMap . put ( 100 , \"A\" ); hashMap . put ( 101 , \"B\" ); hashMap . put ( 102 , \"C\" ); Iterator < Integer > keyIterator = hashMap . keySet (). iterator (); while ( keyIterator . hasNext ()) { Integer chave = keyIterator . next (); String valor = hashMap . get ( chave ); System . out . println ( chave + \"=\" + valor ); } } } // Saida: // > A B C // > A C","title":"Iterator"},{"location":"java/linguagem/colecoes/#listiterator","text":"Para iterar cole\u00e7\u00f5es que implementam a interface List tamb\u00e9m podemos utilizar ListIterator , que fornece meios para realizar a itera\u00e7\u00e3o bidirecionalmente. package _colecoes.exemplo_iteracao_list_iterator ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.ListIterator ; class Exemplo { public static void main ( String [] args ) { ArrayList < String > arrayList = new ArrayList <> (); arrayList . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); ListIterator < String > listIterator = arrayList . listIterator (); while ( listIterator . hasNext ()) { System . out . print ( listIterator . next () + \" \" ); } /* * hasPrevious(): retorna true se h\u00e1 mais elementos anteriores na itera\u00e7\u00e3o * previous(): retorna o elemento anterior da itera\u00e7\u00e3o */ System . out . println (); while ( listIterator . hasPrevious ()) { System . out . print ( listIterator . previous () + \" \" ); } } } // Saida: // > A B C // > C B A","title":"ListIterator"},{"location":"java/linguagem/colecoes/#enhanced-for","text":"O loop for aprimorado \u00e9 uma sintaxe mais sucinta para percorrer uma cole\u00e7\u00e3o. package _colecoes.exemplo_iteracao_enhanced_for ; import java.util.* ; class Exemplo { public static void main ( String [] args ) { /* * Classes que implementam Collection */ HashSet < String > hashSet = new HashSet <> (); hashSet . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); for ( String hs : hashSet ) { System . out . print ( hs + \" \" ); } /* * Classes que implementam Map */ HashMap < Integer , String > hashMap = new HashMap <> (); hashMap . put ( 100 , \"A\" ); hashMap . put ( 101 , \"B\" ); hashMap . put ( 102 , \"C\" ); System . out . println (); for ( Integer key : hashMap . keySet ()) { System . out . print ( key + \"=\" + hashMap . get ( key ) + \" \" ); } } } // Saida: // > A B C // > 100=A 101=B 102=C","title":"Enhanced-for"},{"location":"java/linguagem/colecoes/#foreach","text":"O Java 8 com express\u00f5es Lambda introduziu uma maneira totalmente nova de iterar sobre cole\u00e7\u00f5es usando o m\u00e9todo forEach . package _colecoes.exemplo_iteracao_for_each ; import java.util.Arrays ; import java.util.HashMap ; import java.util.HashSet ; class Exemplo { public static void main ( String [] args ) { /* * Classes que implementam Collection */ HashSet < String > hashSet = new HashSet <> (); hashSet . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); hashSet . forEach ( name -> System . out . print ( name + \" \" )); /* * Classes que implementam Map */ HashMap < Integer , String > hashMap = new HashMap <> (); hashMap . put ( 100 , \"A\" ); hashMap . put ( 101 , \"B\" ); hashMap . put ( 102 , \"C\" ); System . out . println (); hashMap . forEach (( key , value ) -> System . out . print ( key + \"=\" + value + \" \" )); } } // Saida: // > A B C // > 100=A 101=B 102=C","title":"ForEach"},{"location":"java/linguagem/colecoes/#metodos-equals-e-hashcode","text":"O m\u00e9todo equals(Object o) \u00e9 usado para indicar se algum outro objeto ( Object o ) \u00e9 igual ao objeto atual (no qual o m\u00e9todo foi invocado). Por padr\u00e3o simplesmente verifica as refer\u00eancias dos dois objetos para verificar sua igualdade, que por padr\u00e3o, \u00e9 o endere\u00e7o de mem\u00f3ria. O m\u00e9todo hashCode() retorna um valor inteiro exclusivo para o objeto em tempo de execu\u00e7\u00e3o. Por padr\u00e3o, o valor inteiro \u00e9 derivado principalmente do endere\u00e7o de mem\u00f3ria do objeto na pilha (mas n\u00e3o \u00e9 obrigat\u00f3rio sempre). Esse c\u00f3digo hash \u00e9 usado para determinar o local do bucket , quando esse objeto precisa ser armazenado em alguma estrutura de dados como o HashTable . Em geral, \u00e9 necess\u00e1rio substituir o m\u00e9todo hashCode() sempre que o m\u00e9todo equals() for sobrescrito, de modo a manter o contrato geral para o m\u00e9todo hashCode() , que declara que objetos iguais devem ter c\u00f3digos hash iguais . Durante a execu\u00e7\u00e3o de um aplicativo Java, em um mesmo objeto, o hashCode deve retornar o mesmo n\u00famero inteiro, desde que nenhuma informa\u00e7\u00e3o usada nas compara\u00e7\u00f5es de equals() seja modificada. Se os objetos forem iguais de acordo com o m\u00e9todo equals() , eles tamb\u00e9m devem ter o mesmo c\u00f3digo hash . Se os objetos tiverem o mesmo c\u00f3digo hash , eles n\u00e3o ter\u00e3o que ser necessariamente iguais. package _colecoes.exemplo_equals_hashcode ; import java.util.ArrayList ; import java.util.List ; import java.util.stream.Stream ; public class Exemplo { public static void main ( String [] args ) { List < Livro > livros = new ArrayList <> (); livros . add ( new Livro ( \"Harry Potter\" , 100.0 )); livros . add ( new Livro ( \"Harry Potter\" , 100.0 )); livros . add ( new Livro ( \"Romeu e Julieta\" , 100.0 )); livros . add ( new Livro ( \"Romeu e Julieta\" , 100.0 )); livros . add ( new Livro ( \"Alice\" , 100.0 )); livros . add ( new Livro ( \"Alice\" , 200.0 )); livros . add ( new Livro ( \"Dom Casmurro\" , 100.0 )); livros . add ( new Livro ( \"Dom Casmurro\" , 200.0 )); Stream < Livro > sDistinct = livros . stream (). distinct (); sDistinct . forEach ( System . out :: println ); } } class Livro { String nome ; Double preco ; Livro (){} Livro ( String nome , Double preco ) { this . preco = preco ; this . nome = nome ; } @Override public String toString () { return this . nome ; } /* * Livros com mesmo nome tem o mesmo c\u00f3digo hash */ @Override public int hashCode () { return this . nome . hashCode (); } /* * Livros com mesmo nome tem o mesmo c\u00f3digo hash, mas somente os que possuem o mesmo * pre\u00e7o s\u00e3o considerados iguais. */ @Override public boolean equals ( Object obj ) { Livro livro = ( Livro ) obj ; return livro . nome . equals ( this . nome ) && livro . preco . equals ( this . preco ); } }","title":"M\u00e9todos equals() e hashCode()"},{"location":"java/linguagem/colecoes/#boas-praticas","text":"Evite usar cole\u00e7\u00f5es que guardam os elementos pela sua ordem de compara\u00e7\u00e3o quando n\u00e3o h\u00e1 necessidade. Um TreeSet gasta computacionalmente O(log(n)) para inserir (ele utiliza uma \u00e1rvore rubro-negra como implementa\u00e7\u00e3o), enquanto o HashSet gasta apenas O(1) . N\u00e3o itere sobre uma List utilizando um for (i=0; i < list.size(); i++) e get(i) para receber os objetos. Enquanto isso parece atraente, algumas implementa\u00e7\u00f5es de List n\u00e3o s\u00e3o de acesso aleat\u00f3rio como a LinkedList , fazendo esse c\u00f3digo ter uma p\u00e9ssima performance computacional.","title":"Boas pr\u00e1ticas"},{"location":"java/linguagem/enum/","text":"Enum \u00b6 Enum Introdu\u00e7\u00e3o Heran\u00e7a Introdu\u00e7\u00e3o \u00b6 Uma enumera\u00e7\u00e3o \u00e9 um tipo de dado que representa um grupo de constantes. Sua sintaxe \u00e9 muito semelhante \u00e0 declara\u00e7\u00e3o de uma classe, exceto pelo uso da palavra-chave enum que antecede seu nome. De uma maneira simplificada, uma enumera\u00e7\u00e3o pode ser visto em Java como uma \"classe\" especial para tratar constantes. * As inst\u00e2ncias dos itens do `enum` s\u00e3o criadas e nomeadas junto com a declara\u00e7\u00e3o da classe, portanto s\u00e3o fixas e imut\u00e1veis; * Os itens do `enum` devem ser declarados antes de qualquer campo, m\u00e9todo ou construtor; * N\u00e3o \u00e9 permitido criar novas inst\u00e2ncias de um `enum` com a palavra-chave `new`; * Enums s\u00e3o singleton por padr\u00e3o: temos uma \u00fanica inst\u00e2ncia de cada constante por aplica\u00e7\u00e3o; * O construtor sempre possui restri\u00e7\u00e3o de acesso *private*. * Tem sua pr\u00f3pria API de cole\u00e7\u00f5es que \u00e9 *type safe*: `EnumMap` e `EnumSet`; package _enum.exemplo_enum ; enum Turno { MANHA , TARDE , NOITE ; public static void main ( String [] args ) { /* * Enums limitam os valores que podem ser atribu\u00eddos a uma vari\u00e1vel. * O \"Turno.\" \u00e9 opcional, j\u00e1 que se refere a pr\u00f3pria classe. */ Turno turno = Turno . MANHA ; System . out . println ( turno ); } } // Saida: // > MANHA O tipo enum em Java nada mais \u00e9 do que uma \"a\u00e7\u00facar sint\u00e1tico\" ( syntax sugar ) de cria\u00e7\u00e3o de uma subclasse que herda de java.lang.Enum com alguns membros est\u00e1ticos. Se fiz\u00e9ssemos a engenharia reversa no .class da enum Turno n\u00f3s ter\u00edamos algo como: final class Turno extends java . lang . Enum { static final Turno MANHA = new TipoDeDocumento ( \"MANHA\" , 0 ); static final Turno CPF = new TipoDeDocumento ( \"TARDE\" , 1 ); static final Turno CPF = new TipoDeDocumento ( \"NOITE\" , 2 ); } Cada constante \u00e9 constru\u00edda em cima de dois valores: uma string contendo o nome da constante e um inteiro com valor incrementado (ordinal) que \u00e9 \u00fanico para a inst\u00e2ncia. Basicamente uma enum \u00e9 convertida em uma lista de constantes de objetos Java. Heran\u00e7a \u00b6 Ao declarar uma enum estamos implicitamente estendendo a classe java.lang.Enum . Isso cria algumas limita\u00e7\u00f5es, porque o Java n\u00e3o suporta heran\u00e7a m\u00faltipla, o que impede uma classe enum de estender outras classes. Por\u00e9m, uma classe enum pode ter campos, assim como construtores e m\u00e9todos. package _enum.exemplo_enum_heranca ; enum Turno { MANHA ( 1 , \"manh\u00e3\" ), TARDE ( 2 , \"tarde\" ), NOITE ( 3 , \"noite\" ); private int id ; private String descricao ; /* * Construtor, sempre possui restri\u00e7\u00e3o private */ Turno ( int id , String descricao ) { this . id = id ; this . descricao = descricao ; } String getDescricao () { return descricao ; } /* * Modificar as propriedades de um enum deve ser EVITADA, vai contra a * sua caracter\u00edstica imut\u00e1vel. */ void setDescricao ( String descricao ) { this . descricao = descricao ; } public static void main ( String [] args ) { System . out . println ( Turno . MANHA ); System . out . println ( Turno . MANHA . id + \"-\" + Turno . MANHA . getDescricao ()); /* * Permitido mas deve ser evitado */ Turno . MANHA . setDescricao ( \"desconhecido\" ); System . out . println ( Turno . MANHA . id + \"-\" + Turno . MANHA . getDescricao ()); } } // Saida: // > MANHA // > 1-manh\u00e3 // > 1-desconhecido Uma vez que a classe Turno herda de java.lang.Enum , ela herda alguns m\u00e9todos: M\u00e9todo Retorno Descri\u00e7\u00e3o values() [ ] Retorna um array contendo todos os itens da enum toString(), name() String Retorna uma String com o nome da inst\u00e2ncia (em mai\u00fasculas). valueOf(String nome) static \\<T extends Enum\\<T>> T Retorna o objeto da classe enum cujo nome \u00e9 a string do argumento. ordinal() int Retorna o n\u00famero de ordem do objeto na enumera\u00e7\u00e3o. package _enum.exemplo_enum_heranca_metodos ; enum Turno { MANHA ( 1 , \"manh\u00e3\" ), TARDE ( 2 , \"tarde\" ), NOITE ( 3 , \"noite\" ); private int id ; private String descricao ; Turno ( int id , String descricao ) { this . id = id ; this . descricao = descricao ; } public static void main ( String [] args ) { for ( Turno t : Turno . values ()) { System . out . println ( t . ordinal () + \" \" + t . name () + \" \" + t . descricao ); } Turno v = Turno . MANHA ; System . out . println ( v . descricao ); /* * Mesma forma, mas passando como argumento */ Turno s = Turno . valueOf ( \"MANHA\" ); System . out . println ( s . descricao ); } } // Saida: // > 0 MANHA manh\u00e3 // > 1 TARDE tarde // > 2 NOITE noite // > manh\u00e3 // > manh\u00e3 Um Enum pode ser comparado com outro objeto atrav\u00e9s do m\u00e9todo equals. package _enum.exemplo_enum_comparacao ; enum Turno { MANHA ( 1 , \"manh\u00e3\" ), TARDE ( 2 , \"tarde\" ), NOITE ( 3 , \"noite\" ); private int id ; private String descricao ; Turno ( int id , String descricao ) { this . id = id ; this . descricao = descricao ; } public static void comparaEnum ( Turno opcao ){ if ( opcao . equals ( Turno . MANHA )) { System . out . println ( \"Turno matutino\" ); } else if ( opcao . equals ( Turno . TARDE )) { System . out . println ( \"Turno vespertino\" ); } else if ( opcao . equals ( Turno . NOITE )){ System . out . println ( \"Turno noturno\" ); } } public static void main ( String [] args ) { comparaEnum ( Turno . TARDE ); } } // Saida // > Turno vespertino","title":"Enum"},{"location":"java/linguagem/enum/#enum","text":"Enum Introdu\u00e7\u00e3o Heran\u00e7a","title":"Enum"},{"location":"java/linguagem/enum/#introducao","text":"Uma enumera\u00e7\u00e3o \u00e9 um tipo de dado que representa um grupo de constantes. Sua sintaxe \u00e9 muito semelhante \u00e0 declara\u00e7\u00e3o de uma classe, exceto pelo uso da palavra-chave enum que antecede seu nome. De uma maneira simplificada, uma enumera\u00e7\u00e3o pode ser visto em Java como uma \"classe\" especial para tratar constantes. * As inst\u00e2ncias dos itens do `enum` s\u00e3o criadas e nomeadas junto com a declara\u00e7\u00e3o da classe, portanto s\u00e3o fixas e imut\u00e1veis; * Os itens do `enum` devem ser declarados antes de qualquer campo, m\u00e9todo ou construtor; * N\u00e3o \u00e9 permitido criar novas inst\u00e2ncias de um `enum` com a palavra-chave `new`; * Enums s\u00e3o singleton por padr\u00e3o: temos uma \u00fanica inst\u00e2ncia de cada constante por aplica\u00e7\u00e3o; * O construtor sempre possui restri\u00e7\u00e3o de acesso *private*. * Tem sua pr\u00f3pria API de cole\u00e7\u00f5es que \u00e9 *type safe*: `EnumMap` e `EnumSet`; package _enum.exemplo_enum ; enum Turno { MANHA , TARDE , NOITE ; public static void main ( String [] args ) { /* * Enums limitam os valores que podem ser atribu\u00eddos a uma vari\u00e1vel. * O \"Turno.\" \u00e9 opcional, j\u00e1 que se refere a pr\u00f3pria classe. */ Turno turno = Turno . MANHA ; System . out . println ( turno ); } } // Saida: // > MANHA O tipo enum em Java nada mais \u00e9 do que uma \"a\u00e7\u00facar sint\u00e1tico\" ( syntax sugar ) de cria\u00e7\u00e3o de uma subclasse que herda de java.lang.Enum com alguns membros est\u00e1ticos. Se fiz\u00e9ssemos a engenharia reversa no .class da enum Turno n\u00f3s ter\u00edamos algo como: final class Turno extends java . lang . Enum { static final Turno MANHA = new TipoDeDocumento ( \"MANHA\" , 0 ); static final Turno CPF = new TipoDeDocumento ( \"TARDE\" , 1 ); static final Turno CPF = new TipoDeDocumento ( \"NOITE\" , 2 ); } Cada constante \u00e9 constru\u00edda em cima de dois valores: uma string contendo o nome da constante e um inteiro com valor incrementado (ordinal) que \u00e9 \u00fanico para a inst\u00e2ncia. Basicamente uma enum \u00e9 convertida em uma lista de constantes de objetos Java.","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/enum/#heranca","text":"Ao declarar uma enum estamos implicitamente estendendo a classe java.lang.Enum . Isso cria algumas limita\u00e7\u00f5es, porque o Java n\u00e3o suporta heran\u00e7a m\u00faltipla, o que impede uma classe enum de estender outras classes. Por\u00e9m, uma classe enum pode ter campos, assim como construtores e m\u00e9todos. package _enum.exemplo_enum_heranca ; enum Turno { MANHA ( 1 , \"manh\u00e3\" ), TARDE ( 2 , \"tarde\" ), NOITE ( 3 , \"noite\" ); private int id ; private String descricao ; /* * Construtor, sempre possui restri\u00e7\u00e3o private */ Turno ( int id , String descricao ) { this . id = id ; this . descricao = descricao ; } String getDescricao () { return descricao ; } /* * Modificar as propriedades de um enum deve ser EVITADA, vai contra a * sua caracter\u00edstica imut\u00e1vel. */ void setDescricao ( String descricao ) { this . descricao = descricao ; } public static void main ( String [] args ) { System . out . println ( Turno . MANHA ); System . out . println ( Turno . MANHA . id + \"-\" + Turno . MANHA . getDescricao ()); /* * Permitido mas deve ser evitado */ Turno . MANHA . setDescricao ( \"desconhecido\" ); System . out . println ( Turno . MANHA . id + \"-\" + Turno . MANHA . getDescricao ()); } } // Saida: // > MANHA // > 1-manh\u00e3 // > 1-desconhecido Uma vez que a classe Turno herda de java.lang.Enum , ela herda alguns m\u00e9todos: M\u00e9todo Retorno Descri\u00e7\u00e3o values() [ ] Retorna um array contendo todos os itens da enum toString(), name() String Retorna uma String com o nome da inst\u00e2ncia (em mai\u00fasculas). valueOf(String nome) static \\<T extends Enum\\<T>> T Retorna o objeto da classe enum cujo nome \u00e9 a string do argumento. ordinal() int Retorna o n\u00famero de ordem do objeto na enumera\u00e7\u00e3o. package _enum.exemplo_enum_heranca_metodos ; enum Turno { MANHA ( 1 , \"manh\u00e3\" ), TARDE ( 2 , \"tarde\" ), NOITE ( 3 , \"noite\" ); private int id ; private String descricao ; Turno ( int id , String descricao ) { this . id = id ; this . descricao = descricao ; } public static void main ( String [] args ) { for ( Turno t : Turno . values ()) { System . out . println ( t . ordinal () + \" \" + t . name () + \" \" + t . descricao ); } Turno v = Turno . MANHA ; System . out . println ( v . descricao ); /* * Mesma forma, mas passando como argumento */ Turno s = Turno . valueOf ( \"MANHA\" ); System . out . println ( s . descricao ); } } // Saida: // > 0 MANHA manh\u00e3 // > 1 TARDE tarde // > 2 NOITE noite // > manh\u00e3 // > manh\u00e3 Um Enum pode ser comparado com outro objeto atrav\u00e9s do m\u00e9todo equals. package _enum.exemplo_enum_comparacao ; enum Turno { MANHA ( 1 , \"manh\u00e3\" ), TARDE ( 2 , \"tarde\" ), NOITE ( 3 , \"noite\" ); private int id ; private String descricao ; Turno ( int id , String descricao ) { this . id = id ; this . descricao = descricao ; } public static void comparaEnum ( Turno opcao ){ if ( opcao . equals ( Turno . MANHA )) { System . out . println ( \"Turno matutino\" ); } else if ( opcao . equals ( Turno . TARDE )) { System . out . println ( \"Turno vespertino\" ); } else if ( opcao . equals ( Turno . NOITE )){ System . out . println ( \"Turno noturno\" ); } } public static void main ( String [] args ) { comparaEnum ( Turno . TARDE ); } } // Saida // > Turno vespertino","title":"Heran\u00e7a"},{"location":"java/linguagem/excecao/","text":"Exce\u00e7\u00f5es \u00b6 Exce\u00e7\u00f5es Introdu\u00e7\u00e3o Hierarquia Tipos Instru\u00e7\u00e3o throws Instru\u00e7\u00e3o throw Instru\u00e7\u00f5es try-catch-finally try catch finally Introdu\u00e7\u00e3o \u00b6 Exce\u00e7\u00f5es s\u00e3o objetos que sinalizam que ocorreu algum problema no tempo de execu\u00e7\u00e3o de um programa. Tais problemas podem ocorrer ao acessar um \u00edndice de vetor que esteja al\u00e9m de seu tamanho, ao tentar acessar algum membro de uma refer\u00eancia nula, ao dividir um n\u00famero por zero, entre outros. Ao ocorrer uma exce\u00e7\u00e3o, a JVM cria uma inst\u00e2ncia de um objeto da classe Exception ou de uma de suas subclasses (o que \u00e9 chamado de lan\u00e7amento de exce\u00e7\u00e3o) e encerra a execu\u00e7\u00e3o da aplica\u00e7\u00e3o caso essa exce\u00e7\u00e3o n\u00e3o seja tratada (o que \u00e9 chamado de captura de exce\u00e7\u00e3o). Hierarquia \u00b6 A classe Throwable \u00e9 a superclasse de Exception e Error e indiretamente de RuntimeException . ![java-throwable-hierarquia](_excecao/java-throwable-hierarquia.png) Tipos \u00b6 Exce\u00e7\u00f5es n\u00e3o checadas: Representam defeitos no programa (bugs). Geralmente ocorrem de problemas na constru\u00e7\u00e3o da l\u00f3gica do algoritmo e s\u00e3o evit\u00e1veis. S\u00e3o subclasses de RuntimeException , Um m\u00e9todo n\u00e3o \u00e9 obrigado a estabelecer uma pol\u00edtica para as exce\u00e7\u00f5es n\u00e3o checadas lan\u00e7adas por sua execu\u00e7\u00e3o (e quase sempre nunca o fazem). Exemplos: ArithmeticException , ArrayIndexOutOfBoundsException , NullPointerException , NumberFormatException , IllegalArgumentException . Exce\u00e7\u00f5es checadas: Representam condi\u00e7\u00f5es inv\u00e1lidas em \u00e1reas fora do controle imediato do programa (problemas de entradas inv\u00e1lidas do usu\u00e1rio, banco de dados, falhas de rede, arquivos ausentes). S\u00e3o subclasses de Exception . Um m\u00e9todo n\u00e3o \u00e9 obrigado a estabelecer uma pol\u00edtica para os erros (n\u00e3o checado). Um m\u00e9todo \u00e9 obrigado a estabelecer uma pol\u00edtica para todas as exce\u00e7\u00f5es checadas lan\u00e7adas por sua implementa\u00e7\u00e3o (ou passar a exce\u00e7\u00e3o checada mais acima na pilha, ou manipul\u00e1-la de alguma forma). Exemplos: SQLException , IOException , ParseException . Erros: Al\u00e9m das exce\u00e7\u00f5es, h\u00e1 tamb\u00e9m a possibilidade de lan\u00e7amento de erros. Embora a ocorr\u00eancia de erros seja muito mais remota, no geral, s\u00e3o irrepar\u00e1veis e causam o t\u00e9rmino abrupto da execu\u00e7\u00e3o de um programa. S\u00e3o subclasses de Error . Exemplos: estouro da mem\u00f3ria. Instru\u00e7\u00e3o throws \u00b6 A palavra-chave throws declarada na assinatura do m\u00e9todo indica que h\u00e1 a possibilidade de ser lan\u00e7ada uma exce\u00e7\u00e3o em seu bloco de instru\u00e7\u00f5es. Throwable e qualquer outra de suas subclasses podem ser utilizadas. S\u00e3o opcionais para exce\u00e7\u00f5es n\u00e3o checadas e erros. package exemplo_excecao_throws ; class Exemplo { void metodoA () throws Throwable { System . out . println ( \"throws Throwable\" ); } void metodoB () throws Exception { System . out . println ( \"throws Exception\" ); } /* * O metodoC deve utilizar \"throws Throwable\" para passar a resolu\u00e7\u00e3o das * exce\u00e7\u00f5es de metodoA e metodoB para acima da pilha. Utilizar * \"throws Throwable, Exception\" n\u00e3o \u00e9 necess\u00e1rio j\u00e1 que Exception \u00e9 subclasse * de Throwable. Outra solu\u00e7\u00e3o seria n\u00e3o utilizar \"throws Throwable\" mas ser * obrigado a tratar a exce\u00e7\u00e3o. */ void metodoC () throws Throwable { metodoA (); metodoB (); } } Instru\u00e7\u00e3o throw \u00b6 A palavra-chave throw lan\u00e7a uma inst\u00e2ncia de uma exce\u00e7\u00e3o e interrompe o fluxo normal de execu\u00e7\u00e3o do programa. Qualquer subclasse de Throwable pode ser utilizada. O lan\u00e7amento de exce\u00e7\u00f5es n\u00e3o checadas e erros n\u00e3o exige que elas sejam declaradas na assinatura do m\u00e9todo. A utiliza\u00e7\u00e3o de throws , ent\u00e3o, \u00e9 opcional. Enquanto que para exce\u00e7\u00f5es checadas a declara\u00e7\u00e3o \u00e9 obrigat\u00f3ria. class Exececao { void metodoA () { // throws opcional throw new RuntimeException (); } void metodoB () throws Exception { // throws obrigat\u00f3rio throw new Exception (); } } Para exce\u00e7\u00f5es n\u00e3o checadas e erros o compilador n\u00e3o verifica se a classe da exce\u00e7\u00e3o declarada \u00e9 covariante com a classe da exce\u00e7\u00e3o lan\u00e7ada. J\u00e1 para exce\u00e7\u00f5es checadas \u00e9 exigido pelo compilador que a exce\u00e7\u00e3o lan\u00e7ada seja covariante da exce\u00e7\u00e3o declarada. package exemplo_excecao_throw ; import java.io.IOException ; class Excecao { void metodoA () throws Exception { /* * Covariantes. Exception \u00e9 superclasse de IOException. */ throw new IOException (); } void metodoB () throws Error { /* * N\u00e3o Covariantes. RuntimeException n\u00e3o \u00e9 subclasse de Error. Entretanto \u00e9 uma * exce\u00e7\u00e3o N\u00c3O checada. */ throw new RuntimeException (); // ERRO! } void metodoC () throws IOException { /* * N\u00e3o Covariantes. Exception n\u00e3o \u00e9 subclasse de IOException e sim superclasse. * \u00c9 uma exce\u00e7\u00e3o checada. */ // throw new Exception(); // ERRO! } } Instru\u00e7\u00f5es try-catch-finally \u00b6 As palavras-chave try , catch ou finally s\u00e3o utilizadas para controlar o fluxo de um trecho do programa que pode lan\u00e7ar exce\u00e7\u00e3o, e no caso de uma exce\u00e7\u00e3o ser lan\u00e7ada executar determinados blocos de instru\u00e7\u00f5es. Podemos dizer que estas palavras-chave s\u00e3o usadas para tratar a exce\u00e7\u00e3o. try \u00b6 A palavra-chave try \u00e9 utilizada para delimitar um bloco em que m\u00e9todos chamados podem lan\u00e7ar exce\u00e7\u00f5es a serem tratadas. Essas exce\u00e7\u00f5es lan\u00e7adas podem ser capturadas por uma cl\u00e1usula catch , e em seu bloco pode ser chamado instru\u00e7\u00f5es para tratamento das exce\u00e7\u00f5es lan\u00e7adas. Encadeado \u00e0 `try` deve sempre haver o `catch` ou `finally`. Caso ap\u00f3s `try` haja `catch` e `finally` a ordem sempre deve ser `try-catch-finally` // try {} // ERRO! try {} catch ( Throwable t ){} try {} finally {} try {} catch ( Throwable t ){} finally {} // try {} finally{} catch(Throwable t){} // ERRO! catch \u00b6 A instru\u00e7\u00e3o catch captura exce\u00e7\u00f5es e erros lan\u00e7ados dentro de try e possibilita o desenvolvimento de instru\u00e7\u00f5es para trat\u00e1-los. M\u00e9todos que declarem exce\u00e7\u00f5es checadas devem sempre ser chamados ou dentro de try e ter uma cl\u00e1usula catch com um tipo covariante ou dentro de m\u00e9todos utilizando throws para repassar o tratamento da exce\u00e7\u00e3o para quem chamar o m\u00e9todo. No caso do m\u00e9todo chamador relan\u00e7ar a exce\u00e7\u00e3o, quando chamado dever\u00e1 estar dentro de try-catch ou dentro de outro m\u00e9todo que tamb\u00e9m relance a exce\u00e7\u00e3o. package exemplo_excecao_try_catch_finally ; class Exemplo { static void metodoLancaExcecao () throws Exception { throw new Exception (); } /* * Obrigat\u00f3rio utilizar \"throws Exception\" na chamada da fun\u00e7\u00e3o. */ static void metodoRepassaExcecao () throws Exception { metodoLancaExcecao (); } /* * Como a exce\u00e7\u00e3o ser\u00e1 tratada pelo m\u00e9todo, n\u00e3o \u00e9 necess\u00e1rio utilizar * \"throws Exception\" na chamada do m\u00e9todo. */ static void metodoTrataExcecao () { try { metodoLancaExcecao (); /* * N\u00e3o ser\u00e1 chamado, pois foi redirecionado para o catch() */ System . out . println ( \"N\u00e3o ser\u00e1 executado\" ); } catch ( RuntimeException r ) { System . out . println ( \"RuntimeException: \" + r ); } catch ( Exception e ) { /* * Como a exce\u00e7\u00e3o foi capturada, o programa pode continuar sua execu\u00e7\u00e3o a partir * do try, e n\u00e3o necessariamente ap\u00f3s a instru\u00e7\u00e3o que lan\u00e7ou a exce\u00e7\u00e3o. */ System . out . println ( \"Exception: \" + e ); } finally { System . out . println ( \"Finally\" ); } System . out . println ( \"Fim m\u00e9todo\" ); } public static void main ( String [] args ) { metodoTrataExcecao (); System . out . println ( \"Fim programa\" ); } } // Saida // > Exce\u00e7\u00e3o Exception: java.lang.Exception // > Finally // > Fim m\u00e9todo // > Fim programa Se h\u00e1 mais de uma cl\u00e1usula catch elas dever\u00e3o ser dispostas da subclasse mais espec\u00edfica at\u00e9 a subclasse mais abrangente, caso contr\u00e1rio haver\u00e1 erro na compila\u00e7\u00e3o. try {} catch ( IllegalArgumentException e ) {} // subclasse de RuntimeException. catch ( RuntimeException e ) {} // subclasse de Exception. catch ( Exception e ) {} finally \u00b6 A instru\u00e7\u00e3o finally permite que um bloco seja sempre executado ap\u00f3s a execu\u00e7\u00e3o de um bloco de catch e/ou de try . try { throw new Exception (); } catch ( Exception e ) { System . out . println ( \"Dentro de catch\" ); } finally { System . out . println ( \"Dentro de finally\" ); } // Saida: // > Dentro de catch // > Dentro de finally No c\u00f3digo abaixo, o rastreamento de pilha da exce\u00e7\u00e3o lan\u00e7ada por catch() \u00e9 exibido ap\u00f3s o println() devido \u00e0 prioridade caracter\u00edstica de finally em sempre ser executado. try { throw new Exception (); } catch ( Exception e ) { throw new RuntimeException (); } finally { System . out . println ( \"\u00c9 exibido ainda que catch lance uma exce\u00e7\u00e3o.\" ); } // Saida: // > \u00c9 exibido ainda que catch lance uma exce\u00e7\u00e3o. // > Exception in thread \"main\" java.lang.RuntimeException Como finally sempre executa, caso ocorra uma exce\u00e7\u00e3o dentro do finally h\u00e1 a possibilidade de uma exce\u00e7\u00e3o lan\u00e7ada em catch n\u00e3o ser executada. try { throw new Exception (); } catch ( Exception e ) { throw new RuntimeException ( \"dentro de catch\" ); } finally { throw new RuntimeException ( \"dentro de finally\" ); } // Saida: // > Exception in thread \"main\" java.lang.RuntimeException: dentro de finally H\u00e1 uma exce\u00e7\u00e3o na regra de finally sempre executar ap\u00f3s catch que ocorre quando em catch \u00e9 chamado o m\u00e9todo System.exit() . Esse m\u00e9todo executa o encerramento da JVM. try { throw new Exception (); } catch ( Exception e ) { System . out . println ( \"\u00daltima execu\u00e7\u00e3o antes da JVM desligar\" ); System . exit ( 0 ); } finally { System . out . println ( \"N\u00e3o ser\u00e1 executado\" ); } // Saida: // > \u00daltima execu\u00e7\u00e3o antes da JVM desligar","title":"Exce\u00e7\u00f5es"},{"location":"java/linguagem/excecao/#excecoes","text":"Exce\u00e7\u00f5es Introdu\u00e7\u00e3o Hierarquia Tipos Instru\u00e7\u00e3o throws Instru\u00e7\u00e3o throw Instru\u00e7\u00f5es try-catch-finally try catch finally","title":"Exce\u00e7\u00f5es"},{"location":"java/linguagem/excecao/#introducao","text":"Exce\u00e7\u00f5es s\u00e3o objetos que sinalizam que ocorreu algum problema no tempo de execu\u00e7\u00e3o de um programa. Tais problemas podem ocorrer ao acessar um \u00edndice de vetor que esteja al\u00e9m de seu tamanho, ao tentar acessar algum membro de uma refer\u00eancia nula, ao dividir um n\u00famero por zero, entre outros. Ao ocorrer uma exce\u00e7\u00e3o, a JVM cria uma inst\u00e2ncia de um objeto da classe Exception ou de uma de suas subclasses (o que \u00e9 chamado de lan\u00e7amento de exce\u00e7\u00e3o) e encerra a execu\u00e7\u00e3o da aplica\u00e7\u00e3o caso essa exce\u00e7\u00e3o n\u00e3o seja tratada (o que \u00e9 chamado de captura de exce\u00e7\u00e3o).","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/excecao/#hierarquia","text":"A classe Throwable \u00e9 a superclasse de Exception e Error e indiretamente de RuntimeException . ![java-throwable-hierarquia](_excecao/java-throwable-hierarquia.png)","title":"Hierarquia"},{"location":"java/linguagem/excecao/#tipos","text":"Exce\u00e7\u00f5es n\u00e3o checadas: Representam defeitos no programa (bugs). Geralmente ocorrem de problemas na constru\u00e7\u00e3o da l\u00f3gica do algoritmo e s\u00e3o evit\u00e1veis. S\u00e3o subclasses de RuntimeException , Um m\u00e9todo n\u00e3o \u00e9 obrigado a estabelecer uma pol\u00edtica para as exce\u00e7\u00f5es n\u00e3o checadas lan\u00e7adas por sua execu\u00e7\u00e3o (e quase sempre nunca o fazem). Exemplos: ArithmeticException , ArrayIndexOutOfBoundsException , NullPointerException , NumberFormatException , IllegalArgumentException . Exce\u00e7\u00f5es checadas: Representam condi\u00e7\u00f5es inv\u00e1lidas em \u00e1reas fora do controle imediato do programa (problemas de entradas inv\u00e1lidas do usu\u00e1rio, banco de dados, falhas de rede, arquivos ausentes). S\u00e3o subclasses de Exception . Um m\u00e9todo n\u00e3o \u00e9 obrigado a estabelecer uma pol\u00edtica para os erros (n\u00e3o checado). Um m\u00e9todo \u00e9 obrigado a estabelecer uma pol\u00edtica para todas as exce\u00e7\u00f5es checadas lan\u00e7adas por sua implementa\u00e7\u00e3o (ou passar a exce\u00e7\u00e3o checada mais acima na pilha, ou manipul\u00e1-la de alguma forma). Exemplos: SQLException , IOException , ParseException . Erros: Al\u00e9m das exce\u00e7\u00f5es, h\u00e1 tamb\u00e9m a possibilidade de lan\u00e7amento de erros. Embora a ocorr\u00eancia de erros seja muito mais remota, no geral, s\u00e3o irrepar\u00e1veis e causam o t\u00e9rmino abrupto da execu\u00e7\u00e3o de um programa. S\u00e3o subclasses de Error . Exemplos: estouro da mem\u00f3ria.","title":"Tipos"},{"location":"java/linguagem/excecao/#instrucao-throws","text":"A palavra-chave throws declarada na assinatura do m\u00e9todo indica que h\u00e1 a possibilidade de ser lan\u00e7ada uma exce\u00e7\u00e3o em seu bloco de instru\u00e7\u00f5es. Throwable e qualquer outra de suas subclasses podem ser utilizadas. S\u00e3o opcionais para exce\u00e7\u00f5es n\u00e3o checadas e erros. package exemplo_excecao_throws ; class Exemplo { void metodoA () throws Throwable { System . out . println ( \"throws Throwable\" ); } void metodoB () throws Exception { System . out . println ( \"throws Exception\" ); } /* * O metodoC deve utilizar \"throws Throwable\" para passar a resolu\u00e7\u00e3o das * exce\u00e7\u00f5es de metodoA e metodoB para acima da pilha. Utilizar * \"throws Throwable, Exception\" n\u00e3o \u00e9 necess\u00e1rio j\u00e1 que Exception \u00e9 subclasse * de Throwable. Outra solu\u00e7\u00e3o seria n\u00e3o utilizar \"throws Throwable\" mas ser * obrigado a tratar a exce\u00e7\u00e3o. */ void metodoC () throws Throwable { metodoA (); metodoB (); } }","title":"Instru\u00e7\u00e3o throws"},{"location":"java/linguagem/excecao/#instrucao-throw","text":"A palavra-chave throw lan\u00e7a uma inst\u00e2ncia de uma exce\u00e7\u00e3o e interrompe o fluxo normal de execu\u00e7\u00e3o do programa. Qualquer subclasse de Throwable pode ser utilizada. O lan\u00e7amento de exce\u00e7\u00f5es n\u00e3o checadas e erros n\u00e3o exige que elas sejam declaradas na assinatura do m\u00e9todo. A utiliza\u00e7\u00e3o de throws , ent\u00e3o, \u00e9 opcional. Enquanto que para exce\u00e7\u00f5es checadas a declara\u00e7\u00e3o \u00e9 obrigat\u00f3ria. class Exececao { void metodoA () { // throws opcional throw new RuntimeException (); } void metodoB () throws Exception { // throws obrigat\u00f3rio throw new Exception (); } } Para exce\u00e7\u00f5es n\u00e3o checadas e erros o compilador n\u00e3o verifica se a classe da exce\u00e7\u00e3o declarada \u00e9 covariante com a classe da exce\u00e7\u00e3o lan\u00e7ada. J\u00e1 para exce\u00e7\u00f5es checadas \u00e9 exigido pelo compilador que a exce\u00e7\u00e3o lan\u00e7ada seja covariante da exce\u00e7\u00e3o declarada. package exemplo_excecao_throw ; import java.io.IOException ; class Excecao { void metodoA () throws Exception { /* * Covariantes. Exception \u00e9 superclasse de IOException. */ throw new IOException (); } void metodoB () throws Error { /* * N\u00e3o Covariantes. RuntimeException n\u00e3o \u00e9 subclasse de Error. Entretanto \u00e9 uma * exce\u00e7\u00e3o N\u00c3O checada. */ throw new RuntimeException (); // ERRO! } void metodoC () throws IOException { /* * N\u00e3o Covariantes. Exception n\u00e3o \u00e9 subclasse de IOException e sim superclasse. * \u00c9 uma exce\u00e7\u00e3o checada. */ // throw new Exception(); // ERRO! } }","title":"Instru\u00e7\u00e3o throw"},{"location":"java/linguagem/excecao/#instrucoes-try-catch-finally","text":"As palavras-chave try , catch ou finally s\u00e3o utilizadas para controlar o fluxo de um trecho do programa que pode lan\u00e7ar exce\u00e7\u00e3o, e no caso de uma exce\u00e7\u00e3o ser lan\u00e7ada executar determinados blocos de instru\u00e7\u00f5es. Podemos dizer que estas palavras-chave s\u00e3o usadas para tratar a exce\u00e7\u00e3o.","title":"Instru\u00e7\u00f5es try-catch-finally"},{"location":"java/linguagem/excecao/#try","text":"A palavra-chave try \u00e9 utilizada para delimitar um bloco em que m\u00e9todos chamados podem lan\u00e7ar exce\u00e7\u00f5es a serem tratadas. Essas exce\u00e7\u00f5es lan\u00e7adas podem ser capturadas por uma cl\u00e1usula catch , e em seu bloco pode ser chamado instru\u00e7\u00f5es para tratamento das exce\u00e7\u00f5es lan\u00e7adas. Encadeado \u00e0 `try` deve sempre haver o `catch` ou `finally`. Caso ap\u00f3s `try` haja `catch` e `finally` a ordem sempre deve ser `try-catch-finally` // try {} // ERRO! try {} catch ( Throwable t ){} try {} finally {} try {} catch ( Throwable t ){} finally {} // try {} finally{} catch(Throwable t){} // ERRO!","title":"try"},{"location":"java/linguagem/excecao/#catch","text":"A instru\u00e7\u00e3o catch captura exce\u00e7\u00f5es e erros lan\u00e7ados dentro de try e possibilita o desenvolvimento de instru\u00e7\u00f5es para trat\u00e1-los. M\u00e9todos que declarem exce\u00e7\u00f5es checadas devem sempre ser chamados ou dentro de try e ter uma cl\u00e1usula catch com um tipo covariante ou dentro de m\u00e9todos utilizando throws para repassar o tratamento da exce\u00e7\u00e3o para quem chamar o m\u00e9todo. No caso do m\u00e9todo chamador relan\u00e7ar a exce\u00e7\u00e3o, quando chamado dever\u00e1 estar dentro de try-catch ou dentro de outro m\u00e9todo que tamb\u00e9m relance a exce\u00e7\u00e3o. package exemplo_excecao_try_catch_finally ; class Exemplo { static void metodoLancaExcecao () throws Exception { throw new Exception (); } /* * Obrigat\u00f3rio utilizar \"throws Exception\" na chamada da fun\u00e7\u00e3o. */ static void metodoRepassaExcecao () throws Exception { metodoLancaExcecao (); } /* * Como a exce\u00e7\u00e3o ser\u00e1 tratada pelo m\u00e9todo, n\u00e3o \u00e9 necess\u00e1rio utilizar * \"throws Exception\" na chamada do m\u00e9todo. */ static void metodoTrataExcecao () { try { metodoLancaExcecao (); /* * N\u00e3o ser\u00e1 chamado, pois foi redirecionado para o catch() */ System . out . println ( \"N\u00e3o ser\u00e1 executado\" ); } catch ( RuntimeException r ) { System . out . println ( \"RuntimeException: \" + r ); } catch ( Exception e ) { /* * Como a exce\u00e7\u00e3o foi capturada, o programa pode continuar sua execu\u00e7\u00e3o a partir * do try, e n\u00e3o necessariamente ap\u00f3s a instru\u00e7\u00e3o que lan\u00e7ou a exce\u00e7\u00e3o. */ System . out . println ( \"Exception: \" + e ); } finally { System . out . println ( \"Finally\" ); } System . out . println ( \"Fim m\u00e9todo\" ); } public static void main ( String [] args ) { metodoTrataExcecao (); System . out . println ( \"Fim programa\" ); } } // Saida // > Exce\u00e7\u00e3o Exception: java.lang.Exception // > Finally // > Fim m\u00e9todo // > Fim programa Se h\u00e1 mais de uma cl\u00e1usula catch elas dever\u00e3o ser dispostas da subclasse mais espec\u00edfica at\u00e9 a subclasse mais abrangente, caso contr\u00e1rio haver\u00e1 erro na compila\u00e7\u00e3o. try {} catch ( IllegalArgumentException e ) {} // subclasse de RuntimeException. catch ( RuntimeException e ) {} // subclasse de Exception. catch ( Exception e ) {}","title":"catch"},{"location":"java/linguagem/excecao/#finally","text":"A instru\u00e7\u00e3o finally permite que um bloco seja sempre executado ap\u00f3s a execu\u00e7\u00e3o de um bloco de catch e/ou de try . try { throw new Exception (); } catch ( Exception e ) { System . out . println ( \"Dentro de catch\" ); } finally { System . out . println ( \"Dentro de finally\" ); } // Saida: // > Dentro de catch // > Dentro de finally No c\u00f3digo abaixo, o rastreamento de pilha da exce\u00e7\u00e3o lan\u00e7ada por catch() \u00e9 exibido ap\u00f3s o println() devido \u00e0 prioridade caracter\u00edstica de finally em sempre ser executado. try { throw new Exception (); } catch ( Exception e ) { throw new RuntimeException (); } finally { System . out . println ( \"\u00c9 exibido ainda que catch lance uma exce\u00e7\u00e3o.\" ); } // Saida: // > \u00c9 exibido ainda que catch lance uma exce\u00e7\u00e3o. // > Exception in thread \"main\" java.lang.RuntimeException Como finally sempre executa, caso ocorra uma exce\u00e7\u00e3o dentro do finally h\u00e1 a possibilidade de uma exce\u00e7\u00e3o lan\u00e7ada em catch n\u00e3o ser executada. try { throw new Exception (); } catch ( Exception e ) { throw new RuntimeException ( \"dentro de catch\" ); } finally { throw new RuntimeException ( \"dentro de finally\" ); } // Saida: // > Exception in thread \"main\" java.lang.RuntimeException: dentro de finally H\u00e1 uma exce\u00e7\u00e3o na regra de finally sempre executar ap\u00f3s catch que ocorre quando em catch \u00e9 chamado o m\u00e9todo System.exit() . Esse m\u00e9todo executa o encerramento da JVM. try { throw new Exception (); } catch ( Exception e ) { System . out . println ( \"\u00daltima execu\u00e7\u00e3o antes da JVM desligar\" ); System . exit ( 0 ); } finally { System . out . println ( \"N\u00e3o ser\u00e1 executado\" ); } // Saida: // > \u00daltima execu\u00e7\u00e3o antes da JVM desligar","title":"finally"},{"location":"java/linguagem/generics/","text":"Generics \u00b6 Generics Introdu\u00e7\u00e3o Motiva\u00e7\u00e3o Generics em classes e interfaces Generics em m\u00e9todos Tipos gen\u00e9ricos limitados Wildcards Upper Bounded Wildcards Lower Bounded Wildcards Unbounded Wildcards Introdu\u00e7\u00e3o \u00b6 Programa\u00e7\u00e3o gen\u00e9rica, ou generics foram projetados para estender o sistema de tipos do Java para permitir que um tipo ou m\u00e9todo possa ser usado em objetos de tipos diferentes enquanto fornece seguran\u00e7a de tipo ( type safety ) em tempo de compila\u00e7\u00e3o\". Os tipos gen\u00e9ricos s\u00e3o delimitados pelos caracteres <> (operador diamante). *Generics* n\u00e3o podem ser aplicadas sobre tipos primitivos (`int`, `long`, `char`, `boolean`). Java usa uma pequena conven\u00e7\u00e3o de nomenclatura para as letras de identifica\u00e7\u00e3o de generics (que s\u00e3o vastamente utilizadas no Framework de cole\u00e7\u00f5es Java), sendo: <E> - Elemento <K> - Chave <N> - N\u00famero <T> - Tipo <V> - Valor Motiva\u00e7\u00e3o \u00b6 Ao recuperar valores de uma lista, sempre era necess\u00e1rio realizar o cast para um determinado tipo. Isso devido ao fato que a interface List recebia um Object como par\u00e2metro em seu m\u00e9todo add . Como em Java todos os tipos extendem Object , qualquer tipo poderia ser inserido em uma lista. N\u00e3o \u00e9 poss\u00edvel ter seguran\u00e7a de qual tipo ser\u00e1 retornado pela lista em tempo de compila\u00e7\u00e3o. Erros poder\u00e3o ser percebidos somente em tempo de execu\u00e7\u00e3o. package exemplo_generics_motivacao.exemplo1 ; import java.util.ArrayList ; import java.util.List ; public class Exemplo { static void semGenerics () { List v = new ArrayList (); v . add ( \"String\" ); /* * Erro em tempo de execu\u00e7\u00e3o */ Integer i = ( Integer ) v . get ( 0 ); // ERRO! } static void comGenerics () { List < String > v = new ArrayList < String > (); v . add ( \"String\" ); /* * Erro em tempo de compila\u00e7\u00e3o */ //Integer i = v.get(0); // ERRO! } public static void main ( String [] args ) { semGenerics (); comGenerics (); } } Com o uso de generics n\u00e3o \u00e9 mais necess\u00e1rio converter o emento da lista em um tipo espec\u00edfico. Porque v.get(0) \u00e9 definido como String pelo c\u00f3digo gerado pelo compilador. Dessa forma incompatibilidades de tipos ser\u00e3o detectadas em tempo de compila\u00e7\u00e3o. As listas com generics ( List<> ) ao contr\u00e1rio dos arrays s\u00e3o invariantes e s\u00f3 podem ser atribu\u00eddas a vari\u00e1veis com o mesmo tipo gen\u00e9rico. Portanto s\u00e3o mais seguras, pois o erro \u00e9 detectado em tempo de compila\u00e7\u00e3o. Outro exemplo, onde ocorreria uma exce\u00e7\u00e3o em tempo de execu\u00e7\u00e3o, mesmo sem uma convers\u00e3o expl\u00edcita. package _generics.exemplo_generics_motivacao.exemplo2 ; import java.util.ArrayList ; import java.util.List ; class Animal { } class Cao extends Animal { } class Gato extends Animal { } class Exemplo { static void semGenerics () { Gato [] gatos = new Gato [ 2 ] ; Animal [] animais = gatos ; /* * Compila pois Cao \u00e9 um Animal, mas ocorrer\u00e1 erro em tempo de execu\u00e7\u00e3o */ // animais[0] = new Cao(); // ERRO! } static void comGenerics () { List < Gato > gatosList = new ArrayList <> (); /* * Erro em tempo de compila\u00e7\u00e3o */ // List<Animal> animaisList = gatosList; // ERRO! } public static void main ( String [] args ) { semGenerics (); comGenerics (); } } Generics em classes e interfaces \u00b6 Uma classe ou interface \u00e9 considerada gen\u00e9rica, quando possui ao lado de seu nome um identificador como: <T> . No exemplo abaixo, a letra T representa um tipo que ser\u00e1 inserido ao instanciar a classe. A letra T \u00e9 apenas uma conven\u00e7\u00e3o para type , qualquer identificador pode ser utilizado. package exemplo_generics_classe ; import java.util.Arrays ; class Exemplo < T > { private Object [] elements = new Object [ 0 ] ; public T get ( int index ) { return ( T ) elements [ index ] ; } public void add ( T element ) { /* * Copia o array para o novo tamanho, truncando ou preenchendo com zeros */ elements = Arrays . copyOf ( elements , elements . length + 1 ); elements [ elements . length - 1 ] = element ; } public static void main ( String [] args ) { /* * N\u00e3o \u00e9 necess\u00e1rio repetir os tipos no new, basta usar <> */ Exemplo < String > list = new Exemplo <> (); /* * Espera-se uma string */ // list.add(1); // ERRO! list . add ( \"2\" ); /* * N\u00e3o h\u00e1 necessidade de cast, pois o compilador sabe que \u00e9 uma String */ String result = list . get ( 0 ); System . out . println ( result ); } } // Saida // > 2 No exemplo abaixo, as letras T e V representa um tipo de chave e um tipo de valor que que ser\u00e3o passados ao implementar a interface. package exemplo_generics_interface ; interface Generics < T , V > { T metodoA ( V valor ); } class Exemplo implements Generics < String , Integer > { /* * Implementando o m\u00e9todo conforme informado no Generics */ public String metodoA ( Integer valor ) { return Integer . toString ( valor ); } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . metodoA ( 1 )); } } // Saida // > 1 \u00c9 poss\u00edvel definir uma classe ou interface com tipos gen\u00e9ricos em par\u00e2metros de tipo. Classe < Integer , Objeto < String >> c = new Classe <> ( 10 , new Objeto <> ()); No exemplo temos a classe `Objeto` com tipo gen\u00e9rico definida como par\u00e2metro de tipo gen\u00e9rico da classe `Classe`. Generics em m\u00e9todos \u00b6 N\u00e3o s\u00e3o somente as classes e interfaces que possuem a flexibilidade de generics , tamb\u00e9m podemos criar m\u00e9todos gen\u00e9ricos. Assim como nas classes gen\u00e9ricas, \u00e9 necess\u00e1rios a declara\u00e7\u00e3o dos tipos que poder\u00e3o ser usados tanto nos par\u00e2metros como nas vari\u00e1veis internas. Os tipos gen\u00e9ricos ficam entre os modificadores de acesso do m\u00e9todo e seu tipo de retorno. Se a classe tamb\u00e9m \u00e9 gen\u00e9rica, e possui um identificador de tipo igual ao do m\u00e9todo, o do m\u00e9todo vai sobrescrever o da classe. package exemplo_generics_metodo ; class GenericsA { @Override public String toString () { return this . getClass (). toString (); } } class GenericsB extends GenericsA { } class Exemplo { static < T , K > T converte ( K par ) { return ( T ) par ; } static < T > void print ( T par ) { System . out . println ( par . toString ()); } public static void main ( String [] args ) { GenericsA g = converte ( new GenericsB ()); print ( g ); } } // Saida // > cclass exemplo_generics_metodo.GenericsB Conforme o exemplo, no m\u00e9todo converte() <T, K> est\u00e1 declarando os tipos gen\u00e9ricos que ser\u00e3o usados no m\u00e9todo, enquanto que T indica seu tipo de retorno. Tipos gen\u00e9ricos limitados \u00b6 Um benef\u00edcio maior na utiliza\u00e7\u00e3o de generics se d\u00e1 ao especificar-se uma restri\u00e7\u00e3o aos tipos de par\u00e2metro poss\u00edveis. Sem o uso de wildcards h\u00e1 apenas um tipo de limitador: upper bounded . Ao utilizarmos <T extends Animal> Animal \u00e9 a classe de hierarquia mais alta ( upper ) aceita como par\u00e2metro. Portanto dessa forma definimos o limite superior para o tipo gen\u00e9rico. package _generics.exemplo_generics_limite_upper ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * O limite \u00e9 superior, Animal \u00e9 a classe mais alta permitida. */ static < T extends Animal > void print ( List < T > objs ) { for ( Animal obj : objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < Cao > ()); /* * SerVivo \u00e9 uma classe superior a Animal */ //print(new ArrayList<SerVivo>()); // ERRO! } } \u00c9 poss\u00edvel usar extends para mais de uma classe. Nesse caso o tipo dever\u00e1 ser um subclasse de todos os tipos informados. Class A {} interface B {} interface C {} class D < T extends A & B & C > {} O `extends` \u00e9 usado em um sentido geral para significar `extends` (como em classes) ou `implements` (como em interfaces). Portanto para interfaces, n\u00e3o \u00e9 utilizado ` ` e sim ` `. Wildcards \u00b6 Ao contr\u00e1rio de arrays (que s\u00e3o covariantes em Java), diferentes instancia\u00e7\u00f5es de um tipo gen\u00e9rico n\u00e3o s\u00e3o compat\u00edveis entre si, nem mesmo explicitamente. Conforme o exemplo abaixo, com a declara\u00e7\u00e3o List<Animal> animais e List<Cao> caes o compilador reportaria um erro de convers\u00e3o para ambos casts : (List<Cao>) animais e (List<Animal>) caes . package _generics.exemplo_generics_wildcard_motivacao ; import java.util.ArrayList ; import java.util.List ; class Animal { String getEspecies () { return getClass (). toString (); } } class Cao extends Animal { } class Gato extends Animal { } class Exemplo { /* * Exemplo usando par\u00e2metro de tipo gen\u00e9rico */ static < T extends Animal > void print ( List < T > objs ) { for ( T obj : objs ) { System . out . println ( obj . getEspecies ()); } } /* * Exemplo usando wildcard */ static void printWC ( List <? extends Animal > objs ) { for ( Animal obj : objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { /* * Sem wildcard, n\u00e3o \u00e9 poss\u00edvel converter superclasse <-> subclasse */ List < Animal > listaAnimal = new ArrayList < Animal > (); List < Cao > listaCao = new ArrayList < Cao > (); List < Gato > listaGato = new ArrayList < Gato > (); // listaAnimal = new ArrayList<Cao>(); // ERRO! // listaCao = new ArrayList<Animal>(); // ERRO! // listaGato = new ArrayList<Cao>(); // ERRO! /* * Com wildcard, List<? extends Animal> pode receber atribui\u00e7\u00e3o de: * List<Animal>, List<Cat>, List<Dog> */ List <? extends Animal > listaBaseAnimal ; listaBaseAnimal = new ArrayList < Animal > (); listaBaseAnimal = new ArrayList < Gato > (); listaBaseAnimal = new ArrayList < Cao > (); } } Essa incompatibilidade pode ser suavizada pelo Wildcard se ? \u00e9 usado como um tipo de par\u00e2metro: List<?> \u00e9 o tipo abstrato para todas as parametriza\u00e7\u00f5es do tipo gen\u00e9rico. Isso permite que objetos do tipo List<Animal> e List<Cao> sejam atribu\u00eddos com seguran\u00e7a a uma vari\u00e1vel ou par\u00e2metro de m\u00e9todo do tipo List<?> . Usando List<? extends Animal> permite o mesmo, restringindo a compatibilidade ao Animal e suas subclasses. Outra possibilidade \u00e9 List<? super Cao> , que tamb\u00e9m aceita os dois objetos e restringe a compatibilidade ao Cao e a todos as suas superclasse. No exemplo acima os dois m\u00e9todos ( print e printWC ) s\u00e3o similares. M\u00e9todos que fazem o uso do par\u00e2metro de tipo gen\u00e9rico <T> podem usar este tipo para declarar novos objetos dentro do m\u00e9todo, enquanto que com wildcards isso n\u00e3o \u00e9 poss\u00edvel. N\u00e3o h\u00e1 como utilizar *wildcards* na declara\u00e7\u00e3o de tipos gen\u00e9ricos de m\u00e9todos, classes e interfaces. *Wildcards* s\u00e3o usados apenas como **argumentos**. Usando Wildcards \u00e9 poss\u00edvel utilizar mais um limitador de tipo: Lower Bounded . Portanto existem tr\u00eas formas de definir um tipo gen\u00e9rico. Upper Bounded Wildcards : Class<? extends A> Lower Bounded Wildcards : Class<? super A> Unbounded Wildcards : Class<?> Upper Bounded Wildcards \u00b6 Ao utilizarmos <? extends Animal> Animal \u00e9 a classe de hierarquia mais alta ( upper ) aceita como par\u00e2metro. Portanto dessa forma definimos o limite superior para o tipo gen\u00e9rico. package _generics.exemplo_generics_wildcard_upper ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * O limite \u00e9 superior, Animal \u00e9 a classe mais alta permitida. */ static void print ( List <? extends Animal > objs ) { for ( Animal obj : objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < Cao > ()); /* * SerVivo \u00e9 uma classe superior a Animal */ // print(new ArrayList<SerVivo>()); // ERRO! } } Lower Bounded Wildcards \u00b6 Ao utilizarmos <? super Animal> Animal \u00e9 a classe de hierarquia mais baixa ( lower ) aceita como par\u00e2metro. Portanto dessa forma definimos o limite inferior para o tipo gen\u00e9rico. package _generics.exemplo_generics_wildcard_lower ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * O limite \u00e9 inferior, Animal \u00e9 a classe mais baixa permitida. */ static void print ( List <? super Animal > objs ) { for ( Animal obj : ( List < Animal > ) objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < SerVivo > ()); /* * Cao \u00e9 uma classe inferior a Animal */ // print(new ArrayList<Cao>()); // ERRO! } } Unbounded Wildcards \u00b6 Utilizada quando precisamos de um tipo gen\u00e9rico mas n\u00e3o nos importamos com qual. package _generics.exemplo_generics_wildcard_unbounded ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * N\u00e3o se sabe o tipo de objeto, portanto n\u00e3o \u00e9 poss\u00edvel chamar o m\u00e9todo * getEspecies() de Animal. */ static void print ( List <?> objs ) { for ( Object obj : objs ) { // System.out.println(obj.getEspecies()); // ERRO! System . out . println ( obj . toString ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < Cao > ()); print ( new ArrayList < SerVivo > ()); } } A nota\u00e7\u00e3o <?> \u00e9 equivalente a <? extends Object> . Por isso nenhum valor pode ser inserido nesta lista a n\u00e3o ser null . List <?> objects = new ArrayList <> (); /* * Erro em tempo de compila\u00e7\u00e3o */ // objects.add(new Object()); // ERRO! // objects.add(new Cao()); // ERRO! Entretanto n\u00e3o se deve pensar no <?> como sendo a mesma coisa que a classe Object , pois com ela o mesmo exemplo seria v\u00e1lido. List < Object > objects = new ArrayList <> (); objects . add ( new Object ()); objects . add ( new Cao ());","title":"Generics"},{"location":"java/linguagem/generics/#generics","text":"Generics Introdu\u00e7\u00e3o Motiva\u00e7\u00e3o Generics em classes e interfaces Generics em m\u00e9todos Tipos gen\u00e9ricos limitados Wildcards Upper Bounded Wildcards Lower Bounded Wildcards Unbounded Wildcards","title":"Generics"},{"location":"java/linguagem/generics/#introducao","text":"Programa\u00e7\u00e3o gen\u00e9rica, ou generics foram projetados para estender o sistema de tipos do Java para permitir que um tipo ou m\u00e9todo possa ser usado em objetos de tipos diferentes enquanto fornece seguran\u00e7a de tipo ( type safety ) em tempo de compila\u00e7\u00e3o\". Os tipos gen\u00e9ricos s\u00e3o delimitados pelos caracteres <> (operador diamante). *Generics* n\u00e3o podem ser aplicadas sobre tipos primitivos (`int`, `long`, `char`, `boolean`). Java usa uma pequena conven\u00e7\u00e3o de nomenclatura para as letras de identifica\u00e7\u00e3o de generics (que s\u00e3o vastamente utilizadas no Framework de cole\u00e7\u00f5es Java), sendo: <E> - Elemento <K> - Chave <N> - N\u00famero <T> - Tipo <V> - Valor","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/generics/#motivacao","text":"Ao recuperar valores de uma lista, sempre era necess\u00e1rio realizar o cast para um determinado tipo. Isso devido ao fato que a interface List recebia um Object como par\u00e2metro em seu m\u00e9todo add . Como em Java todos os tipos extendem Object , qualquer tipo poderia ser inserido em uma lista. N\u00e3o \u00e9 poss\u00edvel ter seguran\u00e7a de qual tipo ser\u00e1 retornado pela lista em tempo de compila\u00e7\u00e3o. Erros poder\u00e3o ser percebidos somente em tempo de execu\u00e7\u00e3o. package exemplo_generics_motivacao.exemplo1 ; import java.util.ArrayList ; import java.util.List ; public class Exemplo { static void semGenerics () { List v = new ArrayList (); v . add ( \"String\" ); /* * Erro em tempo de execu\u00e7\u00e3o */ Integer i = ( Integer ) v . get ( 0 ); // ERRO! } static void comGenerics () { List < String > v = new ArrayList < String > (); v . add ( \"String\" ); /* * Erro em tempo de compila\u00e7\u00e3o */ //Integer i = v.get(0); // ERRO! } public static void main ( String [] args ) { semGenerics (); comGenerics (); } } Com o uso de generics n\u00e3o \u00e9 mais necess\u00e1rio converter o emento da lista em um tipo espec\u00edfico. Porque v.get(0) \u00e9 definido como String pelo c\u00f3digo gerado pelo compilador. Dessa forma incompatibilidades de tipos ser\u00e3o detectadas em tempo de compila\u00e7\u00e3o. As listas com generics ( List<> ) ao contr\u00e1rio dos arrays s\u00e3o invariantes e s\u00f3 podem ser atribu\u00eddas a vari\u00e1veis com o mesmo tipo gen\u00e9rico. Portanto s\u00e3o mais seguras, pois o erro \u00e9 detectado em tempo de compila\u00e7\u00e3o. Outro exemplo, onde ocorreria uma exce\u00e7\u00e3o em tempo de execu\u00e7\u00e3o, mesmo sem uma convers\u00e3o expl\u00edcita. package _generics.exemplo_generics_motivacao.exemplo2 ; import java.util.ArrayList ; import java.util.List ; class Animal { } class Cao extends Animal { } class Gato extends Animal { } class Exemplo { static void semGenerics () { Gato [] gatos = new Gato [ 2 ] ; Animal [] animais = gatos ; /* * Compila pois Cao \u00e9 um Animal, mas ocorrer\u00e1 erro em tempo de execu\u00e7\u00e3o */ // animais[0] = new Cao(); // ERRO! } static void comGenerics () { List < Gato > gatosList = new ArrayList <> (); /* * Erro em tempo de compila\u00e7\u00e3o */ // List<Animal> animaisList = gatosList; // ERRO! } public static void main ( String [] args ) { semGenerics (); comGenerics (); } }","title":"Motiva\u00e7\u00e3o"},{"location":"java/linguagem/generics/#generics-em-classes-e-interfaces","text":"Uma classe ou interface \u00e9 considerada gen\u00e9rica, quando possui ao lado de seu nome um identificador como: <T> . No exemplo abaixo, a letra T representa um tipo que ser\u00e1 inserido ao instanciar a classe. A letra T \u00e9 apenas uma conven\u00e7\u00e3o para type , qualquer identificador pode ser utilizado. package exemplo_generics_classe ; import java.util.Arrays ; class Exemplo < T > { private Object [] elements = new Object [ 0 ] ; public T get ( int index ) { return ( T ) elements [ index ] ; } public void add ( T element ) { /* * Copia o array para o novo tamanho, truncando ou preenchendo com zeros */ elements = Arrays . copyOf ( elements , elements . length + 1 ); elements [ elements . length - 1 ] = element ; } public static void main ( String [] args ) { /* * N\u00e3o \u00e9 necess\u00e1rio repetir os tipos no new, basta usar <> */ Exemplo < String > list = new Exemplo <> (); /* * Espera-se uma string */ // list.add(1); // ERRO! list . add ( \"2\" ); /* * N\u00e3o h\u00e1 necessidade de cast, pois o compilador sabe que \u00e9 uma String */ String result = list . get ( 0 ); System . out . println ( result ); } } // Saida // > 2 No exemplo abaixo, as letras T e V representa um tipo de chave e um tipo de valor que que ser\u00e3o passados ao implementar a interface. package exemplo_generics_interface ; interface Generics < T , V > { T metodoA ( V valor ); } class Exemplo implements Generics < String , Integer > { /* * Implementando o m\u00e9todo conforme informado no Generics */ public String metodoA ( Integer valor ) { return Integer . toString ( valor ); } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . metodoA ( 1 )); } } // Saida // > 1 \u00c9 poss\u00edvel definir uma classe ou interface com tipos gen\u00e9ricos em par\u00e2metros de tipo. Classe < Integer , Objeto < String >> c = new Classe <> ( 10 , new Objeto <> ()); No exemplo temos a classe `Objeto` com tipo gen\u00e9rico definida como par\u00e2metro de tipo gen\u00e9rico da classe `Classe`.","title":"Generics em classes e interfaces"},{"location":"java/linguagem/generics/#generics-em-metodos","text":"N\u00e3o s\u00e3o somente as classes e interfaces que possuem a flexibilidade de generics , tamb\u00e9m podemos criar m\u00e9todos gen\u00e9ricos. Assim como nas classes gen\u00e9ricas, \u00e9 necess\u00e1rios a declara\u00e7\u00e3o dos tipos que poder\u00e3o ser usados tanto nos par\u00e2metros como nas vari\u00e1veis internas. Os tipos gen\u00e9ricos ficam entre os modificadores de acesso do m\u00e9todo e seu tipo de retorno. Se a classe tamb\u00e9m \u00e9 gen\u00e9rica, e possui um identificador de tipo igual ao do m\u00e9todo, o do m\u00e9todo vai sobrescrever o da classe. package exemplo_generics_metodo ; class GenericsA { @Override public String toString () { return this . getClass (). toString (); } } class GenericsB extends GenericsA { } class Exemplo { static < T , K > T converte ( K par ) { return ( T ) par ; } static < T > void print ( T par ) { System . out . println ( par . toString ()); } public static void main ( String [] args ) { GenericsA g = converte ( new GenericsB ()); print ( g ); } } // Saida // > cclass exemplo_generics_metodo.GenericsB Conforme o exemplo, no m\u00e9todo converte() <T, K> est\u00e1 declarando os tipos gen\u00e9ricos que ser\u00e3o usados no m\u00e9todo, enquanto que T indica seu tipo de retorno.","title":"Generics em m\u00e9todos"},{"location":"java/linguagem/generics/#tipos-genericos-limitados","text":"Um benef\u00edcio maior na utiliza\u00e7\u00e3o de generics se d\u00e1 ao especificar-se uma restri\u00e7\u00e3o aos tipos de par\u00e2metro poss\u00edveis. Sem o uso de wildcards h\u00e1 apenas um tipo de limitador: upper bounded . Ao utilizarmos <T extends Animal> Animal \u00e9 a classe de hierarquia mais alta ( upper ) aceita como par\u00e2metro. Portanto dessa forma definimos o limite superior para o tipo gen\u00e9rico. package _generics.exemplo_generics_limite_upper ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * O limite \u00e9 superior, Animal \u00e9 a classe mais alta permitida. */ static < T extends Animal > void print ( List < T > objs ) { for ( Animal obj : objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < Cao > ()); /* * SerVivo \u00e9 uma classe superior a Animal */ //print(new ArrayList<SerVivo>()); // ERRO! } } \u00c9 poss\u00edvel usar extends para mais de uma classe. Nesse caso o tipo dever\u00e1 ser um subclasse de todos os tipos informados. Class A {} interface B {} interface C {} class D < T extends A & B & C > {} O `extends` \u00e9 usado em um sentido geral para significar `extends` (como em classes) ou `implements` (como em interfaces). Portanto para interfaces, n\u00e3o \u00e9 utilizado ` ` e sim ` `.","title":"Tipos gen\u00e9ricos limitados"},{"location":"java/linguagem/generics/#wildcards","text":"Ao contr\u00e1rio de arrays (que s\u00e3o covariantes em Java), diferentes instancia\u00e7\u00f5es de um tipo gen\u00e9rico n\u00e3o s\u00e3o compat\u00edveis entre si, nem mesmo explicitamente. Conforme o exemplo abaixo, com a declara\u00e7\u00e3o List<Animal> animais e List<Cao> caes o compilador reportaria um erro de convers\u00e3o para ambos casts : (List<Cao>) animais e (List<Animal>) caes . package _generics.exemplo_generics_wildcard_motivacao ; import java.util.ArrayList ; import java.util.List ; class Animal { String getEspecies () { return getClass (). toString (); } } class Cao extends Animal { } class Gato extends Animal { } class Exemplo { /* * Exemplo usando par\u00e2metro de tipo gen\u00e9rico */ static < T extends Animal > void print ( List < T > objs ) { for ( T obj : objs ) { System . out . println ( obj . getEspecies ()); } } /* * Exemplo usando wildcard */ static void printWC ( List <? extends Animal > objs ) { for ( Animal obj : objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { /* * Sem wildcard, n\u00e3o \u00e9 poss\u00edvel converter superclasse <-> subclasse */ List < Animal > listaAnimal = new ArrayList < Animal > (); List < Cao > listaCao = new ArrayList < Cao > (); List < Gato > listaGato = new ArrayList < Gato > (); // listaAnimal = new ArrayList<Cao>(); // ERRO! // listaCao = new ArrayList<Animal>(); // ERRO! // listaGato = new ArrayList<Cao>(); // ERRO! /* * Com wildcard, List<? extends Animal> pode receber atribui\u00e7\u00e3o de: * List<Animal>, List<Cat>, List<Dog> */ List <? extends Animal > listaBaseAnimal ; listaBaseAnimal = new ArrayList < Animal > (); listaBaseAnimal = new ArrayList < Gato > (); listaBaseAnimal = new ArrayList < Cao > (); } } Essa incompatibilidade pode ser suavizada pelo Wildcard se ? \u00e9 usado como um tipo de par\u00e2metro: List<?> \u00e9 o tipo abstrato para todas as parametriza\u00e7\u00f5es do tipo gen\u00e9rico. Isso permite que objetos do tipo List<Animal> e List<Cao> sejam atribu\u00eddos com seguran\u00e7a a uma vari\u00e1vel ou par\u00e2metro de m\u00e9todo do tipo List<?> . Usando List<? extends Animal> permite o mesmo, restringindo a compatibilidade ao Animal e suas subclasses. Outra possibilidade \u00e9 List<? super Cao> , que tamb\u00e9m aceita os dois objetos e restringe a compatibilidade ao Cao e a todos as suas superclasse. No exemplo acima os dois m\u00e9todos ( print e printWC ) s\u00e3o similares. M\u00e9todos que fazem o uso do par\u00e2metro de tipo gen\u00e9rico <T> podem usar este tipo para declarar novos objetos dentro do m\u00e9todo, enquanto que com wildcards isso n\u00e3o \u00e9 poss\u00edvel. N\u00e3o h\u00e1 como utilizar *wildcards* na declara\u00e7\u00e3o de tipos gen\u00e9ricos de m\u00e9todos, classes e interfaces. *Wildcards* s\u00e3o usados apenas como **argumentos**. Usando Wildcards \u00e9 poss\u00edvel utilizar mais um limitador de tipo: Lower Bounded . Portanto existem tr\u00eas formas de definir um tipo gen\u00e9rico. Upper Bounded Wildcards : Class<? extends A> Lower Bounded Wildcards : Class<? super A> Unbounded Wildcards : Class<?>","title":"Wildcards"},{"location":"java/linguagem/generics/#upper-bounded-wildcards","text":"Ao utilizarmos <? extends Animal> Animal \u00e9 a classe de hierarquia mais alta ( upper ) aceita como par\u00e2metro. Portanto dessa forma definimos o limite superior para o tipo gen\u00e9rico. package _generics.exemplo_generics_wildcard_upper ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * O limite \u00e9 superior, Animal \u00e9 a classe mais alta permitida. */ static void print ( List <? extends Animal > objs ) { for ( Animal obj : objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < Cao > ()); /* * SerVivo \u00e9 uma classe superior a Animal */ // print(new ArrayList<SerVivo>()); // ERRO! } }","title":"Upper Bounded Wildcards"},{"location":"java/linguagem/generics/#lower-bounded-wildcards","text":"Ao utilizarmos <? super Animal> Animal \u00e9 a classe de hierarquia mais baixa ( lower ) aceita como par\u00e2metro. Portanto dessa forma definimos o limite inferior para o tipo gen\u00e9rico. package _generics.exemplo_generics_wildcard_lower ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * O limite \u00e9 inferior, Animal \u00e9 a classe mais baixa permitida. */ static void print ( List <? super Animal > objs ) { for ( Animal obj : ( List < Animal > ) objs ) { System . out . println ( obj . getEspecies ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < SerVivo > ()); /* * Cao \u00e9 uma classe inferior a Animal */ // print(new ArrayList<Cao>()); // ERRO! } }","title":"Lower Bounded Wildcards"},{"location":"java/linguagem/generics/#unbounded-wildcards","text":"Utilizada quando precisamos de um tipo gen\u00e9rico mas n\u00e3o nos importamos com qual. package _generics.exemplo_generics_wildcard_unbounded ; import java.util.ArrayList ; import java.util.List ; class SerVivo { } class Animal extends SerVivo { String getEspecies () { return \"...\" ; } } class Cao extends Animal { } class Exemplo { /* * N\u00e3o se sabe o tipo de objeto, portanto n\u00e3o \u00e9 poss\u00edvel chamar o m\u00e9todo * getEspecies() de Animal. */ static void print ( List <?> objs ) { for ( Object obj : objs ) { // System.out.println(obj.getEspecies()); // ERRO! System . out . println ( obj . toString ()); } } public static void main ( String [] args ) { print ( new ArrayList < Animal > ()); print ( new ArrayList < Cao > ()); print ( new ArrayList < SerVivo > ()); } } A nota\u00e7\u00e3o <?> \u00e9 equivalente a <? extends Object> . Por isso nenhum valor pode ser inserido nesta lista a n\u00e3o ser null . List <?> objects = new ArrayList <> (); /* * Erro em tempo de compila\u00e7\u00e3o */ // objects.add(new Object()); // ERRO! // objects.add(new Cao()); // ERRO! Entretanto n\u00e3o se deve pensar no <?> como sendo a mesma coisa que a classe Object , pois com ela o mesmo exemplo seria v\u00e1lido. List < Object > objects = new ArrayList <> (); objects . add ( new Object ()); objects . add ( new Cao ());","title":"Unbounded Wildcards"},{"location":"java/linguagem/heranca/","text":"Heran\u00e7a \u00b6 Heran\u00e7a Introdu\u00e7\u00e3o Heran\u00e7a m\u00faltipla Classe abstrata Classe final Introdu\u00e7\u00e3o \u00b6 A heran\u00e7a \u00e9 um princ\u00edpio da POO que permite a cria\u00e7\u00e3o de novas classes a partir de outras previamente criadas. Essas novas classes s\u00e3o chamadas de subclasses, ou classes derivadas; e as classes j\u00e1 existentes, que deram origem \u00e0s subclasses, s\u00e3o chamadas de superclasses, ou classes base. Deste modo \u00e9 poss\u00edvel criar uma hierarquia dessas classes, tornando, assim, classes mais amplas e classes mais espec\u00edficas. Uma subclasse herda m\u00e9todos e campos de sua superclasse; apesar disso, pode escrev\u00ea-los novamente para uma forma mais espec\u00edfica de representar o comportamento do m\u00e9todo herdado. package exemplo_heranca ; class Pessoa { String nome ; int idade ; Pessoa ( String nome , int idade ) { this . nome = nome ; this . idade = idade ; } double tirarCopias ( int quantidade ) { return 0.10 * ( double ) quantidade ; } /* * A palavra especial \"final\" bloqueia sobrescrita do m\u00e9todo */ final String estudar ( String disciplina ) { return \"Estudando \" + disciplina ; } } class Aluno extends Pessoa { String matricula ; Aluno ( String nome , int idade ) { super ( nome , idade ); } /* * A nota\u00e7\u00e3o @Override n\u00e3o \u00e9 obrigat\u00f3ria, mas caso um m\u00e9todo esteja anotado, ele * necessariamente precisa estar reescrevendo um m\u00e9todo da classe m\u00e3e. */ @Override double tirarCopias ( int quantidade ) { return 0.07 * ( double ) quantidade ; } /* * Se o m\u00e9todo abaixo for usado ocorrer\u00e1 erro, pois o m\u00e9todo n\u00e3o pode ser * sobrescrito. */ // @Override // public final String estudar(String disciplina) {} // public String estudar(String disciplina) {} } public class Exemplo { public static void main ( String [] args ) { Aluno a = new Aluno ( \"Jose Francisco\" , 32 ); System . out . println ( \"Nome: \" + a . nome ); System . out . println ( \"Idade: \" + a . idade ); System . out . println ( \"Valor copias: R$\" + a . tirarCopias ( 100 )); System . out . println ( \"Estudando: \" + a . estudar ( \"Geografia\" )); } } // Saida: // > Nome: Jose Francisco // > Idade: 32 // > Valor copias: R$7.000000000000001 // > Estudando: Estudando Geografia A palavra-chave super \u00e9 usada para chamar um m\u00e9todo ou campo da superclasse imediata . N\u00e3o \u00e9 poss\u00edvel acessar com o super uma classe em um segundo n\u00edvel de hierarquia. Usando o super como m\u00e9todo, ser\u00e1 chamado o construtor da superclasse. E o comando super(...) deve vir antes de qualquer comando dentro do construtor. Atrav\u00e9s de heran\u00e7a \u00e9 poss\u00edvel chamar um m\u00e9todo mesmo que esteja em outros n\u00edveis na hierarquia de heran\u00e7a. O m\u00e9todo chamado ser\u00e1 o encontrado em menor n\u00edvel em rela\u00e7\u00e3o ao mesmos m\u00e9todos de n\u00edveis superiores. Uma vez que esse m\u00e9todo em menor n\u00edvel na hierarquia, sobrescreveu os demais. package exemplo_heranca_super ; class ClasseAvo { ClasseAvo () { System . out . println ( \"Av\u00f4\" ); } void diga () { System . out . println ( \"Sou o av\u00f4\" ); } void repita () { System . out . println ( \"Sou o av\u00f4!!!\" ); } } class ClassePai extends ClasseAvo { ClassePai () { System . out . println ( \"Pai\" ); } void diga () { System . out . println ( \"Sou o pai\" ); } } class ClasseFilho extends ClassePai { ClasseFilho () { System . out . println ( \"Filho\" ); } ClasseFilho ( String msg ) { System . out . println ( msg ); } void diga () { System . out . println ( \"Sou o filho\" ); } } class Exemplo extends ClasseFilho { /* * O super() no construtor n\u00e3o \u00e9 necess\u00e1rio, mas se for usado deve vir * no \u00ednicio do construtor. N\u00e3o h\u00e1 como chamar dois super(). Se n\u00e3o for * especificado qual o construtor da superclasse, ser\u00e1 chamado o construtor * padr\u00e3o (sem par\u00e2metros). */ Exemplo () { super ( \"Filho malcriado\" ); // super(); // ERRO! System . out . println ( \"Eu\\n\" ); } /* * O super est\u00e1 chamando o m\u00e9todo diga() da superclasse */ void diga () { System . out . println ( \"Sou eu\" ); super . diga (); } public static void main ( String [] args ) { Exemplo t = new Exemplo (); /* * Como o m\u00e9todo foi sobrescrito, ir\u00e1 chamar o seu pr\u00f3pio */ t . diga (); /* * Atrav\u00e9s de heran\u00e7a chama o m\u00e9todo da ClasseAvo */ t . repita (); } } // Saida // > Av\u00f4 // > Pai // > Filho malcriado // > Eu // > Sou eu // > Sou o filho // > Sou o av\u00f4!!! Heran\u00e7a m\u00faltipla \u00b6 Java n\u00e3o possui suporte para heran\u00e7a m\u00faltipla, mas isso pode ser contornado atrav\u00e9s do uso de interfaces. Interface package exemplo_heranca_multipla ; interface Calcular { default double calcular () { return 10 * 5.5 ; } } interface Cantar { default void cantar () { System . out . println ( \"La la la!\" ); } } /* * Heran\u00e7a multipla por meio de interfaces */ class Pessoa implements Calcular , Cantar { } class Exemplo { public static void main ( String [] args ) { Pessoa pessoa = new Pessoa (); pessoa . cantar (); System . out . println ( pessoa . calcular ()); } } // Saida: // > La la la! // > 55.0 Classe abstrata \u00b6 A palavra chave abstract impede que uma classe possa ser instanciada. Uma classe que herda uma classe abstrata \u00e9 obrigada a implementar os m\u00e9todos abstratos. Classes package exemplo_abstrata ; abstract class Abstract { String funcaoNaoAbstrata () { return \"m\u00e9todo n\u00e3o abstrato\" ; }; abstract String funcaoAbstrata (); } class Exemplo extends Abstract { /* * Obrigado a implementar os m\u00e9todos abstratos da classe pai */ String funcaoAbstrata () { return \"m\u00e9todo abstrato implementado\" ; } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . funcaoAbstrata ()); System . out . println ( t . funcaoNaoAbstrata ()); /* * N\u00e3o \u00e9 poss\u00edvel instanciar uma classe abstrata */ // Abstract a = new Abstract(); // ERRO! } } // Saida: // > m\u00e9todo abstrato implementado // > m\u00e9todo n\u00e3o abstrato Classe final \u00b6 Uma classe final , \u00e9 uma classe que n\u00e3o permite que seja criada subclasses dela. Ou seja, ela n\u00e3o pode ser herdada. package exemplo_final ; final class Exemplo { void funcaoNAbstrata () { System . out . println ( \"Fun\u00e7\u00e3o n\u00e3o abstrata\" ); } } /* * N\u00e3o pode haver heran\u00e7a de uma classe declarada como \"final\" */ // class Teste extends Exemplo { } // ERRO!","title":"Heran\u00e7a"},{"location":"java/linguagem/heranca/#heranca","text":"Heran\u00e7a Introdu\u00e7\u00e3o Heran\u00e7a m\u00faltipla Classe abstrata Classe final","title":"Heran\u00e7a"},{"location":"java/linguagem/heranca/#introducao","text":"A heran\u00e7a \u00e9 um princ\u00edpio da POO que permite a cria\u00e7\u00e3o de novas classes a partir de outras previamente criadas. Essas novas classes s\u00e3o chamadas de subclasses, ou classes derivadas; e as classes j\u00e1 existentes, que deram origem \u00e0s subclasses, s\u00e3o chamadas de superclasses, ou classes base. Deste modo \u00e9 poss\u00edvel criar uma hierarquia dessas classes, tornando, assim, classes mais amplas e classes mais espec\u00edficas. Uma subclasse herda m\u00e9todos e campos de sua superclasse; apesar disso, pode escrev\u00ea-los novamente para uma forma mais espec\u00edfica de representar o comportamento do m\u00e9todo herdado. package exemplo_heranca ; class Pessoa { String nome ; int idade ; Pessoa ( String nome , int idade ) { this . nome = nome ; this . idade = idade ; } double tirarCopias ( int quantidade ) { return 0.10 * ( double ) quantidade ; } /* * A palavra especial \"final\" bloqueia sobrescrita do m\u00e9todo */ final String estudar ( String disciplina ) { return \"Estudando \" + disciplina ; } } class Aluno extends Pessoa { String matricula ; Aluno ( String nome , int idade ) { super ( nome , idade ); } /* * A nota\u00e7\u00e3o @Override n\u00e3o \u00e9 obrigat\u00f3ria, mas caso um m\u00e9todo esteja anotado, ele * necessariamente precisa estar reescrevendo um m\u00e9todo da classe m\u00e3e. */ @Override double tirarCopias ( int quantidade ) { return 0.07 * ( double ) quantidade ; } /* * Se o m\u00e9todo abaixo for usado ocorrer\u00e1 erro, pois o m\u00e9todo n\u00e3o pode ser * sobrescrito. */ // @Override // public final String estudar(String disciplina) {} // public String estudar(String disciplina) {} } public class Exemplo { public static void main ( String [] args ) { Aluno a = new Aluno ( \"Jose Francisco\" , 32 ); System . out . println ( \"Nome: \" + a . nome ); System . out . println ( \"Idade: \" + a . idade ); System . out . println ( \"Valor copias: R$\" + a . tirarCopias ( 100 )); System . out . println ( \"Estudando: \" + a . estudar ( \"Geografia\" )); } } // Saida: // > Nome: Jose Francisco // > Idade: 32 // > Valor copias: R$7.000000000000001 // > Estudando: Estudando Geografia A palavra-chave super \u00e9 usada para chamar um m\u00e9todo ou campo da superclasse imediata . N\u00e3o \u00e9 poss\u00edvel acessar com o super uma classe em um segundo n\u00edvel de hierarquia. Usando o super como m\u00e9todo, ser\u00e1 chamado o construtor da superclasse. E o comando super(...) deve vir antes de qualquer comando dentro do construtor. Atrav\u00e9s de heran\u00e7a \u00e9 poss\u00edvel chamar um m\u00e9todo mesmo que esteja em outros n\u00edveis na hierarquia de heran\u00e7a. O m\u00e9todo chamado ser\u00e1 o encontrado em menor n\u00edvel em rela\u00e7\u00e3o ao mesmos m\u00e9todos de n\u00edveis superiores. Uma vez que esse m\u00e9todo em menor n\u00edvel na hierarquia, sobrescreveu os demais. package exemplo_heranca_super ; class ClasseAvo { ClasseAvo () { System . out . println ( \"Av\u00f4\" ); } void diga () { System . out . println ( \"Sou o av\u00f4\" ); } void repita () { System . out . println ( \"Sou o av\u00f4!!!\" ); } } class ClassePai extends ClasseAvo { ClassePai () { System . out . println ( \"Pai\" ); } void diga () { System . out . println ( \"Sou o pai\" ); } } class ClasseFilho extends ClassePai { ClasseFilho () { System . out . println ( \"Filho\" ); } ClasseFilho ( String msg ) { System . out . println ( msg ); } void diga () { System . out . println ( \"Sou o filho\" ); } } class Exemplo extends ClasseFilho { /* * O super() no construtor n\u00e3o \u00e9 necess\u00e1rio, mas se for usado deve vir * no \u00ednicio do construtor. N\u00e3o h\u00e1 como chamar dois super(). Se n\u00e3o for * especificado qual o construtor da superclasse, ser\u00e1 chamado o construtor * padr\u00e3o (sem par\u00e2metros). */ Exemplo () { super ( \"Filho malcriado\" ); // super(); // ERRO! System . out . println ( \"Eu\\n\" ); } /* * O super est\u00e1 chamando o m\u00e9todo diga() da superclasse */ void diga () { System . out . println ( \"Sou eu\" ); super . diga (); } public static void main ( String [] args ) { Exemplo t = new Exemplo (); /* * Como o m\u00e9todo foi sobrescrito, ir\u00e1 chamar o seu pr\u00f3pio */ t . diga (); /* * Atrav\u00e9s de heran\u00e7a chama o m\u00e9todo da ClasseAvo */ t . repita (); } } // Saida // > Av\u00f4 // > Pai // > Filho malcriado // > Eu // > Sou eu // > Sou o filho // > Sou o av\u00f4!!!","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/heranca/#heranca-multipla","text":"Java n\u00e3o possui suporte para heran\u00e7a m\u00faltipla, mas isso pode ser contornado atrav\u00e9s do uso de interfaces. Interface package exemplo_heranca_multipla ; interface Calcular { default double calcular () { return 10 * 5.5 ; } } interface Cantar { default void cantar () { System . out . println ( \"La la la!\" ); } } /* * Heran\u00e7a multipla por meio de interfaces */ class Pessoa implements Calcular , Cantar { } class Exemplo { public static void main ( String [] args ) { Pessoa pessoa = new Pessoa (); pessoa . cantar (); System . out . println ( pessoa . calcular ()); } } // Saida: // > La la la! // > 55.0","title":"Heran\u00e7a m\u00faltipla"},{"location":"java/linguagem/heranca/#classe-abstrata","text":"A palavra chave abstract impede que uma classe possa ser instanciada. Uma classe que herda uma classe abstrata \u00e9 obrigada a implementar os m\u00e9todos abstratos. Classes package exemplo_abstrata ; abstract class Abstract { String funcaoNaoAbstrata () { return \"m\u00e9todo n\u00e3o abstrato\" ; }; abstract String funcaoAbstrata (); } class Exemplo extends Abstract { /* * Obrigado a implementar os m\u00e9todos abstratos da classe pai */ String funcaoAbstrata () { return \"m\u00e9todo abstrato implementado\" ; } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . funcaoAbstrata ()); System . out . println ( t . funcaoNaoAbstrata ()); /* * N\u00e3o \u00e9 poss\u00edvel instanciar uma classe abstrata */ // Abstract a = new Abstract(); // ERRO! } } // Saida: // > m\u00e9todo abstrato implementado // > m\u00e9todo n\u00e3o abstrato","title":"Classe abstrata"},{"location":"java/linguagem/heranca/#classe-final","text":"Uma classe final , \u00e9 uma classe que n\u00e3o permite que seja criada subclasses dela. Ou seja, ela n\u00e3o pode ser herdada. package exemplo_final ; final class Exemplo { void funcaoNAbstrata () { System . out . println ( \"Fun\u00e7\u00e3o n\u00e3o abstrata\" ); } } /* * N\u00e3o pode haver heran\u00e7a de uma classe declarada como \"final\" */ // class Teste extends Exemplo { } // ERRO!","title":"Classe final"},{"location":"java/linguagem/interface/","text":"Interface \u00b6 Interface Introdu\u00e7\u00e3o Interfaces m\u00faltiplas Heran\u00e7a em interfaces Introdu\u00e7\u00e3o \u00b6 Interface \u00e9 um recurso da orienta\u00e7\u00e3o a objeto utilizado em Java que define a\u00e7\u00f5es que devem ser obrigatoriamente executadas, mas que cada classe pode executar de forma diferente. As interfaces s\u00e3o padr\u00f5es definidos atrav\u00e9s de contratos ou especifica\u00e7\u00f5es. Um contrato define um determinado conjunto de m\u00e9todos que ser\u00e3o implementados nas classes que assinarem esse contrato. Uma interface \u00e9 100% abstrata, ou seja, os seus m\u00e9todos s\u00e3o definidos como abstract , e as vari\u00e1veis por padr\u00e3o s\u00e3o sempre constantes ( static final ). Como a linguagem Java n\u00e3o tem heran\u00e7a m\u00faltipla, as interfaces ajudam nessa quest\u00e3o, pois uma classe pode herdada apenas uma classe, mas pode implementar in\u00fameras interfaces. As classes que forem implementar uma interface ter\u00e3o de adicionar todos os m\u00e9todos da interface ou se transformar em uma classe abstrata. - Uma interface n\u00e3o \u00e9 considerada uma classe e sim uma entidade. - Diferente de classes abstratas, h\u00e1 como criar m\u00e9todos `default` que possuem corpo. - Seus m\u00e9todos s\u00e3o implicitamente `public` e `abstract`. - M\u00e9todos `static` devem ter corpo e n\u00e3o s\u00e3o abstratos, ou seja, n\u00e3o obriga a sua implementa\u00e7\u00e3o. - N\u00e3o h\u00e1 como fazer uma inst\u00e2ncia de uma interface e nem como criar um construtor. - Funcionam como um tipo de \"contrato\", onde s\u00e3o especificados os campos, m\u00e9todos e fun\u00e7\u00f5es que as classes que implementem essa interface s\u00e3o obrigadas a implementar. - J\u00e1 que java n\u00e3o suporta heran\u00e7as m\u00faltiplas, as interfaces s\u00e3o usadas para implement\u00e1-las. package exemplo_interface ; interface Interface { /* * Os m\u00e9todos aceitam somente o modificador de acesso public ou default. * Entretanto, em uma interface, todos os m\u00e9todos s\u00e3o public, e as vari\u00e1veis s\u00e3o * public e static, mesmo quando n\u00e3o declarados. */ public abstract boolean feliz (); // public abstract s\u00e3o desnecess\u00e1rios String hello = \"Vari\u00e1vel est\u00e1tica\" ; String dizer ( String msg ); /* * A partir do Java 8, \u00e9 poss\u00edvel criar m\u00e9todos com corpo padr\u00e3o, caso n\u00e3o seja * implementado. */ default void cantar ( String msg ) { // public impl\u00edcito System . out . println ( msg ); } /* * M\u00e9todos est\u00e1ticos sempre possuem corpos e N\u00c3O s\u00e3o abstratos, ou seja, n\u00e3o * obriga a sua implata\u00e7\u00e3o. */ static void estatico ( String msg ) { System . out . println ( msg ); } } class Exemplo implements Interface { /* * Todos m\u00e9todos implementados devem usar o modificador de acesso public */ public boolean feliz () { return true ; } public String dizer ( String msg ) { return msg ; } /* * N\u00e3o \u00e9 obrigat\u00f3rio declarar m\u00e9todos default, pois possuem um corpo padr\u00e3o. */ // public void cantar(String msg) {} public static void main ( String [] args ) { /* * As vari\u00e1veis s\u00e3o sempre est\u00e1ticas */ System . out . println ( Interface . hello ); Interface . estatico ( \"M\u00e9todo est\u00e1tico\" ); /* * Depois que uma classe Java implementa uma interface Java, \u00e9 poss\u00edvel usar uma * inst\u00e2ncia dessa classe como uma inst\u00e2ncia dessa interface. */ Interface minhaInterface = new Exemplo (); String dito = minhaInterface . dizer ( \"Implementado\" ); System . out . println ( dito ); } } // Saida: // > Vari\u00e1vel est\u00e1tica // > M\u00e9todo est\u00e1tico // > Implementado Interfaces m\u00faltiplas \u00b6 package exemplo_interface_multipla ; interface InterfaceA { void pensar (); void dizer ( String msg ); default void cantar () { System . out . println ( \"Figaro!\" ); } } interface InterfaceB { void pensar (); void dizer (); /* * N\u00e3o pode haver dois m\u00e9todos default com mesmo nome sendo implementados pela * classe Exemplo */ // default void cantar() { System.out.println(\"La la!\"); } } class Exemplo implements InterfaceA , InterfaceB { public void pensar () { System . out . println ( \"...\" ); } public void dizer () { System . out . println ( \"Ol\u00e1\" ); } public void dizer ( String msg ) { System . out . println ( msg ); } public static void main ( String [] args ) { Exemplo minhaInterface = new Exemplo (); minhaInterface . pensar (); minhaInterface . dizer (); minhaInterface . dizer ( \"Oi\" ); } } // Saida: // > ... // > Ol\u00e1 // > Oi Heran\u00e7a em interfaces \u00b6 package exemplo_interface_heranca ; interface InterfaceA { void pensar (); } interface InterfaceB extends InterfaceA { void dizer (); } class Exemplo implements InterfaceB { public void pensar () { System . out . println ( \"...\" ); } public void dizer () { System . out . println ( \"Ol\u00e1\" ); } public static void main ( String [] args ) { Exemplo minhaInterface = new Exemplo (); minhaInterface . pensar (); minhaInterface . dizer (); } } // Saida: // > ... // > Ol\u00e1","title":"Interface"},{"location":"java/linguagem/interface/#interface","text":"Interface Introdu\u00e7\u00e3o Interfaces m\u00faltiplas Heran\u00e7a em interfaces","title":"Interface"},{"location":"java/linguagem/interface/#introducao","text":"Interface \u00e9 um recurso da orienta\u00e7\u00e3o a objeto utilizado em Java que define a\u00e7\u00f5es que devem ser obrigatoriamente executadas, mas que cada classe pode executar de forma diferente. As interfaces s\u00e3o padr\u00f5es definidos atrav\u00e9s de contratos ou especifica\u00e7\u00f5es. Um contrato define um determinado conjunto de m\u00e9todos que ser\u00e3o implementados nas classes que assinarem esse contrato. Uma interface \u00e9 100% abstrata, ou seja, os seus m\u00e9todos s\u00e3o definidos como abstract , e as vari\u00e1veis por padr\u00e3o s\u00e3o sempre constantes ( static final ). Como a linguagem Java n\u00e3o tem heran\u00e7a m\u00faltipla, as interfaces ajudam nessa quest\u00e3o, pois uma classe pode herdada apenas uma classe, mas pode implementar in\u00fameras interfaces. As classes que forem implementar uma interface ter\u00e3o de adicionar todos os m\u00e9todos da interface ou se transformar em uma classe abstrata. - Uma interface n\u00e3o \u00e9 considerada uma classe e sim uma entidade. - Diferente de classes abstratas, h\u00e1 como criar m\u00e9todos `default` que possuem corpo. - Seus m\u00e9todos s\u00e3o implicitamente `public` e `abstract`. - M\u00e9todos `static` devem ter corpo e n\u00e3o s\u00e3o abstratos, ou seja, n\u00e3o obriga a sua implementa\u00e7\u00e3o. - N\u00e3o h\u00e1 como fazer uma inst\u00e2ncia de uma interface e nem como criar um construtor. - Funcionam como um tipo de \"contrato\", onde s\u00e3o especificados os campos, m\u00e9todos e fun\u00e7\u00f5es que as classes que implementem essa interface s\u00e3o obrigadas a implementar. - J\u00e1 que java n\u00e3o suporta heran\u00e7as m\u00faltiplas, as interfaces s\u00e3o usadas para implement\u00e1-las. package exemplo_interface ; interface Interface { /* * Os m\u00e9todos aceitam somente o modificador de acesso public ou default. * Entretanto, em uma interface, todos os m\u00e9todos s\u00e3o public, e as vari\u00e1veis s\u00e3o * public e static, mesmo quando n\u00e3o declarados. */ public abstract boolean feliz (); // public abstract s\u00e3o desnecess\u00e1rios String hello = \"Vari\u00e1vel est\u00e1tica\" ; String dizer ( String msg ); /* * A partir do Java 8, \u00e9 poss\u00edvel criar m\u00e9todos com corpo padr\u00e3o, caso n\u00e3o seja * implementado. */ default void cantar ( String msg ) { // public impl\u00edcito System . out . println ( msg ); } /* * M\u00e9todos est\u00e1ticos sempre possuem corpos e N\u00c3O s\u00e3o abstratos, ou seja, n\u00e3o * obriga a sua implata\u00e7\u00e3o. */ static void estatico ( String msg ) { System . out . println ( msg ); } } class Exemplo implements Interface { /* * Todos m\u00e9todos implementados devem usar o modificador de acesso public */ public boolean feliz () { return true ; } public String dizer ( String msg ) { return msg ; } /* * N\u00e3o \u00e9 obrigat\u00f3rio declarar m\u00e9todos default, pois possuem um corpo padr\u00e3o. */ // public void cantar(String msg) {} public static void main ( String [] args ) { /* * As vari\u00e1veis s\u00e3o sempre est\u00e1ticas */ System . out . println ( Interface . hello ); Interface . estatico ( \"M\u00e9todo est\u00e1tico\" ); /* * Depois que uma classe Java implementa uma interface Java, \u00e9 poss\u00edvel usar uma * inst\u00e2ncia dessa classe como uma inst\u00e2ncia dessa interface. */ Interface minhaInterface = new Exemplo (); String dito = minhaInterface . dizer ( \"Implementado\" ); System . out . println ( dito ); } } // Saida: // > Vari\u00e1vel est\u00e1tica // > M\u00e9todo est\u00e1tico // > Implementado","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/interface/#interfaces-multiplas","text":"package exemplo_interface_multipla ; interface InterfaceA { void pensar (); void dizer ( String msg ); default void cantar () { System . out . println ( \"Figaro!\" ); } } interface InterfaceB { void pensar (); void dizer (); /* * N\u00e3o pode haver dois m\u00e9todos default com mesmo nome sendo implementados pela * classe Exemplo */ // default void cantar() { System.out.println(\"La la!\"); } } class Exemplo implements InterfaceA , InterfaceB { public void pensar () { System . out . println ( \"...\" ); } public void dizer () { System . out . println ( \"Ol\u00e1\" ); } public void dizer ( String msg ) { System . out . println ( msg ); } public static void main ( String [] args ) { Exemplo minhaInterface = new Exemplo (); minhaInterface . pensar (); minhaInterface . dizer (); minhaInterface . dizer ( \"Oi\" ); } } // Saida: // > ... // > Ol\u00e1 // > Oi","title":"Interfaces m\u00faltiplas"},{"location":"java/linguagem/interface/#heranca-em-interfaces","text":"package exemplo_interface_heranca ; interface InterfaceA { void pensar (); } interface InterfaceB extends InterfaceA { void dizer (); } class Exemplo implements InterfaceB { public void pensar () { System . out . println ( \"...\" ); } public void dizer () { System . out . println ( \"Ol\u00e1\" ); } public static void main ( String [] args ) { Exemplo minhaInterface = new Exemplo (); minhaInterface . pensar (); minhaInterface . dizer (); } } // Saida: // > ... // > Ol\u00e1","title":"Heran\u00e7a em interfaces"},{"location":"java/linguagem/introducao/","text":"Introdu\u00e7\u00e3o \u00b6 Introdu\u00e7\u00e3o Linguagem Compila\u00e7\u00e3o Cria\u00e7\u00e3o de execut\u00e1vel Comando -d Comando -ch Execu\u00e7\u00e3o Package Nomenclatura Wrappers Termos Campo Campo Propriedade Vari\u00e1vel Par\u00e2metro Argumento Vari\u00e2ncia POJO JavaBean T\u00f3picos para o estudo da linguagem Links Linguagem \u00b6 Java \u00e9 uma linguagem de programa\u00e7\u00e3o orientada a objetos desenvolvida na d\u00e9cada de 90 por uma equipe de programadores chefiada por James Gosling, na empresa Sun Microsystems. Em 2008 o Java foi adquirido pela empresa Oracle Corporation. A linguagem Java \u00e9 compilada para um bytecode que \u00e9 interpretado por uma m\u00e1quina virtual (Java Virtual Machine - JVM). Compila\u00e7\u00e3o \u00b6 A compila\u00e7\u00e3o dos arquivos .java deve ser feita a partir do diret\u00f3rio raiz do projeto. Compilando arquivos j\u00e1 separados em diret\u00f3rios referentes aos pacotes: javac pacote/Arquivo1.java pacote/Arquivo2.java ou javac pacote/*.java Se os arquivos n\u00e3o tiverem separados em diret\u00f3rios referentes ao pacotes, \u00e9 usado o par\u00e2metro -d que ir\u00e1 criar os diret\u00f3rios automaticamente. javac -d . Arquivo1.java Arquivo2.java ou javac -d . *.java Cria\u00e7\u00e3o de execut\u00e1vel \u00b6 Cria\u00e7\u00e3o do arquivo execut\u00e1vel .jar . Com o arquivo externo MANIFEST.mf : Manifest-Version: 1.0 Main-Class: br.com.teste.Arquivo SplashScreen-Image: logo.png jar -cvfm Arquivo.jar MANIFEST.mf Arquivo.class Sem o arquivo MANIFEST.mf , estabelecendo o ponto de entrada: jar -cvfe Arquivo.jar <MainClass> Arquivo.class Comando -d \u00b6 O comando -d indica\u00e7\u00e3o do destino de onde o .class ser\u00e1 gerado. javac -d bin Arquivo.java # Arquivo.class ser\u00e1 gerado no diret\u00f3rio bin Comando -ch \u00b6 Classpaths s\u00e3o vari\u00e1veis de localiza\u00e7\u00e3o de um diret\u00f3rio que podem conter as classes que ser\u00e3o necess\u00e1rias para a execu\u00e7\u00e3o do sistema. -ch /src/teste1/dir1:/src/teste2/dir2 No exemplo, ser\u00e1 feita uma busca nos diret\u00f3rios /src/teste1/dir1 e /src/teste2/dir2 para procurar as classes necess\u00e1rias para a execu\u00e7\u00e3o do comando. Execu\u00e7\u00e3o \u00b6 Execu\u00e7\u00e3o do arquivo .class java Arquivo Execu\u00e7\u00e3o do arquivo .jar java Arquivo.jar Package \u00b6 Nomenclatura \u00b6 Os nomes dos pacotes s\u00e3o escritos em letras min\u00fasculas para evitar conflito com os nomes de classes ou interfaces. As empresas usam seu nome de dom\u00ednio da Internet invertida para come\u00e7ar seus nomes de pacotes - por exemplo, com.example.mypackage para um pacote chamado mypackage criado por um programador em example.com . As colis\u00f5es de nomes que ocorrem dentro de uma \u00fanica empresa precisam ser tratadas por conven\u00e7\u00e3o dentro dessa empresa, talvez incluindo a regi\u00e3o ou o nome do projeto ap\u00f3s o nome da empresa (por exemplo, com.example.region.mypackage ). Pacotes na pr\u00f3pria linguagem Java come\u00e7am com java. ou javax. Em alguns casos, o nome de dom\u00ednio da Internet pode n\u00e3o ser um nome de pacote v\u00e1lido. Isso pode ocorrer se o nome do dom\u00ednio contiver um h\u00edfen ou outro caractere especial, se o nome do pacote come\u00e7ar com um d\u00edgito ou outro caractere ilegal para usar como o in\u00edcio de um nome Java ou se o nome do pacote contiver uma palavra-chave reservada Java como \"int\". Nesse caso, a conven\u00e7\u00e3o sugerida \u00e9 adicionar um sublinhado. Por exemplo: Nome do dom\u00ednio Nome do prefixo do pacote hyphenated-name.example.org org.example.hyphenated_name example.int int_.example 123name.example.com com.example._123name Wrappers \u00b6 O uso de classes wrappers \u00e9 importante quando precisamos encapsular tipos primitivos, de modo que eles possam participar de funcionalidades relacionadas \u00e0 orienta\u00e7\u00e3o a objetos. Um exemplo disso \u00e9 seu uso em opera\u00e7\u00f5es com collections . Tipos primitivos em Java a tornam uma linguagem h\u00edbrida. Por\u00e9m, as classes wrappers contornam esse problema, pois permitem que tipos primitivos sejam encapsulados e possam ser empregados em opera\u00e7\u00f5es que exijam o uso de objetos, tais como em collections . Cada tipo primitivo em Java possui uma classe empacotadora correspondente: Primitivo Classe Wrapper Argumentos do construtor boolean Boolean boolean, String Byte Byte byte, String Char Character char double Double double, String Float Float float, double, String Int Integer ... Convertendo um wrapper em um tipo primitivo: int i = 20 ; Integer iw = Integer . valueOf ( i ); // ou Integer iw = i ; Convertendo um tipo primitivo em wrapper : Integer iw = 20 ; int i = Integer . valueOf ( iw ); // ou int i = iw . intValue (); A compara\u00e7\u00e3o entre wrappers \u00e9 feita usando o m\u00e9todo equals() . O operador == compara apenas a refer\u00eancia do objeto (endere\u00e7o de mem\u00f3ria). Integer a = 20 ; Integer b = 20 ; a . equals ( b ); // true a == b ; // false Termos \u00b6 Campo \u00b6 Campo (em ingl\u00eas, field) algumas vezes chamado tamb\u00e9m de vari\u00e1vel de classe ou de inst\u00e2ncia, \u00e9 o que guarda um estado do objeto. \u00c9 uma das formas de se criar um campo. Essencialmente \u00e9 uma vari\u00e1vel. \u00c9 um mecanismo concreto e existente nas implementa\u00e7\u00f5es das linguagens e outras ferramentas. Um campo Java \u00e9 um bloco de mem\u00f3ria que possui um nome, tipo e tamanho que correspondem a ele. private String name = \"Marcin\" ; Campo \u00b6 Define qualidade (caracter\u00edstica) de alguma parte ou caracter\u00edstica de um objeto (uma parte do c\u00f3digo, por exemplo). \u00c9 um metadado (adjetivo) e n\u00e3o o dado, como o campo. \u00c9 uma caracter\u00edstica em espec\u00edfico que um objeto ter\u00e1, mas n\u00e3o se define bem como esta caracter\u00edstica ser\u00e1 dispon\u00edvel no objeto. N\u00e3o importa se ser\u00e1 um campo, uma propriedade, um m\u00e9todo, ou outra coisa, ou at\u00e9 um conjunto desses mecanismos. Por exemplo, uma pessoa pode ter como campos, um nome e um endere\u00e7o. J\u00e1 os campos poderiam ser: nome, sobrenome, rua, bairro, n\u00famero, etc. Propriedade \u00b6 \u00c9 um membro de uma classe que fornece uma informa\u00e7\u00e3o sobre o objeto/classe. Uma propriedade Java tamb\u00e9m \u00e9 muito parecida com um campo. A diferen\u00e7a real est\u00e1 no escopo pretendido. Os campos devem ser privados ou protegidos no escopo, o que significa que o acesso \u00e9 restrito. As propriedades devem ter escopo p\u00fablico, o que significa que o acesso n\u00e3o \u00e9 restrito. Podemos pensar que em Java a propriedade em si \u00e9 um m\u00e9todo (geralmente getters e setters). Muitas vezes ela acessa o estado que est\u00e1 efetivamente em um campo. private String name = \"Marcin\" ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } Vari\u00e1vel \u00b6 Uma vari\u00e1vel \u00e9 o nome dado a um local de mem\u00f3ria. \u00c9 a unidade b\u00e1sica de armazenamento em um programa. Pode ser sin\u00f4nimo de campo. Par\u00e2metro \u00b6 Par\u00e2metro \u00e9 a vari\u00e1vel que ir\u00e1 receber um valor em uma fun\u00e7\u00e3o (ou m\u00e9todo). O par\u00e2metro faz parte da assinatura do m\u00e9todo. public void metodo ( String parametroA , String parametroB , String parametroC ) {} Argumento \u00b6 Argumento \u00e9 o valor (que pode originar de uma vari\u00e1vel ou express\u00e3o) que \u00e9 passado para a fun\u00e7\u00e3o (ou m\u00e9todo) durante a sua chamada. String argumentoA ; String argumentoB ; /* * Passando 3 argumentos para o m\u00e9todo */ metodo ( argumentoA , argumentoB , ' arguemntoC ' ) {} Vari\u00e2ncia \u00b6 No contexto da programa\u00e7\u00e3o, vari\u00e2ncia descreve as propriedades de uma estrutura variar dentro de uma hierarquia de tipos. public class X { Object getValue () { return null ; } } public class Y extends X { String getValue () { return null ; } } Existem tr\u00eas tipos de vari\u00e2ncia: Covari\u00e2ncia : significa que se a classe Y \u00e9 mais espec\u00edfica que X ( Y < X ) ent\u00e3o qualquer m\u00e9todo de Y que fa\u00e7a override a um m\u00e9todo de X tem de retornar um tipo igual ou mais espec\u00edfico . Neste caso, o tipo de retorno do m\u00e9todo que faz override \u00e9 String , que \u00e9 mais espec\u00edfico que Object . Contravari\u00e2ncia : contravari\u00e2ncia \u00e9 efetivamente o inverso de covari\u00e2ncia. Significa que se a classe Y \u00e9 mais espec\u00edfica que X ( Y < X ) ent\u00e3o qualquer m\u00e9todo de Y que fa\u00e7a override a um m\u00e9todo de X tem de retornar um tipo igual ou mais gen\u00e9rico . Em Java n\u00e3o h\u00e1 contravari\u00e2ncia e overriding de m\u00e9todos \u00e9 sempre invariante. No entanto poss\u00edvel ter contravari\u00e2ncia usando wildcards de generics ( <? super Classe> ). Invari\u00e2ncia : n\u00e3o h\u00e1 flex\u00e3o de tipos. Em Java overriding de m\u00e9todos \u00e9 invariante, ou seja, para se redefinir um m\u00e9todo numa subclasse, os par\u00e2metros t\u00eam de ser exatamente do mesmo tipo da superclasse. public class A { boolean equals ( A object ) { return true ; } } Como o overriding \u00e9 invariante, n\u00e3o estamos na realidade fazendo override do m\u00e9todo boolean equals(Object o) mas sim overload , adicionando um novo m\u00e9todo com outra assinatura. A solu\u00e7\u00e3o desde Java 5 \u00e9 adicionar a anota\u00e7\u00e3o @Override que vai permitir que o compilador detecte estes casos e informe que n\u00e3o estamos redefinindo um m\u00e9todo. POJO \u00b6 Plain Old Java Object (tradu\u00e7\u00e3o, Velho e Simples Objeto Java) \u00e9 um referencia a objetos que n\u00e3o dependem da heran\u00e7a de interfaces ou classes de frameworks externos. De maneira ideal, um POJO \u00e9 um objeto Java n\u00e3o vinculado a nenhuma restri\u00e7\u00e3o al\u00e9m daquelas impostas pela Java Language Specification ; ou seja, um POJO n\u00e3o deve ter que: Estenda classes pr\u00e9-especificadas, como em: public class Foo extends javax . servlet . http . HttpServlet { ... Implemente interfaces pr\u00e9-especificadas, como em: public class Bar implements javax . ejb . EntityBean { ... Cont\u00eam anota\u00e7\u00f5es pr\u00e9-especificadas, como em: @javax.persistence.Entity public class Baz { ... O c\u00f3digo abaixo exemplifica um POJO que segue o padr\u00e3o JavaBean: public class Carro implements java . io . Serializable { private String nome ; private String cor ; public Carro () {} public Carro ( String nome , String cor ) { this . nome = nome ; this . cor = cor ; } public String getCor () { return cor ; } public void setCor ( String cor ) { this . cor = cor ; } public String getNome () { return nome ; } public void setNome ( String nome ) { this . nome = nome ; } } JavaBean \u00b6 Um JavaBean (ou Bean) \u00e9 um POJO que \u00e9 serializ\u00e1vel, possui um construtor sem argumento e permite acesso a propriedades usando m\u00e9todos getter e setter que seguem uma conven\u00e7\u00e3o de nomenclatura simples. T\u00f3picos para o estudo da linguagem \u00b6 Concepts from core Java OOPS concepts (Data Abstraction, Encapsulation, Inheritance, Polymorphism) Basic Java constructs like loops and data types String handling Collection framework Multithreading Exception handling Generics Synchronisation Serialization & De-serialization Concurrent collection Core Java Programming Introduction of Java Introduction to Java; features of Java Comparison with C and C++ Download and install JDK/JRE (Environment variables set up) The JDK Directory Structure First Java Program through command prompt First Java Program through Eclipse/IntelliJ/whatever-editor-you-want Data types and Operators Primitive Datatypes, Declarations, Ranges Variable Names Conventions Numeric Literals, Character Literals String Literals Arrays(One dimensional; two- dimensional) Array of Object References Accessing arrays, manipulating arrays Enumerated Data Types Non-Primitive Datatypes Defining a class, variable and method in Java Method Signature; method calls Expressions in Java; introduction to various operators Assignment Operator Arithmetic Operators Relational Operators Logical Operators Conditional Operators Operator Precedence Implicit Type Conversions Upcasting and downcasting Strict typing Type conversion Control Flow statements Statements and it's various categories in Java if, if-else, if-else-if switch case for statement(old vs enhanced) while and do-while loops The continue Statement; labelled continue statement The break Statement; labelled break statement return statement OOPS and its application in Java Classes and Objects Defining a class;Defining instance variables and methods Creating objects out of a class Method calls via object references Abstraction Interfaces and Abstract classes Abstract and non-abstract methods Inheritance extends and implements keywords in Java Super class and Sub class this keyword, super keyword in Java for inheritance Concrete classes in Java Polymorphism Compile time polymorphism -- Overloading of methods Run time polymorphism -- Overriding of methods Method Overriding rules and method overloading rules Introduction to Object class and it's methods Encapsulation Protection of data Java Bean, POJO Getters/Setters Memory management in Java Heap Stack Packages Need for packages What are packages; package declaration in Java Import statement in Java How do packages resolve name clashes? Access Modifiers in Java What are access modifiers? Default Protected Private Public Miscellaneous Var-Args Reference variables, local variables, instance variables Memory allocations to variables Double equals operator(==) operator for primitives and objects toString() method on an object Statics Static variables and methods Static imports Static initialization blocks; instance initialization blocks Static concept in inheritance Constructors What are Constructors? Properties of Constructors Default and Parameterized Constructors Rules for constructor implementation Constructor Chaining this call; super call for constructors Constructors for Enumerated Data Types Constructors concept for Abstract classes and interfaces Exceptions in Java What are Exceptions? Need for exceptions How can Exceptions be coded in Java? API heirarchy for Exceptions Types of Exceptions Keywords in Exception API: try , catch , finally , throw , throws Rules for coding Exceptions Declaring Exceptions Defining and Throwing Exceptions Errors and Runtime Exceptions Custom Exception Strings in Java What are Strings? String heap memory and Constant Pool memory Immutability in Strings String creation on heap and constant pool Method APIs on String; operations on Strings Mutability of String Objects - StringBuilder and StringBuffer Collection Framework in Java The Collections Framework The Set Interface Set Implementation Classes The List Interface List Implementation Classes The Map Interface Map Implementation Classes Queue Interface Queue Implementation classes Sorting collections using utility methods equals() and hashCode contract in Java collections Generics Generics for Collections Generics for class Generics for methods Input-Output in Java What is a stream? Overview of Streams Bytes vs. Characters Overview of the entire Java IO API Reading a file; writing to a file using various APIs Reading User input from console PrintWriter Class Serialization Object Serialization Serializable Interface Serialization API ObjectInputStream and ObjectOutput Transient Fields readObject and writeObject Inner Classes Inner Classes Member Classes Local Classes Anonymous Classes Static Nested Classes Threads in Java Non-Threaded Applications Threaded Applications Process based multitasking Vs Thread based multitasking Thread API in Java Creating Threads States of a Thread Synchronization for threads; static and non-static synchronized methods; blocks; concept - of object and class locks Coordination between threads - wait, notify and notifyAll methods for inter-thread - communication JDBC What is JDBC; introduction; everything about JDBC create database and a schema Writing JDBC code to connect to DB CRUD Operations with JDBC Java 8 Features Java Lambda Expressions Java Method References Java Functional Interfaces Java Stream Tutorial Java Stream Filter Tutorial Java Interface changes \u2013 introduction of default and static methods Java forEach Java Stream Collectors class Java StringJoiner class Java Optional class Java Arrays Parallel Sort Java 9 Features Java 9 \u2013 REPL (JShell) Factory methods to create immutable List, Set and Map Introduction of Private methods in interfaces Try with resources enhancements Anonymous inner class and diamond operator SafeVarargs Annotation (with examples) Java 9 \u2013 Stream API Enhancements (With Examples) Java 9 Modules Links \u00b6 Linguagem Java https://www.javatpoint.com/java-tutorial Projetos em Java em destaque https://github.com/Vedenin/useful-java-links https://githublists.com/lists/akullpp/awesome-java","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/introducao/#introducao","text":"Introdu\u00e7\u00e3o Linguagem Compila\u00e7\u00e3o Cria\u00e7\u00e3o de execut\u00e1vel Comando -d Comando -ch Execu\u00e7\u00e3o Package Nomenclatura Wrappers Termos Campo Campo Propriedade Vari\u00e1vel Par\u00e2metro Argumento Vari\u00e2ncia POJO JavaBean T\u00f3picos para o estudo da linguagem Links","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/introducao/#linguagem","text":"Java \u00e9 uma linguagem de programa\u00e7\u00e3o orientada a objetos desenvolvida na d\u00e9cada de 90 por uma equipe de programadores chefiada por James Gosling, na empresa Sun Microsystems. Em 2008 o Java foi adquirido pela empresa Oracle Corporation. A linguagem Java \u00e9 compilada para um bytecode que \u00e9 interpretado por uma m\u00e1quina virtual (Java Virtual Machine - JVM).","title":"Linguagem"},{"location":"java/linguagem/introducao/#compilacao","text":"A compila\u00e7\u00e3o dos arquivos .java deve ser feita a partir do diret\u00f3rio raiz do projeto. Compilando arquivos j\u00e1 separados em diret\u00f3rios referentes aos pacotes: javac pacote/Arquivo1.java pacote/Arquivo2.java ou javac pacote/*.java Se os arquivos n\u00e3o tiverem separados em diret\u00f3rios referentes ao pacotes, \u00e9 usado o par\u00e2metro -d que ir\u00e1 criar os diret\u00f3rios automaticamente. javac -d . Arquivo1.java Arquivo2.java ou javac -d . *.java","title":"Compila\u00e7\u00e3o"},{"location":"java/linguagem/introducao/#criacao-de-executavel","text":"Cria\u00e7\u00e3o do arquivo execut\u00e1vel .jar . Com o arquivo externo MANIFEST.mf : Manifest-Version: 1.0 Main-Class: br.com.teste.Arquivo SplashScreen-Image: logo.png jar -cvfm Arquivo.jar MANIFEST.mf Arquivo.class Sem o arquivo MANIFEST.mf , estabelecendo o ponto de entrada: jar -cvfe Arquivo.jar <MainClass> Arquivo.class","title":"Cria\u00e7\u00e3o de execut\u00e1vel"},{"location":"java/linguagem/introducao/#comando-d","text":"O comando -d indica\u00e7\u00e3o do destino de onde o .class ser\u00e1 gerado. javac -d bin Arquivo.java # Arquivo.class ser\u00e1 gerado no diret\u00f3rio bin","title":"Comando -d"},{"location":"java/linguagem/introducao/#comando-ch","text":"Classpaths s\u00e3o vari\u00e1veis de localiza\u00e7\u00e3o de um diret\u00f3rio que podem conter as classes que ser\u00e3o necess\u00e1rias para a execu\u00e7\u00e3o do sistema. -ch /src/teste1/dir1:/src/teste2/dir2 No exemplo, ser\u00e1 feita uma busca nos diret\u00f3rios /src/teste1/dir1 e /src/teste2/dir2 para procurar as classes necess\u00e1rias para a execu\u00e7\u00e3o do comando.","title":"Comando -ch"},{"location":"java/linguagem/introducao/#execucao","text":"Execu\u00e7\u00e3o do arquivo .class java Arquivo Execu\u00e7\u00e3o do arquivo .jar java Arquivo.jar","title":"Execu\u00e7\u00e3o"},{"location":"java/linguagem/introducao/#package","text":"","title":"Package"},{"location":"java/linguagem/introducao/#nomenclatura","text":"Os nomes dos pacotes s\u00e3o escritos em letras min\u00fasculas para evitar conflito com os nomes de classes ou interfaces. As empresas usam seu nome de dom\u00ednio da Internet invertida para come\u00e7ar seus nomes de pacotes - por exemplo, com.example.mypackage para um pacote chamado mypackage criado por um programador em example.com . As colis\u00f5es de nomes que ocorrem dentro de uma \u00fanica empresa precisam ser tratadas por conven\u00e7\u00e3o dentro dessa empresa, talvez incluindo a regi\u00e3o ou o nome do projeto ap\u00f3s o nome da empresa (por exemplo, com.example.region.mypackage ). Pacotes na pr\u00f3pria linguagem Java come\u00e7am com java. ou javax. Em alguns casos, o nome de dom\u00ednio da Internet pode n\u00e3o ser um nome de pacote v\u00e1lido. Isso pode ocorrer se o nome do dom\u00ednio contiver um h\u00edfen ou outro caractere especial, se o nome do pacote come\u00e7ar com um d\u00edgito ou outro caractere ilegal para usar como o in\u00edcio de um nome Java ou se o nome do pacote contiver uma palavra-chave reservada Java como \"int\". Nesse caso, a conven\u00e7\u00e3o sugerida \u00e9 adicionar um sublinhado. Por exemplo: Nome do dom\u00ednio Nome do prefixo do pacote hyphenated-name.example.org org.example.hyphenated_name example.int int_.example 123name.example.com com.example._123name","title":"Nomenclatura"},{"location":"java/linguagem/introducao/#wrappers","text":"O uso de classes wrappers \u00e9 importante quando precisamos encapsular tipos primitivos, de modo que eles possam participar de funcionalidades relacionadas \u00e0 orienta\u00e7\u00e3o a objetos. Um exemplo disso \u00e9 seu uso em opera\u00e7\u00f5es com collections . Tipos primitivos em Java a tornam uma linguagem h\u00edbrida. Por\u00e9m, as classes wrappers contornam esse problema, pois permitem que tipos primitivos sejam encapsulados e possam ser empregados em opera\u00e7\u00f5es que exijam o uso de objetos, tais como em collections . Cada tipo primitivo em Java possui uma classe empacotadora correspondente: Primitivo Classe Wrapper Argumentos do construtor boolean Boolean boolean, String Byte Byte byte, String Char Character char double Double double, String Float Float float, double, String Int Integer ... Convertendo um wrapper em um tipo primitivo: int i = 20 ; Integer iw = Integer . valueOf ( i ); // ou Integer iw = i ; Convertendo um tipo primitivo em wrapper : Integer iw = 20 ; int i = Integer . valueOf ( iw ); // ou int i = iw . intValue (); A compara\u00e7\u00e3o entre wrappers \u00e9 feita usando o m\u00e9todo equals() . O operador == compara apenas a refer\u00eancia do objeto (endere\u00e7o de mem\u00f3ria). Integer a = 20 ; Integer b = 20 ; a . equals ( b ); // true a == b ; // false","title":"Wrappers"},{"location":"java/linguagem/introducao/#termos","text":"","title":"Termos"},{"location":"java/linguagem/introducao/#campo","text":"Campo (em ingl\u00eas, field) algumas vezes chamado tamb\u00e9m de vari\u00e1vel de classe ou de inst\u00e2ncia, \u00e9 o que guarda um estado do objeto. \u00c9 uma das formas de se criar um campo. Essencialmente \u00e9 uma vari\u00e1vel. \u00c9 um mecanismo concreto e existente nas implementa\u00e7\u00f5es das linguagens e outras ferramentas. Um campo Java \u00e9 um bloco de mem\u00f3ria que possui um nome, tipo e tamanho que correspondem a ele. private String name = \"Marcin\" ;","title":"Campo"},{"location":"java/linguagem/introducao/#campo_1","text":"Define qualidade (caracter\u00edstica) de alguma parte ou caracter\u00edstica de um objeto (uma parte do c\u00f3digo, por exemplo). \u00c9 um metadado (adjetivo) e n\u00e3o o dado, como o campo. \u00c9 uma caracter\u00edstica em espec\u00edfico que um objeto ter\u00e1, mas n\u00e3o se define bem como esta caracter\u00edstica ser\u00e1 dispon\u00edvel no objeto. N\u00e3o importa se ser\u00e1 um campo, uma propriedade, um m\u00e9todo, ou outra coisa, ou at\u00e9 um conjunto desses mecanismos. Por exemplo, uma pessoa pode ter como campos, um nome e um endere\u00e7o. J\u00e1 os campos poderiam ser: nome, sobrenome, rua, bairro, n\u00famero, etc.","title":"Campo"},{"location":"java/linguagem/introducao/#propriedade","text":"\u00c9 um membro de uma classe que fornece uma informa\u00e7\u00e3o sobre o objeto/classe. Uma propriedade Java tamb\u00e9m \u00e9 muito parecida com um campo. A diferen\u00e7a real est\u00e1 no escopo pretendido. Os campos devem ser privados ou protegidos no escopo, o que significa que o acesso \u00e9 restrito. As propriedades devem ter escopo p\u00fablico, o que significa que o acesso n\u00e3o \u00e9 restrito. Podemos pensar que em Java a propriedade em si \u00e9 um m\u00e9todo (geralmente getters e setters). Muitas vezes ela acessa o estado que est\u00e1 efetivamente em um campo. private String name = \"Marcin\" ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; }","title":"Propriedade"},{"location":"java/linguagem/introducao/#variavel","text":"Uma vari\u00e1vel \u00e9 o nome dado a um local de mem\u00f3ria. \u00c9 a unidade b\u00e1sica de armazenamento em um programa. Pode ser sin\u00f4nimo de campo.","title":"Vari\u00e1vel"},{"location":"java/linguagem/introducao/#parametro","text":"Par\u00e2metro \u00e9 a vari\u00e1vel que ir\u00e1 receber um valor em uma fun\u00e7\u00e3o (ou m\u00e9todo). O par\u00e2metro faz parte da assinatura do m\u00e9todo. public void metodo ( String parametroA , String parametroB , String parametroC ) {}","title":"Par\u00e2metro"},{"location":"java/linguagem/introducao/#argumento","text":"Argumento \u00e9 o valor (que pode originar de uma vari\u00e1vel ou express\u00e3o) que \u00e9 passado para a fun\u00e7\u00e3o (ou m\u00e9todo) durante a sua chamada. String argumentoA ; String argumentoB ; /* * Passando 3 argumentos para o m\u00e9todo */ metodo ( argumentoA , argumentoB , ' arguemntoC ' ) {}","title":"Argumento"},{"location":"java/linguagem/introducao/#variancia","text":"No contexto da programa\u00e7\u00e3o, vari\u00e2ncia descreve as propriedades de uma estrutura variar dentro de uma hierarquia de tipos. public class X { Object getValue () { return null ; } } public class Y extends X { String getValue () { return null ; } } Existem tr\u00eas tipos de vari\u00e2ncia: Covari\u00e2ncia : significa que se a classe Y \u00e9 mais espec\u00edfica que X ( Y < X ) ent\u00e3o qualquer m\u00e9todo de Y que fa\u00e7a override a um m\u00e9todo de X tem de retornar um tipo igual ou mais espec\u00edfico . Neste caso, o tipo de retorno do m\u00e9todo que faz override \u00e9 String , que \u00e9 mais espec\u00edfico que Object . Contravari\u00e2ncia : contravari\u00e2ncia \u00e9 efetivamente o inverso de covari\u00e2ncia. Significa que se a classe Y \u00e9 mais espec\u00edfica que X ( Y < X ) ent\u00e3o qualquer m\u00e9todo de Y que fa\u00e7a override a um m\u00e9todo de X tem de retornar um tipo igual ou mais gen\u00e9rico . Em Java n\u00e3o h\u00e1 contravari\u00e2ncia e overriding de m\u00e9todos \u00e9 sempre invariante. No entanto poss\u00edvel ter contravari\u00e2ncia usando wildcards de generics ( <? super Classe> ). Invari\u00e2ncia : n\u00e3o h\u00e1 flex\u00e3o de tipos. Em Java overriding de m\u00e9todos \u00e9 invariante, ou seja, para se redefinir um m\u00e9todo numa subclasse, os par\u00e2metros t\u00eam de ser exatamente do mesmo tipo da superclasse. public class A { boolean equals ( A object ) { return true ; } } Como o overriding \u00e9 invariante, n\u00e3o estamos na realidade fazendo override do m\u00e9todo boolean equals(Object o) mas sim overload , adicionando um novo m\u00e9todo com outra assinatura. A solu\u00e7\u00e3o desde Java 5 \u00e9 adicionar a anota\u00e7\u00e3o @Override que vai permitir que o compilador detecte estes casos e informe que n\u00e3o estamos redefinindo um m\u00e9todo.","title":"Vari\u00e2ncia"},{"location":"java/linguagem/introducao/#pojo","text":"Plain Old Java Object (tradu\u00e7\u00e3o, Velho e Simples Objeto Java) \u00e9 um referencia a objetos que n\u00e3o dependem da heran\u00e7a de interfaces ou classes de frameworks externos. De maneira ideal, um POJO \u00e9 um objeto Java n\u00e3o vinculado a nenhuma restri\u00e7\u00e3o al\u00e9m daquelas impostas pela Java Language Specification ; ou seja, um POJO n\u00e3o deve ter que: Estenda classes pr\u00e9-especificadas, como em: public class Foo extends javax . servlet . http . HttpServlet { ... Implemente interfaces pr\u00e9-especificadas, como em: public class Bar implements javax . ejb . EntityBean { ... Cont\u00eam anota\u00e7\u00f5es pr\u00e9-especificadas, como em: @javax.persistence.Entity public class Baz { ... O c\u00f3digo abaixo exemplifica um POJO que segue o padr\u00e3o JavaBean: public class Carro implements java . io . Serializable { private String nome ; private String cor ; public Carro () {} public Carro ( String nome , String cor ) { this . nome = nome ; this . cor = cor ; } public String getCor () { return cor ; } public void setCor ( String cor ) { this . cor = cor ; } public String getNome () { return nome ; } public void setNome ( String nome ) { this . nome = nome ; } }","title":"POJO"},{"location":"java/linguagem/introducao/#javabean","text":"Um JavaBean (ou Bean) \u00e9 um POJO que \u00e9 serializ\u00e1vel, possui um construtor sem argumento e permite acesso a propriedades usando m\u00e9todos getter e setter que seguem uma conven\u00e7\u00e3o de nomenclatura simples.","title":"JavaBean"},{"location":"java/linguagem/introducao/#topicos-para-o-estudo-da-linguagem","text":"Concepts from core Java OOPS concepts (Data Abstraction, Encapsulation, Inheritance, Polymorphism) Basic Java constructs like loops and data types String handling Collection framework Multithreading Exception handling Generics Synchronisation Serialization & De-serialization Concurrent collection Core Java Programming Introduction of Java Introduction to Java; features of Java Comparison with C and C++ Download and install JDK/JRE (Environment variables set up) The JDK Directory Structure First Java Program through command prompt First Java Program through Eclipse/IntelliJ/whatever-editor-you-want Data types and Operators Primitive Datatypes, Declarations, Ranges Variable Names Conventions Numeric Literals, Character Literals String Literals Arrays(One dimensional; two- dimensional) Array of Object References Accessing arrays, manipulating arrays Enumerated Data Types Non-Primitive Datatypes Defining a class, variable and method in Java Method Signature; method calls Expressions in Java; introduction to various operators Assignment Operator Arithmetic Operators Relational Operators Logical Operators Conditional Operators Operator Precedence Implicit Type Conversions Upcasting and downcasting Strict typing Type conversion Control Flow statements Statements and it's various categories in Java if, if-else, if-else-if switch case for statement(old vs enhanced) while and do-while loops The continue Statement; labelled continue statement The break Statement; labelled break statement return statement OOPS and its application in Java Classes and Objects Defining a class;Defining instance variables and methods Creating objects out of a class Method calls via object references Abstraction Interfaces and Abstract classes Abstract and non-abstract methods Inheritance extends and implements keywords in Java Super class and Sub class this keyword, super keyword in Java for inheritance Concrete classes in Java Polymorphism Compile time polymorphism -- Overloading of methods Run time polymorphism -- Overriding of methods Method Overriding rules and method overloading rules Introduction to Object class and it's methods Encapsulation Protection of data Java Bean, POJO Getters/Setters Memory management in Java Heap Stack Packages Need for packages What are packages; package declaration in Java Import statement in Java How do packages resolve name clashes? Access Modifiers in Java What are access modifiers? Default Protected Private Public Miscellaneous Var-Args Reference variables, local variables, instance variables Memory allocations to variables Double equals operator(==) operator for primitives and objects toString() method on an object Statics Static variables and methods Static imports Static initialization blocks; instance initialization blocks Static concept in inheritance Constructors What are Constructors? Properties of Constructors Default and Parameterized Constructors Rules for constructor implementation Constructor Chaining this call; super call for constructors Constructors for Enumerated Data Types Constructors concept for Abstract classes and interfaces Exceptions in Java What are Exceptions? Need for exceptions How can Exceptions be coded in Java? API heirarchy for Exceptions Types of Exceptions Keywords in Exception API: try , catch , finally , throw , throws Rules for coding Exceptions Declaring Exceptions Defining and Throwing Exceptions Errors and Runtime Exceptions Custom Exception Strings in Java What are Strings? String heap memory and Constant Pool memory Immutability in Strings String creation on heap and constant pool Method APIs on String; operations on Strings Mutability of String Objects - StringBuilder and StringBuffer Collection Framework in Java The Collections Framework The Set Interface Set Implementation Classes The List Interface List Implementation Classes The Map Interface Map Implementation Classes Queue Interface Queue Implementation classes Sorting collections using utility methods equals() and hashCode contract in Java collections Generics Generics for Collections Generics for class Generics for methods Input-Output in Java What is a stream? Overview of Streams Bytes vs. Characters Overview of the entire Java IO API Reading a file; writing to a file using various APIs Reading User input from console PrintWriter Class Serialization Object Serialization Serializable Interface Serialization API ObjectInputStream and ObjectOutput Transient Fields readObject and writeObject Inner Classes Inner Classes Member Classes Local Classes Anonymous Classes Static Nested Classes Threads in Java Non-Threaded Applications Threaded Applications Process based multitasking Vs Thread based multitasking Thread API in Java Creating Threads States of a Thread Synchronization for threads; static and non-static synchronized methods; blocks; concept - of object and class locks Coordination between threads - wait, notify and notifyAll methods for inter-thread - communication JDBC What is JDBC; introduction; everything about JDBC create database and a schema Writing JDBC code to connect to DB CRUD Operations with JDBC Java 8 Features Java Lambda Expressions Java Method References Java Functional Interfaces Java Stream Tutorial Java Stream Filter Tutorial Java Interface changes \u2013 introduction of default and static methods Java forEach Java Stream Collectors class Java StringJoiner class Java Optional class Java Arrays Parallel Sort Java 9 Features Java 9 \u2013 REPL (JShell) Factory methods to create immutable List, Set and Map Introduction of Private methods in interfaces Try with resources enhancements Anonymous inner class and diamond operator SafeVarargs Annotation (with examples) Java 9 \u2013 Stream API Enhancements (With Examples) Java 9 Modules","title":"T\u00f3picos para o estudo da linguagem"},{"location":"java/linguagem/introducao/#links","text":"Linguagem Java https://www.javatpoint.com/java-tutorial Projetos em Java em destaque https://github.com/Vedenin/useful-java-links https://githublists.com/lists/akullpp/awesome-java","title":"Links"},{"location":"java/linguagem/javadoc/","text":"Javadoc \u00b6 Javadoc Introdu\u00e7\u00e3o Estrutura de um coment\u00e1rio do Javadoc Introdu\u00e7\u00e3o \u00b6 Javadoc \u00e9 um gerador de documenta\u00e7\u00e3o criado pela Sun Microsystems para documentar a API dos programas em Java, a partir do c\u00f3digo-fonte. O resultado \u00e9 expresso em HTML. \u00c9 constitu\u00eddo, basicamente, por algumas marca\u00e7\u00f5es muitos simples inseridas nos coment\u00e1rios do programa. Este sistema \u00e9 o padr\u00e3o de documenta\u00e7\u00e3o de classes em Java, e muitas dos IDEs desta linguagem ir\u00e3o automaticamente gerar um Javadoc em HTML. Ele tamb\u00e9m prov\u00ea uma API para a cria\u00e7\u00e3o de doclets e taglets , que permitem a an\u00e1lise da estrutura de um aplicativo Java. \u00c9 assim, por exemplo, que o JDiff consegue gerar relat\u00f3rios de altera\u00e7\u00f5es feitas entre duas vers\u00f5es de uma API. Estrutura de um coment\u00e1rio do Javadoc \u00b6 A estrutura b\u00e1sica de escrever os coment\u00e1rios \u00e9 inseri-los em / ** ... * / . As tags descritivas devem aparecer na seguinte ordem de prioridade. Tag e par\u00e2metro Usado Aplica em @ author John Smith Describes an author. Class, Interface, Enum {@ docRoot } Represents the relative path to the generated document's root directory from any generated page. Class, Interface, Enum, Field, Method @ version version Provides software version entry. Max one per Class or Interface. Class, Interface, Enum @ since since-text Describes when this functionality has first existed. Class, Interface, Enum, Field, Method @ see reference Provides a link to other element of documentation. Class, Interface, Enum, Field, Method @ param name description Describes a method parameter. Method @ return description Describes the return value. Method @ exception classname description @ throws classname description Describes an exception that may be thrown from this method. Method @ deprecated description Describes an outdated method. Class, Interface, Enum, Field, Method {@ inheritDoc } Copies the description from the overridden method. Overriding Method {@ link reference} Link to other symbol. Class, Interface, Enum, Field, Method {@ linkplain reference} Identical to Class, Interface, Enum, Field, Method {@ value #STATIC_FIELD} Return the value of a static field. Static Field {@ code literal} Formats literal text in the code font. It is equivalent to \\ Class, Interface, Enum, Field, Method {@ literal literal} Denotes literal text. The enclosed text is interpreted as not containing HTML markup or nested javadoc tags. Class, Interface, Enum, Field, Method {@ serial literal} Used in the doc comment for a default serializable field. Field {@ serialData literal} Documents the data written by the writeObject( ) or writeExternal( ) methods. Field, Method {@ serialField literal} Documents an ObjectStreamField component. Field Exemplos de uso do Javadoc. /** * Short one line description. * <p> * Longer description. If there were any, it would be * here. * </p> * And even more explanations to follow in consecutive * paragraphs separated by HTML paragraph breaks. * * @param variable Description text text text. * @return Description text text text. */ public int methodName (...) { // method body with a return statement } /** * Validates a chess move. * * <p>Use {@link #doMove(int theFromFile, int theFromRank, int theToFile, int theToRank)} to move a piece. * * @param theFromFile file from which a piece is being moved * @param theFromRank rank from which a piece is being moved * @param theToFile file to which a piece is being moved * @param theToRank rank to which a piece is being moved * @return true if the move is valid, otherwise false * @since 1.0 */ boolean isValidMove ( int theFromFile , int theFromRank , int theToFile , int theToRank ) { // ...body } /** * Moves a chess piece. * * @see java.math.RoundingMode */ void doMove ( int theFromFile , int theFromRank , int theToFile , int theToRank ) { // ...body }","title":"Javadoc"},{"location":"java/linguagem/javadoc/#javadoc","text":"Javadoc Introdu\u00e7\u00e3o Estrutura de um coment\u00e1rio do Javadoc","title":"Javadoc"},{"location":"java/linguagem/javadoc/#introducao","text":"Javadoc \u00e9 um gerador de documenta\u00e7\u00e3o criado pela Sun Microsystems para documentar a API dos programas em Java, a partir do c\u00f3digo-fonte. O resultado \u00e9 expresso em HTML. \u00c9 constitu\u00eddo, basicamente, por algumas marca\u00e7\u00f5es muitos simples inseridas nos coment\u00e1rios do programa. Este sistema \u00e9 o padr\u00e3o de documenta\u00e7\u00e3o de classes em Java, e muitas dos IDEs desta linguagem ir\u00e3o automaticamente gerar um Javadoc em HTML. Ele tamb\u00e9m prov\u00ea uma API para a cria\u00e7\u00e3o de doclets e taglets , que permitem a an\u00e1lise da estrutura de um aplicativo Java. \u00c9 assim, por exemplo, que o JDiff consegue gerar relat\u00f3rios de altera\u00e7\u00f5es feitas entre duas vers\u00f5es de uma API.","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/javadoc/#estrutura-de-um-comentario-do-javadoc","text":"A estrutura b\u00e1sica de escrever os coment\u00e1rios \u00e9 inseri-los em / ** ... * / . As tags descritivas devem aparecer na seguinte ordem de prioridade. Tag e par\u00e2metro Usado Aplica em @ author John Smith Describes an author. Class, Interface, Enum {@ docRoot } Represents the relative path to the generated document's root directory from any generated page. Class, Interface, Enum, Field, Method @ version version Provides software version entry. Max one per Class or Interface. Class, Interface, Enum @ since since-text Describes when this functionality has first existed. Class, Interface, Enum, Field, Method @ see reference Provides a link to other element of documentation. Class, Interface, Enum, Field, Method @ param name description Describes a method parameter. Method @ return description Describes the return value. Method @ exception classname description @ throws classname description Describes an exception that may be thrown from this method. Method @ deprecated description Describes an outdated method. Class, Interface, Enum, Field, Method {@ inheritDoc } Copies the description from the overridden method. Overriding Method {@ link reference} Link to other symbol. Class, Interface, Enum, Field, Method {@ linkplain reference} Identical to Class, Interface, Enum, Field, Method {@ value #STATIC_FIELD} Return the value of a static field. Static Field {@ code literal} Formats literal text in the code font. It is equivalent to \\ Class, Interface, Enum, Field, Method {@ literal literal} Denotes literal text. The enclosed text is interpreted as not containing HTML markup or nested javadoc tags. Class, Interface, Enum, Field, Method {@ serial literal} Used in the doc comment for a default serializable field. Field {@ serialData literal} Documents the data written by the writeObject( ) or writeExternal( ) methods. Field, Method {@ serialField literal} Documents an ObjectStreamField component. Field Exemplos de uso do Javadoc. /** * Short one line description. * <p> * Longer description. If there were any, it would be * here. * </p> * And even more explanations to follow in consecutive * paragraphs separated by HTML paragraph breaks. * * @param variable Description text text text. * @return Description text text text. */ public int methodName (...) { // method body with a return statement } /** * Validates a chess move. * * <p>Use {@link #doMove(int theFromFile, int theFromRank, int theToFile, int theToRank)} to move a piece. * * @param theFromFile file from which a piece is being moved * @param theFromRank rank from which a piece is being moved * @param theToFile file to which a piece is being moved * @param theToRank rank to which a piece is being moved * @return true if the move is valid, otherwise false * @since 1.0 */ boolean isValidMove ( int theFromFile , int theFromRank , int theToFile , int theToRank ) { // ...body } /** * Moves a chess piece. * * @see java.math.RoundingMode */ void doMove ( int theFromFile , int theFromRank , int theToFile , int theToRank ) { // ...body }","title":"Estrutura de um coment\u00e1rio do Javadoc"},{"location":"java/linguagem/lambda/","text":"Lambda \u00b6 Lambda Introdu\u00e7\u00e3o Interfaces funcionais Refer\u00eancias de m\u00e9todos Refer\u00eancia a um m\u00e9todo est\u00e1tico Referente a um m\u00e9todo de uma inst\u00e2ncia Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia de classe an\u00f4nima Refer\u00eancia a um construtor Introdu\u00e7\u00e3o \u00b6 Dentre algumas novidades do Java 8 est\u00e1 a express\u00e3o lambda , funcionalidade esta comum em muitas linguagens funcionais (LISP, Ruby, JavaScript, etc). A express\u00e3o lambda possui o formato (argumento) -> (corpo) e permite passar fun\u00e7\u00f5es e comportamentos como argumentos em uma chamada de m\u00e9todo. Isso foi algo novo em Java, que at\u00e9 ent\u00e3o permitia apenas passagem de objetos como argumentos. Quando o corpo da express\u00e3o lambda possui somente uma instru\u00e7\u00e3o, n\u00e3o \u00e9 necess\u00e1rio utilizar a palavra chave return . Uma express\u00e3o lambda pode ocorrer de v\u00e1rias formas: () -> 20 // N\u00e3o recebe nada e sempre retorna \"20\" x -> x * x // Recebe algo e retorna seu quadrado ( x , y ) -> x + y // Recebe dois valores e retorna a soma ( int x , int y ) -> x + y // Recebe dois valores inteiros e retorna a soma ( int x , int y ) -> { // Recebe dois valores interos, imprime e retorna a soma System . out . println ( x + y ); return x + y ; } Para entender melhor a aplicabilidade de lambda , abaixo temos um exemplo sem o uso da express\u00e3o lambda . package _lambda.exemplo_sem_lambda ; public class Exemplo { public static int calcular ( OperacaoMatematica om , int num1 , int num2 ) { return om . executar ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular ( new Soma (), 20 , 15 )); System . out . println ( \"20 - 15 = \" + calcular ( new Subtracao (), 20 , 15 )); } } class Soma implements OperacaoMatematica { @Override public int executar ( int a , int b ) { return a + b ; } } class Subtracao implements OperacaoMatematica { @Override public int executar ( int a , int b ) { return a - b ; } } interface OperacaoMatematica { public int executar ( int a , int b ); } // Saida: // > 20 + 15 = 35 // > 20 + 15 = 5 Esse exemplo pode ser melhorado utilizando classes an\u00f4nimas, eliminando as duas classes Soma e Subtracao . package _lambda.exemplo_sem_lambda_otimizado ; public class Exemplo { public static int calcular ( OperacaoMatematica om , int num1 , int num2 ) { return om . executar ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular ( new OperacaoMatematica () { public int executar ( int a , int b ) { return a + b ; } }, 20 , 15 )); System . out . println ( \"20 + 15 = \" + calcular ( new OperacaoMatematica () { public int executar ( int a , int b ) { return a - b ; } }, 20 , 15 )); } } interface OperacaoMatematica { public int executar ( int a , int b ); } Entretanto o c\u00f3digo ficou muito mais confuso e complexo. Com o recurso de express\u00e3o lambda , o c\u00f3digo fica mais limpo, simples e compacto. A nota\u00e7\u00e3o @FunctionalInterface \u00e9 opcional, mas \u00e9 uma boa pr\u00e1tica, j\u00e1 que deixa expl\u00edcito para o compilador que a interface deve implementar somente um m\u00e9todo abstrato. M\u00e9todos padr\u00e3o e m\u00e9todos est\u00e1ticos ainda poder\u00e3o existir. package _lambda.exemplo1_lambda ; public class Exemplo { static int calcular ( OperacaoMatematica om , int num1 , int num2 ) { return om . executar ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular (( a , b ) -> a + b , 20 , 15 )); System . out . println ( \"20 - 15 = \" + calcular (( a , b ) -> a - b , 20 , 15 )); } } @FunctionalInterface interface OperacaoMatematica { int executar ( int a , int b ); /* * A express\u00e3o lambda funciona se a interface possui apenas um m\u00e9todo abstrato. */ // int imprimir (int a, int b); // ERRO! } // Saida // > 20 + 15 = 35 // > 20 - 15 = 5 Ainda podemos compactar mais o c\u00f3digo eliminando a interface funcional OperacaoMatematica . Para isso, o Java 8 disponibiliza o pacote java.util.function que fornece v\u00e1rias interfaces funcionais para usar com express\u00f5es lambda e refer\u00eancia de m\u00e9todos. No exemplo temos o uso da interface funcional BiFunction . package _lambda.exemplo_lambda_interface_funcional ; import java.util.function.BiFunction ; public class Exemplo { static int calcular ( BiFunction < Integer , Integer , Integer > bf , int num1 , int num2 ) { return bf . apply ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular (( a , b ) -> a + b , 20 , 15 )); System . out . println ( \"20 - 15 = \" + calcular (( a , b ) -> a - b , 20 , 15 )); } } // Saida // > 20 + 15 = 35 // > 20 - 15 = 5 Interfaces funcionais \u00b6 Uma interface funcional (em ingl\u00eas, functional interface ) \u00e9 uma interface que possui apenas um \u00fanico m\u00e9todo abstrato, ao qual os par\u00e2metros e tipos de retorno da express\u00e3o lambda s\u00e3o combinados ou adaptados. Alguns exemplos de interfaces funcionais: Interface M\u00e9todo Descri\u00e7\u00e3o Comparator int compare\u200b(T o1, T o2) { } Compara\u00e7\u00e3o entre dois elementos Runnable void run() { } Usado para criar um thread Callable V call() throws Exception Computa o resultado ou lan\u00e7a uma exce\u00e7\u00e3o Introduzidas no Java 8: Interface M\u00e9todo Descri\u00e7\u00e3o Predicate boolean test\u200b(T t) Opera\u00e7\u00e3o que retorna um booleano Consumer void accept\u200b(T t) Opera\u00e7\u00e3o que n\u00e3o retorna valor (void) Function R apply\u200b(T t) Opera\u00e7\u00e3o que retorna algum valor Supplier T get() Opera\u00e7\u00e3o sem par\u00e2metro que retorna algum valor UnaryOperator static <T> UnaryOperator<T> identity() Opera\u00e7\u00e3o que retorna mesmo valor do par\u00e2metro Existem interfaces derivadas usadas para outros n\u00fameros de par\u00e2metros como: BiConsumer , BiFunction , BinaryOperator , BiPredicate , etc. E interfaces derivadas usadas para retornar ou receber valores de tipos espec\u00edficos como: IntPredicate , LongConsumer , IntFunction , IntToDoubleFunction , BooleanSupplier , DoubleUnaryOperator , etc. Abaixo segue um exemplo usando interface Comparator . O m\u00e9todo Collections.sort espera receber um List e uma implementa\u00e7\u00e3o de Comparator . package _lambda.exemplo_lambda_interfaces_funcionais ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.Collections ; import java.util.Comparator ; public class Exemplo { public static void main ( String [] args ) { ArrayList < String > lista = new ArrayList <> (); lista . addAll ( Arrays . asList ( \"HAA!\" , \"HAAAAA!\" , \"HA!\" )); /* * Sem o uso de lambda */ Collections . sort ( lista , new Comparator < String > (){ public int compare ( String valor1 , String valor2 ){ return valor1 . length () - valor2 . length (); } }); /* * Com o uso de lambda */ Collections . sort ( lista , ( v1 , v2 ) -> v1 . length () - v2 . length ()); System . out . println ( lista ); } } // Saida: // > [HA!, HAA!, HAAAAA!] Exemplo de cria\u00e7\u00e3o de uma nova interface funcional. package _lambda.exemplo2_lambda ; public class Exemplo { public static void main ( String [] args ) { /* * Cria\u00e7\u00e3o de uma classe an\u00f4nima se lambda */ Validador semLambda = new Validador () { public boolean isPositivo ( int valor ) { return valor > 0 ; } }; /* * Cria\u00e7\u00e3o de uma classe an\u00f4nima com lambda */ Validador comLambda = ( v ) -> v > 0 ; System . out . println ( semLambda . isPositivo ( - 10 )); System . out . println ( comLambda . isPositivo ( - 10 )); } } interface Validador { boolean isPositivo ( int valor ); } // Saida: // > false // > false Refer\u00eancias de m\u00e9todos \u00b6 Uma refer\u00eancia de m\u00e9todo (em ingl\u00eas, method reference ) \u00e9 a sintaxe abreviada de uma express\u00e3o lambda que executa apenas um m\u00e9todo. Antes do Java 8, se us\u00e1ssemos apenas um m\u00e9todo de um objeto em outro m\u00e9todo, t\u00ednhamos que passar o objeto completo como argumento. Com express\u00f5es lambdas podemos usar m\u00e9todos como se fossem objetos ou valores primitivos como por exemplo: objeto::metodoNome Existe 4 tipos de refer\u00eancias de m\u00e9todos: Refer\u00eancia a um m\u00e9todo est\u00e1tico. Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia. Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia de classe an\u00f4nima. Refer\u00eancia a um construtor. Refer\u00eancia a um m\u00e9todo est\u00e1tico \u00b6 Refer\u00eancia a um m\u00e9todo est\u00e1tico definido na classe. Sintaxe: ClasseNome::metodoEstaticoNome Lambda: (args) -> ClasseNome.metodoEstaticoNome(args) package _lambda.exemplo_referencia_metodo_estatico ; public class Exemplo { static void dizerAlgo (){ System . out . println ( \"Hello!\" ); } public static void main ( String [] args ) { // Refer\u00eancias de m\u00e9todo Falante falanteR = Exemplo :: dizerAlgo ; // Lambda Falante falanteL = () -> Exemplo . dizerAlgo (); falanteR . dizer (); falanteL . dizer (); } } interface Falante { void dizer (); } // Saida: // > Hello! // > Hello! Referente a um m\u00e9todo de uma inst\u00e2ncia \u00b6 Refer\u00eancia a um m\u00e9todo de um objeto inst\u00e2ncia de uma classe. Sintaxe: objeto::instanciaMetodoNome Lambda: (args) -> objeto.instanciaMetodoNome(args) package _lambda.exemplo_referencia_metodo_instancia ; public class Exemplo { void dizerAlgo () { System . out . println ( \"Hello!\" ); } public static void main ( String [] args ) { Exemplo objeto = new Exemplo (); // Refer\u00eancias de m\u00e9todo Falante falanteR = objeto :: dizerAlgo ; // Lambda Falante falanteL = () -> objeto . dizerAlgo (); falanteR . dizer (); falanteL . dizer (); } } interface Falante { void dizer (); } // Saida: // > Hello! // > Hello! Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia de classe an\u00f4nima \u00b6 Refer\u00eancia a um m\u00e9todo de um objeto inst\u00e2ncia de uma classe an\u00f4nima. Sintaxe: ClasseNome::instanciaMetodoNome Lambda: (arg0,rest) -> arg0.instanciaMetodoNome(rest) onde arg0 \u00e9 o tipo de ClasseNome . package _lambda.exemplo_referencia_metodo_instancia_anonima ; public class Exemplo { void dizerAlgo () { System . out . println ( \"Hello!\" ); } public static void main ( String [] args ) { // Refer\u00eancias de m\u00e9todo Falante falanteR = new Exemplo ():: dizerAlgo ; // Lambda Falante falanteL = () -> new Exemplo (). dizerAlgo (); falanteR . dizer (); falanteL . dizer (); } } interface Falante { void dizer (); } // Saida: // > Hello! // > Hello! Refer\u00eancia a um construtor \u00b6 Refer\u00eancia a um construtor. Sintaxe: ClasseNome::new Lambda: (args) -> new ClasseNome(args) package _lambda.exemplo_referencia_metodo_instancia_anonima ; public class Exemplo { public static void main ( String [] args ) { // Refer\u00eancias de m\u00e9todo Falante falanteR = Mensageiro :: new ; // Lambda Falante falanteL = ( s ) -> new Mensageiro ( s ); falanteR . dizer ( \"Hello!\" ); falanteL . dizer ( \"Hello!\" ); } } class Mensageiro { Mensageiro ( String s ) { System . out . println ( s ); } } interface Falante { void dizer ( String s ); } // Saida: // > Hello! // > Hello!","title":"Lambda"},{"location":"java/linguagem/lambda/#lambda","text":"Lambda Introdu\u00e7\u00e3o Interfaces funcionais Refer\u00eancias de m\u00e9todos Refer\u00eancia a um m\u00e9todo est\u00e1tico Referente a um m\u00e9todo de uma inst\u00e2ncia Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia de classe an\u00f4nima Refer\u00eancia a um construtor","title":"Lambda"},{"location":"java/linguagem/lambda/#introducao","text":"Dentre algumas novidades do Java 8 est\u00e1 a express\u00e3o lambda , funcionalidade esta comum em muitas linguagens funcionais (LISP, Ruby, JavaScript, etc). A express\u00e3o lambda possui o formato (argumento) -> (corpo) e permite passar fun\u00e7\u00f5es e comportamentos como argumentos em uma chamada de m\u00e9todo. Isso foi algo novo em Java, que at\u00e9 ent\u00e3o permitia apenas passagem de objetos como argumentos. Quando o corpo da express\u00e3o lambda possui somente uma instru\u00e7\u00e3o, n\u00e3o \u00e9 necess\u00e1rio utilizar a palavra chave return . Uma express\u00e3o lambda pode ocorrer de v\u00e1rias formas: () -> 20 // N\u00e3o recebe nada e sempre retorna \"20\" x -> x * x // Recebe algo e retorna seu quadrado ( x , y ) -> x + y // Recebe dois valores e retorna a soma ( int x , int y ) -> x + y // Recebe dois valores inteiros e retorna a soma ( int x , int y ) -> { // Recebe dois valores interos, imprime e retorna a soma System . out . println ( x + y ); return x + y ; } Para entender melhor a aplicabilidade de lambda , abaixo temos um exemplo sem o uso da express\u00e3o lambda . package _lambda.exemplo_sem_lambda ; public class Exemplo { public static int calcular ( OperacaoMatematica om , int num1 , int num2 ) { return om . executar ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular ( new Soma (), 20 , 15 )); System . out . println ( \"20 - 15 = \" + calcular ( new Subtracao (), 20 , 15 )); } } class Soma implements OperacaoMatematica { @Override public int executar ( int a , int b ) { return a + b ; } } class Subtracao implements OperacaoMatematica { @Override public int executar ( int a , int b ) { return a - b ; } } interface OperacaoMatematica { public int executar ( int a , int b ); } // Saida: // > 20 + 15 = 35 // > 20 + 15 = 5 Esse exemplo pode ser melhorado utilizando classes an\u00f4nimas, eliminando as duas classes Soma e Subtracao . package _lambda.exemplo_sem_lambda_otimizado ; public class Exemplo { public static int calcular ( OperacaoMatematica om , int num1 , int num2 ) { return om . executar ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular ( new OperacaoMatematica () { public int executar ( int a , int b ) { return a + b ; } }, 20 , 15 )); System . out . println ( \"20 + 15 = \" + calcular ( new OperacaoMatematica () { public int executar ( int a , int b ) { return a - b ; } }, 20 , 15 )); } } interface OperacaoMatematica { public int executar ( int a , int b ); } Entretanto o c\u00f3digo ficou muito mais confuso e complexo. Com o recurso de express\u00e3o lambda , o c\u00f3digo fica mais limpo, simples e compacto. A nota\u00e7\u00e3o @FunctionalInterface \u00e9 opcional, mas \u00e9 uma boa pr\u00e1tica, j\u00e1 que deixa expl\u00edcito para o compilador que a interface deve implementar somente um m\u00e9todo abstrato. M\u00e9todos padr\u00e3o e m\u00e9todos est\u00e1ticos ainda poder\u00e3o existir. package _lambda.exemplo1_lambda ; public class Exemplo { static int calcular ( OperacaoMatematica om , int num1 , int num2 ) { return om . executar ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular (( a , b ) -> a + b , 20 , 15 )); System . out . println ( \"20 - 15 = \" + calcular (( a , b ) -> a - b , 20 , 15 )); } } @FunctionalInterface interface OperacaoMatematica { int executar ( int a , int b ); /* * A express\u00e3o lambda funciona se a interface possui apenas um m\u00e9todo abstrato. */ // int imprimir (int a, int b); // ERRO! } // Saida // > 20 + 15 = 35 // > 20 - 15 = 5 Ainda podemos compactar mais o c\u00f3digo eliminando a interface funcional OperacaoMatematica . Para isso, o Java 8 disponibiliza o pacote java.util.function que fornece v\u00e1rias interfaces funcionais para usar com express\u00f5es lambda e refer\u00eancia de m\u00e9todos. No exemplo temos o uso da interface funcional BiFunction . package _lambda.exemplo_lambda_interface_funcional ; import java.util.function.BiFunction ; public class Exemplo { static int calcular ( BiFunction < Integer , Integer , Integer > bf , int num1 , int num2 ) { return bf . apply ( num1 , num2 ); } public static void main ( String [] args ) { System . out . println ( \"20 + 15 = \" + calcular (( a , b ) -> a + b , 20 , 15 )); System . out . println ( \"20 - 15 = \" + calcular (( a , b ) -> a - b , 20 , 15 )); } } // Saida // > 20 + 15 = 35 // > 20 - 15 = 5","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/lambda/#interfaces-funcionais","text":"Uma interface funcional (em ingl\u00eas, functional interface ) \u00e9 uma interface que possui apenas um \u00fanico m\u00e9todo abstrato, ao qual os par\u00e2metros e tipos de retorno da express\u00e3o lambda s\u00e3o combinados ou adaptados. Alguns exemplos de interfaces funcionais: Interface M\u00e9todo Descri\u00e7\u00e3o Comparator int compare\u200b(T o1, T o2) { } Compara\u00e7\u00e3o entre dois elementos Runnable void run() { } Usado para criar um thread Callable V call() throws Exception Computa o resultado ou lan\u00e7a uma exce\u00e7\u00e3o Introduzidas no Java 8: Interface M\u00e9todo Descri\u00e7\u00e3o Predicate boolean test\u200b(T t) Opera\u00e7\u00e3o que retorna um booleano Consumer void accept\u200b(T t) Opera\u00e7\u00e3o que n\u00e3o retorna valor (void) Function R apply\u200b(T t) Opera\u00e7\u00e3o que retorna algum valor Supplier T get() Opera\u00e7\u00e3o sem par\u00e2metro que retorna algum valor UnaryOperator static <T> UnaryOperator<T> identity() Opera\u00e7\u00e3o que retorna mesmo valor do par\u00e2metro Existem interfaces derivadas usadas para outros n\u00fameros de par\u00e2metros como: BiConsumer , BiFunction , BinaryOperator , BiPredicate , etc. E interfaces derivadas usadas para retornar ou receber valores de tipos espec\u00edficos como: IntPredicate , LongConsumer , IntFunction , IntToDoubleFunction , BooleanSupplier , DoubleUnaryOperator , etc. Abaixo segue um exemplo usando interface Comparator . O m\u00e9todo Collections.sort espera receber um List e uma implementa\u00e7\u00e3o de Comparator . package _lambda.exemplo_lambda_interfaces_funcionais ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.Collections ; import java.util.Comparator ; public class Exemplo { public static void main ( String [] args ) { ArrayList < String > lista = new ArrayList <> (); lista . addAll ( Arrays . asList ( \"HAA!\" , \"HAAAAA!\" , \"HA!\" )); /* * Sem o uso de lambda */ Collections . sort ( lista , new Comparator < String > (){ public int compare ( String valor1 , String valor2 ){ return valor1 . length () - valor2 . length (); } }); /* * Com o uso de lambda */ Collections . sort ( lista , ( v1 , v2 ) -> v1 . length () - v2 . length ()); System . out . println ( lista ); } } // Saida: // > [HA!, HAA!, HAAAAA!] Exemplo de cria\u00e7\u00e3o de uma nova interface funcional. package _lambda.exemplo2_lambda ; public class Exemplo { public static void main ( String [] args ) { /* * Cria\u00e7\u00e3o de uma classe an\u00f4nima se lambda */ Validador semLambda = new Validador () { public boolean isPositivo ( int valor ) { return valor > 0 ; } }; /* * Cria\u00e7\u00e3o de uma classe an\u00f4nima com lambda */ Validador comLambda = ( v ) -> v > 0 ; System . out . println ( semLambda . isPositivo ( - 10 )); System . out . println ( comLambda . isPositivo ( - 10 )); } } interface Validador { boolean isPositivo ( int valor ); } // Saida: // > false // > false","title":"Interfaces funcionais"},{"location":"java/linguagem/lambda/#referencias-de-metodos","text":"Uma refer\u00eancia de m\u00e9todo (em ingl\u00eas, method reference ) \u00e9 a sintaxe abreviada de uma express\u00e3o lambda que executa apenas um m\u00e9todo. Antes do Java 8, se us\u00e1ssemos apenas um m\u00e9todo de um objeto em outro m\u00e9todo, t\u00ednhamos que passar o objeto completo como argumento. Com express\u00f5es lambdas podemos usar m\u00e9todos como se fossem objetos ou valores primitivos como por exemplo: objeto::metodoNome Existe 4 tipos de refer\u00eancias de m\u00e9todos: Refer\u00eancia a um m\u00e9todo est\u00e1tico. Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia. Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia de classe an\u00f4nima. Refer\u00eancia a um construtor.","title":"Refer\u00eancias de m\u00e9todos"},{"location":"java/linguagem/lambda/#referencia-a-um-metodo-estatico","text":"Refer\u00eancia a um m\u00e9todo est\u00e1tico definido na classe. Sintaxe: ClasseNome::metodoEstaticoNome Lambda: (args) -> ClasseNome.metodoEstaticoNome(args) package _lambda.exemplo_referencia_metodo_estatico ; public class Exemplo { static void dizerAlgo (){ System . out . println ( \"Hello!\" ); } public static void main ( String [] args ) { // Refer\u00eancias de m\u00e9todo Falante falanteR = Exemplo :: dizerAlgo ; // Lambda Falante falanteL = () -> Exemplo . dizerAlgo (); falanteR . dizer (); falanteL . dizer (); } } interface Falante { void dizer (); } // Saida: // > Hello! // > Hello!","title":"Refer\u00eancia a um m\u00e9todo est\u00e1tico"},{"location":"java/linguagem/lambda/#referente-a-um-metodo-de-uma-instancia","text":"Refer\u00eancia a um m\u00e9todo de um objeto inst\u00e2ncia de uma classe. Sintaxe: objeto::instanciaMetodoNome Lambda: (args) -> objeto.instanciaMetodoNome(args) package _lambda.exemplo_referencia_metodo_instancia ; public class Exemplo { void dizerAlgo () { System . out . println ( \"Hello!\" ); } public static void main ( String [] args ) { Exemplo objeto = new Exemplo (); // Refer\u00eancias de m\u00e9todo Falante falanteR = objeto :: dizerAlgo ; // Lambda Falante falanteL = () -> objeto . dizerAlgo (); falanteR . dizer (); falanteL . dizer (); } } interface Falante { void dizer (); } // Saida: // > Hello! // > Hello!","title":"Referente a um m\u00e9todo de uma inst\u00e2ncia"},{"location":"java/linguagem/lambda/#referencia-a-um-metodo-de-uma-instancia-de-classe-anonima","text":"Refer\u00eancia a um m\u00e9todo de um objeto inst\u00e2ncia de uma classe an\u00f4nima. Sintaxe: ClasseNome::instanciaMetodoNome Lambda: (arg0,rest) -> arg0.instanciaMetodoNome(rest) onde arg0 \u00e9 o tipo de ClasseNome . package _lambda.exemplo_referencia_metodo_instancia_anonima ; public class Exemplo { void dizerAlgo () { System . out . println ( \"Hello!\" ); } public static void main ( String [] args ) { // Refer\u00eancias de m\u00e9todo Falante falanteR = new Exemplo ():: dizerAlgo ; // Lambda Falante falanteL = () -> new Exemplo (). dizerAlgo (); falanteR . dizer (); falanteL . dizer (); } } interface Falante { void dizer (); } // Saida: // > Hello! // > Hello!","title":"Refer\u00eancia a um m\u00e9todo de uma inst\u00e2ncia de classe an\u00f4nima"},{"location":"java/linguagem/lambda/#referencia-a-um-construtor","text":"Refer\u00eancia a um construtor. Sintaxe: ClasseNome::new Lambda: (args) -> new ClasseNome(args) package _lambda.exemplo_referencia_metodo_instancia_anonima ; public class Exemplo { public static void main ( String [] args ) { // Refer\u00eancias de m\u00e9todo Falante falanteR = Mensageiro :: new ; // Lambda Falante falanteL = ( s ) -> new Mensageiro ( s ); falanteR . dizer ( \"Hello!\" ); falanteL . dizer ( \"Hello!\" ); } } class Mensageiro { Mensageiro ( String s ) { System . out . println ( s ); } } interface Falante { void dizer ( String s ); } // Saida: // > Hello! // > Hello!","title":"Refer\u00eancia a um construtor"},{"location":"java/linguagem/metodo/","text":"M\u00e9todo \u00b6 M\u00e9todo Introdu\u00e7\u00e3o Argumentos Modificadores Introdu\u00e7\u00e3o \u00b6 M\u00e9todos s\u00e3o blocos de c\u00f3digo que pertencem a uma classe e tem por finalidade realizar uma tarefa (linguagens c++, c#, java). Eles s\u00e3o an\u00e1logos \u00e0s fun\u00e7\u00f5es das linguagens n\u00e3o orientadas a objeto. Argumentos \u00b6 Em Java, todos os valores primitivos e objetos, s\u00e3o passados para o m\u00e9todos como valor. Em Java n\u00e3o existem ponteiros, ou seja, n\u00e3o \u00e9 poss\u00edvel acessarmos a mem\u00f3ria do computador diretamente, isso \u00e9 feito pela JVM. Portanto, n\u00e3o existe passagem de par\u00e2metro por refer\u00eancia em Java , apenas por valor. Ao passar um objeto como argumento para um m\u00e9todo, \u00e9 poss\u00edvel alterar os campos associados ao objeto transmitido, mas se tentarmos reatribuir outro valor ao par\u00e2metro, essa reatribui\u00e7\u00e3o ser\u00e1 perdida quando o escopo do m\u00e9todo for encerrado. package exemplo_metodo ; class Valor { private int valor ; public Valor ( int valor ) { this . valor = valor ; } public void setValor ( int valor ) { this . valor = valor ; } public int getValor () { return valor ; } } class Exemplo { static void metodo ( Valor valorObjeto , int valorLocal ) { valorObjeto . setValor ( 200 ); valorLocal = 20 ; System . out . println ( \"\\nDentro do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 200 System . out . println ( \"Valor Local: \" + valorLocal ); // 20 } static void metodoMudancaReferencia ( Valor valorObjeto , int valorLocal ) { /* Atribui\u00e7\u00e3o por valor */ valorObjeto = new Valor ( 300 ); valorLocal = 30 ; System . out . println ( \"\\nDentro do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 300 System . out . println ( \"Valor Local: \" + valorLocal ); // 30 } public static void main ( String [] args ) { Valor valorObjeto = new Valor ( 100 ); int valorLocal = 10 ; System . out . println ( \"\\nAntes do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 100 System . out . println ( \"Valor Local: \" + valorLocal ); // 10 metodo ( valorObjeto , valorLocal ); System . out . println ( \"\\nDepois do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 200 System . out . println ( \"Valor Local: \" + valorLocal ); // 10 metodoMudancaReferencia ( valorObjeto , valorLocal ); System . out . println ( \"\\nDepois do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 200 System . out . println ( \"Valor Local: \" + valorLocal ); // 10 } } // Saida // > Antes do metodo // > Valor Objeto: 100 // > Valor Local: 10 // // > Dentro do metodo // > Valor Objeto: 200 // > Valor Local: 20 // // > Depois do metodo // > Valor Objeto: 200 // > Valor Local: 10 // // > Dentro do metodo // > Valor Objeto: 300 // > Valor Local: 30 // // > Depois do metodo // > Valor Objeto: 200 // > Valor Local: 10 O funcionamento da passagem de argumentos em Java, pode ser melhor entendido vendo as \u00e1reas da mem\u00f3ria: ![memoria-stack-heap](./_metodo/memoria-stack-heap.png) Na \u00e1rea stack ficam as vari\u00e1veis locais dos m\u00e9todos que pertencem a um dos 8 tipos primitivos do Java (byte, short, int, long, float, double, boolean e char) e tamb\u00e9m as refer\u00eancias para os objetos armazenados na \u00e1rea de heap . Na \u00e1rea de heap ficam os objetos. O que aconteceu \u00e9 que, ao passarmos uma vari\u00e1vel (tipo primitivo) como argumento para os m\u00e9todos em Java, esse m\u00e9todo recebe uma c\u00f3pia do valor da vari\u00e1vel e, da mesma forma, se passarmos um objeto como argumento ele recebe uma c\u00f3pia do valor da refer\u00eancia desse objeto. Se alterarmos o valor da vari\u00e1vel dentro do m\u00e9todo, como \u00e9 uma c\u00f3pia, n\u00e3o afetar\u00e1 seu valor externamente. No caso de objetos, ele acessa o objeto na \u00e1rea de heap por meio da c\u00f3pia da refer\u00eancia que recebeu como argumento, que aponta para o mesmo objeto instanciado fora do m\u00e9todo, e por isso, uma altera\u00e7\u00e3o feita no campo de um objeto dentro do m\u00e9todo alterar\u00e1 seu valor fora dele. Modificadores \u00b6 Informa\u00e7\u00f5es sobre os modificadores de m\u00e9todos podem ser vistas no link abaixo: Modificadores","title":"M\u00e9todo"},{"location":"java/linguagem/metodo/#metodo","text":"M\u00e9todo Introdu\u00e7\u00e3o Argumentos Modificadores","title":"M\u00e9todo"},{"location":"java/linguagem/metodo/#introducao","text":"M\u00e9todos s\u00e3o blocos de c\u00f3digo que pertencem a uma classe e tem por finalidade realizar uma tarefa (linguagens c++, c#, java). Eles s\u00e3o an\u00e1logos \u00e0s fun\u00e7\u00f5es das linguagens n\u00e3o orientadas a objeto.","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/metodo/#argumentos","text":"Em Java, todos os valores primitivos e objetos, s\u00e3o passados para o m\u00e9todos como valor. Em Java n\u00e3o existem ponteiros, ou seja, n\u00e3o \u00e9 poss\u00edvel acessarmos a mem\u00f3ria do computador diretamente, isso \u00e9 feito pela JVM. Portanto, n\u00e3o existe passagem de par\u00e2metro por refer\u00eancia em Java , apenas por valor. Ao passar um objeto como argumento para um m\u00e9todo, \u00e9 poss\u00edvel alterar os campos associados ao objeto transmitido, mas se tentarmos reatribuir outro valor ao par\u00e2metro, essa reatribui\u00e7\u00e3o ser\u00e1 perdida quando o escopo do m\u00e9todo for encerrado. package exemplo_metodo ; class Valor { private int valor ; public Valor ( int valor ) { this . valor = valor ; } public void setValor ( int valor ) { this . valor = valor ; } public int getValor () { return valor ; } } class Exemplo { static void metodo ( Valor valorObjeto , int valorLocal ) { valorObjeto . setValor ( 200 ); valorLocal = 20 ; System . out . println ( \"\\nDentro do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 200 System . out . println ( \"Valor Local: \" + valorLocal ); // 20 } static void metodoMudancaReferencia ( Valor valorObjeto , int valorLocal ) { /* Atribui\u00e7\u00e3o por valor */ valorObjeto = new Valor ( 300 ); valorLocal = 30 ; System . out . println ( \"\\nDentro do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 300 System . out . println ( \"Valor Local: \" + valorLocal ); // 30 } public static void main ( String [] args ) { Valor valorObjeto = new Valor ( 100 ); int valorLocal = 10 ; System . out . println ( \"\\nAntes do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 100 System . out . println ( \"Valor Local: \" + valorLocal ); // 10 metodo ( valorObjeto , valorLocal ); System . out . println ( \"\\nDepois do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 200 System . out . println ( \"Valor Local: \" + valorLocal ); // 10 metodoMudancaReferencia ( valorObjeto , valorLocal ); System . out . println ( \"\\nDepois do metodo\" ); System . out . println ( \"Valor Objeto: \" + valorObjeto . getValor ()); // 200 System . out . println ( \"Valor Local: \" + valorLocal ); // 10 } } // Saida // > Antes do metodo // > Valor Objeto: 100 // > Valor Local: 10 // // > Dentro do metodo // > Valor Objeto: 200 // > Valor Local: 20 // // > Depois do metodo // > Valor Objeto: 200 // > Valor Local: 10 // // > Dentro do metodo // > Valor Objeto: 300 // > Valor Local: 30 // // > Depois do metodo // > Valor Objeto: 200 // > Valor Local: 10 O funcionamento da passagem de argumentos em Java, pode ser melhor entendido vendo as \u00e1reas da mem\u00f3ria: ![memoria-stack-heap](./_metodo/memoria-stack-heap.png) Na \u00e1rea stack ficam as vari\u00e1veis locais dos m\u00e9todos que pertencem a um dos 8 tipos primitivos do Java (byte, short, int, long, float, double, boolean e char) e tamb\u00e9m as refer\u00eancias para os objetos armazenados na \u00e1rea de heap . Na \u00e1rea de heap ficam os objetos. O que aconteceu \u00e9 que, ao passarmos uma vari\u00e1vel (tipo primitivo) como argumento para os m\u00e9todos em Java, esse m\u00e9todo recebe uma c\u00f3pia do valor da vari\u00e1vel e, da mesma forma, se passarmos um objeto como argumento ele recebe uma c\u00f3pia do valor da refer\u00eancia desse objeto. Se alterarmos o valor da vari\u00e1vel dentro do m\u00e9todo, como \u00e9 uma c\u00f3pia, n\u00e3o afetar\u00e1 seu valor externamente. No caso de objetos, ele acessa o objeto na \u00e1rea de heap por meio da c\u00f3pia da refer\u00eancia que recebeu como argumento, que aponta para o mesmo objeto instanciado fora do m\u00e9todo, e por isso, uma altera\u00e7\u00e3o feita no campo de um objeto dentro do m\u00e9todo alterar\u00e1 seu valor fora dele.","title":"Argumentos"},{"location":"java/linguagem/metodo/#modificadores","text":"Informa\u00e7\u00f5es sobre os modificadores de m\u00e9todos podem ser vistas no link abaixo: Modificadores","title":"Modificadores"},{"location":"java/linguagem/modificadores/","text":"Modificadores \u00b6 Modificadores Introdu\u00e7\u00e3o Modificadores de acesso Exemplo de restri\u00e7\u00e3o de acesso para os m\u00e9todos Exemplo de restri\u00e7\u00e3o de acesso para as classes Modificadores sem controle de acesso static final abstract synchronized Exemplo como m\u00e9todo Exemplo como statement transient volatile native strictfp Introdu\u00e7\u00e3o \u00b6 Os modificadores podem ser classificados em duas categorias: Modificadores de acesso Modificadores sem controle de acesso Modificadores de acesso \u00b6 Modificadores de acesso controlam o n\u00edvel de acesso. Existem 3 modificadores de acesso e 4 n\u00edveis de acesso. De forma geral os modificadores restringem o acesso da seguinte forma: na classe dentro do pacote fora do pacote (subclasse) fora do pacote public X X X X protected X X X default X X private X Modificador de acesso para classes Modificador Descri\u00e7\u00e3o public A classe \u00e9 acess\u00edvel a qualquer outra classe. default A classe \u00e9 acess\u00edvel a qualquer outra classe no mesmo pacote. Modificador de acesso para campos, m\u00e9todos e construtores Modificador Descri\u00e7\u00e3o public O recurso \u00e9 acess\u00edvel a todas classes. private O recurso \u00e9 acess\u00edvel somente a classe que o declarou. default O recurso \u00e9 acess\u00edvel somente ao mesmo pacote. protected O recurso \u00e9 acess\u00edvel ao mesmo pacote ou para subclasses de pacotes diferentes Classes com n\u00edvel de acesso default mas com m\u00e9todos de n\u00edvel public s\u00e3o permitidas. Pois as classes podem implementar alguma interface ou estender classes abstratas que possuem m\u00e9todos public , n\u00e3o sendo permitido reduzir a visibilidade destes m\u00e9todos que dever\u00e3o ser implementados. Portanto a restri\u00e7\u00e3o de acesso pode ser contornada atrav\u00e9s do n\u00edvel de acesso default da classe. As subclasses com n\u00edvel de acesso public podem herdar e disponibilizar estes m\u00e9todos de n\u00edvel public . Construtores podem ter n\u00edvel de acesso `private`, entretanto a classe s\u00f3 poder\u00e1 ser instanciada por seus pr\u00f3prios m\u00e9todos est\u00e1ticos. Esta configura\u00e7\u00e3o geralmente \u00e9 utilizada para criar classes com o padr\u00e3o de projeto `Singleton`. Exemplo de restri\u00e7\u00e3o de acesso para os m\u00e9todos \u00b6 package exemplo_acesso_campos.pacote1 ; public class Classe1 { private String privateC1 ; String defaultC1 ; protected String protectedC1 ; public String publicC1 ; public Classe1 () { this . privateC1 = \"private\" ; this . defaultC1 = \"default\" ; this . protectedC1 = \"protected\" ; this . publicC1 = \"public\" ; } public void fncPublicC1 () { System . out . println ( \"\\nC1 Private: \" + this . privateC1 ); System . out . println ( \"C1 Default: \" + this . defaultC1 ); System . out . println ( \"C1 Protected: \" + this . protectedC1 ); System . out . println ( \"C1 Public: \" + this . publicC1 ); } } package exemplo_acesso_campos.pacote1 ; public class Classe2 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); // System.out.println(\"Campo private: \" + c1.privateC1); // ERRO! System . out . println ( \"Campo default: \" + c1 . defaultC1 ); System . out . println ( \"Campo protected: \" + c1 . protectedC1 ); System . out . println ( \"Campo public: \" + c1 . publicC1 ); } } // Saida: // > Campo default: default // > Campo protected: protected // > Campo public: public A Classe2 est\u00e1 no mesmo pacote da Classe1 , portanto somente n\u00e3o consegue acessar o campo private da Classe1 . package exemplo_acesso_campos.pacote2 ; import exemplo_acesso_campos.pacote1.Classe1 ; public class Classe3 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); // System.out.println(\"Campo private: \" + c1.privateC1); // ERRO! // System.out.println(\"Campo default: \" + c1.defaultC1); // ERRO! // System.out.println(\"Campo protected: \" + c1.protectedC1); // ERRO! System . out . println ( \"Campo public: \" + c1 . publicC1 ); } } // Saida // > Campo public: public A Classe3 n\u00e3o est\u00e1 no mesmo pacote da Classe1 e n\u00e3o \u00e9 classe herdeira de Classe1 , portanto somente consegue acessar o campo public da Classe1 . package pacote2 ; import pacote1.Classe1 ; public class Classe4 extends Classe1 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); Classe4 c4 = new Classe4 (); // System.out.println(\"Campo private C1: \" + c1.privateC1); // ERRO! // System.out.println(\"Campo private C4: \" + c4.privateC1); // ERRO! // System.out.println(\"Campo default C1: \" + c1.defaultC1); // ERRO! // System.out.println(\"Campo default C4: \" + c4.defaultC1); // ERRO! /* * Modificador protected permite acessado somente atrav\u00e9s de hierarquia. * Ele n\u00e3o estar\u00e1 acess\u00edvel na subclasse que est\u00e1 fora do pacote usando * a inst\u00e2ncia de alguma superclasse (classe pai). */ // System.out.println(\"Campo protected C1: \" + c1.protectedC1); // ERRO! System . out . println ( \"Campo protected C4: \" + c4 . protectedC1 ); System . out . println ( \"Campo public C1: \" + c1 . publicC1 ); System . out . println ( \"Campo public C4: \" + c4 . publicC1 ); /* * A Fun\u00e7\u00e3o da classe C1 tem acesso a todos campos de sua classe */ c4 . fncPublicC1 (); } } // Saida // > Campo protected C4: protected // > Campo public C1: public // > Campo public C4: public // > C1 Private: private // > C1 Default: default // > C1 Protected: protected // > C1 Public: public A Classe4 n\u00e3o est\u00e1 no mesmo pacote da Classe1 , mas \u00e9 classe herdeira de Classe1 , portanto consegue acessar os campos public e protected da Classe1 . package exemplo_acesso_campos.pacote2 ; public class Classe5 extends Classe4 { public static void main ( String [] args ) { Classe4 c4 = new Classe4 (); Classe5 c5 = new Classe5 (); // System.out.println(\"Campo private C4: \" + c4.privateC1); // ERRO! // System.out.println(\"Campo private C5: \" + c5.privateC1); // ERRO! // System.out.println(\"Campo default C4: \" + c4.defaultC1); // ERRO! // System.out.println(\"Campo default C5: \" + c5.defaultC1); // ERRO! /* * Modificador protected n\u00e3o estar\u00e1 acess\u00edvel na subclasse que est\u00e1 fora * do pacote usando a inst\u00e2ncia de alguma superclasse intermedi\u00e1ria. */ // System.out.println(\"Campo protected C4: \" + c4.protectedC1); // ERRO! System . out . println ( \"Campo protected C5: \" + c5 . protectedC1 ); System . out . println ( \"Campo public C4: \" + c4 . publicC1 ); System . out . println ( \"Campo public C5: \" + c5 . publicC1 ); } } // Saida // > Campo protected C5: protected // > Campo public C4: public // > Campo public C5: public A Classe5 \u00e9 herdeira da Classe4 que por sua vez \u00e9 herdeira da Classe1 , entretanto campos protected n\u00e3o s\u00e3o acess\u00edveis na subclasse que est\u00e1 fora do pacote usando a inst\u00e2ncia de qualquer superclasse intermedi\u00e1ria, apenas pela inst\u00e2ncia da subclasse corrente. A inst\u00e2ncia da Classe4 n\u00e3o possui rela\u00e7\u00e3o de heran\u00e7a com a classe Classe5 , portanto no escopo da Classe5 n\u00e3o \u00e9 poss\u00edvel acessar os campos protected da Classe1 atrav\u00e9s da Classe4 . J\u00e1 a inst\u00e2ncia da pr\u00f3pria Classe5 possui rela\u00e7\u00e3o de heran\u00e7a com a classe Classe4 e Classe1 consequentemente. Os campos `protected` s\u00e3o acessados somente pelo elo de heran\u00e7a at\u00e9 a subclasse corrente. Portanto somente a inst\u00e2ncia da subclasse corrente pode acessar m\u00e9todos `protected` de uma superclasse. Exemplo de restri\u00e7\u00e3o de acesso para as classes \u00b6 package exemplo_acesso_classes.pacote1 ; class Classe1 { private String privateC1 ; String defaultC1 ; protected String protectedC1 ; public String publicC1 ; Classe1 () { this . privateC1 = \"private\" ; this . defaultC1 = \"default\" ; this . protectedC1 = \"protected\" ; this . publicC1 = \"public\" ; } } A Classe1 possui restri\u00e7\u00e3o de acesso default , portanto pode ser acessada somente por classes do mesmo pacote. package exemplo_acesso_classes.pacote1 ; public class Classe2 extends Classe1 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); // System.out.println(\"Campo private: \" + c1.privateC1); // ERRO! System . out . println ( \"Campo default: \" + c1 . defaultC1 ); System . out . println ( \"Campo protected: \" + c1 . protectedC1 ); System . out . println ( \"Campo public: \" + c1 . publicC1 ); } } // Saida: // > Campo default: default // > Campo protected: protected // > Campo public: public A Classe2 est\u00e1 no mesmo pacote e \u00e9 herdeira da Classe1 , e possui restri\u00e7\u00e3o public . Dessa forma, possibilita atrav\u00e9s de sua inst\u00e2ncia, acesso a Classe1 como se esta fosse public . package exemplo_acesso_classes.pacote2 ; // import pacote1.Classe1; // ERRO! public class Classe3 { } Como a Classe3 est\u00e1 em outro pacote, n\u00e3o possui permiss\u00e3o para acessar a Classe1 . package exemplo_acesso_classes.pacote2 ; import exemplo_acesso_classes.pacote1.Classe2 ; public class Classe4 extends Classe2 { public static void main ( String [] args ) { Classe2 c2 = new Classe2 (); Classe4 c4 = new Classe4 (); // System.out.println(\"Campo private C2: \" + c2.privateC1); // ERRO! // System.out.println(\"Campo private C4: \" + c4.privateC1); // ERRO! // System.out.println(\"Campo default C2: \" + c2.defaultC1); // ERRO! // System.out.println(\"Campo default C4: \" + c4.defaultC1); // ERRO! // System.out.println(\"Campo protected C2: \" + c2.protectedC1); // ERRO! System . out . println ( \"Campo protected C4: \" + c4 . protectedC1 ); System . out . println ( \"Campo public C2: \" + c2 . publicC1 ); System . out . println ( \"Campo public C4: \" + c4 . publicC1 ); } } // Saida // > Campo protected C4: protected // > Campo public C2: public // > Campo public C4: public Atrav\u00e9s da heran\u00e7a da Classe2 , a Classe4 que est\u00e1 em outro pacote, consegue acessar os campos da Classe1 mesmo n\u00e3o sendo uma classe public . Modificadores sem controle de acesso \u00b6 N\u00e3o controlam o n\u00edvel de acesso, mas proveem outras funcionalidades. S\u00e3o eles: static final abstract synchronized transient volatile native strictfp static \u00b6 A palavra-chave static significa que \u00e9 algo pertence diretamente a classe e que n\u00e3o precisa de uma inst\u00e2ncia dessa classe para poder acess\u00e1-lo. Classe est\u00e1tica package exemplo_static ; class Static { String atrNaoEstatico = \"Campo N\u00e3o est\u00e1tico\" ; static String atrEstatico = \"Campo est\u00e1tico\" ; static void metodoEstatico () { System . out . println ( \"M\u00e9todo est\u00e1tico\" ); /* * N\u00e3o \u00e9 necesser\u00e1io inst\u00e2ncia para chamar um campo ou m\u00e9todo * est\u00e1tico */ System . out . println ( atrEstatico ); /* * Um m\u00e9todo est\u00e1tico n\u00e3o pode acessar uma vari\u00e1vel de inst\u00e2ncia, j\u00e1 * que o m\u00e9todo pertence \u00e0 classe. Somente uma inst\u00e2ncia pode acessar * uma vari\u00e1vel de inst\u00e2ncia. */ // System.out.println(atrNaoEstatico); // ERRO! Static i = new Static (); System . out . println ( i . atrNaoEstatico ); } void metodoNaoEstatico () { System . out . println ( \"M\u00e9todo N\u00e3o est\u00e1tico\" ); /* * Um m\u00e9todo n\u00e3o est\u00e1tico pode acessar uma vari\u00e1vel de inst\u00e2ncia, j\u00e1 * que o m\u00e9todo pertence \u00e0 inst\u00e2ncia. */ System . out . println ( atrEstatico ); System . out . println ( atrNaoEstatico ); } public static void main ( String [] args ) { metodoEstatico (); // ou Static.metodoEstatico() /* * O m\u00e9todo main \u00e9 est\u00e1tico portanto n\u00e3o pode acessar um campo de * inst\u00e2ncia, seu escopo \u00e9 de classe, portanto tamb\u00e9m n\u00e3o pode acessar * a inst\u00e2ncia com this. */ // System.out.println(atrNaoEstatico); // ERRO! // System.out.println(this.metodoNaoEstatico()); // ERRO! Static i = new Static (); i . metodoNaoEstatico (); } } class Exemplo { public static void main ( String [] args ) { /* * Chamando um m\u00e9todo est\u00e1tico de Static em outra classe */ Static . metodoEstatico (); Static i = new Static (); i . metodoNaoEstatico (); } } // Saida: // > M\u00e9todo est\u00e1tico // > Campo est\u00e1tico // > Campo N\u00e3o est\u00e1tico // > M\u00e9todo N\u00e3o est\u00e1tico // > Campo est\u00e1tico // > Campo N\u00e3o est\u00e1tico final \u00b6 A palavra-chave final em classes significa que elas n\u00e3o pode ser herdadas. Em m\u00e9todos, significa que eles n\u00e3o podem ser sobrescritos. J\u00e1 em campos, significa que eles n\u00e3o podem ser modificado, ou seja, um campo final pode receber uma atribui\u00e7\u00e3o somente em sua cria\u00e7\u00e3o. Classe final package exemplo_final ; class Final { final String atrFinal ; // Poderia ser atribu\u00eddo o valor aqui Final () { this . atrFinal = \"Final\" ; /* * Um campo final n\u00e3o pode ser alterado */ // this.atrFinal = \"Novo Final\"; // ERRO! } final void metodoFinal () { System . out . println ( \"M\u00e9todo final\" ); } public static void main ( String [] args ) { Final t = new Final (); /* * Um campo final n\u00e3o pode ser alterado */ // t.atrFinal = \"Novo final\"; // ERRO! System . out . println ( t . atrFinal ); t . metodoFinal (); } } class Exemplo extends Final { /* * Um m\u00e9todo final n\u00e3o pode ser sobrescrito */ // void metodoFinal() { } // ERRO! public static void main ( String [] args ) { Final t = new Final (); /* * Um campo final n\u00e3o pode ser alterado */ // t.atrFinal = \"Novo final\"; // ERRO! System . out . println ( t . atrFinal ); t . metodoFinal (); } } // Final: // > Final // > M\u00e9todo final abstract \u00b6 A palavra-chave abstract pode ser usada para classes e m\u00e9todos dessas classes. Classes abstratas n\u00e3o podem ser instanciadas, somente herdadas. M\u00e9todos abstratos dessas classes devem ser obrigatoriamente implementados nas subclasses. Classe abstract package exemplo_abstract ; abstract class Abstract { String funcaoNaoAbstrata () { return \"m\u00e9todo n\u00e3o abstrato\" ; }; /* * Fun\u00e7\u00e3o abstrata n\u00e3o possui corpo */ abstract String funcaoAbstrata (); } class Exemplo extends Abstract { /* * Obrigado a implementar os m\u00e9todos abstratos da classe pai */ String funcaoAbstrata () { return \"m\u00e9todo abstrato implementado\" ; } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . funcaoAbstrata ()); System . out . println ( t . funcaoNaoAbstrata ()); /* * N\u00e3o \u00e9 poss\u00edvel instanciar uma classe abstrata */ // Abstrata a = new Abstrata(); // ERRO! } } // Saida: // > m\u00e9todo abstrato implementado // > m\u00e9todo n\u00e3o abstrato synchronized \u00b6 A palavra-chave synchronized \u00e9 usada para indicar que um m\u00e9todo ou um bloco em um statement s\u00f3 pode ser acessado por uma thread por vez. Poder ser usado com qualquer modificador de acesso. Programas multi-threaded podem muitas vezes chegar a uma situa\u00e7\u00e3o em que v\u00e1rios threads tentam acessar os mesmos recursos e, finalmente, produzir resultados errados e imprevistos. Portanto, \u00e9 necess\u00e1rio garantir que, por meio de algum m\u00e9todo de sincroniza\u00e7\u00e3o, apenas um thread possa acessar o recurso em um determinado momento. Exemplo como m\u00e9todo \u00b6 package exemplo_synchronized_metodo ; class Sender { /* * M\u00e9todo sincronizado, apenas uma thread ir\u00e1 execut\u00e1-lo por vez */ public synchronized void send ( String msg ) { System . out . println ( \"Enviando: \" + msg ); try { Thread . sleep ( 1000 ); } catch ( Exception e ) { System . out . println ( \"Thread interrompida.\" ); } System . out . println ( \"Enviada: \" + msg ); } } class ThreadedSend extends Thread { Sender obj ; private String msg ; // Recebe o objeto que ir\u00e1 enviar a msg e a msg ThreadedSend ( String msg , Sender obj ) { this . msg = msg ; this . obj = obj ; } // Fun\u00e7\u00e3o chamada ao start() da thread public void run () { obj . send ( msg ); } } class Exemplo { public static void main ( String [] args ) { Sender obj = new Sender (); ThreadedSend S1 = new ThreadedSend ( \"Oi\" , obj ); ThreadedSend S2 = new ThreadedSend ( \"Tchau\" , obj ); // Iniciando duas threads do tipo ThreadedSend S1 . start (); S2 . start (); try { // Esperando as threads terminarem S1 . join (); S2 . join (); } catch ( Exception e ) { System . out . println ( \"Interrompido\" ); } } } // Saida // > Enviando: Oi // > Enviada: Oi // > Enviando: Tchau // > Enviada: Tchau Exemplo como statement \u00b6 Diferente de usar synchronized no m\u00e9todo, synchronized como statement precisa especificar o objeto que o monitor ir\u00e1 aplicar o bloqueio. O monitor est\u00e1 presente em todos os objetos Java, e garante que o bloqueio de um objeto ser\u00e1 realizado para uma \u00fanica tarefa a cada momento. Ent\u00e3o a chamada do especificador synchronized por uma tarefa em execu\u00e7\u00e3o ir\u00e1 utilizar o monitor do objeto para bloquear o trecho de c\u00f3digo. Sendo que o objeto do exemplo normalmente \u00e9 substitu\u00eddo pela palavra-chave this para se referir ao objeto em execu\u00e7\u00e3o, isto \u00e9, o uso do this normalmente ir\u00e1 representar o objeto que est\u00e1 em execu\u00e7\u00e3o multitarefa naquele instante em que for executar o trecho de c\u00f3digo sincronizado. package exemplo_synchronized_statement.exemplo1 ; class Sender { public synchronized void send ( String msg ) { System . out . println ( \"Enviando: \" + msg ); try { Thread . sleep ( 1000 ); } catch ( Exception e ) { System . out . println ( \"Thread interrompida.\" ); } System . out . println ( \"Enviada: \" + msg ); } } class ThreadedSend extends Thread { Sender sender ; private String msg ; ThreadedSend ( String m , Sender obj ) { msg = m ; sender = obj ; } public void run () { /* Usando synchronized como statement. Somente uma thread pode enviar * uma mensagem por vez. */ synchronized ( sender ) { sender . send ( msg ); } } } class TesteSynchronizedStatement1 { public static void main ( String [] args ) { Sender snd = new Sender (); ThreadedSend S1 = new ThreadedSend ( \"Oi\" , snd ); ThreadedSend S2 = new ThreadedSend ( \"Tchau\" , snd ); S1 . start (); S2 . start (); try { S1 . join (); S2 . join (); } catch ( Exception e ) { System . out . println ( \"Interrompido\" ); } } } // Saida // > Enviando: Oi // > Enviada: Oi // > Enviando: Tchau // > Enviada: Tchau Outra forma seria restringir ainda mais onde a sincroniza\u00e7\u00e3o ocorrer\u00e1, como restringir dentro do m\u00e9todo, passando assim o objeto em execu\u00e7\u00e3o, usando this . class Sender { public synchronized void send ( String msg ) { synchronized ( this ) { System . out . println ( \"Enviando: \" + msg ); try { Thread . sleep ( 1000 ); } catch ( Exception e ) { System . out . println ( \"Thread interrompida.\" ); } System . out . println ( \"Enviada: \" + msg ); } } } transient \u00b6 A palavra-chave transient \u00e9 modificador de vari\u00e1veis usado na serializa\u00e7\u00e3o. Ela \u00e9 usada quando n\u00e3o \u00e9 desejado salvar o valor de uma vari\u00e1vel ap\u00f3s uma serializa\u00e7\u00e3o, seja por quest\u00e3o de restri\u00e7\u00e3o de seguran\u00e7a ou esse valor pode ser calculado. package exemplo_transient ; import java.io.* ; class Exemplo implements Serializable { // Campos normais int i = 10 , j = 20 ; // Campos transient transient int k = 30 ; transient static int l = 40 ; // Uso do transient n\u00e3o h\u00e1 impacto transient final int m = 50 ; // Uso do transient n\u00e3o h\u00e1 impacto public static void main ( String [] args ) throws Exception { Exemplo input = new Exemplo (); // Serializa\u00e7\u00e3o FileOutputStream fos = new FileOutputStream ( \"teste.txt\" ); ObjectOutputStream oos = new ObjectOutputStream ( fos ); oos . writeObject ( input ); // Deserializa\u00e7\u00e3o FileInputStream fis = new FileInputStream ( \"teste.txt\" ); ObjectInputStream ois = new ObjectInputStream ( fis ); Exemplo output = ( Exemplo ) ois . readObject (); System . out . println ( \"i = \" + output . i ); System . out . println ( \"j = \" + output . j ); System . out . println ( \"k = \" + output . k ); System . out . println ( \"l = \" + output . l ); System . out . println ( \"m = \" + output . m ); } } // Saida // > i = 10 // > j = 20 // > k = 0 // > l = 40 // > m = 50 Usar transient com static n\u00e3o possui efeito j\u00e1 que campos static n\u00e3o pertencem a inst\u00e2ncia da classe (objeto). Usar transient com final n\u00e3o possui efeito pois campos final s\u00e3o diretamente serializados por seus valores. volatile \u00b6 A palavra-chave volatile \u00e9 usada para evitar que as threads utilizem sua m\u00e9moria cache para ler/gravar valores das vari\u00e1veis, evitando inconsist\u00eancia de dados com outras threads . No Java, quando h\u00e1 inst\u00e2ncias de duas ou mais threads, \u00e9 criada uma mem\u00f3ria cache local para cada thread. Quando m\u00faltiplas threads compartilham a mesma vari\u00e1vel, cada uma copia o valor da vari\u00e1vel em sua pr\u00f3pria cache local. Em qualquer mudan\u00e7a de valor dessa vari\u00e1vel, a atualiza\u00e7\u00e3o \u00e9 realizada no cache local, ao inv\u00e9s de ser na vari\u00e1vel alocada na mem\u00f3ria principal. Por exemplo, em um momento M1, a thread A realiza uma altera\u00e7\u00e3o na vari\u00e1vel x. Em um momento T2, a thread B tamb\u00e9m acessa essa vari\u00e1vel, por\u00e9m a thread B n\u00e3o ter\u00e1 conhecimento de qualquer mudan\u00e7a de valor realizado pela thread A, causando uma poss\u00edvel inconsist\u00eancia de dados, pois cada thread realizou a altera\u00e7\u00e3o apenas em sua cache local. Para evitar esse tipo de situa\u00e7\u00e3o, o operador volatile evita que qualquer altera\u00e7\u00e3o de vari\u00e1vel compartilhada entre m\u00faltiplas threads seja realizada no cache local de uma thread. O volatile \u00e9 aplicado exclusivamente em vari\u00e1veis e, seu uso s\u00f3 ter\u00e1 sentido quando essas forem compartilhadas entre threads. Tal operador \u00e9 pouco difundido entre os programadores e raramente detalhado na literatura. Os desenvolvedores usualmente utilizam o synchronized para bloquear o acesso a objetos e m\u00e9todos compartilhados, enquanto o operador volatile permite o bloqueio de vari\u00e1veis de tipos primitivos e, tamb\u00e9m, o de objetos. Quando uma vari\u00e1vel volatile sofre qualquer mudan\u00e7a de valor por alguma thread, tal altera\u00e7\u00e3o \u00e9 realizada diretamente na mem\u00f3ria principal. Em um bloco ou m\u00e9todo sincronizado, qualquer altera\u00e7\u00e3o de valor de uma vari\u00e1vel \u00e9 realizada na mem\u00f3ria cache da JVM. Esta a\u00e7\u00e3o, em algumas situa\u00e7\u00f5es, pode levar a uma inconsist\u00eancia de dados quando uma thread realiza a leitura em uma vari\u00e1vel compartilhada. package exemplo_volatile ; public class Exemplo { private static volatile int valor = 0 ; static class Escuta extends Thread { public void run () { int captura = valor ; while ( captura < 5 ) { if ( captura != valor ) { System . out . println ( \"Escutou: \" + valor ); captura = valor ; } } } } static class Altera extends Thread { public void run () { while ( valor < 5 ) { System . out . println ( \"Alterou: \" + ( valor + 1 )); valor ++ ; try { Thread . sleep ( 500 ); } catch ( InterruptedException e ) { e . printStackTrace (); } } } } public static void main ( String [] args ) { new Escuta (). start (); new Altera (). start (); } } // Saida // > Alterou: 1 // > Escutou: 1 // > Alterou: 2 // > Escutou: 2 // > Alterou: 3 // > Escutou: 3 // > Alterou: 4 // > Escutou: 4 // > Alterou: 5 // > Escutou: 5 Quando a thread Altera altera o campo valor , a thread Escuta percebe a mudan\u00e7a. Sem o uso do volatile a thread Escuta n\u00e3o perceberia a mudan\u00e7a, j\u00e1 que o campo valor seria o armazenado em sua cache. native \u00b6 A palavra-chave native \u00e9 aplicada a um m\u00e9todo para indicar que o m\u00e9todo \u00e9 implementado no c\u00f3digo nativo usando JNI (Java Native Interface) . Marca um m\u00e9todo, que ser\u00e1 implementado em outras linguagens, n\u00e3o em Java. Os m\u00e9todos nativos foram usados no passado para escrever se\u00e7\u00f5es cr\u00edticas de desempenho, mas com o Java ficando mais r\u00e1pido, isso agora \u00e9 menos comum. M\u00e9todos nativos s\u00e3o atualmente necess\u00e1rios quando \u00e9 necess\u00e1rio chamar uma biblioteca do Java que est\u00e1 escrita em outro linguagem, ou acessar recursos do sistema ou de hardware que s\u00f3 podem ser acessados em outras linguagens. /* TesteNative.java */ package exemplo_native ; public class TesteNative { /* * O m\u00e9todo ser\u00e1 provido por um c\u00f3digo nativo */ private native void imprimir (); public static void main ( String args [] ) { new TesteNative (). imprimir (); } static { System . loadLibrary ( \"TesteNative\" ); } } No exemplo acima a classe TesteNative contendo a declara\u00e7\u00e3o de um m\u00e9todo nativo ( imprimir() ) implementado na linguagem C. O bloco static inicializa o carregamento da biblioteca nativa contendo a implementa\u00e7\u00e3o do m\u00e9todo imprimir() . Primeiro \u00e9 compilado a classe Java: javac TesteNative.java Em seguida, utiliza-se a ferramenta javah para gerar o arquivo de cabe\u00e7alho baseado em JNI para implementa\u00e7\u00e3o do m\u00e9todo nativo em C. O javah \u00e9 usado para gerar cabe\u00e7alhos e c\u00f3digos fonte em C a partir de uma classe Java. javah -jni TesteNative O javah cria um arquivo de extens\u00e3o .h com o mesmo nome da classe. Tal arquivo cont\u00e9m o prot\u00f3tipo do m\u00e9todo nativo, cuja sintaxe \u00e9 Java_<nome_classe>_<nome_m\u00e9todo>() . Nesse sentido, ao compilar a classe TesteNative utilizando o javah , temos o m\u00e9todo imprimir() da classe Java TesteNative convertido para a fun\u00e7\u00e3o Java_TesteNative_imprimir() no arquivo TesteNative.h , o qual deve ser implementado em C. /* TesteNative.h */ #include <jni.h> #ifndef _Included_TesteNative #define _Included_TesteNative #ifdef __cplusplus extern \"C\" { #endif /* * Class: TesteNative * Method: imprimir * Signature: ()V */ JNIEXPORT void JNICALL Java_TesteNative_imprimir ( JNIEnv * , jobject ); #ifdef __cplusplus } #endif #endif Abaixo a implementa\u00e7\u00e3o do m\u00e9todo imprimir() em C. #include <stdio.h> #include <jni.h> #include \"TesteNative.h\" JNIEXPORT void JNICALL Java_TesteNative_imprimir ( JNIEnv * env , jobject obj ) { printf ( \"Ol\u00e1! Invocando um m\u00e9todo nativo!\" ); return ; } A implementa\u00e7\u00e3o da fun\u00e7\u00e3o nativa em C, segue exatamente a assinatura do prot\u00f3tipo do m\u00e9todo presente no arquivo TesteNative.h gerado pelo javah a partir da classe TesteNative . A inclus\u00e3o do cabe\u00e7alho jni.h oferece diferentes tipos de dados n\u00e3o dispon\u00edveis na linguagem C/C++ tratados pelo JNI para a passagem de par\u00e2metros \u00e0s fun\u00e7\u00f5es de c\u00f3digo nativo. Depois de implementado, pode-se compilar o c\u00f3digo nativo a partir do diret\u00f3rio onde as classes Java est\u00e3o presentes da seguinte forma: gcc -I/usr/lib/jvm/java-12-oracle/include/ -I/usr/lib/jvm/java-12-oracle/include/linux -o libTesteNative.so -shared TesteNative.c Na instru\u00e7\u00e3o acima \u00e9 passado como par\u00e2metro o diret\u00f3rio do arquivo de cabe\u00e7alho JNI. A op\u00e7\u00e3o -o determina o nome da biblioteca nativa a ser gerada e deve seguir o formato lib<nome_argumento_do_m\u00e9todo_loadlibrary>.so . J\u00e1 a op\u00e7\u00e3o -shared indica a cria\u00e7\u00e3o de uma biblioteca compartilhada. Depois de todos esses passos, \u00e9 preciso verificar a exist\u00eancia dos arquivos na raiz do diret\u00f3rio do projeto Java: TesteNative.java , TesteNative.class , TesteNative.h , TesteNative.c e libTesteNative.so . O comando abaixo realiza a execu\u00e7\u00e3o do bin\u00e1rio java: java -Djava.library.path = . TesteNative O seguinte resultado \u00e9 gerado: Ol\u00e1! Invocando um m\u00e9todo nativo! strictfp \u00b6 A palavra-chave strictfp \u00e9 usada para restringir os c\u00e1lculos de ponto flutuante para garantir a portabilidade. O strictfp for\u00e7a os pontos flutuante a seguirem o padr\u00e3o IEEE754 , que seria, todos os pontos flutuantes s\u00e3o calculados da mesma maneira independente da plataforma. Se n\u00e3o for usado o strictfp , a implementa\u00e7\u00e3o da JVM estar\u00e1 livre para usar precis\u00e3o extra quando dispon\u00edvel. O strictfp pode ser usado em classes, interfaces e m\u00e9todos n\u00e3o abstratos. Quando aplicado a um m\u00e9todo, ele faz com que todos os c\u00e1lculos dentro do m\u00e9todo usem uma matem\u00e1tica estrita de ponto flutuante. Quando aplicado a uma classe, todos os c\u00e1lculos dentro da classe usam uma matem\u00e1tica estrita de ponto flutuante. public strictfp class TesteStrictfp {}","title":"Modificadores"},{"location":"java/linguagem/modificadores/#modificadores","text":"Modificadores Introdu\u00e7\u00e3o Modificadores de acesso Exemplo de restri\u00e7\u00e3o de acesso para os m\u00e9todos Exemplo de restri\u00e7\u00e3o de acesso para as classes Modificadores sem controle de acesso static final abstract synchronized Exemplo como m\u00e9todo Exemplo como statement transient volatile native strictfp","title":"Modificadores"},{"location":"java/linguagem/modificadores/#introducao","text":"Os modificadores podem ser classificados em duas categorias: Modificadores de acesso Modificadores sem controle de acesso","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/modificadores/#modificadores-de-acesso","text":"Modificadores de acesso controlam o n\u00edvel de acesso. Existem 3 modificadores de acesso e 4 n\u00edveis de acesso. De forma geral os modificadores restringem o acesso da seguinte forma: na classe dentro do pacote fora do pacote (subclasse) fora do pacote public X X X X protected X X X default X X private X Modificador de acesso para classes Modificador Descri\u00e7\u00e3o public A classe \u00e9 acess\u00edvel a qualquer outra classe. default A classe \u00e9 acess\u00edvel a qualquer outra classe no mesmo pacote. Modificador de acesso para campos, m\u00e9todos e construtores Modificador Descri\u00e7\u00e3o public O recurso \u00e9 acess\u00edvel a todas classes. private O recurso \u00e9 acess\u00edvel somente a classe que o declarou. default O recurso \u00e9 acess\u00edvel somente ao mesmo pacote. protected O recurso \u00e9 acess\u00edvel ao mesmo pacote ou para subclasses de pacotes diferentes Classes com n\u00edvel de acesso default mas com m\u00e9todos de n\u00edvel public s\u00e3o permitidas. Pois as classes podem implementar alguma interface ou estender classes abstratas que possuem m\u00e9todos public , n\u00e3o sendo permitido reduzir a visibilidade destes m\u00e9todos que dever\u00e3o ser implementados. Portanto a restri\u00e7\u00e3o de acesso pode ser contornada atrav\u00e9s do n\u00edvel de acesso default da classe. As subclasses com n\u00edvel de acesso public podem herdar e disponibilizar estes m\u00e9todos de n\u00edvel public . Construtores podem ter n\u00edvel de acesso `private`, entretanto a classe s\u00f3 poder\u00e1 ser instanciada por seus pr\u00f3prios m\u00e9todos est\u00e1ticos. Esta configura\u00e7\u00e3o geralmente \u00e9 utilizada para criar classes com o padr\u00e3o de projeto `Singleton`.","title":"Modificadores de acesso"},{"location":"java/linguagem/modificadores/#exemplo-de-restricao-de-acesso-para-os-metodos","text":"package exemplo_acesso_campos.pacote1 ; public class Classe1 { private String privateC1 ; String defaultC1 ; protected String protectedC1 ; public String publicC1 ; public Classe1 () { this . privateC1 = \"private\" ; this . defaultC1 = \"default\" ; this . protectedC1 = \"protected\" ; this . publicC1 = \"public\" ; } public void fncPublicC1 () { System . out . println ( \"\\nC1 Private: \" + this . privateC1 ); System . out . println ( \"C1 Default: \" + this . defaultC1 ); System . out . println ( \"C1 Protected: \" + this . protectedC1 ); System . out . println ( \"C1 Public: \" + this . publicC1 ); } } package exemplo_acesso_campos.pacote1 ; public class Classe2 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); // System.out.println(\"Campo private: \" + c1.privateC1); // ERRO! System . out . println ( \"Campo default: \" + c1 . defaultC1 ); System . out . println ( \"Campo protected: \" + c1 . protectedC1 ); System . out . println ( \"Campo public: \" + c1 . publicC1 ); } } // Saida: // > Campo default: default // > Campo protected: protected // > Campo public: public A Classe2 est\u00e1 no mesmo pacote da Classe1 , portanto somente n\u00e3o consegue acessar o campo private da Classe1 . package exemplo_acesso_campos.pacote2 ; import exemplo_acesso_campos.pacote1.Classe1 ; public class Classe3 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); // System.out.println(\"Campo private: \" + c1.privateC1); // ERRO! // System.out.println(\"Campo default: \" + c1.defaultC1); // ERRO! // System.out.println(\"Campo protected: \" + c1.protectedC1); // ERRO! System . out . println ( \"Campo public: \" + c1 . publicC1 ); } } // Saida // > Campo public: public A Classe3 n\u00e3o est\u00e1 no mesmo pacote da Classe1 e n\u00e3o \u00e9 classe herdeira de Classe1 , portanto somente consegue acessar o campo public da Classe1 . package pacote2 ; import pacote1.Classe1 ; public class Classe4 extends Classe1 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); Classe4 c4 = new Classe4 (); // System.out.println(\"Campo private C1: \" + c1.privateC1); // ERRO! // System.out.println(\"Campo private C4: \" + c4.privateC1); // ERRO! // System.out.println(\"Campo default C1: \" + c1.defaultC1); // ERRO! // System.out.println(\"Campo default C4: \" + c4.defaultC1); // ERRO! /* * Modificador protected permite acessado somente atrav\u00e9s de hierarquia. * Ele n\u00e3o estar\u00e1 acess\u00edvel na subclasse que est\u00e1 fora do pacote usando * a inst\u00e2ncia de alguma superclasse (classe pai). */ // System.out.println(\"Campo protected C1: \" + c1.protectedC1); // ERRO! System . out . println ( \"Campo protected C4: \" + c4 . protectedC1 ); System . out . println ( \"Campo public C1: \" + c1 . publicC1 ); System . out . println ( \"Campo public C4: \" + c4 . publicC1 ); /* * A Fun\u00e7\u00e3o da classe C1 tem acesso a todos campos de sua classe */ c4 . fncPublicC1 (); } } // Saida // > Campo protected C4: protected // > Campo public C1: public // > Campo public C4: public // > C1 Private: private // > C1 Default: default // > C1 Protected: protected // > C1 Public: public A Classe4 n\u00e3o est\u00e1 no mesmo pacote da Classe1 , mas \u00e9 classe herdeira de Classe1 , portanto consegue acessar os campos public e protected da Classe1 . package exemplo_acesso_campos.pacote2 ; public class Classe5 extends Classe4 { public static void main ( String [] args ) { Classe4 c4 = new Classe4 (); Classe5 c5 = new Classe5 (); // System.out.println(\"Campo private C4: \" + c4.privateC1); // ERRO! // System.out.println(\"Campo private C5: \" + c5.privateC1); // ERRO! // System.out.println(\"Campo default C4: \" + c4.defaultC1); // ERRO! // System.out.println(\"Campo default C5: \" + c5.defaultC1); // ERRO! /* * Modificador protected n\u00e3o estar\u00e1 acess\u00edvel na subclasse que est\u00e1 fora * do pacote usando a inst\u00e2ncia de alguma superclasse intermedi\u00e1ria. */ // System.out.println(\"Campo protected C4: \" + c4.protectedC1); // ERRO! System . out . println ( \"Campo protected C5: \" + c5 . protectedC1 ); System . out . println ( \"Campo public C4: \" + c4 . publicC1 ); System . out . println ( \"Campo public C5: \" + c5 . publicC1 ); } } // Saida // > Campo protected C5: protected // > Campo public C4: public // > Campo public C5: public A Classe5 \u00e9 herdeira da Classe4 que por sua vez \u00e9 herdeira da Classe1 , entretanto campos protected n\u00e3o s\u00e3o acess\u00edveis na subclasse que est\u00e1 fora do pacote usando a inst\u00e2ncia de qualquer superclasse intermedi\u00e1ria, apenas pela inst\u00e2ncia da subclasse corrente. A inst\u00e2ncia da Classe4 n\u00e3o possui rela\u00e7\u00e3o de heran\u00e7a com a classe Classe5 , portanto no escopo da Classe5 n\u00e3o \u00e9 poss\u00edvel acessar os campos protected da Classe1 atrav\u00e9s da Classe4 . J\u00e1 a inst\u00e2ncia da pr\u00f3pria Classe5 possui rela\u00e7\u00e3o de heran\u00e7a com a classe Classe4 e Classe1 consequentemente. Os campos `protected` s\u00e3o acessados somente pelo elo de heran\u00e7a at\u00e9 a subclasse corrente. Portanto somente a inst\u00e2ncia da subclasse corrente pode acessar m\u00e9todos `protected` de uma superclasse.","title":"Exemplo de restri\u00e7\u00e3o de acesso para os m\u00e9todos"},{"location":"java/linguagem/modificadores/#exemplo-de-restricao-de-acesso-para-as-classes","text":"package exemplo_acesso_classes.pacote1 ; class Classe1 { private String privateC1 ; String defaultC1 ; protected String protectedC1 ; public String publicC1 ; Classe1 () { this . privateC1 = \"private\" ; this . defaultC1 = \"default\" ; this . protectedC1 = \"protected\" ; this . publicC1 = \"public\" ; } } A Classe1 possui restri\u00e7\u00e3o de acesso default , portanto pode ser acessada somente por classes do mesmo pacote. package exemplo_acesso_classes.pacote1 ; public class Classe2 extends Classe1 { public static void main ( String [] args ) { Classe1 c1 = new Classe1 (); // System.out.println(\"Campo private: \" + c1.privateC1); // ERRO! System . out . println ( \"Campo default: \" + c1 . defaultC1 ); System . out . println ( \"Campo protected: \" + c1 . protectedC1 ); System . out . println ( \"Campo public: \" + c1 . publicC1 ); } } // Saida: // > Campo default: default // > Campo protected: protected // > Campo public: public A Classe2 est\u00e1 no mesmo pacote e \u00e9 herdeira da Classe1 , e possui restri\u00e7\u00e3o public . Dessa forma, possibilita atrav\u00e9s de sua inst\u00e2ncia, acesso a Classe1 como se esta fosse public . package exemplo_acesso_classes.pacote2 ; // import pacote1.Classe1; // ERRO! public class Classe3 { } Como a Classe3 est\u00e1 em outro pacote, n\u00e3o possui permiss\u00e3o para acessar a Classe1 . package exemplo_acesso_classes.pacote2 ; import exemplo_acesso_classes.pacote1.Classe2 ; public class Classe4 extends Classe2 { public static void main ( String [] args ) { Classe2 c2 = new Classe2 (); Classe4 c4 = new Classe4 (); // System.out.println(\"Campo private C2: \" + c2.privateC1); // ERRO! // System.out.println(\"Campo private C4: \" + c4.privateC1); // ERRO! // System.out.println(\"Campo default C2: \" + c2.defaultC1); // ERRO! // System.out.println(\"Campo default C4: \" + c4.defaultC1); // ERRO! // System.out.println(\"Campo protected C2: \" + c2.protectedC1); // ERRO! System . out . println ( \"Campo protected C4: \" + c4 . protectedC1 ); System . out . println ( \"Campo public C2: \" + c2 . publicC1 ); System . out . println ( \"Campo public C4: \" + c4 . publicC1 ); } } // Saida // > Campo protected C4: protected // > Campo public C2: public // > Campo public C4: public Atrav\u00e9s da heran\u00e7a da Classe2 , a Classe4 que est\u00e1 em outro pacote, consegue acessar os campos da Classe1 mesmo n\u00e3o sendo uma classe public .","title":"Exemplo de restri\u00e7\u00e3o de acesso para as classes"},{"location":"java/linguagem/modificadores/#modificadores-sem-controle-de-acesso","text":"N\u00e3o controlam o n\u00edvel de acesso, mas proveem outras funcionalidades. S\u00e3o eles: static final abstract synchronized transient volatile native strictfp","title":"Modificadores sem controle de acesso"},{"location":"java/linguagem/modificadores/#static","text":"A palavra-chave static significa que \u00e9 algo pertence diretamente a classe e que n\u00e3o precisa de uma inst\u00e2ncia dessa classe para poder acess\u00e1-lo. Classe est\u00e1tica package exemplo_static ; class Static { String atrNaoEstatico = \"Campo N\u00e3o est\u00e1tico\" ; static String atrEstatico = \"Campo est\u00e1tico\" ; static void metodoEstatico () { System . out . println ( \"M\u00e9todo est\u00e1tico\" ); /* * N\u00e3o \u00e9 necesser\u00e1io inst\u00e2ncia para chamar um campo ou m\u00e9todo * est\u00e1tico */ System . out . println ( atrEstatico ); /* * Um m\u00e9todo est\u00e1tico n\u00e3o pode acessar uma vari\u00e1vel de inst\u00e2ncia, j\u00e1 * que o m\u00e9todo pertence \u00e0 classe. Somente uma inst\u00e2ncia pode acessar * uma vari\u00e1vel de inst\u00e2ncia. */ // System.out.println(atrNaoEstatico); // ERRO! Static i = new Static (); System . out . println ( i . atrNaoEstatico ); } void metodoNaoEstatico () { System . out . println ( \"M\u00e9todo N\u00e3o est\u00e1tico\" ); /* * Um m\u00e9todo n\u00e3o est\u00e1tico pode acessar uma vari\u00e1vel de inst\u00e2ncia, j\u00e1 * que o m\u00e9todo pertence \u00e0 inst\u00e2ncia. */ System . out . println ( atrEstatico ); System . out . println ( atrNaoEstatico ); } public static void main ( String [] args ) { metodoEstatico (); // ou Static.metodoEstatico() /* * O m\u00e9todo main \u00e9 est\u00e1tico portanto n\u00e3o pode acessar um campo de * inst\u00e2ncia, seu escopo \u00e9 de classe, portanto tamb\u00e9m n\u00e3o pode acessar * a inst\u00e2ncia com this. */ // System.out.println(atrNaoEstatico); // ERRO! // System.out.println(this.metodoNaoEstatico()); // ERRO! Static i = new Static (); i . metodoNaoEstatico (); } } class Exemplo { public static void main ( String [] args ) { /* * Chamando um m\u00e9todo est\u00e1tico de Static em outra classe */ Static . metodoEstatico (); Static i = new Static (); i . metodoNaoEstatico (); } } // Saida: // > M\u00e9todo est\u00e1tico // > Campo est\u00e1tico // > Campo N\u00e3o est\u00e1tico // > M\u00e9todo N\u00e3o est\u00e1tico // > Campo est\u00e1tico // > Campo N\u00e3o est\u00e1tico","title":"static"},{"location":"java/linguagem/modificadores/#final","text":"A palavra-chave final em classes significa que elas n\u00e3o pode ser herdadas. Em m\u00e9todos, significa que eles n\u00e3o podem ser sobrescritos. J\u00e1 em campos, significa que eles n\u00e3o podem ser modificado, ou seja, um campo final pode receber uma atribui\u00e7\u00e3o somente em sua cria\u00e7\u00e3o. Classe final package exemplo_final ; class Final { final String atrFinal ; // Poderia ser atribu\u00eddo o valor aqui Final () { this . atrFinal = \"Final\" ; /* * Um campo final n\u00e3o pode ser alterado */ // this.atrFinal = \"Novo Final\"; // ERRO! } final void metodoFinal () { System . out . println ( \"M\u00e9todo final\" ); } public static void main ( String [] args ) { Final t = new Final (); /* * Um campo final n\u00e3o pode ser alterado */ // t.atrFinal = \"Novo final\"; // ERRO! System . out . println ( t . atrFinal ); t . metodoFinal (); } } class Exemplo extends Final { /* * Um m\u00e9todo final n\u00e3o pode ser sobrescrito */ // void metodoFinal() { } // ERRO! public static void main ( String [] args ) { Final t = new Final (); /* * Um campo final n\u00e3o pode ser alterado */ // t.atrFinal = \"Novo final\"; // ERRO! System . out . println ( t . atrFinal ); t . metodoFinal (); } } // Final: // > Final // > M\u00e9todo final","title":"final"},{"location":"java/linguagem/modificadores/#abstract","text":"A palavra-chave abstract pode ser usada para classes e m\u00e9todos dessas classes. Classes abstratas n\u00e3o podem ser instanciadas, somente herdadas. M\u00e9todos abstratos dessas classes devem ser obrigatoriamente implementados nas subclasses. Classe abstract package exemplo_abstract ; abstract class Abstract { String funcaoNaoAbstrata () { return \"m\u00e9todo n\u00e3o abstrato\" ; }; /* * Fun\u00e7\u00e3o abstrata n\u00e3o possui corpo */ abstract String funcaoAbstrata (); } class Exemplo extends Abstract { /* * Obrigado a implementar os m\u00e9todos abstratos da classe pai */ String funcaoAbstrata () { return \"m\u00e9todo abstrato implementado\" ; } public static void main ( String [] args ) { Exemplo t = new Exemplo (); System . out . println ( t . funcaoAbstrata ()); System . out . println ( t . funcaoNaoAbstrata ()); /* * N\u00e3o \u00e9 poss\u00edvel instanciar uma classe abstrata */ // Abstrata a = new Abstrata(); // ERRO! } } // Saida: // > m\u00e9todo abstrato implementado // > m\u00e9todo n\u00e3o abstrato","title":"abstract"},{"location":"java/linguagem/modificadores/#synchronized","text":"A palavra-chave synchronized \u00e9 usada para indicar que um m\u00e9todo ou um bloco em um statement s\u00f3 pode ser acessado por uma thread por vez. Poder ser usado com qualquer modificador de acesso. Programas multi-threaded podem muitas vezes chegar a uma situa\u00e7\u00e3o em que v\u00e1rios threads tentam acessar os mesmos recursos e, finalmente, produzir resultados errados e imprevistos. Portanto, \u00e9 necess\u00e1rio garantir que, por meio de algum m\u00e9todo de sincroniza\u00e7\u00e3o, apenas um thread possa acessar o recurso em um determinado momento.","title":"synchronized"},{"location":"java/linguagem/modificadores/#exemplo-como-metodo","text":"package exemplo_synchronized_metodo ; class Sender { /* * M\u00e9todo sincronizado, apenas uma thread ir\u00e1 execut\u00e1-lo por vez */ public synchronized void send ( String msg ) { System . out . println ( \"Enviando: \" + msg ); try { Thread . sleep ( 1000 ); } catch ( Exception e ) { System . out . println ( \"Thread interrompida.\" ); } System . out . println ( \"Enviada: \" + msg ); } } class ThreadedSend extends Thread { Sender obj ; private String msg ; // Recebe o objeto que ir\u00e1 enviar a msg e a msg ThreadedSend ( String msg , Sender obj ) { this . msg = msg ; this . obj = obj ; } // Fun\u00e7\u00e3o chamada ao start() da thread public void run () { obj . send ( msg ); } } class Exemplo { public static void main ( String [] args ) { Sender obj = new Sender (); ThreadedSend S1 = new ThreadedSend ( \"Oi\" , obj ); ThreadedSend S2 = new ThreadedSend ( \"Tchau\" , obj ); // Iniciando duas threads do tipo ThreadedSend S1 . start (); S2 . start (); try { // Esperando as threads terminarem S1 . join (); S2 . join (); } catch ( Exception e ) { System . out . println ( \"Interrompido\" ); } } } // Saida // > Enviando: Oi // > Enviada: Oi // > Enviando: Tchau // > Enviada: Tchau","title":"Exemplo como m\u00e9todo"},{"location":"java/linguagem/modificadores/#exemplo-como-statement","text":"Diferente de usar synchronized no m\u00e9todo, synchronized como statement precisa especificar o objeto que o monitor ir\u00e1 aplicar o bloqueio. O monitor est\u00e1 presente em todos os objetos Java, e garante que o bloqueio de um objeto ser\u00e1 realizado para uma \u00fanica tarefa a cada momento. Ent\u00e3o a chamada do especificador synchronized por uma tarefa em execu\u00e7\u00e3o ir\u00e1 utilizar o monitor do objeto para bloquear o trecho de c\u00f3digo. Sendo que o objeto do exemplo normalmente \u00e9 substitu\u00eddo pela palavra-chave this para se referir ao objeto em execu\u00e7\u00e3o, isto \u00e9, o uso do this normalmente ir\u00e1 representar o objeto que est\u00e1 em execu\u00e7\u00e3o multitarefa naquele instante em que for executar o trecho de c\u00f3digo sincronizado. package exemplo_synchronized_statement.exemplo1 ; class Sender { public synchronized void send ( String msg ) { System . out . println ( \"Enviando: \" + msg ); try { Thread . sleep ( 1000 ); } catch ( Exception e ) { System . out . println ( \"Thread interrompida.\" ); } System . out . println ( \"Enviada: \" + msg ); } } class ThreadedSend extends Thread { Sender sender ; private String msg ; ThreadedSend ( String m , Sender obj ) { msg = m ; sender = obj ; } public void run () { /* Usando synchronized como statement. Somente uma thread pode enviar * uma mensagem por vez. */ synchronized ( sender ) { sender . send ( msg ); } } } class TesteSynchronizedStatement1 { public static void main ( String [] args ) { Sender snd = new Sender (); ThreadedSend S1 = new ThreadedSend ( \"Oi\" , snd ); ThreadedSend S2 = new ThreadedSend ( \"Tchau\" , snd ); S1 . start (); S2 . start (); try { S1 . join (); S2 . join (); } catch ( Exception e ) { System . out . println ( \"Interrompido\" ); } } } // Saida // > Enviando: Oi // > Enviada: Oi // > Enviando: Tchau // > Enviada: Tchau Outra forma seria restringir ainda mais onde a sincroniza\u00e7\u00e3o ocorrer\u00e1, como restringir dentro do m\u00e9todo, passando assim o objeto em execu\u00e7\u00e3o, usando this . class Sender { public synchronized void send ( String msg ) { synchronized ( this ) { System . out . println ( \"Enviando: \" + msg ); try { Thread . sleep ( 1000 ); } catch ( Exception e ) { System . out . println ( \"Thread interrompida.\" ); } System . out . println ( \"Enviada: \" + msg ); } } }","title":"Exemplo como statement"},{"location":"java/linguagem/modificadores/#transient","text":"A palavra-chave transient \u00e9 modificador de vari\u00e1veis usado na serializa\u00e7\u00e3o. Ela \u00e9 usada quando n\u00e3o \u00e9 desejado salvar o valor de uma vari\u00e1vel ap\u00f3s uma serializa\u00e7\u00e3o, seja por quest\u00e3o de restri\u00e7\u00e3o de seguran\u00e7a ou esse valor pode ser calculado. package exemplo_transient ; import java.io.* ; class Exemplo implements Serializable { // Campos normais int i = 10 , j = 20 ; // Campos transient transient int k = 30 ; transient static int l = 40 ; // Uso do transient n\u00e3o h\u00e1 impacto transient final int m = 50 ; // Uso do transient n\u00e3o h\u00e1 impacto public static void main ( String [] args ) throws Exception { Exemplo input = new Exemplo (); // Serializa\u00e7\u00e3o FileOutputStream fos = new FileOutputStream ( \"teste.txt\" ); ObjectOutputStream oos = new ObjectOutputStream ( fos ); oos . writeObject ( input ); // Deserializa\u00e7\u00e3o FileInputStream fis = new FileInputStream ( \"teste.txt\" ); ObjectInputStream ois = new ObjectInputStream ( fis ); Exemplo output = ( Exemplo ) ois . readObject (); System . out . println ( \"i = \" + output . i ); System . out . println ( \"j = \" + output . j ); System . out . println ( \"k = \" + output . k ); System . out . println ( \"l = \" + output . l ); System . out . println ( \"m = \" + output . m ); } } // Saida // > i = 10 // > j = 20 // > k = 0 // > l = 40 // > m = 50 Usar transient com static n\u00e3o possui efeito j\u00e1 que campos static n\u00e3o pertencem a inst\u00e2ncia da classe (objeto). Usar transient com final n\u00e3o possui efeito pois campos final s\u00e3o diretamente serializados por seus valores.","title":"transient"},{"location":"java/linguagem/modificadores/#volatile","text":"A palavra-chave volatile \u00e9 usada para evitar que as threads utilizem sua m\u00e9moria cache para ler/gravar valores das vari\u00e1veis, evitando inconsist\u00eancia de dados com outras threads . No Java, quando h\u00e1 inst\u00e2ncias de duas ou mais threads, \u00e9 criada uma mem\u00f3ria cache local para cada thread. Quando m\u00faltiplas threads compartilham a mesma vari\u00e1vel, cada uma copia o valor da vari\u00e1vel em sua pr\u00f3pria cache local. Em qualquer mudan\u00e7a de valor dessa vari\u00e1vel, a atualiza\u00e7\u00e3o \u00e9 realizada no cache local, ao inv\u00e9s de ser na vari\u00e1vel alocada na mem\u00f3ria principal. Por exemplo, em um momento M1, a thread A realiza uma altera\u00e7\u00e3o na vari\u00e1vel x. Em um momento T2, a thread B tamb\u00e9m acessa essa vari\u00e1vel, por\u00e9m a thread B n\u00e3o ter\u00e1 conhecimento de qualquer mudan\u00e7a de valor realizado pela thread A, causando uma poss\u00edvel inconsist\u00eancia de dados, pois cada thread realizou a altera\u00e7\u00e3o apenas em sua cache local. Para evitar esse tipo de situa\u00e7\u00e3o, o operador volatile evita que qualquer altera\u00e7\u00e3o de vari\u00e1vel compartilhada entre m\u00faltiplas threads seja realizada no cache local de uma thread. O volatile \u00e9 aplicado exclusivamente em vari\u00e1veis e, seu uso s\u00f3 ter\u00e1 sentido quando essas forem compartilhadas entre threads. Tal operador \u00e9 pouco difundido entre os programadores e raramente detalhado na literatura. Os desenvolvedores usualmente utilizam o synchronized para bloquear o acesso a objetos e m\u00e9todos compartilhados, enquanto o operador volatile permite o bloqueio de vari\u00e1veis de tipos primitivos e, tamb\u00e9m, o de objetos. Quando uma vari\u00e1vel volatile sofre qualquer mudan\u00e7a de valor por alguma thread, tal altera\u00e7\u00e3o \u00e9 realizada diretamente na mem\u00f3ria principal. Em um bloco ou m\u00e9todo sincronizado, qualquer altera\u00e7\u00e3o de valor de uma vari\u00e1vel \u00e9 realizada na mem\u00f3ria cache da JVM. Esta a\u00e7\u00e3o, em algumas situa\u00e7\u00f5es, pode levar a uma inconsist\u00eancia de dados quando uma thread realiza a leitura em uma vari\u00e1vel compartilhada. package exemplo_volatile ; public class Exemplo { private static volatile int valor = 0 ; static class Escuta extends Thread { public void run () { int captura = valor ; while ( captura < 5 ) { if ( captura != valor ) { System . out . println ( \"Escutou: \" + valor ); captura = valor ; } } } } static class Altera extends Thread { public void run () { while ( valor < 5 ) { System . out . println ( \"Alterou: \" + ( valor + 1 )); valor ++ ; try { Thread . sleep ( 500 ); } catch ( InterruptedException e ) { e . printStackTrace (); } } } } public static void main ( String [] args ) { new Escuta (). start (); new Altera (). start (); } } // Saida // > Alterou: 1 // > Escutou: 1 // > Alterou: 2 // > Escutou: 2 // > Alterou: 3 // > Escutou: 3 // > Alterou: 4 // > Escutou: 4 // > Alterou: 5 // > Escutou: 5 Quando a thread Altera altera o campo valor , a thread Escuta percebe a mudan\u00e7a. Sem o uso do volatile a thread Escuta n\u00e3o perceberia a mudan\u00e7a, j\u00e1 que o campo valor seria o armazenado em sua cache.","title":"volatile"},{"location":"java/linguagem/modificadores/#native","text":"A palavra-chave native \u00e9 aplicada a um m\u00e9todo para indicar que o m\u00e9todo \u00e9 implementado no c\u00f3digo nativo usando JNI (Java Native Interface) . Marca um m\u00e9todo, que ser\u00e1 implementado em outras linguagens, n\u00e3o em Java. Os m\u00e9todos nativos foram usados no passado para escrever se\u00e7\u00f5es cr\u00edticas de desempenho, mas com o Java ficando mais r\u00e1pido, isso agora \u00e9 menos comum. M\u00e9todos nativos s\u00e3o atualmente necess\u00e1rios quando \u00e9 necess\u00e1rio chamar uma biblioteca do Java que est\u00e1 escrita em outro linguagem, ou acessar recursos do sistema ou de hardware que s\u00f3 podem ser acessados em outras linguagens. /* TesteNative.java */ package exemplo_native ; public class TesteNative { /* * O m\u00e9todo ser\u00e1 provido por um c\u00f3digo nativo */ private native void imprimir (); public static void main ( String args [] ) { new TesteNative (). imprimir (); } static { System . loadLibrary ( \"TesteNative\" ); } } No exemplo acima a classe TesteNative contendo a declara\u00e7\u00e3o de um m\u00e9todo nativo ( imprimir() ) implementado na linguagem C. O bloco static inicializa o carregamento da biblioteca nativa contendo a implementa\u00e7\u00e3o do m\u00e9todo imprimir() . Primeiro \u00e9 compilado a classe Java: javac TesteNative.java Em seguida, utiliza-se a ferramenta javah para gerar o arquivo de cabe\u00e7alho baseado em JNI para implementa\u00e7\u00e3o do m\u00e9todo nativo em C. O javah \u00e9 usado para gerar cabe\u00e7alhos e c\u00f3digos fonte em C a partir de uma classe Java. javah -jni TesteNative O javah cria um arquivo de extens\u00e3o .h com o mesmo nome da classe. Tal arquivo cont\u00e9m o prot\u00f3tipo do m\u00e9todo nativo, cuja sintaxe \u00e9 Java_<nome_classe>_<nome_m\u00e9todo>() . Nesse sentido, ao compilar a classe TesteNative utilizando o javah , temos o m\u00e9todo imprimir() da classe Java TesteNative convertido para a fun\u00e7\u00e3o Java_TesteNative_imprimir() no arquivo TesteNative.h , o qual deve ser implementado em C. /* TesteNative.h */ #include <jni.h> #ifndef _Included_TesteNative #define _Included_TesteNative #ifdef __cplusplus extern \"C\" { #endif /* * Class: TesteNative * Method: imprimir * Signature: ()V */ JNIEXPORT void JNICALL Java_TesteNative_imprimir ( JNIEnv * , jobject ); #ifdef __cplusplus } #endif #endif Abaixo a implementa\u00e7\u00e3o do m\u00e9todo imprimir() em C. #include <stdio.h> #include <jni.h> #include \"TesteNative.h\" JNIEXPORT void JNICALL Java_TesteNative_imprimir ( JNIEnv * env , jobject obj ) { printf ( \"Ol\u00e1! Invocando um m\u00e9todo nativo!\" ); return ; } A implementa\u00e7\u00e3o da fun\u00e7\u00e3o nativa em C, segue exatamente a assinatura do prot\u00f3tipo do m\u00e9todo presente no arquivo TesteNative.h gerado pelo javah a partir da classe TesteNative . A inclus\u00e3o do cabe\u00e7alho jni.h oferece diferentes tipos de dados n\u00e3o dispon\u00edveis na linguagem C/C++ tratados pelo JNI para a passagem de par\u00e2metros \u00e0s fun\u00e7\u00f5es de c\u00f3digo nativo. Depois de implementado, pode-se compilar o c\u00f3digo nativo a partir do diret\u00f3rio onde as classes Java est\u00e3o presentes da seguinte forma: gcc -I/usr/lib/jvm/java-12-oracle/include/ -I/usr/lib/jvm/java-12-oracle/include/linux -o libTesteNative.so -shared TesteNative.c Na instru\u00e7\u00e3o acima \u00e9 passado como par\u00e2metro o diret\u00f3rio do arquivo de cabe\u00e7alho JNI. A op\u00e7\u00e3o -o determina o nome da biblioteca nativa a ser gerada e deve seguir o formato lib<nome_argumento_do_m\u00e9todo_loadlibrary>.so . J\u00e1 a op\u00e7\u00e3o -shared indica a cria\u00e7\u00e3o de uma biblioteca compartilhada. Depois de todos esses passos, \u00e9 preciso verificar a exist\u00eancia dos arquivos na raiz do diret\u00f3rio do projeto Java: TesteNative.java , TesteNative.class , TesteNative.h , TesteNative.c e libTesteNative.so . O comando abaixo realiza a execu\u00e7\u00e3o do bin\u00e1rio java: java -Djava.library.path = . TesteNative O seguinte resultado \u00e9 gerado: Ol\u00e1! Invocando um m\u00e9todo nativo!","title":"native"},{"location":"java/linguagem/modificadores/#strictfp","text":"A palavra-chave strictfp \u00e9 usada para restringir os c\u00e1lculos de ponto flutuante para garantir a portabilidade. O strictfp for\u00e7a os pontos flutuante a seguirem o padr\u00e3o IEEE754 , que seria, todos os pontos flutuantes s\u00e3o calculados da mesma maneira independente da plataforma. Se n\u00e3o for usado o strictfp , a implementa\u00e7\u00e3o da JVM estar\u00e1 livre para usar precis\u00e3o extra quando dispon\u00edvel. O strictfp pode ser usado em classes, interfaces e m\u00e9todos n\u00e3o abstratos. Quando aplicado a um m\u00e9todo, ele faz com que todos os c\u00e1lculos dentro do m\u00e9todo usem uma matem\u00e1tica estrita de ponto flutuante. Quando aplicado a uma classe, todos os c\u00e1lculos dentro da classe usam uma matem\u00e1tica estrita de ponto flutuante. public strictfp class TesteStrictfp {}","title":"strictfp"},{"location":"java/linguagem/optional/","text":"Optional \u00b6 Optional Introdu\u00e7\u00e3o Links Introdu\u00e7\u00e3o \u00b6 Optional \u00e9 uma classe presente a partir do Java 8 usada para lidar com NullPointerException . A principal proposta de Optional \u00e9 encapsular o retorno de m\u00e9todos e informar se um valor do tipo <T> est\u00e1 presente ou ausente. Podemos pensar em um Optional como uma classe que pode ou n\u00e3o conter um valor n\u00e3o nulo. Evitar um NullPointerException pode ser muito verboso, em objetos encadeados. Por exemplo, em String pais = endereco.getBairro().getCidade().getEstado().getPais().getNome() , ter\u00edamos quer verificar se cada m\u00e9todo aninhado retorna um valor diferente de null antes de chamar o pr\u00f3ximo m\u00e9todo. package _optional.exemplo_null_pointer_exception ; import java.util.ArrayList ; class Exemplo { public static void main ( String [] args ) { ArrayList < Cidade > cidades = new ArrayList <> (); Pais p1 = new Pais ( \"Brasil\" ); Estado e1 = new Estado ( p1 ); Cidade c1 = new Cidade ( e1 ); Estado e2 = new Estado (); Cidade c2 = new Cidade ( e2 ); cidades . add ( c1 ); cidades . add ( c2 ); for ( Cidade c : cidades ) { if ( c . getEstado () != null ) { Estado estado = c . getEstado (); /* * A segunda cidade n\u00e3o tem o pa\u00eds, portanto ir\u00e1 retornar * NullPointerException. Portanto a solu\u00e7\u00e3o \u00e9 verificar todos objetos * aninhados at\u00e9 o pa\u00eds. */ // System.out.println(estado.getPais().getNome()); // ERRO! if ( estado . getPais () != null ) { Pais pais = estado . getPais (); System . out . println ( pais . getNome ()); } else { System . out . println ( \"N/A\" ); } } } } } class Cidade { // ... outros campos Estado estado ; Cidade ( Estado estado ) { this . estado = estado ; } Estado getEstado () { return this . estado ; } } class Estado { // ... outros campos Pais pais ; Estado () {} Estado ( Pais pais ) { this . pais = pais ; } Pais getPais () { return this . pais ; } } class Pais { String nome ; Pais ( String nome ) { this . nome = nome ; } String getNome () { return this . nome ; } } // Saida: // > Brasil // > N/A Com Optional , poder\u00edamos ter algo como o c\u00f3digo abaixo. Entretanto, mesmo sendo uma boa pr\u00e1tica, esta n\u00e3o \u00e9 o forma recomendada, j\u00e1 que n\u00e3o reduzimos a verbosidade. for ( Cidade c : cidades ) { if ( c . getEstado () != null ) { Estado estado = c . getEstado (); /* * ofNullable(): retorna o valor se existir, sen\u00e3o retorna um empty Optional */ Optional < Pais > pais = Optional . ofNullable ( estado . getPais ()); /* * isPresent(): verifica se existe algum valor */ if ( pais . isPresent ()) { /* * get(): retorna o valor contido no objeto Optional */ System . out . println ( pais . get (). getNome ()); } else { System . out . println ( \"N/A\" ); } } } Com express\u00e3o lambda e com o m\u00e9todo ifPresent demos reduzir a verbosidade. for ( Cidade c : cidades ) { if ( c . getEstado () != null ) { Estado estado = c . getEstado (); Optional < Pais > pais = Optional . ofNullable ( estado . getPais ()); /* * ifPresent(): se existe algum valor executa a a\u00e7\u00e3o com o dado valor */ pais . ifPresent ( p -> System . out . println ( p . getNome ())). orElse ( \"N/A\" )); } } S\u00e3o os m\u00e9todos das classes que devem saber os valores retornados e se estes podem ser nulos. Portanto, podemos melhorar o c\u00f3digo, usando Optional diretamente nos m\u00e9todos das classes. Assim, podemos usar express\u00e3o lambda e os m\u00e9todos map e flatMap . Agora todos os objetos aninhados est\u00e3o protegidos contra um NullPointerException . package _optional.exemplo_optional ; import java.util.ArrayList ; import java.util.Optional ; class Exemplo { public static void main ( String [] args ) { ArrayList < Cidade > cidades = new ArrayList <> (); Pais p1 = new Pais ( \"Brasil\" ); Estado e1 = new Estado ( p1 ); Cidade c1 = new Cidade ( e1 ); Estado e2 = new Estado (); Cidade c2 = new Cidade ( e2 ); cidades . add ( c1 ); cidades . add ( c2 ); for ( Cidade c : cidades ) { /* * map(): aplica o argumento de fun\u00e7\u00e3o ao valor e, em seguida, retorna o * resultado agrupado em um Optional, como ex: * [1,2],[1,3] => [[1,2],[1,3]] * flatMap(): aceita um argumento de fun\u00e7\u00e3o que \u00e9 aplicado a um valor * Optional e retorna o resultado diretamente. Ou seja, \"achata\" objetos * aninhados como: Optional<Optional<T>> transformado em apenas * Optional<T>, como ex: * [1,2], [1,3] => [1,2,1,3] * orElse(): retorna o valor presente se existir, sen\u00e3o retorna o argumento */ System . out . println ( c . getEstado (). flatMap ( Estado :: getPais ). map ( Pais :: getNome ) . orElse ( \"N/A\" )); } } } class Cidade { // ... outros campos Estado estado ; Cidade ( Estado estado ) { this . estado = estado ; } Optional < Estado > getEstado () { return Optional . ofNullable ( this . estado ); } } class Estado { // ... outros campos Pais pais ; Estado () { } Estado ( Pais pais ) { this . pais = pais ; } Optional < Pais > getPais () { return Optional . ofNullable ( this . pais ); } } class Pais { String nome ; Pais ( String nome ) { this . nome = nome ; } String getNome () { return this . nome ; } } // Saida: // > Brasil // > N/A Algumas outras fun\u00e7\u00f5es de Optional : package _optional.exemplo_metodos ; import java.util.ArrayList ; import java.util.Optional ; import java.util.stream.Stream ; class Exemplo { public static void main ( String [] args ) { ArrayList < Carro > carros = new ArrayList <> (); carros . add ( new Carro ( \"Uno\" , 1000.0 )); carros . add ( new Carro ( \"Gol\" , 2000.0 )); carros . add ( new Carro ( \"Celta\" , 1500.0 )); carros . add ( new Carro ( \"HB20\" )); for ( Carro carro : carros ) { /* * ifPresent(): se um valor estiver presente, executa a a\u00e7\u00e3o no valor, * caso contr\u00e1rio, n\u00e3o faz nada. * * return: 1000.0 2000.0 1500.0 */ carro . getSeguro (). ifPresent ( s -> System . out . print ( s . getValor () + \" \" )); /* * or(): Se um valor estiver presente, retorna o valor, caso contr\u00e1rio, * retorna o valor Optional * * return: 1000.0 2000.0 1500.0 0.0 */ System . out . print ( carro . getSeguro () . or (() -> Optional . ofNullable ( new Seguro ( 0.0 ))) . map ( Seguro :: getValor ). get ()); /* * orElse(): se um valor estiver presente, retorna o valor, caso contr\u00e1rio, * retorna o valor definido no par\u00e2metro * * return: 1000.0 2000.0 1500.0 0.0 */ System . out . print ( carro . getSeguro (). map ( Seguro :: getValor ) . orElse ( 0.0 ) + \" \" ); /* * ifPresentOrElse(): se um valor estiver presente, executa uma determinada * a\u00e7\u00e3o, caso contr\u00e1rio, executa uma outra a\u00e7\u00e3o * * return: 500.0 1000.0 750.0 0.0 */ carro . getSeguro (). map ( Seguro :: getValor ) . ifPresentOrElse ( s -> System . out . print ( s * 0.5 + \" \" ), () -> System . out . print ( 0.0 + \" \" )); /* * orElseThrow(): se um valor estiver presente, retorna o valor, caso * contr\u00e1rio, lan\u00e7a a exce\u00e7\u00e3o informada */ System . out . print ( carro . getSeguro (). map ( Seguro :: getValor ) . orElseThrow ( IllegalArgumentException :: new )); /* * filter(): retorna o valor se est\u00e1 presente satisfaz a condi\u00e7\u00e3o, caso * contr\u00e1rio retorna um Optional vazio. * * return: 2000.0 1500.0 */ carro . getSeguro (). filter ( s -> s . getValor () > 1000.0 ) . ifPresent ( s -> System . out . print ( s . getValor () + \" \" )); /* * stream(): Se um valor estiver presente, retorna uma Stream contendo apenas * esse valor, caso contr\u00e1rio, retorna uma Stream vazia. * * return: 1000.0 2000.0 1500.0 */ Stream < Double > stream = carro . getSeguro (). map ( Seguro :: getValor ). stream (); stream . forEach ( System . out :: println ); } } } class Carro { String modelo ; Seguro seguro ; Carro ( String modelo ) { this . modelo = modelo ; } Carro ( String modelo , Double valorSeguro ) { this . modelo = modelo ; seguro = new Seguro ( valorSeguro ); } Optional < Seguro > getSeguro () { return Optional . ofNullable ( this . seguro ); } } class Seguro { Double valor ; Seguro ( Double valor ) { this . valor = valor ; } Double getValor () { return this . valor ; } } Para valores primitivos n\u00e3o utilize a forma gen\u00e9rica, escolha OptionalInt, OptionalLong e OptionalDouble // Evite Optional < Integer > preco = Optional . of ( 50 ); // Prefira OptionalInt preco = OptionalInt . of ( 50 ); OptionalLong preco = OptionalLong . of ( 50L ); OptionalDouble preco = OptionalDouble . of ( 50.43d ); Links \u00b6 Boas pr\u00e1ticas usando Optional","title":"Optional"},{"location":"java/linguagem/optional/#optional","text":"Optional Introdu\u00e7\u00e3o Links","title":"Optional"},{"location":"java/linguagem/optional/#introducao","text":"Optional \u00e9 uma classe presente a partir do Java 8 usada para lidar com NullPointerException . A principal proposta de Optional \u00e9 encapsular o retorno de m\u00e9todos e informar se um valor do tipo <T> est\u00e1 presente ou ausente. Podemos pensar em um Optional como uma classe que pode ou n\u00e3o conter um valor n\u00e3o nulo. Evitar um NullPointerException pode ser muito verboso, em objetos encadeados. Por exemplo, em String pais = endereco.getBairro().getCidade().getEstado().getPais().getNome() , ter\u00edamos quer verificar se cada m\u00e9todo aninhado retorna um valor diferente de null antes de chamar o pr\u00f3ximo m\u00e9todo. package _optional.exemplo_null_pointer_exception ; import java.util.ArrayList ; class Exemplo { public static void main ( String [] args ) { ArrayList < Cidade > cidades = new ArrayList <> (); Pais p1 = new Pais ( \"Brasil\" ); Estado e1 = new Estado ( p1 ); Cidade c1 = new Cidade ( e1 ); Estado e2 = new Estado (); Cidade c2 = new Cidade ( e2 ); cidades . add ( c1 ); cidades . add ( c2 ); for ( Cidade c : cidades ) { if ( c . getEstado () != null ) { Estado estado = c . getEstado (); /* * A segunda cidade n\u00e3o tem o pa\u00eds, portanto ir\u00e1 retornar * NullPointerException. Portanto a solu\u00e7\u00e3o \u00e9 verificar todos objetos * aninhados at\u00e9 o pa\u00eds. */ // System.out.println(estado.getPais().getNome()); // ERRO! if ( estado . getPais () != null ) { Pais pais = estado . getPais (); System . out . println ( pais . getNome ()); } else { System . out . println ( \"N/A\" ); } } } } } class Cidade { // ... outros campos Estado estado ; Cidade ( Estado estado ) { this . estado = estado ; } Estado getEstado () { return this . estado ; } } class Estado { // ... outros campos Pais pais ; Estado () {} Estado ( Pais pais ) { this . pais = pais ; } Pais getPais () { return this . pais ; } } class Pais { String nome ; Pais ( String nome ) { this . nome = nome ; } String getNome () { return this . nome ; } } // Saida: // > Brasil // > N/A Com Optional , poder\u00edamos ter algo como o c\u00f3digo abaixo. Entretanto, mesmo sendo uma boa pr\u00e1tica, esta n\u00e3o \u00e9 o forma recomendada, j\u00e1 que n\u00e3o reduzimos a verbosidade. for ( Cidade c : cidades ) { if ( c . getEstado () != null ) { Estado estado = c . getEstado (); /* * ofNullable(): retorna o valor se existir, sen\u00e3o retorna um empty Optional */ Optional < Pais > pais = Optional . ofNullable ( estado . getPais ()); /* * isPresent(): verifica se existe algum valor */ if ( pais . isPresent ()) { /* * get(): retorna o valor contido no objeto Optional */ System . out . println ( pais . get (). getNome ()); } else { System . out . println ( \"N/A\" ); } } } Com express\u00e3o lambda e com o m\u00e9todo ifPresent demos reduzir a verbosidade. for ( Cidade c : cidades ) { if ( c . getEstado () != null ) { Estado estado = c . getEstado (); Optional < Pais > pais = Optional . ofNullable ( estado . getPais ()); /* * ifPresent(): se existe algum valor executa a a\u00e7\u00e3o com o dado valor */ pais . ifPresent ( p -> System . out . println ( p . getNome ())). orElse ( \"N/A\" )); } } S\u00e3o os m\u00e9todos das classes que devem saber os valores retornados e se estes podem ser nulos. Portanto, podemos melhorar o c\u00f3digo, usando Optional diretamente nos m\u00e9todos das classes. Assim, podemos usar express\u00e3o lambda e os m\u00e9todos map e flatMap . Agora todos os objetos aninhados est\u00e3o protegidos contra um NullPointerException . package _optional.exemplo_optional ; import java.util.ArrayList ; import java.util.Optional ; class Exemplo { public static void main ( String [] args ) { ArrayList < Cidade > cidades = new ArrayList <> (); Pais p1 = new Pais ( \"Brasil\" ); Estado e1 = new Estado ( p1 ); Cidade c1 = new Cidade ( e1 ); Estado e2 = new Estado (); Cidade c2 = new Cidade ( e2 ); cidades . add ( c1 ); cidades . add ( c2 ); for ( Cidade c : cidades ) { /* * map(): aplica o argumento de fun\u00e7\u00e3o ao valor e, em seguida, retorna o * resultado agrupado em um Optional, como ex: * [1,2],[1,3] => [[1,2],[1,3]] * flatMap(): aceita um argumento de fun\u00e7\u00e3o que \u00e9 aplicado a um valor * Optional e retorna o resultado diretamente. Ou seja, \"achata\" objetos * aninhados como: Optional<Optional<T>> transformado em apenas * Optional<T>, como ex: * [1,2], [1,3] => [1,2,1,3] * orElse(): retorna o valor presente se existir, sen\u00e3o retorna o argumento */ System . out . println ( c . getEstado (). flatMap ( Estado :: getPais ). map ( Pais :: getNome ) . orElse ( \"N/A\" )); } } } class Cidade { // ... outros campos Estado estado ; Cidade ( Estado estado ) { this . estado = estado ; } Optional < Estado > getEstado () { return Optional . ofNullable ( this . estado ); } } class Estado { // ... outros campos Pais pais ; Estado () { } Estado ( Pais pais ) { this . pais = pais ; } Optional < Pais > getPais () { return Optional . ofNullable ( this . pais ); } } class Pais { String nome ; Pais ( String nome ) { this . nome = nome ; } String getNome () { return this . nome ; } } // Saida: // > Brasil // > N/A Algumas outras fun\u00e7\u00f5es de Optional : package _optional.exemplo_metodos ; import java.util.ArrayList ; import java.util.Optional ; import java.util.stream.Stream ; class Exemplo { public static void main ( String [] args ) { ArrayList < Carro > carros = new ArrayList <> (); carros . add ( new Carro ( \"Uno\" , 1000.0 )); carros . add ( new Carro ( \"Gol\" , 2000.0 )); carros . add ( new Carro ( \"Celta\" , 1500.0 )); carros . add ( new Carro ( \"HB20\" )); for ( Carro carro : carros ) { /* * ifPresent(): se um valor estiver presente, executa a a\u00e7\u00e3o no valor, * caso contr\u00e1rio, n\u00e3o faz nada. * * return: 1000.0 2000.0 1500.0 */ carro . getSeguro (). ifPresent ( s -> System . out . print ( s . getValor () + \" \" )); /* * or(): Se um valor estiver presente, retorna o valor, caso contr\u00e1rio, * retorna o valor Optional * * return: 1000.0 2000.0 1500.0 0.0 */ System . out . print ( carro . getSeguro () . or (() -> Optional . ofNullable ( new Seguro ( 0.0 ))) . map ( Seguro :: getValor ). get ()); /* * orElse(): se um valor estiver presente, retorna o valor, caso contr\u00e1rio, * retorna o valor definido no par\u00e2metro * * return: 1000.0 2000.0 1500.0 0.0 */ System . out . print ( carro . getSeguro (). map ( Seguro :: getValor ) . orElse ( 0.0 ) + \" \" ); /* * ifPresentOrElse(): se um valor estiver presente, executa uma determinada * a\u00e7\u00e3o, caso contr\u00e1rio, executa uma outra a\u00e7\u00e3o * * return: 500.0 1000.0 750.0 0.0 */ carro . getSeguro (). map ( Seguro :: getValor ) . ifPresentOrElse ( s -> System . out . print ( s * 0.5 + \" \" ), () -> System . out . print ( 0.0 + \" \" )); /* * orElseThrow(): se um valor estiver presente, retorna o valor, caso * contr\u00e1rio, lan\u00e7a a exce\u00e7\u00e3o informada */ System . out . print ( carro . getSeguro (). map ( Seguro :: getValor ) . orElseThrow ( IllegalArgumentException :: new )); /* * filter(): retorna o valor se est\u00e1 presente satisfaz a condi\u00e7\u00e3o, caso * contr\u00e1rio retorna um Optional vazio. * * return: 2000.0 1500.0 */ carro . getSeguro (). filter ( s -> s . getValor () > 1000.0 ) . ifPresent ( s -> System . out . print ( s . getValor () + \" \" )); /* * stream(): Se um valor estiver presente, retorna uma Stream contendo apenas * esse valor, caso contr\u00e1rio, retorna uma Stream vazia. * * return: 1000.0 2000.0 1500.0 */ Stream < Double > stream = carro . getSeguro (). map ( Seguro :: getValor ). stream (); stream . forEach ( System . out :: println ); } } } class Carro { String modelo ; Seguro seguro ; Carro ( String modelo ) { this . modelo = modelo ; } Carro ( String modelo , Double valorSeguro ) { this . modelo = modelo ; seguro = new Seguro ( valorSeguro ); } Optional < Seguro > getSeguro () { return Optional . ofNullable ( this . seguro ); } } class Seguro { Double valor ; Seguro ( Double valor ) { this . valor = valor ; } Double getValor () { return this . valor ; } } Para valores primitivos n\u00e3o utilize a forma gen\u00e9rica, escolha OptionalInt, OptionalLong e OptionalDouble // Evite Optional < Integer > preco = Optional . of ( 50 ); // Prefira OptionalInt preco = OptionalInt . of ( 50 ); OptionalLong preco = OptionalLong . of ( 50L ); OptionalDouble preco = OptionalDouble . of ( 50.43d );","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/optional/#links","text":"Boas pr\u00e1ticas usando Optional","title":"Links"},{"location":"java/linguagem/polimorfismo/","text":"Polimorfismo \u00b6 Polimorfismo Introdu\u00e7\u00e3o Polimorfismo por inclus\u00e3o Polimorfismo param\u00e9trico Polimorfismo por sobrecarga Polimorfismo por coer\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Polimorfismo \u00e9 a capacidade de um objeto poder ser referenciado de v\u00e1rias formas. Polimorfismo n\u00e3o quer dizer que o objeto fica se transformando, muito pelo contr\u00e1rio, um objeto nasce de um tipo e morre daquele tipo, o que pode mudar \u00e9 a maneira como nos referimos a ele. Os principais tipos de polimorfismo podem ser classificados da seguinte forma: ![polimorfismo-tipos](./_polimorfismo/polimorfismo-tipos.png) Polimorfismo por inclus\u00e3o \u00b6 Tamb\u00e9m conhecido em ingl\u00eas como subtype polymorphism ou inclusion polymorphism . Esse \u00e9 o polimorfismo que pode ser considerado entre os mais conhecidos, pois \u00e9 o que muitos costumam dizer quando falam de 'polimorfismo'. S\u00e3o subclasses que fornecem diferentes implementa\u00e7\u00f5es de algum m\u00e9todo da super classe. Neste caso o m\u00e9todo chamado ser\u00e1 baseado na inst\u00e2ncia que o chamar. package exemplo_polimorfismo_inclusao ; abstract class Operacao { abstract double calcular ( double x , double y ); } class Soma extends Operacao { double calcular ( double x , double y ) { return x + y ; } void apresentar () { System . out . println ( \"Fun\u00e7\u00e3o soma\" ); } } class Subtracao extends Operacao { double calcular ( double x , double y ) { return x - y ; } void apresentar () { System . out . println ( \"Fun\u00e7\u00e3o subtra\u00e7\u00e3o\" ); } } public class Exemplo { /* * O Objeto do tipo Operacao, poder\u00e1 ser tanto de Soma quanto de Subtracao */ public static void mostrarCalculo ( Operacao operacao , double x , double y ) { System . out . println ( \"O resultado \u00e9: \" + operacao . calcular ( x , y )); /* * Somente m\u00e9todos presentes em Operacao poder\u00e3o ser chamados */ // operacao.apresentar(); // ERRO! } public static void main ( String [] args ) { Exemplo . mostrarCalculo ( new Soma (), 5 , 5 ); // 10 Exemplo . mostrarCalculo ( new Subtracao (), 5 , 5 ); // 0 } } // Saida // > O resultado \u00e9: 10.0 // > O resultado \u00e9: 0.0 Polimorfismo param\u00e9trico \u00b6 Tamb\u00e9m conhecido em ingl\u00eas como Parametric polymorphism . Tamb\u00e9m \u00e9 chamado de Generics em Java e C#, e templates em C++. Diferente do polimorfismo por sobrecarga, basicamente \u00e9 uma fun\u00e7\u00e3o (ou m\u00e9todo) ou um tipo de dado que pode ser escrito genericamente para que ele possa lidar com valores de forma id\u00eantica sem depender do seu tipo. package exemplo_polimorfismo_parametrico ; public class Exemplo { /* * M\u00e9todo gen\u00e9rico */ public static < E > void printArray ( E [] inputArray ) { for ( E element : inputArray ) { System . out . printf ( \"%s \" , element ); } } public static void main ( String args [] ) { Integer [] intArray = { 1 , 2 , 3 , 4 , 5 }; Double [] doubleArray = { 1.1 , 2.2 , 3.3 , 4.4 }; Character [] charArray = { 'H' , 'E' , 'L' , 'L' , 'O' }; System . out . print ( \"Array integer: \" ); printArray ( intArray ); System . out . print ( \"\\nArray double: \" ); printArray ( doubleArray ); System . out . print ( \"\\nArray character: \" ); printArray ( charArray ); } } // Saida // > Array integer: 1 2 3 4 5 // > Array double: 1.1 2.2 3.3 4.4 // > Array character: H E L L O Polimorfismo por sobrecarga \u00b6 Tamb\u00e9m conhecido em ingl\u00eas como Overloading Ad-hoc Polymorphism . Neste caso a escolha de qual m\u00e9todo ser\u00e1 chamado ser\u00e1 baseado na quantidade ou nos tipos de par\u00e2metros da fun\u00e7\u00e3o. package exemplo_polimorfismo_sobrecarga ; class Polimorfismo { void metodo ( int parA , int parB ) { System . out . println ( \"int, int\" ); } } class Exemplo extends Polimorfismo { void metodo ( String parA , String parB ) { System . out . println ( \"String, String\" ); } void metodo ( String parA , int parB ) { System . out . println ( \"String, int\" ); } void metodo ( String parA ) { System . out . println ( \"String\" ); } public static void main ( String [] args ) { Exemplo t = new Exemplo (); t . metodo ( \"teste\" , \"teste\" ); t . metodo ( \"teste\" , 10 ); t . metodo ( \"teste\" ); /* * Chamando o m\u00e9todo da superclasse */ t . metodo ( 10 , 10 ); } } // Saida // > String, String // > String, int // > String // > int, int Polimorfismo por coer\u00e7\u00e3o \u00b6 Tamb\u00e9m conhecido em ingl\u00eas como Coercion Ad-hoc Polymorphism . Acontece quando um tipo primitivo ou um objeto \u00e9 'convertido' em outro tipo de objeto ou tipo primitivo, e essas convers\u00f5es podem ser impl\u00edcitas (feitas automaticamente) ou explicitada. package exemplo_polimorfismo_coercao ; class Polimorfismo { void metodo () { System . out . println ( \"pai\" ); } } class Exemplo extends Polimorfismo { String campo ; Exemplo ( String campo ) { this . campo = campo ; } void metodo () { System . out . println ( \"filho\" ); } void apresentar () { System . out . println ( \"ol\u00e1\" ); } public static void main ( String [] args ) { /* * Coer\u00e7\u00e3o impl\u00edcita */ /* * O objeto p \u00e9 uma inst\u00e2ncia de Exemplo mas somente com os * m\u00e9todos e campos presente em Polimorfismo. Portanto n\u00e3o h\u00e1 como * chamar o m\u00e9todo apresentar de Exemplo. */ Polimorfismo p = new Exemplo ( \"campo\" ); p . metodo (); // p.apresentar(); // ERRO! // p.campo; // ERRO! /* * Coer\u00e7\u00e3o expl\u00edcita */ /* * Ap\u00f3s a coer\u00e7\u00e3o do objeto p novamente para uma inst\u00e2mcia de * Exemplo, o campo pode ser acessado novamente. O valor dos * campos n\u00e3o foi perdido nesse processo. */ Exemplo t = ( Exemplo ) p ; System . out . println ( t . campo ); /* * Tipos primitivos e Strings */ int i = ( int ) 10.2 ; String s = Double . toString ( 10.2 ); // ou String.valueOf(10.2); } } // Saida: // > filho // > campo","title":"Polimorfismo"},{"location":"java/linguagem/polimorfismo/#polimorfismo","text":"Polimorfismo Introdu\u00e7\u00e3o Polimorfismo por inclus\u00e3o Polimorfismo param\u00e9trico Polimorfismo por sobrecarga Polimorfismo por coer\u00e7\u00e3o","title":"Polimorfismo"},{"location":"java/linguagem/polimorfismo/#introducao","text":"Polimorfismo \u00e9 a capacidade de um objeto poder ser referenciado de v\u00e1rias formas. Polimorfismo n\u00e3o quer dizer que o objeto fica se transformando, muito pelo contr\u00e1rio, um objeto nasce de um tipo e morre daquele tipo, o que pode mudar \u00e9 a maneira como nos referimos a ele. Os principais tipos de polimorfismo podem ser classificados da seguinte forma: ![polimorfismo-tipos](./_polimorfismo/polimorfismo-tipos.png)","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/polimorfismo/#polimorfismo-por-inclusao","text":"Tamb\u00e9m conhecido em ingl\u00eas como subtype polymorphism ou inclusion polymorphism . Esse \u00e9 o polimorfismo que pode ser considerado entre os mais conhecidos, pois \u00e9 o que muitos costumam dizer quando falam de 'polimorfismo'. S\u00e3o subclasses que fornecem diferentes implementa\u00e7\u00f5es de algum m\u00e9todo da super classe. Neste caso o m\u00e9todo chamado ser\u00e1 baseado na inst\u00e2ncia que o chamar. package exemplo_polimorfismo_inclusao ; abstract class Operacao { abstract double calcular ( double x , double y ); } class Soma extends Operacao { double calcular ( double x , double y ) { return x + y ; } void apresentar () { System . out . println ( \"Fun\u00e7\u00e3o soma\" ); } } class Subtracao extends Operacao { double calcular ( double x , double y ) { return x - y ; } void apresentar () { System . out . println ( \"Fun\u00e7\u00e3o subtra\u00e7\u00e3o\" ); } } public class Exemplo { /* * O Objeto do tipo Operacao, poder\u00e1 ser tanto de Soma quanto de Subtracao */ public static void mostrarCalculo ( Operacao operacao , double x , double y ) { System . out . println ( \"O resultado \u00e9: \" + operacao . calcular ( x , y )); /* * Somente m\u00e9todos presentes em Operacao poder\u00e3o ser chamados */ // operacao.apresentar(); // ERRO! } public static void main ( String [] args ) { Exemplo . mostrarCalculo ( new Soma (), 5 , 5 ); // 10 Exemplo . mostrarCalculo ( new Subtracao (), 5 , 5 ); // 0 } } // Saida // > O resultado \u00e9: 10.0 // > O resultado \u00e9: 0.0","title":"Polimorfismo por inclus\u00e3o"},{"location":"java/linguagem/polimorfismo/#polimorfismo-parametrico","text":"Tamb\u00e9m conhecido em ingl\u00eas como Parametric polymorphism . Tamb\u00e9m \u00e9 chamado de Generics em Java e C#, e templates em C++. Diferente do polimorfismo por sobrecarga, basicamente \u00e9 uma fun\u00e7\u00e3o (ou m\u00e9todo) ou um tipo de dado que pode ser escrito genericamente para que ele possa lidar com valores de forma id\u00eantica sem depender do seu tipo. package exemplo_polimorfismo_parametrico ; public class Exemplo { /* * M\u00e9todo gen\u00e9rico */ public static < E > void printArray ( E [] inputArray ) { for ( E element : inputArray ) { System . out . printf ( \"%s \" , element ); } } public static void main ( String args [] ) { Integer [] intArray = { 1 , 2 , 3 , 4 , 5 }; Double [] doubleArray = { 1.1 , 2.2 , 3.3 , 4.4 }; Character [] charArray = { 'H' , 'E' , 'L' , 'L' , 'O' }; System . out . print ( \"Array integer: \" ); printArray ( intArray ); System . out . print ( \"\\nArray double: \" ); printArray ( doubleArray ); System . out . print ( \"\\nArray character: \" ); printArray ( charArray ); } } // Saida // > Array integer: 1 2 3 4 5 // > Array double: 1.1 2.2 3.3 4.4 // > Array character: H E L L O","title":"Polimorfismo param\u00e9trico"},{"location":"java/linguagem/polimorfismo/#polimorfismo-por-sobrecarga","text":"Tamb\u00e9m conhecido em ingl\u00eas como Overloading Ad-hoc Polymorphism . Neste caso a escolha de qual m\u00e9todo ser\u00e1 chamado ser\u00e1 baseado na quantidade ou nos tipos de par\u00e2metros da fun\u00e7\u00e3o. package exemplo_polimorfismo_sobrecarga ; class Polimorfismo { void metodo ( int parA , int parB ) { System . out . println ( \"int, int\" ); } } class Exemplo extends Polimorfismo { void metodo ( String parA , String parB ) { System . out . println ( \"String, String\" ); } void metodo ( String parA , int parB ) { System . out . println ( \"String, int\" ); } void metodo ( String parA ) { System . out . println ( \"String\" ); } public static void main ( String [] args ) { Exemplo t = new Exemplo (); t . metodo ( \"teste\" , \"teste\" ); t . metodo ( \"teste\" , 10 ); t . metodo ( \"teste\" ); /* * Chamando o m\u00e9todo da superclasse */ t . metodo ( 10 , 10 ); } } // Saida // > String, String // > String, int // > String // > int, int","title":"Polimorfismo por sobrecarga"},{"location":"java/linguagem/polimorfismo/#polimorfismo-por-coercao","text":"Tamb\u00e9m conhecido em ingl\u00eas como Coercion Ad-hoc Polymorphism . Acontece quando um tipo primitivo ou um objeto \u00e9 'convertido' em outro tipo de objeto ou tipo primitivo, e essas convers\u00f5es podem ser impl\u00edcitas (feitas automaticamente) ou explicitada. package exemplo_polimorfismo_coercao ; class Polimorfismo { void metodo () { System . out . println ( \"pai\" ); } } class Exemplo extends Polimorfismo { String campo ; Exemplo ( String campo ) { this . campo = campo ; } void metodo () { System . out . println ( \"filho\" ); } void apresentar () { System . out . println ( \"ol\u00e1\" ); } public static void main ( String [] args ) { /* * Coer\u00e7\u00e3o impl\u00edcita */ /* * O objeto p \u00e9 uma inst\u00e2ncia de Exemplo mas somente com os * m\u00e9todos e campos presente em Polimorfismo. Portanto n\u00e3o h\u00e1 como * chamar o m\u00e9todo apresentar de Exemplo. */ Polimorfismo p = new Exemplo ( \"campo\" ); p . metodo (); // p.apresentar(); // ERRO! // p.campo; // ERRO! /* * Coer\u00e7\u00e3o expl\u00edcita */ /* * Ap\u00f3s a coer\u00e7\u00e3o do objeto p novamente para uma inst\u00e2mcia de * Exemplo, o campo pode ser acessado novamente. O valor dos * campos n\u00e3o foi perdido nesse processo. */ Exemplo t = ( Exemplo ) p ; System . out . println ( t . campo ); /* * Tipos primitivos e Strings */ int i = ( int ) 10.2 ; String s = Double . toString ( 10.2 ); // ou String.valueOf(10.2); } } // Saida: // > filho // > campo","title":"Polimorfismo por coer\u00e7\u00e3o"},{"location":"java/linguagem/reflexao/","text":"Reflex\u00e3o \u00b6 Reflex\u00e3o Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 A utiliza\u00e7\u00e3o de aplica\u00e7\u00f5es para as mais diversas finalidades tem aumentado, e conseq\u00fcentemente a exig\u00eancia de funcionalidades por seus usu\u00e1rios. A necessidade de funcionalidades muito espec\u00edficas e/ou em maior n\u00famero, podem tornar o seu desenvolvimento invi\u00e1vel para a empresa respons\u00e1vel pela aplica\u00e7\u00e3o. Uma alternativa para viabilizar o desenvolvimento destas funcionalidades \u00e9 permitir que estas sejam criadas por terceiros e acopladas \u00e0 aplica\u00e7\u00e3o. Muitos aplicativos permitem a extens\u00e3o de funcionalidades atrav\u00e9s da utiliza\u00e7\u00e3o de m\u00f3dulos externos, chamados de plug-ins , que s\u00e3o acoplados a uma aplica\u00e7\u00e3o-base. Esta extens\u00e3o pode ser permitida em aplicativos Java atrav\u00e9s da utiliza\u00e7\u00e3o da reflex\u00e3o de classes. Imagine se toda vez que um novo plugin fosse desenvolvido para algum aplicativo (Eclipse, Firefox, Chrome, etc) ele tivesse que ser refatorado a fim de adaptar-se ao uso desse novo plugin . Seria muito trabalhoso e invi\u00e1vel, dado a quantidade de plugins que s\u00e3o desenvolvidos para estes aplicativos. A solu\u00e7\u00e3o para isso \u00e9 sem d\u00favida o uso de reflex\u00e3o, com ela podemos deixar, por exemplo, pontos estrat\u00e9gicos do sistema para aceitar a instala\u00e7\u00e3o de plugins afim de tornar o sistema extens\u00edvel. Reflex\u00e3o \u00e9 um recurso da API Java que possibilita aos aplicativos o acesso e a modifica\u00e7\u00e3o do comportamento de aplica\u00e7\u00f5es que est\u00e3o rodando na Java Virtual Machine . Uma classe pode acessar outras classes em tempo de execu\u00e7\u00e3o , sem conhecer sua defini\u00e7\u00e3o no momento da compila\u00e7\u00e3o. Informa\u00e7\u00f5es relativas \u00e0 esta defini\u00e7\u00e3o, como seus construtores, m\u00e9todos e campos, podem ser facilmente acessados atrav\u00e9s de m\u00e9todos de reflex\u00e3o da API Java. Classes externas \u00e0 aplica\u00e7\u00e3o, que n\u00e3o foram compiladas junto a mesma, podem ser instanciadas para utiliza\u00e7\u00e3o de seus recursos. Os recursos de reflex\u00e3o oferecidos pela API Java, na maioria dos casos, s\u00e3o utilizados para prover extens\u00e3o de funcionalidades a aplica\u00e7\u00f5es, desenvolvimento de ferramentas de debug e aplicativos que permitem a navega\u00e7\u00e3o no conte\u00fado de classes compiladas. Para todo tipo de objeto, a Java Virtual Machine cria uma inst\u00e2ncia imut\u00e1vel de java.lang.Class , que prov\u00ea m\u00e9todos para examinar as propriedades do objeto em tempo de execu\u00e7\u00e3o. Esta classe \u00e9 o ponto de partida para trabalhar com reflex\u00e3o. No exemplo abaixo n\u00e3o sabemos quais os m\u00e9todos e campos da classe Pessoa , para isso vamos utilizar as ferramentas oferecidas pelo reflex\u00e3o afim de descobrir essas informa\u00e7\u00f5es em tempo de execu\u00e7\u00e3o. Veja que com os m\u00e9todos getDeclaredFields() e getDeclaredMethods() conseguimos capturar todos os campos e m\u00e9todos da classe em quest\u00e3o, mesmo sem saber como ela foi constru\u00edda. package _reflexao.exemplo1_reflexao ; import java.lang.reflect.Field ; import java.lang.reflect.Method ; public class Exemplo { public static void main ( String [] args ) { /* * O m\u00e9todo getClass() da classe Object retorna a classe de um determinado objeto em * tempo de execu\u00e7\u00e3o. */ Class c1 = \"minha string\" . getClass (); Class c2 = boolean . class ; Class c3 = java . io . PrintStream . class ; System . out . println ( c1 + \" | \" + c2 + \" |\" + c3 ); Class < Pessoa > classe = Pessoa . class ; for ( Field campo : classe . getDeclaredFields ()) { System . out . println ( campo . getName ()); } for ( Method metodo : classe . getDeclaredMethods ()) { System . out . println ( metodo . getName ()); } } } class Pessoa { String nome ; int idade ; Pessoa () {} public String getNome () { return nome ; } public void setNome ( String nome ) { this . nome = nome ; } public int getIdade () { return idade ; } public void setIdade ( int idade ) { this . idade = idade ; } } // Saida // > class java.lang.String | boolean |class java.io.PrintStream // > nome // > idade // > setNome // > getIdade // > setIdade // > getNome No exemplo abaixo, usamos o m\u00e9todo invoke() para invocar o m\u00e9todo e passamos como argumento a inst\u00e2ncia que executar\u00e1 o m\u00e9todo. package _reflexao.exemplo2_reflexao ; import java.lang.reflect.Method ; import java.util.HashMap ; import java.util.Map ; public class Exemplo { public static void main ( String [] args ) { Pessoa pessoa = new Pessoa (); pessoa . setSexo ( 'M' ); pessoa . setNome ( \"Gabriel\" ); Map < String , Object > attributes = Reflexao . getMapaCampos ( pessoa ); for ( String key : attributes . keySet ()) { System . out . println ( key + \": \" + attributes . get ( key )); } } } class Reflexao { public static Map < String , Object > getMapaCampos ( Object obj ) { Map < String , Object > attributesMap = new HashMap <> (); Class <?> classeObj = obj . getClass (); Method [] metodos = classeObj . getMethods (); for ( Method metodo : metodos ) { if ( metodo . getName (). startsWith ( \"get\" ) && metodo . getReturnType () != void . class ) { String nomeCampo = metodo . getName (). substring ( 3 ); try { /* * Invoca o m\u00e9todo corrente passando o objeto como argumento e recebe o * retorno do m\u00e9todo. */ Object value = metodo . invoke ( obj ); /* * Adiciona as chaves 'nome m\u00e9todo sem get' + 'retorno do m\u00e9todo' */ attributesMap . put ( nomeCampo , value ); } catch ( Exception e ) { e . printStackTrace (); } } } return attributesMap ; } } class Pessoa { String nome ; char sexo ; Pessoa () {} public String getNome () { return ( sexo == 'M' ? \"Sr. \" : \"Sra. \" ) + nome ; } public void setNome ( String nome ) { this . nome = nome ; } public char getSexo () { return sexo ; } public void setSexo ( char sexo ) { this . sexo = sexo ; } } // Saida // > Class: class _reflexao.exemplo2_reflexao.Pessoa // > Nome: Sr. Gabriel // > Sexo: M Os termos comumente utilizados s\u00e3o reflex\u00e3o e introspec\u00e7\u00e3o. Na reflex\u00e3o, um programa observa e modifica seu comportamento enquanto que na introspec\u00e7\u00e3o ele apenas observa e obt\u00e9m informa\u00e7\u00f5es dele mesmo. A linguagem Java possui uma API de *reflection* que, na verdade, possui muito mais caracter\u00edsticas de introspec\u00e7\u00e3o do que reflex\u00e3o.","title":"Reflex\u00e3o"},{"location":"java/linguagem/reflexao/#reflexao","text":"Reflex\u00e3o Introdu\u00e7\u00e3o","title":"Reflex\u00e3o"},{"location":"java/linguagem/reflexao/#introducao","text":"A utiliza\u00e7\u00e3o de aplica\u00e7\u00f5es para as mais diversas finalidades tem aumentado, e conseq\u00fcentemente a exig\u00eancia de funcionalidades por seus usu\u00e1rios. A necessidade de funcionalidades muito espec\u00edficas e/ou em maior n\u00famero, podem tornar o seu desenvolvimento invi\u00e1vel para a empresa respons\u00e1vel pela aplica\u00e7\u00e3o. Uma alternativa para viabilizar o desenvolvimento destas funcionalidades \u00e9 permitir que estas sejam criadas por terceiros e acopladas \u00e0 aplica\u00e7\u00e3o. Muitos aplicativos permitem a extens\u00e3o de funcionalidades atrav\u00e9s da utiliza\u00e7\u00e3o de m\u00f3dulos externos, chamados de plug-ins , que s\u00e3o acoplados a uma aplica\u00e7\u00e3o-base. Esta extens\u00e3o pode ser permitida em aplicativos Java atrav\u00e9s da utiliza\u00e7\u00e3o da reflex\u00e3o de classes. Imagine se toda vez que um novo plugin fosse desenvolvido para algum aplicativo (Eclipse, Firefox, Chrome, etc) ele tivesse que ser refatorado a fim de adaptar-se ao uso desse novo plugin . Seria muito trabalhoso e invi\u00e1vel, dado a quantidade de plugins que s\u00e3o desenvolvidos para estes aplicativos. A solu\u00e7\u00e3o para isso \u00e9 sem d\u00favida o uso de reflex\u00e3o, com ela podemos deixar, por exemplo, pontos estrat\u00e9gicos do sistema para aceitar a instala\u00e7\u00e3o de plugins afim de tornar o sistema extens\u00edvel. Reflex\u00e3o \u00e9 um recurso da API Java que possibilita aos aplicativos o acesso e a modifica\u00e7\u00e3o do comportamento de aplica\u00e7\u00f5es que est\u00e3o rodando na Java Virtual Machine . Uma classe pode acessar outras classes em tempo de execu\u00e7\u00e3o , sem conhecer sua defini\u00e7\u00e3o no momento da compila\u00e7\u00e3o. Informa\u00e7\u00f5es relativas \u00e0 esta defini\u00e7\u00e3o, como seus construtores, m\u00e9todos e campos, podem ser facilmente acessados atrav\u00e9s de m\u00e9todos de reflex\u00e3o da API Java. Classes externas \u00e0 aplica\u00e7\u00e3o, que n\u00e3o foram compiladas junto a mesma, podem ser instanciadas para utiliza\u00e7\u00e3o de seus recursos. Os recursos de reflex\u00e3o oferecidos pela API Java, na maioria dos casos, s\u00e3o utilizados para prover extens\u00e3o de funcionalidades a aplica\u00e7\u00f5es, desenvolvimento de ferramentas de debug e aplicativos que permitem a navega\u00e7\u00e3o no conte\u00fado de classes compiladas. Para todo tipo de objeto, a Java Virtual Machine cria uma inst\u00e2ncia imut\u00e1vel de java.lang.Class , que prov\u00ea m\u00e9todos para examinar as propriedades do objeto em tempo de execu\u00e7\u00e3o. Esta classe \u00e9 o ponto de partida para trabalhar com reflex\u00e3o. No exemplo abaixo n\u00e3o sabemos quais os m\u00e9todos e campos da classe Pessoa , para isso vamos utilizar as ferramentas oferecidas pelo reflex\u00e3o afim de descobrir essas informa\u00e7\u00f5es em tempo de execu\u00e7\u00e3o. Veja que com os m\u00e9todos getDeclaredFields() e getDeclaredMethods() conseguimos capturar todos os campos e m\u00e9todos da classe em quest\u00e3o, mesmo sem saber como ela foi constru\u00edda. package _reflexao.exemplo1_reflexao ; import java.lang.reflect.Field ; import java.lang.reflect.Method ; public class Exemplo { public static void main ( String [] args ) { /* * O m\u00e9todo getClass() da classe Object retorna a classe de um determinado objeto em * tempo de execu\u00e7\u00e3o. */ Class c1 = \"minha string\" . getClass (); Class c2 = boolean . class ; Class c3 = java . io . PrintStream . class ; System . out . println ( c1 + \" | \" + c2 + \" |\" + c3 ); Class < Pessoa > classe = Pessoa . class ; for ( Field campo : classe . getDeclaredFields ()) { System . out . println ( campo . getName ()); } for ( Method metodo : classe . getDeclaredMethods ()) { System . out . println ( metodo . getName ()); } } } class Pessoa { String nome ; int idade ; Pessoa () {} public String getNome () { return nome ; } public void setNome ( String nome ) { this . nome = nome ; } public int getIdade () { return idade ; } public void setIdade ( int idade ) { this . idade = idade ; } } // Saida // > class java.lang.String | boolean |class java.io.PrintStream // > nome // > idade // > setNome // > getIdade // > setIdade // > getNome No exemplo abaixo, usamos o m\u00e9todo invoke() para invocar o m\u00e9todo e passamos como argumento a inst\u00e2ncia que executar\u00e1 o m\u00e9todo. package _reflexao.exemplo2_reflexao ; import java.lang.reflect.Method ; import java.util.HashMap ; import java.util.Map ; public class Exemplo { public static void main ( String [] args ) { Pessoa pessoa = new Pessoa (); pessoa . setSexo ( 'M' ); pessoa . setNome ( \"Gabriel\" ); Map < String , Object > attributes = Reflexao . getMapaCampos ( pessoa ); for ( String key : attributes . keySet ()) { System . out . println ( key + \": \" + attributes . get ( key )); } } } class Reflexao { public static Map < String , Object > getMapaCampos ( Object obj ) { Map < String , Object > attributesMap = new HashMap <> (); Class <?> classeObj = obj . getClass (); Method [] metodos = classeObj . getMethods (); for ( Method metodo : metodos ) { if ( metodo . getName (). startsWith ( \"get\" ) && metodo . getReturnType () != void . class ) { String nomeCampo = metodo . getName (). substring ( 3 ); try { /* * Invoca o m\u00e9todo corrente passando o objeto como argumento e recebe o * retorno do m\u00e9todo. */ Object value = metodo . invoke ( obj ); /* * Adiciona as chaves 'nome m\u00e9todo sem get' + 'retorno do m\u00e9todo' */ attributesMap . put ( nomeCampo , value ); } catch ( Exception e ) { e . printStackTrace (); } } } return attributesMap ; } } class Pessoa { String nome ; char sexo ; Pessoa () {} public String getNome () { return ( sexo == 'M' ? \"Sr. \" : \"Sra. \" ) + nome ; } public void setNome ( String nome ) { this . nome = nome ; } public char getSexo () { return sexo ; } public void setSexo ( char sexo ) { this . sexo = sexo ; } } // Saida // > Class: class _reflexao.exemplo2_reflexao.Pessoa // > Nome: Sr. Gabriel // > Sexo: M Os termos comumente utilizados s\u00e3o reflex\u00e3o e introspec\u00e7\u00e3o. Na reflex\u00e3o, um programa observa e modifica seu comportamento enquanto que na introspec\u00e7\u00e3o ele apenas observa e obt\u00e9m informa\u00e7\u00f5es dele mesmo. A linguagem Java possui uma API de *reflection* que, na verdade, possui muito mais caracter\u00edsticas de introspec\u00e7\u00e3o do que reflex\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/serializacao/","text":"Serializa\u00e7\u00e3o \u00b6 Serializa\u00e7\u00e3o Introdu\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Serializa\u00e7\u00e3o \u00e9 a t\u00e9cnica que permite transformar o estado de um objeto em uma sequ\u00eancia bytes . Depois que um objeto for serializado ele pode ser gravado (ou persistido) em um arquivo de dados e recuperado do arquivo e desserializado para recriar o objeto na mem\u00f3ria. O processo de serializa\u00e7\u00e3o de objetos \u00e9 bastante utilizado em sistemas distribu\u00eddos (cole\u00e7\u00e3o de computadores independentes conectados por uma rede e equipados com um sistema de software distribu\u00eddo) e na persist\u00eancia de dados (manter dados al\u00e9m da dura\u00e7\u00e3o da execu\u00e7\u00e3o do programa). Com a transforma\u00e7\u00e3o do objeto em bytes \u00e9 poss\u00edvel enviar o objeto por uma rede, ou salv\u00e1-lo em um arquivo ou em um banco de dados. As classe envolvidas na serializa\u00e7\u00e3o deve implementar a interface Serializable . package _serializacao.exemplo_serializacao_desserializacao ; import java.io.* ; import java.util.ArrayList ; public class Exemplo { static String path = System . getProperty ( \"user.dir\" ) + \"/_serializacao/exemplo_serializacao_desserializacao/\" ; static void serializar ( ArrayList < Object > lista , String nomeArq ) { try { /* * Cria o fluxo de sa\u00edda em arquivo */ FileOutputStream arquivo = new FileOutputStream ( path + nomeArq ); /* * Cria o objeto que escreve no fluxo de sa\u00edda */ ObjectOutputStream objOutput = new ObjectOutputStream ( arquivo ); /* * Grava a lista no objeto que escreve no fluxo de sa\u00edda */ objOutput . writeObject ( lista ); objOutput . close (); arquivo . close (); } catch ( IOException erro ) { System . out . printf ( \"Erro: %s\" , erro . getMessage ()); } } static ArrayList < Object > desserializar ( String nomeArq ) { ArrayList < Object > lista = new ArrayList (); try { /* * Cria o fluxo de entrada a partir do arquivo */ FileInputStream arquivo = new FileInputStream ( path + nomeArq ); /* * Cria o objeto que l\u00ea o fluxo de entrada */ ObjectInputStream objLeitura = new ObjectInputStream ( arquivo ); lista = ( ArrayList < Object > ) objLeitura . readObject (); objLeitura . close (); arquivo . close (); } catch ( Exception erro ) { System . out . printf ( \"Erro: %s\" , erro . getMessage ()); } return lista ; } public static void main ( String [] args ) { ArrayList < Object > listaIn = new ArrayList <> (); listaIn . add ( new Pesssoa ( \"Maria\" , 43 , new Endereco ( \"Rua Dois\" , 12 ))); listaIn . add ( new Pesssoa ( \"Jo\u00e3o\" , 56 , new Endereco ( \"Rua Nove\" , 19 ))); serializar ( listaIn , \"saida.txt\" ); ArrayList < Object > listaOut = desserializar ( \"saida.txt\" ); listaOut . forEach ( l -> System . out . println ( Pesssoa . class . cast ( l ))); } } class Pesssoa implements Serializable { String nome ; int idade ; Endereco endereco ; Pesssoa ( String nome , int idade , Endereco endereco ) { this . nome = nome ; this . idade = idade ; this . endereco = endereco ; } public String getNome () { return nome ; } public void setNome ( String nome ) { this . nome = nome ; } public int getIdade () { return idade ; } public void setIdade ( int idade ) { this . idade = idade ; } public Endereco getEndereco () { return endereco ; } public void setEndereco ( Endereco endereco ) { this . endereco = endereco ; } @Override public String toString () { return \"nome: \" + this . getNome () + \", idade: \" + this . getIdade () + \", enderco: \" + this . endereco . getRua () + \", \" + this . endereco . getNumero (); } } class Endereco implements Serializable { String rua ; int numero ; Endereco ( String rua , int numero ) { this . rua = rua ; this . numero = numero ; } public String getRua () { return rua ; } public void setRua ( String rua ) { this . rua = rua ; } public int getNumero () { return numero ; } public void setNumero ( int numero ) { this . numero = numero ; } } // Saida: // > nome: Maria, idade: 43, enderco: Rua Dois, 12 // > nome: Jo\u00e3o, idade: 56, enderco: Rua Nove, 19","title":"Serializa\u00e7\u00e3o"},{"location":"java/linguagem/serializacao/#serializacao","text":"Serializa\u00e7\u00e3o Introdu\u00e7\u00e3o","title":"Serializa\u00e7\u00e3o"},{"location":"java/linguagem/serializacao/#introducao","text":"Serializa\u00e7\u00e3o \u00e9 a t\u00e9cnica que permite transformar o estado de um objeto em uma sequ\u00eancia bytes . Depois que um objeto for serializado ele pode ser gravado (ou persistido) em um arquivo de dados e recuperado do arquivo e desserializado para recriar o objeto na mem\u00f3ria. O processo de serializa\u00e7\u00e3o de objetos \u00e9 bastante utilizado em sistemas distribu\u00eddos (cole\u00e7\u00e3o de computadores independentes conectados por uma rede e equipados com um sistema de software distribu\u00eddo) e na persist\u00eancia de dados (manter dados al\u00e9m da dura\u00e7\u00e3o da execu\u00e7\u00e3o do programa). Com a transforma\u00e7\u00e3o do objeto em bytes \u00e9 poss\u00edvel enviar o objeto por uma rede, ou salv\u00e1-lo em um arquivo ou em um banco de dados. As classe envolvidas na serializa\u00e7\u00e3o deve implementar a interface Serializable . package _serializacao.exemplo_serializacao_desserializacao ; import java.io.* ; import java.util.ArrayList ; public class Exemplo { static String path = System . getProperty ( \"user.dir\" ) + \"/_serializacao/exemplo_serializacao_desserializacao/\" ; static void serializar ( ArrayList < Object > lista , String nomeArq ) { try { /* * Cria o fluxo de sa\u00edda em arquivo */ FileOutputStream arquivo = new FileOutputStream ( path + nomeArq ); /* * Cria o objeto que escreve no fluxo de sa\u00edda */ ObjectOutputStream objOutput = new ObjectOutputStream ( arquivo ); /* * Grava a lista no objeto que escreve no fluxo de sa\u00edda */ objOutput . writeObject ( lista ); objOutput . close (); arquivo . close (); } catch ( IOException erro ) { System . out . printf ( \"Erro: %s\" , erro . getMessage ()); } } static ArrayList < Object > desserializar ( String nomeArq ) { ArrayList < Object > lista = new ArrayList (); try { /* * Cria o fluxo de entrada a partir do arquivo */ FileInputStream arquivo = new FileInputStream ( path + nomeArq ); /* * Cria o objeto que l\u00ea o fluxo de entrada */ ObjectInputStream objLeitura = new ObjectInputStream ( arquivo ); lista = ( ArrayList < Object > ) objLeitura . readObject (); objLeitura . close (); arquivo . close (); } catch ( Exception erro ) { System . out . printf ( \"Erro: %s\" , erro . getMessage ()); } return lista ; } public static void main ( String [] args ) { ArrayList < Object > listaIn = new ArrayList <> (); listaIn . add ( new Pesssoa ( \"Maria\" , 43 , new Endereco ( \"Rua Dois\" , 12 ))); listaIn . add ( new Pesssoa ( \"Jo\u00e3o\" , 56 , new Endereco ( \"Rua Nove\" , 19 ))); serializar ( listaIn , \"saida.txt\" ); ArrayList < Object > listaOut = desserializar ( \"saida.txt\" ); listaOut . forEach ( l -> System . out . println ( Pesssoa . class . cast ( l ))); } } class Pesssoa implements Serializable { String nome ; int idade ; Endereco endereco ; Pesssoa ( String nome , int idade , Endereco endereco ) { this . nome = nome ; this . idade = idade ; this . endereco = endereco ; } public String getNome () { return nome ; } public void setNome ( String nome ) { this . nome = nome ; } public int getIdade () { return idade ; } public void setIdade ( int idade ) { this . idade = idade ; } public Endereco getEndereco () { return endereco ; } public void setEndereco ( Endereco endereco ) { this . endereco = endereco ; } @Override public String toString () { return \"nome: \" + this . getNome () + \", idade: \" + this . getIdade () + \", enderco: \" + this . endereco . getRua () + \", \" + this . endereco . getNumero (); } } class Endereco implements Serializable { String rua ; int numero ; Endereco ( String rua , int numero ) { this . rua = rua ; this . numero = numero ; } public String getRua () { return rua ; } public void setRua ( String rua ) { this . rua = rua ; } public int getNumero () { return numero ; } public void setNumero ( int numero ) { this . numero = numero ; } } // Saida: // > nome: Maria, idade: 43, enderco: Rua Dois, 12 // > nome: Jo\u00e3o, idade: 56, enderco: Rua Nove, 19","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/stream/","text":"Streams \u00b6 Streams Introdu\u00e7\u00e3o Streams x cole\u00e7\u00f5es Cria\u00e7\u00e3o e manipula\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 A API Streams , introduzida no Java 8, \u00e9 um recurso que permite manipular conjuntos de forma mais simples e concisa de escrever c\u00f3digo que resulta em facilidade de manuten\u00e7\u00e3o e paraleliza\u00e7\u00e3o sem efeitos indesejados em tempo de execu\u00e7\u00e3o. Isso se tornou poss\u00edvel gra\u00e7as \u00e0 incorpora\u00e7\u00e3o do paradigma funcional, combinado com as express\u00f5es lambda . A ideia \u00e9 iterar sobre essas cole\u00e7\u00f5es de objetos e, a cada elemento, realizar alguma a\u00e7\u00e3o, seja ela de filtragem, mapeamento, transforma\u00e7\u00e3o, etc. De forma sucinta, podemos dizer que stream \u00e9 uma \"sequ\u00eancia de elementos de uma fonte de dados que suporta opera\u00e7\u00f5es de agrega\u00e7\u00e3o\". Podemos dividir a defini\u00e7\u00e3o da seguinte forma: Sequ\u00eancia de elementos : Uma stream oferece uma interface para um conjunto de valores sequenciais de um tipo de elemento particular. Apesar disso, as streams n\u00e3o armazenam elementos; estes s\u00e3o calculados sob demanda. Fonte de dados : As streams tomam seu insumo de uma fonte de dados, como cole\u00e7\u00f5es, matrizes ou recursos de E/S. Opera\u00e7\u00f5es de agrega\u00e7\u00e3o : As streams suportam opera\u00e7\u00f5es do tipo SQL e opera\u00e7\u00f5es comuns \u00e0 maioria das linguagens de programa\u00e7\u00e3o funcionais, como filter , map , reduce , find , match e sorted , entre outras. Ainda mais, as opera\u00e7\u00f5es das streams t\u00eam duas caracter\u00edsticas fundamentais que as diferenciam das opera\u00e7\u00f5es com cole\u00e7\u00f5es: Estrutura de processo : Muitas opera\u00e7\u00f5es de stream retornam outra stream . Assim, \u00e9 poss\u00edvel encadear opera\u00e7\u00f5es para formar um processo mais abrangente ( pipeline ). Isto, por sua vez, permite algumas otimiza\u00e7\u00f5es, por exemplo mediante as no\u00e7\u00f5es de lazy evaluation e short-circuiting . Lazy evaluation (avalia\u00e7\u00e3o tardia ou \"pregui\u00e7osa\") possibilita que o processamento da cadeia de opera\u00e7\u00f5es seja executado de forma mais perform\u00e1tica, postergando a computa\u00e7\u00e3o at\u00e9 um ponto em que o resultado seja, de fato, importante, evitando assim c\u00e1lculos desnecess\u00e1rios. Short-circuiting (curto circuito) possibilita que o resultado final seja obtido antes que todos os elementos da stream sejam processados. Um exemplo \u00e9 a chamada ao m\u00e9todo limit(n) onde apenas os n primeiros elementos da stream ser\u00e3o processados. Itera\u00e7\u00e3o interna : Diferentemente do trabalho com cole\u00e7\u00f5es, em que a itera\u00e7\u00e3o \u00e9 expl\u00edcita (itera\u00e7\u00e3o externa), as opera\u00e7\u00f5es da stream realizam uma itera\u00e7\u00e3o \u00e9 interna (itera\u00e7\u00e3o impl\u00edcita). O exemplo abaixo de opera\u00e7\u00f5es com streams pode ser representado conforme a figura em seguida. List < Integer > transactionsIds = transactions . stream () . filter ( t -> t . getType () == Transaction . GROCERY ) . sorted ( comparing ( Transaction :: getValue ). reversed ()) . map ( Transaction :: getId ) . collect ( toList ()); ![java-fluxo-stream](_stream/java-fluxo-stream.jpg) Em primeiro lugar, \u00e9 obtido uma stream da lista de transa\u00e7\u00f5es chamando o m\u00e9todo stream() . A fonte de dados \u00e9 a lista de transa\u00e7\u00f5es, que vai fornecer uma listagem de elementos \u00e0 stream . A seguir, vamos aplicar uma s\u00e9rie de opera\u00e7\u00f5es agregadas \u00e0 stream : filter (para filtrar elementos segundo um predicado particular), sorted (para ordenar os elementos segundo um comparador) e map (para obter a informa\u00e7\u00e3o). Todas as opera\u00e7\u00f5es, com exce\u00e7\u00e3o de collect , retornam uma Stream , portanto, \u00e9 poss\u00edvel encade\u00e1-las e formar um processo, que podemos ver como consulta dos dados da fonte. Na verdade, nenhuma tarefa \u00e9 realizada at\u00e9 se chamar a opera\u00e7\u00e3o collect . Esta \u00faltima come\u00e7ar\u00e1 a abordar o processo para retornar um resultado (que n\u00e3o ser\u00e1 uma Stream ; neste caso, trata-se de uma lista List ). Em suma, a API Streams trabalha convertendo uma fonte de dados em uma Stream . Em seguida, realiza o processamento dos dados atrav\u00e9s das opera\u00e7\u00f5es intermedi\u00e1rias e, por fim, retorna uma nova cole\u00e7\u00e3o ou valor reduzido ( map-reduce ) com a chamada a uma opera\u00e7\u00e3o terminal. As opera\u00e7\u00f5es intermedi\u00e1rias s\u00e3o aquelas que retornam um novo Stream para que novas opera\u00e7\u00f5es intermedi\u00e1rias sejam realizadas de maneira fluente (encadeadas). Podem ser divididas em dois grupos: Stateless : As opera\u00e7\u00f5es stateless , como filter() e map() , n\u00e3o armazenam o estado do elemento manipulado anteriormente ao processar um novo elemento. Dessa forma, cada elemento pode ser processado independentemente das opera\u00e7\u00f5es dos outros elementos. Stateful : As opera\u00e7\u00f5es stateful , como distinct() e sorted() , podem incorporar o estado do elemento processado anteriormente no processamento de novos elementos. As opera\u00e7\u00f5es terminais s\u00e3o opera\u00e7\u00f5es que juntam os resultados de um Stream e retornam um valor ou um objeto. Depois de invocada uma opera\u00e7\u00e3o terminal, o mesmo Stream n\u00e3o poder\u00e1 ser alterado por outras opera\u00e7\u00f5es intermedi\u00e1rias ou executar novas opera\u00e7\u00f5es terminais. Exemplos: forEach() , sum() , min() , max() , findFirst() , etc. A API *Streams* suporta a **paraleliza\u00e7\u00e3o** de opera\u00e7\u00f5es para processar os dados, bastando trocar o m\u00e9todo `stream()` por `parallelStream()`. Dessa forma a API *Streams* ir\u00e1 decompor as a\u00e7\u00f5es em v\u00e1rias subtarefas, e as opera\u00e7\u00f5es ser\u00e3o processadas em paralelo, explorando os recursos oferecidos pelos diversos n\u00facleos do processador. Streams x cole\u00e7\u00f5es \u00b6 A no\u00e7\u00e3o de cole\u00e7\u00f5es j\u00e1 existente em Java e a nova no\u00e7\u00e3o de streams se referem a interfaces com sequ\u00eancias de elementos. Ent\u00e3o, qual a diferen\u00e7a? Resumindo, as cole\u00e7\u00f5es se referem a dados enquanto as streams se referem a c\u00e1lculos. A diferen\u00e7a entre cole\u00e7\u00f5es e streams tem a ver com quando os c\u00e1lculos s\u00e3o feitos. As cole\u00e7\u00f5es s\u00e3o estruturas de dados armazenados na mem\u00f3ria, onde est\u00e3o todos os valores que a estrutura de dados tem em um momento determinado; cada elemento da cole\u00e7\u00e3o deve ser calculado antes de se agregar \u00e0 cole\u00e7\u00e3o. J\u00e1 as streams s\u00e3o estruturas de dados fixas, cujos elementos s\u00e3o calculados sob demanda. Quando a interface Collection \u00e9 usada, o usu\u00e1rio deve se ocupar da itera\u00e7\u00e3o (por exemplo, mediante foreach , la\u00e7o for melhorado); essa abordagem \u00e9 chamada de itera\u00e7\u00e3o externa. List < String > transactionIds = new ArrayList <> (); for ( Transaction t : transactions ) { transactionIds . add ( t . getId ()); } Em contrapartida, a biblioteca Streams recorre \u00e0 itera\u00e7\u00e3o interna; ela se ocupa da itera\u00e7\u00e3o e de armazenar em algum lugar o valor da stream resultante; o usu\u00e1rio s\u00f3 fornece uma fun\u00e7\u00e3o dizendo o que deve ser feito. List < Integer > transactionIds = transactions . stream () . map ( Transaction :: getId ) . collect ( toList ()); Cria\u00e7\u00e3o e manipula\u00e7\u00e3o \u00b6 A API Streams foi desenvolvida sob o pacote java.util.stream . A forma mais comum de criar uma stream \u00e9 atrav\u00e9s de uma cole\u00e7\u00e3o de dados, tendo em vista que o principal prop\u00f3sito dessa API \u00e9 tornar mais flex\u00edvel e eficiente o processamento de cole\u00e7\u00f5es. package _stream.exemplo_stream_criacao ; import java.io.IOException ; import java.nio.charset.Charset ; import java.nio.file.Files ; import java.nio.file.Paths ; import java.util.* ; import java.util.stream.IntStream ; import java.util.stream.Stream ; public class Exemplo { public static void main ( String [] args ) throws IOException { /* * Stream de uma cole\u00e7\u00e3o */ List < String > lista = new ArrayList < String > (); lista . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); Stream < String > streamLista = lista . stream (); /* * Stream de um map */ Map < Integer , String > map = new HashMap < Integer , String > (); map . put ( 0 , \"A\" ); map . put ( 1 , \"B\" ); map . put ( 2 , \"C\" ); Stream < String > streamMap = map . values (). stream (); /* * Stream de valores, arrays e I/O */ Stream < Integer > valores = Stream . of ( 1 , 2 , 3 , 4 , 5 ); IntStream array = Arrays . stream ( new int [] { 1 , 2 , 3 , 4 , 5 }); Stream < String > io = Files . lines ( Paths . get ( \"Exemplo.java\" ), Charset . defaultCharset ()); } } Algumas das opera\u00e7\u00f5es intermedi\u00e1rias mais utilizadas s\u00e3o: filter() , map() , sorted() , limit() e distinct() . J\u00e1 para opera\u00e7\u00f5es terminais, podemos citar: forEach , average() , collect() , count() e allMatch() . Classe que define os elementos da lista dos exemplos de opera\u00e7\u00f5es intermedi\u00e1rias e terminais. class Pessoa { String nome ; String nacionalidade ; int idade ; Pessoa (){} Pessoa ( String nome , String nacionalidade , int idade ) { this . nome = nome ; this . nacionalidade = nacionalidade ; this . idade = idade ; } List < Pessoa > populaPessoas (){ Pessoa pessoa1 = new Pessoa ( \"Lucas\" , \"Brasil\" , 18 ); Pessoa pessoa2 = new Pessoa ( \"Hernandez\" , \"Mexico\" , 21 ); Pessoa pessoa3 = new Pessoa ( \"Jim\" , \"Canada\" , 22 ); Pessoa pessoa4 = new Pessoa ( \"Amanda\" , \"Brasil\" , 17 ); Pessoa pessoa5 = new Pessoa ( \"Felipe\" , \"Brasil\" , 22 ); List < Pessoa > list = new ArrayList <> (); list . addAll ( Arrays . asList ( pessoa1 , pessoa2 , pessoa3 , pessoa4 , pessoa5 )); return list ; } @Override public String toString () { return this . nome ; } @Override public boolean equals ( Object obj ) { return (( Pessoa ) obj ). getNacionalidade (). equals ( this . getNacionalidade ()); } @Override public int hashCode () { return this . getNacionalidade (). hashCode (); } String getNome () { return this . nome ; } String getNacionalidade () { return this . nacionalidade ; } int getIdade () { return this . idade ; } } Exemplos de opera\u00e7\u00f5es intermedi\u00e1rias: package _stream.exemplo_manipulacao ; import java.util.* ; import java.util.stream.Collectors ; import java.util.stream.Stream ; public class ExemploOperacoesIntermediarias { public static void main ( String [] args ) { List < Pessoa > pessoas = new Pessoa (). populaPessoas (); /* * map(): transforma\u00e7\u00f5es em uma lista de dados de acordo com uma fun\u00e7\u00e3o (Function) * * Para evitar o overhead de converter um int (tipo primitivo) num Integer(Classe Wrapper), * podemos usar IntStream, DoubleStream e LongStream com mapToInt, mapToDouble e mapToLong * respectivamente */ Stream < Integer > sMap = pessoas . stream (). map ( Pessoa :: getIdade ); System . out . println ( \"map: \" + sMap . collect ( Collectors . toList ())); // IntStream sMap = pessoas.stream().mapToInt(Pessoa::getIdade); // System.out.println(sMap.boxed().collect(Collectors.toList()).toString()); /* * filter(): \u00e9 usado para filtrar elementos de uma stream de acordo com uma * condi\u00e7\u00e3o (Predicate) */ Stream < Pessoa > sFilter = pessoas . stream () . filter ( pessoa -> pessoa . nacionalidade . equals ( \"Brasil\" )); System . out . println ( \"filter: \" + sFilter . collect ( Collectors . toList ())); /* * sorted(): ordena\u00e7\u00e3o de elementos em cole\u00e7\u00f5es atrav\u00e9s da fun\u00e7\u00e3o comparing() que recebe * uma fun\u00e7\u00e3o (Function) */ Stream < Pessoa > sSorted = pessoas . stream (). sorted ( Comparator . comparing ( Pessoa :: getNome )); System . out . println ( \"sorted: \" + sSorted . collect ( Collectors . toList ())); /* * distinct(): retorna uma stream contendo apenas elementos que s\u00e3o exclusivos, isto \u00e9, que * n\u00e3o se repetem. Para compara\u00e7\u00e3o de objetos necessita implementar o equals(). */ Stream < Pessoa > sDistinct = pessoas . stream (). distinct (); System . out . println ( \"distinct: \" + sDistinct . collect ( Collectors . toList ())); /* * limit(): limita o n\u00famero de elementos em uma stream. \u00c9 uma opera\u00e7\u00e3o conhecida como * curto-circuito devido ao fato de n\u00e3o precisar processar todos os elementos. */ Stream < Pessoa > sLimit = pessoas . stream (). limit ( 2 ); System . out . println ( \"limit: \" + sLimit . collect ( Collectors . toList ())); /* * As opera\u00e7\u00f5es intermedi\u00e1rias retornam um novo stream que pode ser utilizado por outras * opera\u00e7\u00f5es intermedi\u00e1rias de forma encadeada. */ Stream < String > sEncadeada = pessoas . stream () . filter ( pessoa -> ! pessoa . nacionalidade . equals ( \"Brasil\" )) . distinct () . sorted ( Comparator . comparing ( Pessoa :: getNacionalidade )) . limit ( 2 ) . map ( Pessoa :: getNacionalidade ); System . out . println ( \"encadeamento: \" + sEncadeada . collect ( Collectors . toList ())); } } // Saida // > map: [18, 21, 22, 17, 22] // > filter: [Lucas, Amanda, Felipe] // > sorted: [Amanda, Felipe, Hernandez, Jim, Lucas] // > distinct: [Lucas, Hernandez, Jim] // > limit: [Lucas, Hernandez] // > encadeamento: [Canada, Mexico] Exemplos de opera\u00e7\u00f5es terminais: package _stream.exemplo_manipulacao ; import java.util.List ; import java.util.stream.Collectors ; public class ExemploOperacoesTerminais { public static void main ( String [] args ) { List < Pessoa > pessoas = new Pessoa (). populaPessoas (); /* * forEach(): realizar um loop sobre todos os elementos de uma stream e executar algum * tipo de processamento. */ System . out . print ( \"forEach: \" ); pessoas . stream (). forEach ( pessoa -> System . out . print ( pessoa . getNome () + \" \" )); System . out . println (); /* * collect(): possibilita coletar os elementos de uma stream na forma de cole\u00e7\u00f5es, * convertendo uma stream para os tipos List, Set ou Map */ List < Pessoa > tCollect = pessoas . stream (). collect ( Collectors . toList ()); System . out . println ( \"collect: \" + tCollect ); String tCollectJoining = pessoas . stream () . map ( Pessoa :: getNome ) . collect ( Collectors . joining ( \" / \" )); System . out . println ( \"collect joining: \" + tCollectJoining ); /* * average(): permite calcular a m\u00e9dia dos valores dos elementos * * Este \u00e9 um dos m\u00e9todos aritm\u00e9ticos disponibilizados para tipos primitivos como IntStream, * DoubleStream e LongStream. Podem ser mapeados pelos m\u00e9todos mapToInt(), mapToDouble() e * mapToLong() respectivamente. O m\u00e9todo getAsDouble() \u00e9 utilizada porque average() retorna * um um Optional */ double tAverage = pessoas . stream () . filter ( pessoa -> pessoa . getNacionalidade (). equals ( \"Brasil\" )) . mapToInt ( pessoa -> pessoa . getIdade ()) . average () . getAsDouble (); System . out . println ( \"average: \" + tAverage ); /* * count(): retorna a quantidade de elementos presentes em uma stream. */ long tCount = pessoas . stream (). count (); System . out . println ( \"count: \" + tCount ); /* * allMatch(): verifica se todos os elementos de uma stream atendem a um crit\u00e9rio passado * como par\u00e2metro, atrav\u00e9s de um Predicate, e retorna um valor booleano. */ boolean tAllMatch = pessoas . stream () . allMatch ( pessoa -> pessoa . getNacionalidade (). equals ( \"Brasil\" )); System . out . println ( \"allMatch: \" + tAllMatch ); /* * ifPresent(): se algum valor est\u00e1 presente. Pode ser usado juntamente com filter() mais * findAny() ou findFirst() que retornam um objeto Optional. */ pessoas . stream () . filter ( pessoa -> pessoa . nacionalidade . equals ( \"Mexico\" )) . findAny () . ifPresent ( p -> System . out . println ( \"ifPresent: \" + p . getNome ())); } } // Saida // > forEach: Lucas Hernandez Jim Amanda Felipe // > collect: [Lucas, Hernandez, Jim, Amanda, Felipe] // > collect joining: Lucas / Hernandez / Jim / Amanda / Felipe // > average: 19.0 // > count: 5 // > allMatch: false // > ifPresent: Hernandez","title":"Streams"},{"location":"java/linguagem/stream/#streams","text":"Streams Introdu\u00e7\u00e3o Streams x cole\u00e7\u00f5es Cria\u00e7\u00e3o e manipula\u00e7\u00e3o","title":"Streams"},{"location":"java/linguagem/stream/#introducao","text":"A API Streams , introduzida no Java 8, \u00e9 um recurso que permite manipular conjuntos de forma mais simples e concisa de escrever c\u00f3digo que resulta em facilidade de manuten\u00e7\u00e3o e paraleliza\u00e7\u00e3o sem efeitos indesejados em tempo de execu\u00e7\u00e3o. Isso se tornou poss\u00edvel gra\u00e7as \u00e0 incorpora\u00e7\u00e3o do paradigma funcional, combinado com as express\u00f5es lambda . A ideia \u00e9 iterar sobre essas cole\u00e7\u00f5es de objetos e, a cada elemento, realizar alguma a\u00e7\u00e3o, seja ela de filtragem, mapeamento, transforma\u00e7\u00e3o, etc. De forma sucinta, podemos dizer que stream \u00e9 uma \"sequ\u00eancia de elementos de uma fonte de dados que suporta opera\u00e7\u00f5es de agrega\u00e7\u00e3o\". Podemos dividir a defini\u00e7\u00e3o da seguinte forma: Sequ\u00eancia de elementos : Uma stream oferece uma interface para um conjunto de valores sequenciais de um tipo de elemento particular. Apesar disso, as streams n\u00e3o armazenam elementos; estes s\u00e3o calculados sob demanda. Fonte de dados : As streams tomam seu insumo de uma fonte de dados, como cole\u00e7\u00f5es, matrizes ou recursos de E/S. Opera\u00e7\u00f5es de agrega\u00e7\u00e3o : As streams suportam opera\u00e7\u00f5es do tipo SQL e opera\u00e7\u00f5es comuns \u00e0 maioria das linguagens de programa\u00e7\u00e3o funcionais, como filter , map , reduce , find , match e sorted , entre outras. Ainda mais, as opera\u00e7\u00f5es das streams t\u00eam duas caracter\u00edsticas fundamentais que as diferenciam das opera\u00e7\u00f5es com cole\u00e7\u00f5es: Estrutura de processo : Muitas opera\u00e7\u00f5es de stream retornam outra stream . Assim, \u00e9 poss\u00edvel encadear opera\u00e7\u00f5es para formar um processo mais abrangente ( pipeline ). Isto, por sua vez, permite algumas otimiza\u00e7\u00f5es, por exemplo mediante as no\u00e7\u00f5es de lazy evaluation e short-circuiting . Lazy evaluation (avalia\u00e7\u00e3o tardia ou \"pregui\u00e7osa\") possibilita que o processamento da cadeia de opera\u00e7\u00f5es seja executado de forma mais perform\u00e1tica, postergando a computa\u00e7\u00e3o at\u00e9 um ponto em que o resultado seja, de fato, importante, evitando assim c\u00e1lculos desnecess\u00e1rios. Short-circuiting (curto circuito) possibilita que o resultado final seja obtido antes que todos os elementos da stream sejam processados. Um exemplo \u00e9 a chamada ao m\u00e9todo limit(n) onde apenas os n primeiros elementos da stream ser\u00e3o processados. Itera\u00e7\u00e3o interna : Diferentemente do trabalho com cole\u00e7\u00f5es, em que a itera\u00e7\u00e3o \u00e9 expl\u00edcita (itera\u00e7\u00e3o externa), as opera\u00e7\u00f5es da stream realizam uma itera\u00e7\u00e3o \u00e9 interna (itera\u00e7\u00e3o impl\u00edcita). O exemplo abaixo de opera\u00e7\u00f5es com streams pode ser representado conforme a figura em seguida. List < Integer > transactionsIds = transactions . stream () . filter ( t -> t . getType () == Transaction . GROCERY ) . sorted ( comparing ( Transaction :: getValue ). reversed ()) . map ( Transaction :: getId ) . collect ( toList ()); ![java-fluxo-stream](_stream/java-fluxo-stream.jpg) Em primeiro lugar, \u00e9 obtido uma stream da lista de transa\u00e7\u00f5es chamando o m\u00e9todo stream() . A fonte de dados \u00e9 a lista de transa\u00e7\u00f5es, que vai fornecer uma listagem de elementos \u00e0 stream . A seguir, vamos aplicar uma s\u00e9rie de opera\u00e7\u00f5es agregadas \u00e0 stream : filter (para filtrar elementos segundo um predicado particular), sorted (para ordenar os elementos segundo um comparador) e map (para obter a informa\u00e7\u00e3o). Todas as opera\u00e7\u00f5es, com exce\u00e7\u00e3o de collect , retornam uma Stream , portanto, \u00e9 poss\u00edvel encade\u00e1-las e formar um processo, que podemos ver como consulta dos dados da fonte. Na verdade, nenhuma tarefa \u00e9 realizada at\u00e9 se chamar a opera\u00e7\u00e3o collect . Esta \u00faltima come\u00e7ar\u00e1 a abordar o processo para retornar um resultado (que n\u00e3o ser\u00e1 uma Stream ; neste caso, trata-se de uma lista List ). Em suma, a API Streams trabalha convertendo uma fonte de dados em uma Stream . Em seguida, realiza o processamento dos dados atrav\u00e9s das opera\u00e7\u00f5es intermedi\u00e1rias e, por fim, retorna uma nova cole\u00e7\u00e3o ou valor reduzido ( map-reduce ) com a chamada a uma opera\u00e7\u00e3o terminal. As opera\u00e7\u00f5es intermedi\u00e1rias s\u00e3o aquelas que retornam um novo Stream para que novas opera\u00e7\u00f5es intermedi\u00e1rias sejam realizadas de maneira fluente (encadeadas). Podem ser divididas em dois grupos: Stateless : As opera\u00e7\u00f5es stateless , como filter() e map() , n\u00e3o armazenam o estado do elemento manipulado anteriormente ao processar um novo elemento. Dessa forma, cada elemento pode ser processado independentemente das opera\u00e7\u00f5es dos outros elementos. Stateful : As opera\u00e7\u00f5es stateful , como distinct() e sorted() , podem incorporar o estado do elemento processado anteriormente no processamento de novos elementos. As opera\u00e7\u00f5es terminais s\u00e3o opera\u00e7\u00f5es que juntam os resultados de um Stream e retornam um valor ou um objeto. Depois de invocada uma opera\u00e7\u00e3o terminal, o mesmo Stream n\u00e3o poder\u00e1 ser alterado por outras opera\u00e7\u00f5es intermedi\u00e1rias ou executar novas opera\u00e7\u00f5es terminais. Exemplos: forEach() , sum() , min() , max() , findFirst() , etc. A API *Streams* suporta a **paraleliza\u00e7\u00e3o** de opera\u00e7\u00f5es para processar os dados, bastando trocar o m\u00e9todo `stream()` por `parallelStream()`. Dessa forma a API *Streams* ir\u00e1 decompor as a\u00e7\u00f5es em v\u00e1rias subtarefas, e as opera\u00e7\u00f5es ser\u00e3o processadas em paralelo, explorando os recursos oferecidos pelos diversos n\u00facleos do processador.","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/stream/#streams-x-colecoes","text":"A no\u00e7\u00e3o de cole\u00e7\u00f5es j\u00e1 existente em Java e a nova no\u00e7\u00e3o de streams se referem a interfaces com sequ\u00eancias de elementos. Ent\u00e3o, qual a diferen\u00e7a? Resumindo, as cole\u00e7\u00f5es se referem a dados enquanto as streams se referem a c\u00e1lculos. A diferen\u00e7a entre cole\u00e7\u00f5es e streams tem a ver com quando os c\u00e1lculos s\u00e3o feitos. As cole\u00e7\u00f5es s\u00e3o estruturas de dados armazenados na mem\u00f3ria, onde est\u00e3o todos os valores que a estrutura de dados tem em um momento determinado; cada elemento da cole\u00e7\u00e3o deve ser calculado antes de se agregar \u00e0 cole\u00e7\u00e3o. J\u00e1 as streams s\u00e3o estruturas de dados fixas, cujos elementos s\u00e3o calculados sob demanda. Quando a interface Collection \u00e9 usada, o usu\u00e1rio deve se ocupar da itera\u00e7\u00e3o (por exemplo, mediante foreach , la\u00e7o for melhorado); essa abordagem \u00e9 chamada de itera\u00e7\u00e3o externa. List < String > transactionIds = new ArrayList <> (); for ( Transaction t : transactions ) { transactionIds . add ( t . getId ()); } Em contrapartida, a biblioteca Streams recorre \u00e0 itera\u00e7\u00e3o interna; ela se ocupa da itera\u00e7\u00e3o e de armazenar em algum lugar o valor da stream resultante; o usu\u00e1rio s\u00f3 fornece uma fun\u00e7\u00e3o dizendo o que deve ser feito. List < Integer > transactionIds = transactions . stream () . map ( Transaction :: getId ) . collect ( toList ());","title":"Streams x cole\u00e7\u00f5es"},{"location":"java/linguagem/stream/#criacao-e-manipulacao","text":"A API Streams foi desenvolvida sob o pacote java.util.stream . A forma mais comum de criar uma stream \u00e9 atrav\u00e9s de uma cole\u00e7\u00e3o de dados, tendo em vista que o principal prop\u00f3sito dessa API \u00e9 tornar mais flex\u00edvel e eficiente o processamento de cole\u00e7\u00f5es. package _stream.exemplo_stream_criacao ; import java.io.IOException ; import java.nio.charset.Charset ; import java.nio.file.Files ; import java.nio.file.Paths ; import java.util.* ; import java.util.stream.IntStream ; import java.util.stream.Stream ; public class Exemplo { public static void main ( String [] args ) throws IOException { /* * Stream de uma cole\u00e7\u00e3o */ List < String > lista = new ArrayList < String > (); lista . addAll ( Arrays . asList ( \"A\" , \"B\" , \"C\" )); Stream < String > streamLista = lista . stream (); /* * Stream de um map */ Map < Integer , String > map = new HashMap < Integer , String > (); map . put ( 0 , \"A\" ); map . put ( 1 , \"B\" ); map . put ( 2 , \"C\" ); Stream < String > streamMap = map . values (). stream (); /* * Stream de valores, arrays e I/O */ Stream < Integer > valores = Stream . of ( 1 , 2 , 3 , 4 , 5 ); IntStream array = Arrays . stream ( new int [] { 1 , 2 , 3 , 4 , 5 }); Stream < String > io = Files . lines ( Paths . get ( \"Exemplo.java\" ), Charset . defaultCharset ()); } } Algumas das opera\u00e7\u00f5es intermedi\u00e1rias mais utilizadas s\u00e3o: filter() , map() , sorted() , limit() e distinct() . J\u00e1 para opera\u00e7\u00f5es terminais, podemos citar: forEach , average() , collect() , count() e allMatch() . Classe que define os elementos da lista dos exemplos de opera\u00e7\u00f5es intermedi\u00e1rias e terminais. class Pessoa { String nome ; String nacionalidade ; int idade ; Pessoa (){} Pessoa ( String nome , String nacionalidade , int idade ) { this . nome = nome ; this . nacionalidade = nacionalidade ; this . idade = idade ; } List < Pessoa > populaPessoas (){ Pessoa pessoa1 = new Pessoa ( \"Lucas\" , \"Brasil\" , 18 ); Pessoa pessoa2 = new Pessoa ( \"Hernandez\" , \"Mexico\" , 21 ); Pessoa pessoa3 = new Pessoa ( \"Jim\" , \"Canada\" , 22 ); Pessoa pessoa4 = new Pessoa ( \"Amanda\" , \"Brasil\" , 17 ); Pessoa pessoa5 = new Pessoa ( \"Felipe\" , \"Brasil\" , 22 ); List < Pessoa > list = new ArrayList <> (); list . addAll ( Arrays . asList ( pessoa1 , pessoa2 , pessoa3 , pessoa4 , pessoa5 )); return list ; } @Override public String toString () { return this . nome ; } @Override public boolean equals ( Object obj ) { return (( Pessoa ) obj ). getNacionalidade (). equals ( this . getNacionalidade ()); } @Override public int hashCode () { return this . getNacionalidade (). hashCode (); } String getNome () { return this . nome ; } String getNacionalidade () { return this . nacionalidade ; } int getIdade () { return this . idade ; } } Exemplos de opera\u00e7\u00f5es intermedi\u00e1rias: package _stream.exemplo_manipulacao ; import java.util.* ; import java.util.stream.Collectors ; import java.util.stream.Stream ; public class ExemploOperacoesIntermediarias { public static void main ( String [] args ) { List < Pessoa > pessoas = new Pessoa (). populaPessoas (); /* * map(): transforma\u00e7\u00f5es em uma lista de dados de acordo com uma fun\u00e7\u00e3o (Function) * * Para evitar o overhead de converter um int (tipo primitivo) num Integer(Classe Wrapper), * podemos usar IntStream, DoubleStream e LongStream com mapToInt, mapToDouble e mapToLong * respectivamente */ Stream < Integer > sMap = pessoas . stream (). map ( Pessoa :: getIdade ); System . out . println ( \"map: \" + sMap . collect ( Collectors . toList ())); // IntStream sMap = pessoas.stream().mapToInt(Pessoa::getIdade); // System.out.println(sMap.boxed().collect(Collectors.toList()).toString()); /* * filter(): \u00e9 usado para filtrar elementos de uma stream de acordo com uma * condi\u00e7\u00e3o (Predicate) */ Stream < Pessoa > sFilter = pessoas . stream () . filter ( pessoa -> pessoa . nacionalidade . equals ( \"Brasil\" )); System . out . println ( \"filter: \" + sFilter . collect ( Collectors . toList ())); /* * sorted(): ordena\u00e7\u00e3o de elementos em cole\u00e7\u00f5es atrav\u00e9s da fun\u00e7\u00e3o comparing() que recebe * uma fun\u00e7\u00e3o (Function) */ Stream < Pessoa > sSorted = pessoas . stream (). sorted ( Comparator . comparing ( Pessoa :: getNome )); System . out . println ( \"sorted: \" + sSorted . collect ( Collectors . toList ())); /* * distinct(): retorna uma stream contendo apenas elementos que s\u00e3o exclusivos, isto \u00e9, que * n\u00e3o se repetem. Para compara\u00e7\u00e3o de objetos necessita implementar o equals(). */ Stream < Pessoa > sDistinct = pessoas . stream (). distinct (); System . out . println ( \"distinct: \" + sDistinct . collect ( Collectors . toList ())); /* * limit(): limita o n\u00famero de elementos em uma stream. \u00c9 uma opera\u00e7\u00e3o conhecida como * curto-circuito devido ao fato de n\u00e3o precisar processar todos os elementos. */ Stream < Pessoa > sLimit = pessoas . stream (). limit ( 2 ); System . out . println ( \"limit: \" + sLimit . collect ( Collectors . toList ())); /* * As opera\u00e7\u00f5es intermedi\u00e1rias retornam um novo stream que pode ser utilizado por outras * opera\u00e7\u00f5es intermedi\u00e1rias de forma encadeada. */ Stream < String > sEncadeada = pessoas . stream () . filter ( pessoa -> ! pessoa . nacionalidade . equals ( \"Brasil\" )) . distinct () . sorted ( Comparator . comparing ( Pessoa :: getNacionalidade )) . limit ( 2 ) . map ( Pessoa :: getNacionalidade ); System . out . println ( \"encadeamento: \" + sEncadeada . collect ( Collectors . toList ())); } } // Saida // > map: [18, 21, 22, 17, 22] // > filter: [Lucas, Amanda, Felipe] // > sorted: [Amanda, Felipe, Hernandez, Jim, Lucas] // > distinct: [Lucas, Hernandez, Jim] // > limit: [Lucas, Hernandez] // > encadeamento: [Canada, Mexico] Exemplos de opera\u00e7\u00f5es terminais: package _stream.exemplo_manipulacao ; import java.util.List ; import java.util.stream.Collectors ; public class ExemploOperacoesTerminais { public static void main ( String [] args ) { List < Pessoa > pessoas = new Pessoa (). populaPessoas (); /* * forEach(): realizar um loop sobre todos os elementos de uma stream e executar algum * tipo de processamento. */ System . out . print ( \"forEach: \" ); pessoas . stream (). forEach ( pessoa -> System . out . print ( pessoa . getNome () + \" \" )); System . out . println (); /* * collect(): possibilita coletar os elementos de uma stream na forma de cole\u00e7\u00f5es, * convertendo uma stream para os tipos List, Set ou Map */ List < Pessoa > tCollect = pessoas . stream (). collect ( Collectors . toList ()); System . out . println ( \"collect: \" + tCollect ); String tCollectJoining = pessoas . stream () . map ( Pessoa :: getNome ) . collect ( Collectors . joining ( \" / \" )); System . out . println ( \"collect joining: \" + tCollectJoining ); /* * average(): permite calcular a m\u00e9dia dos valores dos elementos * * Este \u00e9 um dos m\u00e9todos aritm\u00e9ticos disponibilizados para tipos primitivos como IntStream, * DoubleStream e LongStream. Podem ser mapeados pelos m\u00e9todos mapToInt(), mapToDouble() e * mapToLong() respectivamente. O m\u00e9todo getAsDouble() \u00e9 utilizada porque average() retorna * um um Optional */ double tAverage = pessoas . stream () . filter ( pessoa -> pessoa . getNacionalidade (). equals ( \"Brasil\" )) . mapToInt ( pessoa -> pessoa . getIdade ()) . average () . getAsDouble (); System . out . println ( \"average: \" + tAverage ); /* * count(): retorna a quantidade de elementos presentes em uma stream. */ long tCount = pessoas . stream (). count (); System . out . println ( \"count: \" + tCount ); /* * allMatch(): verifica se todos os elementos de uma stream atendem a um crit\u00e9rio passado * como par\u00e2metro, atrav\u00e9s de um Predicate, e retorna um valor booleano. */ boolean tAllMatch = pessoas . stream () . allMatch ( pessoa -> pessoa . getNacionalidade (). equals ( \"Brasil\" )); System . out . println ( \"allMatch: \" + tAllMatch ); /* * ifPresent(): se algum valor est\u00e1 presente. Pode ser usado juntamente com filter() mais * findAny() ou findFirst() que retornam um objeto Optional. */ pessoas . stream () . filter ( pessoa -> pessoa . nacionalidade . equals ( \"Mexico\" )) . findAny () . ifPresent ( p -> System . out . println ( \"ifPresent: \" + p . getNome ())); } } // Saida // > forEach: Lucas Hernandez Jim Amanda Felipe // > collect: [Lucas, Hernandez, Jim, Amanda, Felipe] // > collect joining: Lucas / Hernandez / Jim / Amanda / Felipe // > average: 19.0 // > count: 5 // > allMatch: false // > ifPresent: Hernandez","title":"Cria\u00e7\u00e3o e manipula\u00e7\u00e3o"},{"location":"java/linguagem/string/","text":"String \u00b6 String Introdu\u00e7\u00e3o Strings mut\u00e1veis Opera\u00e7\u00f5es Introdu\u00e7\u00e3o \u00b6 Em Java, string \u00e9 basicamente um objeto que representa uma sequ\u00eancia de valores do tipo char . Uma matriz de caracteres funciona da mesma forma que string em Java. Por exemplo: package _string.exemplo_string ; class Exemplo { public static void main ( String [] args ) { char [] ch = { 'j' , 'a' , 'v' , 'a' }; System . out . println ( ch ); String s = new String ( ch ); /* * Outras op\u00e7\u00f5es: * String s = new String(\"java\"); * String s = \"java\"; */ System . out . println ( s ); } } // Saida // > java // > java Strings mut\u00e1veis \u00b6 A interface CharSequence \u00e9 usada para representar a sequ\u00eancia de caracteres. String , StringBuffer e StringBuilder as implementam. Isso significa que podemos criar strings em java usando essas tr\u00eas classes. Strings em Java s\u00e3o imut\u00e1veis , quando uma string \u00e9 alterada, um novo objeto \u00e9 criado. Toda vez que uma string \u00e9 criada, a JVM verifica primeiro o \"conjunto constante de strings \" (em ingl\u00eas, string constant pool ). Se a string j\u00e1 existir, a refer\u00eancia \u00e0 inst\u00e2ncia ser\u00e1 retornada. Caso contr\u00e1rio, uma nova inst\u00e2ncia de string ser\u00e1 criada e colocada no conjunto. Para criar strings mut\u00e1veis , podemos usar as classes StringBuffer e StringBuilder . Durante a execu\u00e7\u00e3o de concatena\u00e7\u00f5es, a performance de StringBuffer ou StringBuilder \u00e9 melhor que de String , uma vez que n\u00e3o s\u00e3o criadas novas inst\u00e2ncias a cada concatena\u00e7\u00e3o. A diferen\u00e7a entre StringBuffer e StringBuilder est\u00e1 no fato que StringBuffer \u00e9 sincronizado enquanto que StringBuilder \u00e9 n\u00e3o sincronizado . Dessa forma, StringBuilder possui performance superior ao StringBuffer por n\u00e3o ter custo de performance da sincroniza\u00e7\u00e3o. package _string.exemplo_string_mutavel ; class Exemplo { public static void main ( String [] args ) { String s1 = \"java\" ; String s2 = \"java\" ; /* * Strings s\u00e3o imut\u00e1veis, quando modificadas, um novo objeto \u00e9 criado */ System . out . println ( \"s1: \" + System . identityHashCode ( s1 )); System . out . println ( \"s2: \" + System . identityHashCode ( s2 )); s2 = s2 + \"!\" ; System . out . println ( \"s2: \" + System . identityHashCode ( s2 )); /* * Modifica\u00e7\u00e3o da string sem criar novas inst\u00e2ncias. Entretanto, cada inst\u00e2ncia, * mesmo usando uma mesma string, ser\u00e1 um novo objeto. */ StringBuffer sb1 = new StringBuffer ( \"java\" ); StringBuffer sb2 = new StringBuffer ( \"java\" ); System . out . println ( \"sb1: \" + System . identityHashCode ( sb1 )); System . out . println ( \"sb2: \" + System . identityHashCode ( sb2 )); sb1 . append ( \"!\" ); System . out . println ( \"sb2: \" + System . identityHashCode ( sb2 )); } } // Saida // > s1: 1497836505 // > s2: 1497836505 // > s2: 135721597 // > sb1: 142257191 // > sb2: 1044036744 // > sb2: 1044036744 Benchmark das classes que implementam CharSequence : package _string.exemplo_string_mutavel_benchmark ; class Exemplo { public static void main ( String [] args ) { int N = 1000000 ; long t ; /* * String */ String str = \"\" ; t = System . currentTimeMillis (); for ( int i = N ; i -- > 0 ;) { str += \"!\" ; } System . out . println ( System . currentTimeMillis () - t ); /* * StringBuffer */ StringBuffer sbf = new StringBuffer (); t = System . currentTimeMillis (); for ( int i = N ; i -- > 0 ;) { sbf . append ( \"!\" ); } System . out . println ( System . currentTimeMillis () - t ); /* * StringBuilder */ StringBuilder sbb = new StringBuilder (); t = System . currentTimeMillis (); for ( int i = N ; i -- > 0 ;) { sbb . append ( \"!\" ); } System . out . println ( System . currentTimeMillis () - t ); } } // Saida // > 100226 // > 18 // > 14 Opera\u00e7\u00f5es \u00b6 Exemplos de opera\u00e7\u00f5es com strings : package _string.exemplo_string_operacoes ; class Exemplo { public static void main ( String [] args ) { String s0 ; String s1 ; StringBuilder sb0 ; StringBuilder sb1 ; /* * Concatena\u00e7\u00e3o */ s0 = \"A\" ; s0 += \"B\" ; s0 = \"A\" ; s1 = \"B\" ; s0 = s0 + s1 ; sb0 = new StringBuilder ( \"A\" ); sb0 . append ( \"B\" ); sb0 = new StringBuilder ( \"A\" ); sb1 = new StringBuilder ( \"B\" ); sb0 . append ( sb1 ); /* * Busca */ s0 = \"ABCDE\" ; s0 . indexOf ( \"CD\" ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . indexOf ( \"CD\" ); /* * Substitui\u00e7\u00e3o */ s0 = \"AXC\" ; s0 = s0 . replace ( \"X\" , \"B\" ); sb0 = new StringBuilder ( \"AXC\" ); sb0 . replace ( sb0 . indexOf ( \"X\" ), sb0 . indexOf ( \"X\" ) + 1 , \"B\" ); /* * Tamanho */ s0 = \"ABCDE\" ; s0 . length (); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . length (); /* * Substring */ s0 = \"ABCDE\" ; s0 = s0 . substring ( 1 , 3 ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 = new StringBuilder ( sb0 . substring ( 1 , 3 )); /* * Remo\u00e7\u00e3o */ s0 = \"ABCDE\" ; s0 = s0 . replaceFirst ( \"CD\" , \"\" ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . delete ( sb0 . indexOf ( \"CD\" ), sb0 . indexOf ( \"CD\" ) + \"CD\" . length ()); /* * Compara\u00e7\u00e3o */ s0 = \"ABCDE\" ; s0 . compareTo ( \"ABCDE\" ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . compareTo ( new StringBuilder ( \"ABCDE\" )); } }","title":"String"},{"location":"java/linguagem/string/#string","text":"String Introdu\u00e7\u00e3o Strings mut\u00e1veis Opera\u00e7\u00f5es","title":"String"},{"location":"java/linguagem/string/#introducao","text":"Em Java, string \u00e9 basicamente um objeto que representa uma sequ\u00eancia de valores do tipo char . Uma matriz de caracteres funciona da mesma forma que string em Java. Por exemplo: package _string.exemplo_string ; class Exemplo { public static void main ( String [] args ) { char [] ch = { 'j' , 'a' , 'v' , 'a' }; System . out . println ( ch ); String s = new String ( ch ); /* * Outras op\u00e7\u00f5es: * String s = new String(\"java\"); * String s = \"java\"; */ System . out . println ( s ); } } // Saida // > java // > java","title":"Introdu\u00e7\u00e3o"},{"location":"java/linguagem/string/#strings-mutaveis","text":"A interface CharSequence \u00e9 usada para representar a sequ\u00eancia de caracteres. String , StringBuffer e StringBuilder as implementam. Isso significa que podemos criar strings em java usando essas tr\u00eas classes. Strings em Java s\u00e3o imut\u00e1veis , quando uma string \u00e9 alterada, um novo objeto \u00e9 criado. Toda vez que uma string \u00e9 criada, a JVM verifica primeiro o \"conjunto constante de strings \" (em ingl\u00eas, string constant pool ). Se a string j\u00e1 existir, a refer\u00eancia \u00e0 inst\u00e2ncia ser\u00e1 retornada. Caso contr\u00e1rio, uma nova inst\u00e2ncia de string ser\u00e1 criada e colocada no conjunto. Para criar strings mut\u00e1veis , podemos usar as classes StringBuffer e StringBuilder . Durante a execu\u00e7\u00e3o de concatena\u00e7\u00f5es, a performance de StringBuffer ou StringBuilder \u00e9 melhor que de String , uma vez que n\u00e3o s\u00e3o criadas novas inst\u00e2ncias a cada concatena\u00e7\u00e3o. A diferen\u00e7a entre StringBuffer e StringBuilder est\u00e1 no fato que StringBuffer \u00e9 sincronizado enquanto que StringBuilder \u00e9 n\u00e3o sincronizado . Dessa forma, StringBuilder possui performance superior ao StringBuffer por n\u00e3o ter custo de performance da sincroniza\u00e7\u00e3o. package _string.exemplo_string_mutavel ; class Exemplo { public static void main ( String [] args ) { String s1 = \"java\" ; String s2 = \"java\" ; /* * Strings s\u00e3o imut\u00e1veis, quando modificadas, um novo objeto \u00e9 criado */ System . out . println ( \"s1: \" + System . identityHashCode ( s1 )); System . out . println ( \"s2: \" + System . identityHashCode ( s2 )); s2 = s2 + \"!\" ; System . out . println ( \"s2: \" + System . identityHashCode ( s2 )); /* * Modifica\u00e7\u00e3o da string sem criar novas inst\u00e2ncias. Entretanto, cada inst\u00e2ncia, * mesmo usando uma mesma string, ser\u00e1 um novo objeto. */ StringBuffer sb1 = new StringBuffer ( \"java\" ); StringBuffer sb2 = new StringBuffer ( \"java\" ); System . out . println ( \"sb1: \" + System . identityHashCode ( sb1 )); System . out . println ( \"sb2: \" + System . identityHashCode ( sb2 )); sb1 . append ( \"!\" ); System . out . println ( \"sb2: \" + System . identityHashCode ( sb2 )); } } // Saida // > s1: 1497836505 // > s2: 1497836505 // > s2: 135721597 // > sb1: 142257191 // > sb2: 1044036744 // > sb2: 1044036744 Benchmark das classes que implementam CharSequence : package _string.exemplo_string_mutavel_benchmark ; class Exemplo { public static void main ( String [] args ) { int N = 1000000 ; long t ; /* * String */ String str = \"\" ; t = System . currentTimeMillis (); for ( int i = N ; i -- > 0 ;) { str += \"!\" ; } System . out . println ( System . currentTimeMillis () - t ); /* * StringBuffer */ StringBuffer sbf = new StringBuffer (); t = System . currentTimeMillis (); for ( int i = N ; i -- > 0 ;) { sbf . append ( \"!\" ); } System . out . println ( System . currentTimeMillis () - t ); /* * StringBuilder */ StringBuilder sbb = new StringBuilder (); t = System . currentTimeMillis (); for ( int i = N ; i -- > 0 ;) { sbb . append ( \"!\" ); } System . out . println ( System . currentTimeMillis () - t ); } } // Saida // > 100226 // > 18 // > 14","title":"Strings mut\u00e1veis"},{"location":"java/linguagem/string/#operacoes","text":"Exemplos de opera\u00e7\u00f5es com strings : package _string.exemplo_string_operacoes ; class Exemplo { public static void main ( String [] args ) { String s0 ; String s1 ; StringBuilder sb0 ; StringBuilder sb1 ; /* * Concatena\u00e7\u00e3o */ s0 = \"A\" ; s0 += \"B\" ; s0 = \"A\" ; s1 = \"B\" ; s0 = s0 + s1 ; sb0 = new StringBuilder ( \"A\" ); sb0 . append ( \"B\" ); sb0 = new StringBuilder ( \"A\" ); sb1 = new StringBuilder ( \"B\" ); sb0 . append ( sb1 ); /* * Busca */ s0 = \"ABCDE\" ; s0 . indexOf ( \"CD\" ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . indexOf ( \"CD\" ); /* * Substitui\u00e7\u00e3o */ s0 = \"AXC\" ; s0 = s0 . replace ( \"X\" , \"B\" ); sb0 = new StringBuilder ( \"AXC\" ); sb0 . replace ( sb0 . indexOf ( \"X\" ), sb0 . indexOf ( \"X\" ) + 1 , \"B\" ); /* * Tamanho */ s0 = \"ABCDE\" ; s0 . length (); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . length (); /* * Substring */ s0 = \"ABCDE\" ; s0 = s0 . substring ( 1 , 3 ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 = new StringBuilder ( sb0 . substring ( 1 , 3 )); /* * Remo\u00e7\u00e3o */ s0 = \"ABCDE\" ; s0 = s0 . replaceFirst ( \"CD\" , \"\" ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . delete ( sb0 . indexOf ( \"CD\" ), sb0 . indexOf ( \"CD\" ) + \"CD\" . length ()); /* * Compara\u00e7\u00e3o */ s0 = \"ABCDE\" ; s0 . compareTo ( \"ABCDE\" ); sb0 = new StringBuilder ( \"ABCDE\" ); sb0 . compareTo ( new StringBuilder ( \"ABCDE\" )); } }","title":"Opera\u00e7\u00f5es"},{"location":"java/mapeamento/introducao/","text":"Introdu\u00e7\u00e3o \u00b6 Introdu\u00e7\u00e3o Mapeamento Mapeamento \u00b6 Fazer o mapeamento manualmente entre objetos Java pode criar rapidamente muito c\u00f3digo, induzir a erros e consumir muito tempo. Para isso existem diversos frameworks de mapeamento de objetos como: MapStruct , ModelMapper , Orika , JMapper , Dozer etc.","title":"Introdu\u00e7\u00e3o"},{"location":"java/mapeamento/introducao/#introducao","text":"Introdu\u00e7\u00e3o Mapeamento","title":"Introdu\u00e7\u00e3o"},{"location":"java/mapeamento/introducao/#mapeamento","text":"Fazer o mapeamento manualmente entre objetos Java pode criar rapidamente muito c\u00f3digo, induzir a erros e consumir muito tempo. Para isso existem diversos frameworks de mapeamento de objetos como: MapStruct , ModelMapper , Orika , JMapper , Dozer etc.","title":"Mapeamento"},{"location":"java/mapeamento/map-struct/","text":"MapStruct \u00b6 MapStruct Introdu\u00e7\u00e3o Links Introdu\u00e7\u00e3o \u00b6 MapStruct \u00e9 um processador de anota\u00e7\u00e3o Java para a gera\u00e7\u00e3o de classes de mapeamento de bean com seguran\u00e7a de tipo. Tudo que \u00e9 preciso fazer \u00e9 definir uma interface do mapeador que declare qualquer m\u00e9todo de mapeamento necess\u00e1rio. Durante a compila\u00e7\u00e3o, o MapStruct ir\u00e1 gerar uma implementa\u00e7\u00e3o dessa interface. Essa implementa\u00e7\u00e3o usa invoca\u00e7\u00f5es simples do m\u00e9todo Java para mapeamento entre objetos de origem e destino, ou seja, sem reflex\u00e3o ou similar. import lombok.* ; import org.mapstruct.InheritInverseConfiguration ; import org.mapstruct.Mapper ; import org.mapstruct.Mapping ; import org.mapstruct.factory.Mappers ; public class Main { public static void main ( String [] args ) { Carro carroOriginal = new Carro ( \"Morris\" , 5 , 90.5 , CarroTipo . SEDAN ); CarroDto carroDto = CarroMapa . INSTANCE . fromCarro ( carroOriginal ); System . out . println ( carroDto ); Carro carro = CarroMapa . INSTANCE . toCarro ( carroDto ); System . out . println ( carro ); } } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Carro { private String marca ; private int numeroAcentos ; private double potencia ; private CarroTipo tipo ; } @NoArgsConstructor enum CarroTipo { SEDAN , HATCH , SUV ; } @Getter @Setter @NoArgsConstructor @ToString class CarroDto { private String marca ; private int acentos ; private double cavalos ; private String tipo ; } @Mapper interface CarroMapa { CarroMapa INSTANCE = Mappers . getMapper ( CarroMapa . class ); @Mapping ( source = \"numeroAcentos\" , target = \"acentos\" ) @Mapping ( source = \"potencia\" , target = \"cavalos\" ) CarroDto fromCarro ( Carro carro ); @InheritInverseConfiguration Carro toCarro ( CarroDto carro ); } // Saida // > CarroDto(marca=Morris, acentos=5, cavalos=90.5, tipo=SEDAN) // > Carro(marca=Morris, numeroAcentos=5, potencia=90.5, tipo=SEDAN) A anota\u00e7\u00e3o @Mapper marca a interface como interface de mapeamento e permite que o processador MapStruct seja acionado durante a compila\u00e7\u00e3o. Uma inst\u00e2ncia da implementa\u00e7\u00e3o da interface pode ser recuperada da classe Mappers . Por conven\u00e7\u00e3o, a interface declara um membro INSTANCE , fornecendo aos clientes acesso \u00e0 implementa\u00e7\u00e3o do mapeador. A anota\u00e7\u00e3o @Mapping permite definirmos qual campo da classe ser\u00e1 mapeado para outro com nome diferente. Se os nomes forem iguais, n\u00e3o \u00e9 necess\u00e1rio descreve-lo. Onde necess\u00e1rio e poss\u00edvel, uma convers\u00e3o de tipo ser\u00e1 executada para campos com diferentes tipos na origem e no destino, por exemplo o campo tipo ser\u00e1 convertido do tipo de enumera\u00e7\u00e3o em uma string . A anota\u00e7\u00e3o @InheritInverseConfiguration permite realizar o mapeamento inverso sem a necessidade de informar novamente os pares de mapeamento. Links \u00b6 https://mapstruct.org/documentation/stable/reference/html","title":"MapStruct"},{"location":"java/mapeamento/map-struct/#mapstruct","text":"MapStruct Introdu\u00e7\u00e3o Links","title":"MapStruct"},{"location":"java/mapeamento/map-struct/#introducao","text":"MapStruct \u00e9 um processador de anota\u00e7\u00e3o Java para a gera\u00e7\u00e3o de classes de mapeamento de bean com seguran\u00e7a de tipo. Tudo que \u00e9 preciso fazer \u00e9 definir uma interface do mapeador que declare qualquer m\u00e9todo de mapeamento necess\u00e1rio. Durante a compila\u00e7\u00e3o, o MapStruct ir\u00e1 gerar uma implementa\u00e7\u00e3o dessa interface. Essa implementa\u00e7\u00e3o usa invoca\u00e7\u00f5es simples do m\u00e9todo Java para mapeamento entre objetos de origem e destino, ou seja, sem reflex\u00e3o ou similar. import lombok.* ; import org.mapstruct.InheritInverseConfiguration ; import org.mapstruct.Mapper ; import org.mapstruct.Mapping ; import org.mapstruct.factory.Mappers ; public class Main { public static void main ( String [] args ) { Carro carroOriginal = new Carro ( \"Morris\" , 5 , 90.5 , CarroTipo . SEDAN ); CarroDto carroDto = CarroMapa . INSTANCE . fromCarro ( carroOriginal ); System . out . println ( carroDto ); Carro carro = CarroMapa . INSTANCE . toCarro ( carroDto ); System . out . println ( carro ); } } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Carro { private String marca ; private int numeroAcentos ; private double potencia ; private CarroTipo tipo ; } @NoArgsConstructor enum CarroTipo { SEDAN , HATCH , SUV ; } @Getter @Setter @NoArgsConstructor @ToString class CarroDto { private String marca ; private int acentos ; private double cavalos ; private String tipo ; } @Mapper interface CarroMapa { CarroMapa INSTANCE = Mappers . getMapper ( CarroMapa . class ); @Mapping ( source = \"numeroAcentos\" , target = \"acentos\" ) @Mapping ( source = \"potencia\" , target = \"cavalos\" ) CarroDto fromCarro ( Carro carro ); @InheritInverseConfiguration Carro toCarro ( CarroDto carro ); } // Saida // > CarroDto(marca=Morris, acentos=5, cavalos=90.5, tipo=SEDAN) // > Carro(marca=Morris, numeroAcentos=5, potencia=90.5, tipo=SEDAN) A anota\u00e7\u00e3o @Mapper marca a interface como interface de mapeamento e permite que o processador MapStruct seja acionado durante a compila\u00e7\u00e3o. Uma inst\u00e2ncia da implementa\u00e7\u00e3o da interface pode ser recuperada da classe Mappers . Por conven\u00e7\u00e3o, a interface declara um membro INSTANCE , fornecendo aos clientes acesso \u00e0 implementa\u00e7\u00e3o do mapeador. A anota\u00e7\u00e3o @Mapping permite definirmos qual campo da classe ser\u00e1 mapeado para outro com nome diferente. Se os nomes forem iguais, n\u00e3o \u00e9 necess\u00e1rio descreve-lo. Onde necess\u00e1rio e poss\u00edvel, uma convers\u00e3o de tipo ser\u00e1 executada para campos com diferentes tipos na origem e no destino, por exemplo o campo tipo ser\u00e1 convertido do tipo de enumera\u00e7\u00e3o em uma string . A anota\u00e7\u00e3o @InheritInverseConfiguration permite realizar o mapeamento inverso sem a necessidade de informar novamente os pares de mapeamento.","title":"Introdu\u00e7\u00e3o"},{"location":"java/mapeamento/map-struct/#links","text":"https://mapstruct.org/documentation/stable/reference/html","title":"Links"},{"location":"java/serializacao-desserializacao/jackson/","text":"Jackson Json \u00b6 Jackson Json Introdu\u00e7\u00e3o Mapeamento Anota\u00e7\u00f5es Links Introdu\u00e7\u00e3o \u00b6 Jackson \u00e9 um processador JSON de alto desempenho para Java. Seus desenvolvedores exaltam a combina\u00e7\u00e3o de campos r\u00e1pidos, corretos, leves e ergon\u00f4micos da biblioteca. Jackson fornece muitas maneiras de trabalhar, incluindo POJO simples convertido para/de JSON para casos simples. Jackson tamb\u00e9m fornece um conjunto de anota\u00e7\u00f5es para mapeamento. Mapeamento \u00b6 Estrutura Descri\u00e7\u00e3o ObjectMapper Classe respons\u00e1vel por fazer todo o data-binding ObjectMapper:writeValueAsString Escreve json em string ObjectMapper:writeValue Escreve json em arquivo ObjectMapper:readValue Converte json para o objeto package exemplo_jackson ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import lombok.* ; import java.io.File ; import java.io.IOException ; public class Exemplo { static String path = System . getProperty ( \"user.dir\" ) + \"/exemplo_jackson/\" ; static void serializar ( Pessoa pessoa , String arquivo ) { final ObjectMapper mapper = new ObjectMapper (); /** * Deixar json formatado com indenta\u00e7\u00f5es */ mapper . enable ( SerializationFeature . INDENT_OUTPUT ); try { /** * Json em String */ final String json = mapper . writeValueAsString ( pessoa ); System . out . println ( json ); /** * Json escrito em arquivo */ final File file = new File ( path + arquivo ); mapper . writeValue ( file , pessoa ); } catch ( final IOException e ) { e . printStackTrace (); } } static Pessoa desserializar ( String arquivo ) { Pessoa pessoa = new Pessoa (); final ObjectMapper mapper = new ObjectMapper (); try { pessoa = mapper . readValue ( new File ( path + arquivo ), Pessoa . class ); } catch ( IOException e ) { e . printStackTrace (); } return pessoa ; } public static void main ( String [] args ) { Endereco endereco = new Endereco ( \"Rua Um\" , \"101\" ); Pessoa pessoa = new Pessoa ( \"Jos\u00e9\" , 54 , endereco ); Exemplo . serializar ( pessoa , \"json.txt\" ); pessoa = Exemplo . desserializar ( \"json.txt\" ); System . out . println ( pessoa ); } } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Pessoa { String nome ; int idade ; Endereco endereco ; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Endereco { String rua ; String numero ; } // Saida // > // { // \"nome\" : \"Jos\u00e9\", // \"idade\" : 54, // \"endereco\" : { // \"rua\" : \"Rua Um\", // \"numero\" : \"101\" // } // } // > Pessoa(nome=Jos\u00e9, idade=54, endereco=Endereco(rua=Rua Um, numero=101)) Dar prefer\u00eancia para `ObjectReader/ObjectWriter` ao inv\u00e9s de `ObjectMapper`. O `ObjectReader` e o `ObjectWriter` s\u00e3o mais seguros de usar - eles s\u00e3o completamente imut\u00e1veis e livremente compartilh\u00e1veis entre threads - eles tamb\u00e9m podem ser um pouco mais eficientes, j\u00e1 que podem evitar algumas das pesquisas que o `ObjectMapper` tem que fazer. ObjectMapper objectMapper = new ObjectMapper (); ObjectReader reader = objectMapper . readerFor ( Map . class ); Anota\u00e7\u00f5es \u00b6 Anota\u00e7\u00e3o Descri\u00e7\u00e3o @JsonProperty Renomeia um campo @JsonInclude(JsonInclude.Include.NON_NULL) Ignora todos campos nulos da classe ou de um campo espec\u00edfico @JsonIgnoreProperties({\"A\", \"B\"}) Ignora os campos informados (nota\u00e7\u00e3o de classe) @JsonIgnore Ignora o campo informado (nota\u00e7\u00e3o de campo) package exemplo_jackson_anotacoes ; import com.fasterxml.jackson.annotation.JsonIgnore ; import com.fasterxml.jackson.annotation.JsonIgnoreProperties ; import com.fasterxml.jackson.annotation.JsonInclude ; import com.fasterxml.jackson.annotation.JsonProperty ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import lombok.* ; import java.io.IOException ; public class Exemplo { static String serializar ( Pessoa pessoa ) { String json = null ; final ObjectMapper mapper = new ObjectMapper (); mapper . enable ( SerializationFeature . INDENT_OUTPUT ); try { json = mapper . writeValueAsString ( pessoa ); } catch ( final IOException e ) { e . printStackTrace (); } return json ; } static Pessoa desserializar ( String json ) { Pessoa pessoa = new Pessoa (); final ObjectMapper mapper = new ObjectMapper (); try { pessoa = mapper . readValue ( json , Pessoa . class ); } catch ( IOException e ) { e . printStackTrace (); } return pessoa ; } public static void main ( String [] args ) { Endereco endereco = new Endereco ( \"Rua Um\" , null , \"Centro\" ); Pessoa pessoaOriginal = new Pessoa ( \"Jos\u00e9\" , 54 , \"M\" , endereco ); String json = Exemplo . serializar ( pessoaOriginal ); Pessoa pessoa = Exemplo . desserializar ( json ); System . out . println ( json ); System . out . println ( pessoa ); } } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString /** * Ignora campos nulos (n\u00edvel de classe) */ @JsonInclude ( JsonInclude . Include . NON_NULL ) /** * Ignora os campos (n\u00edvel de classe) */ @JsonIgnoreProperties ({ \"idade\" , \"sexo\" }) class Pessoa { String nome ; int idade ; String sexo ; /** * Nomea\u00e7\u00e3o de campo */ @JsonProperty ( \"endereco_residencial\" ) Endereco endereco ; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Endereco { String rua ; /** * Ignora campos nulos (n\u00edvel de campo) */ @JsonInclude ( JsonInclude . Include . NON_NULL ) String numero ; /** * Ignora os campos (n\u00edvel de campo) */ @JsonIgnore String bairro ; } // Saida // > // { // \"nome\" : \"Jos\u00e9\", // \"endereco_residencial\" : { // \"rua\" : \"Rua Um\" // } // } // > Pessoa(nome=Jos\u00e9, idade=0, sexo=null , endereco=Endereco(rua=Rua Um, numero=null, bairro=null)) Anota\u00e7\u00e3o Descri\u00e7\u00e3o @JsonView(Class) Indica quais campo ser\u00e3o considerados na serializa\u00e7\u00e3o e desserializa\u00e7\u00e3o baseado na classe View informada @JsonView \u00e9 usado para indicar qual o campo ser\u00e1 inclu\u00eddo durante a serializa\u00e7\u00e3o e desserializa\u00e7\u00e3o e \u00e9 muito \u00fatil quando \u00e9 necess\u00e1rio incluir diferentes campos de objeto durante a serializa\u00e7\u00e3o para diferentes casos de uso. No exemplo abaixo, a view Privado \u00e9 uma subclasse da view Publico portanto herda todos os campos dispon\u00edveis na view Publico . Caso algum campo n\u00e3o for incluso em alguma view , ele sempre ser\u00e1 considerado em qualquer view . package exemplo_jackson_anotacoes_view ; import com.fasterxml.jackson.annotation.JsonView ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import lombok.* ; import java.io.IOException ; public class Exemplo { static String serializar ( Pessoa pessoa , Class <?> view ) { String json = null ; final ObjectMapper mapper = new ObjectMapper (); mapper . enable ( SerializationFeature . INDENT_OUTPUT ); try { json = mapper . writerWithView ( view ) . writeValueAsString ( pessoa ); } catch ( final IOException e ) { e . printStackTrace (); } return json ; } static Pessoa desserializar ( String json ) { Pessoa pessoa = new Pessoa (); final ObjectMapper mapper = new ObjectMapper (); try { pessoa = mapper . readValue ( json , Pessoa . class ); } catch ( IOException e ) { e . printStackTrace (); } return pessoa ; } public static void main ( String [] args ) { String json = null ; Pessoa pessoa = null ; Endereco endereco = new Endereco ( \"Rua Um\" , null , \"Centro\" ); Pessoa pessoaOriginal = new Pessoa ( \"Jos\u00e9\" , 54 , \"M\" , endereco ); /* * View p\u00fablica */ json = Exemplo . serializar ( pessoaOriginal , ViewsPessoa . Publico . class ); pessoa = Exemplo . desserializar ( json ); System . out . println ( json ); System . out . println ( pessoa ); /* * View privada */ json = Exemplo . serializar ( pessoaOriginal , ViewsPessoa . Privado . class ); pessoa = Exemplo . desserializar ( json ); System . out . println ( json ); System . out . println ( pessoa ); } } class ViewsPessoa { public static class Publico {}; public static class Privado extends Publico {}; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Pessoa { @JsonView ( ViewsPessoa . Publico . class ) String nome ; @JsonView ( ViewsPessoa . Privado . class ) int idade ; String sexo ; @JsonView ( ViewsPessoa . Privado . class ) Endereco endereco ; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Endereco { String rua ; String numero ; String bairro ; } // Saida: // > // { // \"nome\" : \"Jos\u00e9\", // \"sexo\" : \"M\" // } // > Pessoa(nome=Jos\u00e9, idade=0, sexo=M, endereco=null) // > // { // \"nome\" : \"Jos\u00e9\", // \"idade\" : 54, // \"sexo\" : \"M\", // \"endereco\" : { // \"rua\" : \"Rua Um\", // \"numero\" : null, // \"bairro\" : \"Centro\" // } // } // > Pessoa(nome=Jos\u00e9, idade=54, sexo=M, endereco=Endereco(rua=Rua Um, numero=null, bairro=Centro)) Links \u00b6 Anota\u00e7\u00f5es https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations https://www.baeldung.com/jackson-annotations","title":"Jackson Json"},{"location":"java/serializacao-desserializacao/jackson/#jackson-json","text":"Jackson Json Introdu\u00e7\u00e3o Mapeamento Anota\u00e7\u00f5es Links","title":"Jackson Json"},{"location":"java/serializacao-desserializacao/jackson/#introducao","text":"Jackson \u00e9 um processador JSON de alto desempenho para Java. Seus desenvolvedores exaltam a combina\u00e7\u00e3o de campos r\u00e1pidos, corretos, leves e ergon\u00f4micos da biblioteca. Jackson fornece muitas maneiras de trabalhar, incluindo POJO simples convertido para/de JSON para casos simples. Jackson tamb\u00e9m fornece um conjunto de anota\u00e7\u00f5es para mapeamento.","title":"Introdu\u00e7\u00e3o"},{"location":"java/serializacao-desserializacao/jackson/#mapeamento","text":"Estrutura Descri\u00e7\u00e3o ObjectMapper Classe respons\u00e1vel por fazer todo o data-binding ObjectMapper:writeValueAsString Escreve json em string ObjectMapper:writeValue Escreve json em arquivo ObjectMapper:readValue Converte json para o objeto package exemplo_jackson ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import lombok.* ; import java.io.File ; import java.io.IOException ; public class Exemplo { static String path = System . getProperty ( \"user.dir\" ) + \"/exemplo_jackson/\" ; static void serializar ( Pessoa pessoa , String arquivo ) { final ObjectMapper mapper = new ObjectMapper (); /** * Deixar json formatado com indenta\u00e7\u00f5es */ mapper . enable ( SerializationFeature . INDENT_OUTPUT ); try { /** * Json em String */ final String json = mapper . writeValueAsString ( pessoa ); System . out . println ( json ); /** * Json escrito em arquivo */ final File file = new File ( path + arquivo ); mapper . writeValue ( file , pessoa ); } catch ( final IOException e ) { e . printStackTrace (); } } static Pessoa desserializar ( String arquivo ) { Pessoa pessoa = new Pessoa (); final ObjectMapper mapper = new ObjectMapper (); try { pessoa = mapper . readValue ( new File ( path + arquivo ), Pessoa . class ); } catch ( IOException e ) { e . printStackTrace (); } return pessoa ; } public static void main ( String [] args ) { Endereco endereco = new Endereco ( \"Rua Um\" , \"101\" ); Pessoa pessoa = new Pessoa ( \"Jos\u00e9\" , 54 , endereco ); Exemplo . serializar ( pessoa , \"json.txt\" ); pessoa = Exemplo . desserializar ( \"json.txt\" ); System . out . println ( pessoa ); } } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Pessoa { String nome ; int idade ; Endereco endereco ; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Endereco { String rua ; String numero ; } // Saida // > // { // \"nome\" : \"Jos\u00e9\", // \"idade\" : 54, // \"endereco\" : { // \"rua\" : \"Rua Um\", // \"numero\" : \"101\" // } // } // > Pessoa(nome=Jos\u00e9, idade=54, endereco=Endereco(rua=Rua Um, numero=101)) Dar prefer\u00eancia para `ObjectReader/ObjectWriter` ao inv\u00e9s de `ObjectMapper`. O `ObjectReader` e o `ObjectWriter` s\u00e3o mais seguros de usar - eles s\u00e3o completamente imut\u00e1veis e livremente compartilh\u00e1veis entre threads - eles tamb\u00e9m podem ser um pouco mais eficientes, j\u00e1 que podem evitar algumas das pesquisas que o `ObjectMapper` tem que fazer. ObjectMapper objectMapper = new ObjectMapper (); ObjectReader reader = objectMapper . readerFor ( Map . class );","title":"Mapeamento"},{"location":"java/serializacao-desserializacao/jackson/#anotacoes","text":"Anota\u00e7\u00e3o Descri\u00e7\u00e3o @JsonProperty Renomeia um campo @JsonInclude(JsonInclude.Include.NON_NULL) Ignora todos campos nulos da classe ou de um campo espec\u00edfico @JsonIgnoreProperties({\"A\", \"B\"}) Ignora os campos informados (nota\u00e7\u00e3o de classe) @JsonIgnore Ignora o campo informado (nota\u00e7\u00e3o de campo) package exemplo_jackson_anotacoes ; import com.fasterxml.jackson.annotation.JsonIgnore ; import com.fasterxml.jackson.annotation.JsonIgnoreProperties ; import com.fasterxml.jackson.annotation.JsonInclude ; import com.fasterxml.jackson.annotation.JsonProperty ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import lombok.* ; import java.io.IOException ; public class Exemplo { static String serializar ( Pessoa pessoa ) { String json = null ; final ObjectMapper mapper = new ObjectMapper (); mapper . enable ( SerializationFeature . INDENT_OUTPUT ); try { json = mapper . writeValueAsString ( pessoa ); } catch ( final IOException e ) { e . printStackTrace (); } return json ; } static Pessoa desserializar ( String json ) { Pessoa pessoa = new Pessoa (); final ObjectMapper mapper = new ObjectMapper (); try { pessoa = mapper . readValue ( json , Pessoa . class ); } catch ( IOException e ) { e . printStackTrace (); } return pessoa ; } public static void main ( String [] args ) { Endereco endereco = new Endereco ( \"Rua Um\" , null , \"Centro\" ); Pessoa pessoaOriginal = new Pessoa ( \"Jos\u00e9\" , 54 , \"M\" , endereco ); String json = Exemplo . serializar ( pessoaOriginal ); Pessoa pessoa = Exemplo . desserializar ( json ); System . out . println ( json ); System . out . println ( pessoa ); } } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString /** * Ignora campos nulos (n\u00edvel de classe) */ @JsonInclude ( JsonInclude . Include . NON_NULL ) /** * Ignora os campos (n\u00edvel de classe) */ @JsonIgnoreProperties ({ \"idade\" , \"sexo\" }) class Pessoa { String nome ; int idade ; String sexo ; /** * Nomea\u00e7\u00e3o de campo */ @JsonProperty ( \"endereco_residencial\" ) Endereco endereco ; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Endereco { String rua ; /** * Ignora campos nulos (n\u00edvel de campo) */ @JsonInclude ( JsonInclude . Include . NON_NULL ) String numero ; /** * Ignora os campos (n\u00edvel de campo) */ @JsonIgnore String bairro ; } // Saida // > // { // \"nome\" : \"Jos\u00e9\", // \"endereco_residencial\" : { // \"rua\" : \"Rua Um\" // } // } // > Pessoa(nome=Jos\u00e9, idade=0, sexo=null , endereco=Endereco(rua=Rua Um, numero=null, bairro=null)) Anota\u00e7\u00e3o Descri\u00e7\u00e3o @JsonView(Class) Indica quais campo ser\u00e3o considerados na serializa\u00e7\u00e3o e desserializa\u00e7\u00e3o baseado na classe View informada @JsonView \u00e9 usado para indicar qual o campo ser\u00e1 inclu\u00eddo durante a serializa\u00e7\u00e3o e desserializa\u00e7\u00e3o e \u00e9 muito \u00fatil quando \u00e9 necess\u00e1rio incluir diferentes campos de objeto durante a serializa\u00e7\u00e3o para diferentes casos de uso. No exemplo abaixo, a view Privado \u00e9 uma subclasse da view Publico portanto herda todos os campos dispon\u00edveis na view Publico . Caso algum campo n\u00e3o for incluso em alguma view , ele sempre ser\u00e1 considerado em qualquer view . package exemplo_jackson_anotacoes_view ; import com.fasterxml.jackson.annotation.JsonView ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import lombok.* ; import java.io.IOException ; public class Exemplo { static String serializar ( Pessoa pessoa , Class <?> view ) { String json = null ; final ObjectMapper mapper = new ObjectMapper (); mapper . enable ( SerializationFeature . INDENT_OUTPUT ); try { json = mapper . writerWithView ( view ) . writeValueAsString ( pessoa ); } catch ( final IOException e ) { e . printStackTrace (); } return json ; } static Pessoa desserializar ( String json ) { Pessoa pessoa = new Pessoa (); final ObjectMapper mapper = new ObjectMapper (); try { pessoa = mapper . readValue ( json , Pessoa . class ); } catch ( IOException e ) { e . printStackTrace (); } return pessoa ; } public static void main ( String [] args ) { String json = null ; Pessoa pessoa = null ; Endereco endereco = new Endereco ( \"Rua Um\" , null , \"Centro\" ); Pessoa pessoaOriginal = new Pessoa ( \"Jos\u00e9\" , 54 , \"M\" , endereco ); /* * View p\u00fablica */ json = Exemplo . serializar ( pessoaOriginal , ViewsPessoa . Publico . class ); pessoa = Exemplo . desserializar ( json ); System . out . println ( json ); System . out . println ( pessoa ); /* * View privada */ json = Exemplo . serializar ( pessoaOriginal , ViewsPessoa . Privado . class ); pessoa = Exemplo . desserializar ( json ); System . out . println ( json ); System . out . println ( pessoa ); } } class ViewsPessoa { public static class Publico {}; public static class Privado extends Publico {}; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Pessoa { @JsonView ( ViewsPessoa . Publico . class ) String nome ; @JsonView ( ViewsPessoa . Privado . class ) int idade ; String sexo ; @JsonView ( ViewsPessoa . Privado . class ) Endereco endereco ; } @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString class Endereco { String rua ; String numero ; String bairro ; } // Saida: // > // { // \"nome\" : \"Jos\u00e9\", // \"sexo\" : \"M\" // } // > Pessoa(nome=Jos\u00e9, idade=0, sexo=M, endereco=null) // > // { // \"nome\" : \"Jos\u00e9\", // \"idade\" : 54, // \"sexo\" : \"M\", // \"endereco\" : { // \"rua\" : \"Rua Um\", // \"numero\" : null, // \"bairro\" : \"Centro\" // } // } // > Pessoa(nome=Jos\u00e9, idade=54, sexo=M, endereco=Endereco(rua=Rua Um, numero=null, bairro=Centro))","title":"Anota\u00e7\u00f5es"},{"location":"java/serializacao-desserializacao/jackson/#links","text":"Anota\u00e7\u00f5es https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations https://www.baeldung.com/jackson-annotations","title":"Links"},{"location":"javascript/javascript/","text":"1. Introdu\u00e7\u00e3o \u00b6 1. Introdu\u00e7\u00e3o 1.1. Vari\u00e1veis (const, let e var) 1.2. Arrow functions V\u00e1rios par\u00e2metros Um par\u00e2mentro Escopo 1.1. Vari\u00e1veis (const, let e var) \u00b6 Vari\u00e1veis definidas com \"var\" possuem escopo global, as vari\u00e1veis definidas com \"let\" possuem escopo local e as vari\u00e1veis definidas com \"const\" possuem escopo local e n\u00e3o podem ser alteradas. Sempre que \u00e9 definido uma vari\u00e1vel \"const\", o Javascript faz refer\u00eancia ao endere\u00e7o de mem\u00f3ria da vari\u00e1vel. Portanto, n\u00e3o pode alterar a vari\u00e1vel para fazer refer\u00eancia a algum outro local de mem\u00f3ria. O comando \"push\" apenas adiciona o elemento ao vetor, o ponteiro para o in\u00edcio do vetor se mant\u00e9m inalterado. var V = \"var\" let L = \"let\" const C = \"const\" if ( true ) { var v = \"var_interno\" let l = \"let_interno\" const c = \"const_interno\" const cv = [ 'Js' , 'Ruby' , 'Python' , 'Go' ] v = \"var_interno_novo\" l = \"let_interno_novo\" // c = \"const_interno_novo\" // erro, n\u00e3o pose ser alterada // cv = ['Java'] // erro, n\u00e3o pose ser alterada cv . push ( 'Java' ); // funciona console . log ( \"-------Interno--------\" ) console . log ( v ) // var_interno_novo console . log ( l ) // let_interno_novo console . log ( c ) // const_interno console . log ( cv ) // [\"Js\", \"Ruby\", \"Python\", \"Go\", \"Java\"] console . log ( V ) // var console . log ( L ) // let console . log ( C ) // const } console . log ( \"-------Externo--------\" ) console . log ( v ) // var_interno_novo // console.log(l); // undefined, definida em escopo local // console.log(c); // undefined, definida em escopo local console . log ( V ) // var console . log ( L ) // let console . log ( C ) // const 1.2. Arrow functions \u00b6 A vers\u00e3o do JavaScript ES6 trouxe novas features e dentre elas uma nova forma de criar fun\u00e7\u00f5es usando o operador =>. Esta nova forma de se trabalhar com fun\u00e7\u00f5es s\u00e3o chamadas Arrow Functions. Uma express\u00e3o arrow function possui uma s\u00edntaxe mais curta quando comparada com uma express\u00e3o de fun\u00e7\u00e3o (function expression) e n\u00e3o faz o bind do this. Seu valor de this \u00e9 definido \u00e0 partir das fun\u00e7\u00f5es onde foram definidas. Ou seja, n\u00e3o \u00e9 mais necess\u00e1rio fazer bind() ou armazenar o estado em that = this. Arrow functions sempre s\u00e3o an\u00f4nimas. Aus\u00eancia de argumentos precisa ser indicada com \"()\". Para apenas um argumento os parent\u00eases n\u00e3o s\u00e3o requeridos. V\u00e1rios par\u00e2metros \u00b6 Sem arrow functions. var oldWay = function ( name , nickname ) { return 'My name is ' + nickname + ', ' + name }; console . log ( oldWay ( 'James Bond' , 'Bond' )) // My name is Bond, James Bond Com arrow functions. let newWay = ( name , nickname ) => { return 'My name is ' + nickname + ', ' + name ; }; console . log ( newWay ( 'James Bond' , 'Bond' ) ); // My name is Bond, James Bond Ou de uma maneira um pouco mais curta. let newWay2 = ( name , nickname ) => 'My name is ' + nickname + ', ' + name ; console . log ( newWay2 ( 'James Bond' , 'Bond' ) ); // My name is Bond, James Bond Um par\u00e2mentro \u00b6 Sem arrow functions. var one = function ( what ) { return 'I ' + what + ' you' ; }; console . log ( one ( 'hate' ) ); // I hate you Com arrow functions. var oneNew = what => 'I ' + what + ' you' ; console . log ( oneNew ( 'hate' ) ); // I hate you Escopo \u00b6 Antes das arrow functions, toda nova fun\u00e7\u00e3o definia seu pr\u00f3prio valor de this (um novo objeto no caso de um construtor, undefined em chamadas de fun\u00e7\u00f5es com strict mode, o objeto de contexto se a fun\u00e7\u00e3o \u00e9 chamada como um \"m\u00e9todo de objeto\", etc.). Este comportamento \u00e9 importuno com um estilo de programa\u00e7\u00e3o orientado a objeto. Sem arrow functions. function Pessoa () { var self = this self . idade = 0 setInterval ( function crescer () { // O callback refer\u00eancia a vari\u00e1vel self a qual o valor \u00e9 o objeto esperado. self . idade ++ }, 1000 ) } Com arrow functions. function Pessoa (){ this . idade = 0 setInterval (() => { this . idade ++ // |this| corretamente refer\u00eancia ao objeto Pessoa }, 1000 ) } var p = new Pessoa ();","title":"1. Introdu\u00e7\u00e3o"},{"location":"javascript/javascript/#1-introducao","text":"1. Introdu\u00e7\u00e3o 1.1. Vari\u00e1veis (const, let e var) 1.2. Arrow functions V\u00e1rios par\u00e2metros Um par\u00e2mentro Escopo","title":"1. Introdu\u00e7\u00e3o"},{"location":"javascript/javascript/#11-variaveis-const-let-e-var","text":"Vari\u00e1veis definidas com \"var\" possuem escopo global, as vari\u00e1veis definidas com \"let\" possuem escopo local e as vari\u00e1veis definidas com \"const\" possuem escopo local e n\u00e3o podem ser alteradas. Sempre que \u00e9 definido uma vari\u00e1vel \"const\", o Javascript faz refer\u00eancia ao endere\u00e7o de mem\u00f3ria da vari\u00e1vel. Portanto, n\u00e3o pode alterar a vari\u00e1vel para fazer refer\u00eancia a algum outro local de mem\u00f3ria. O comando \"push\" apenas adiciona o elemento ao vetor, o ponteiro para o in\u00edcio do vetor se mant\u00e9m inalterado. var V = \"var\" let L = \"let\" const C = \"const\" if ( true ) { var v = \"var_interno\" let l = \"let_interno\" const c = \"const_interno\" const cv = [ 'Js' , 'Ruby' , 'Python' , 'Go' ] v = \"var_interno_novo\" l = \"let_interno_novo\" // c = \"const_interno_novo\" // erro, n\u00e3o pose ser alterada // cv = ['Java'] // erro, n\u00e3o pose ser alterada cv . push ( 'Java' ); // funciona console . log ( \"-------Interno--------\" ) console . log ( v ) // var_interno_novo console . log ( l ) // let_interno_novo console . log ( c ) // const_interno console . log ( cv ) // [\"Js\", \"Ruby\", \"Python\", \"Go\", \"Java\"] console . log ( V ) // var console . log ( L ) // let console . log ( C ) // const } console . log ( \"-------Externo--------\" ) console . log ( v ) // var_interno_novo // console.log(l); // undefined, definida em escopo local // console.log(c); // undefined, definida em escopo local console . log ( V ) // var console . log ( L ) // let console . log ( C ) // const","title":"1.1. Vari\u00e1veis (const, let e var)"},{"location":"javascript/javascript/#12-arrow-functions","text":"A vers\u00e3o do JavaScript ES6 trouxe novas features e dentre elas uma nova forma de criar fun\u00e7\u00f5es usando o operador =>. Esta nova forma de se trabalhar com fun\u00e7\u00f5es s\u00e3o chamadas Arrow Functions. Uma express\u00e3o arrow function possui uma s\u00edntaxe mais curta quando comparada com uma express\u00e3o de fun\u00e7\u00e3o (function expression) e n\u00e3o faz o bind do this. Seu valor de this \u00e9 definido \u00e0 partir das fun\u00e7\u00f5es onde foram definidas. Ou seja, n\u00e3o \u00e9 mais necess\u00e1rio fazer bind() ou armazenar o estado em that = this. Arrow functions sempre s\u00e3o an\u00f4nimas. Aus\u00eancia de argumentos precisa ser indicada com \"()\". Para apenas um argumento os parent\u00eases n\u00e3o s\u00e3o requeridos.","title":"1.2. Arrow functions"},{"location":"javascript/javascript/#varios-parametros","text":"Sem arrow functions. var oldWay = function ( name , nickname ) { return 'My name is ' + nickname + ', ' + name }; console . log ( oldWay ( 'James Bond' , 'Bond' )) // My name is Bond, James Bond Com arrow functions. let newWay = ( name , nickname ) => { return 'My name is ' + nickname + ', ' + name ; }; console . log ( newWay ( 'James Bond' , 'Bond' ) ); // My name is Bond, James Bond Ou de uma maneira um pouco mais curta. let newWay2 = ( name , nickname ) => 'My name is ' + nickname + ', ' + name ; console . log ( newWay2 ( 'James Bond' , 'Bond' ) ); // My name is Bond, James Bond","title":"V\u00e1rios par\u00e2metros"},{"location":"javascript/javascript/#um-paramentro","text":"Sem arrow functions. var one = function ( what ) { return 'I ' + what + ' you' ; }; console . log ( one ( 'hate' ) ); // I hate you Com arrow functions. var oneNew = what => 'I ' + what + ' you' ; console . log ( oneNew ( 'hate' ) ); // I hate you","title":"Um par\u00e2mentro"},{"location":"javascript/javascript/#escopo","text":"Antes das arrow functions, toda nova fun\u00e7\u00e3o definia seu pr\u00f3prio valor de this (um novo objeto no caso de um construtor, undefined em chamadas de fun\u00e7\u00f5es com strict mode, o objeto de contexto se a fun\u00e7\u00e3o \u00e9 chamada como um \"m\u00e9todo de objeto\", etc.). Este comportamento \u00e9 importuno com um estilo de programa\u00e7\u00e3o orientado a objeto. Sem arrow functions. function Pessoa () { var self = this self . idade = 0 setInterval ( function crescer () { // O callback refer\u00eancia a vari\u00e1vel self a qual o valor \u00e9 o objeto esperado. self . idade ++ }, 1000 ) } Com arrow functions. function Pessoa (){ this . idade = 0 setInterval (() => { this . idade ++ // |this| corretamente refer\u00eancia ao objeto Pessoa }, 1000 ) } var p = new Pessoa ();","title":"Escopo"},{"location":"linux/arquivos-e-diretorios/","text":"Arquivos e diret\u00f3rios \u00b6 Arquivos e diret\u00f3rios [.desktop] Lan\u00e7adores Diret\u00f3rios onde os arquivos possuem visibilidade em todo ambiente $PATH Diret\u00f3rios e arquivos que concatenam o $PATH Organiza\u00e7\u00e3o dos diret\u00f3rios [ls] Listar os arquivos de um diret\u00f3rio [du] Ver espa\u00e7o ocupado pelos diret\u00f3rios [dd] C\u00f3pia bit a bit de uma arquivo [wc] Ver informa\u00e7\u00f5es sobre um arquivo [grep] Encontrar palavras em arquivos de texto [tar] Empacotamento e compress\u00e3o de arquivos [[ TOC ]] [.desktop] Lan\u00e7adores \u00b6 Lan\u00e7adores s\u00e3o atalhos que executam comandos. Geralmente usados para chamar algum programa. Para criar um lan\u00e7ador basta criar um arquivo com a extens\u00e3o \".desktop\" em \"/usr/share/applications\" para ser vis\u00edvel a todos usu\u00e1rios, ou em \"~/.local/share/applications\" para ser vis\u00edvel localmente. O conte\u00fado do lan\u00e7ador deve informar os dados da aplica\u00e7\u00e3o que ser\u00e1 executada, seguindo o seguinte esquema: [Desktop Entry] Type=Application # tipo. Version=1.0 # vers\u00e3o. Name=Meu aplicativo # nome. Comment=Meu aplicativo de exemplo # coment\u00e1rio do tooltip. Exec=\"/opt/meu app.sh\" # comando de execu\u00e7\u00e3o. Icon=/opt/meu app/fig.png # local do \u00edcone a ser usado. Terminal=false # se roda no terminal. Categories=Languages;Java; # categorias onde deve ser listada. Para verificar se o arquio .desktop est\u00e1 correto: desktop-file-validate ARQUIVO.desktop Diret\u00f3rios onde os arquivos possuem visibilidade em todo ambiente \u00b6 ~/.local/share/applications # ou /usr/local/bin/ $PATH \u00b6 \u00c9 uma vari\u00e1vel do sistema Linux que indica trajet\u00f3ria dos bin\u00e1rios, que podem ser executados sem indicar o caminho completo de onde se encontram. Exibir as vari\u00e1veis de ambiente que j\u00e1 foram definidas. echo \" ${ PATH //:/ $'\\n' } \" Adicionar mais um caminho nas vari\u00e1veis de ambiente. export PATH = $PATH :/NOVO-CAMINHO Para remover um caminho \u00e9 necess\u00e1rio adicionar todos caminhos novamente, exceto o que ser\u00e1 removido. Para isso basta copiar o conteudo de $PATH, remover o caminho desejado e defin[i-lo novamente em $PATH. echo $PATH export PATH = /CAMINHO1:/CAMINHO2:/CAMINHO3 Diret\u00f3rios e arquivos que concatenam o $PATH \u00b6 N\u00edvel de usu\u00e1rio: .bashrc , .bash_profile , .bash_login e .profile . N\u00edvel de sistema: /etc/environment , /etc/profile , /etc/profile.d/ e /etc/bash.bashrc . Organiza\u00e7\u00e3o dos diret\u00f3rios \u00b6 Directory Description / Primary hierarchy root and root directory of the entire file system hierarchy. /bin Essential command binaries that need to be available in single user mode; for all users, e.g., cat, ls, cp. /boot Boot loader files, e.g., kernels, initrd. /dev Essential device files, e.g., /dev/null. /etc Host-specific system-wide configuration files. There has been controversy over the meaning of the name itself. In early versions of the UNIX Implementation Document from Bell labs, /etc is referred to as the etcetera directory, as this directory historically held everything that did not belong elsewhere (however, the FHS restricts /etc to static configuration files and may not contain binaries).Since the publication of early documentation, the directory name has been re-explained in various ways. Recent interpretations include backronyms such as \"Editable Text Configuration\" or \"Extended Tool Chest\". /etc/opt Configuration files for add-on packages that are stored in /opt. /etc/sgml Configuration files, such as catalogs, for software that processes SGML. /etc/X11 Configuration files for the X Window System, version 11. /etc/xml Configuration files, such as catalogs, for software that processes XML. /home Users' home directories, containing saved files, personal settings, etc. /lib Libraries essential for the binaries in /bin and /sbin. /lib Alternate format essential libraries. Such directories are optional, but if they exist, they have some requirements. /mnt Temporarily mounted filesystems. /opt Optional application software packages.[6] /proc Virtual filesystem providing process and kernel information as files. In Linux, corresponds to a procfs mount. Generally automatically generated and populated by the system, on the fly. /root Home directory for the root user. /run Run-time variable data: Information about the running system since last boot, e.g., currently logged-in users and running daemons. Files under this directory must be either removed or truncated at the beginning of the boot process; but this is not necessary on systems that provide this directory as a temporary filesystem (tmpfs). /sbin Essential system binaries, e.g., fsck, init, route. /srv Site-specific data served by this system, such as data and scripts for web servers, data offered by FTP servers, and repositories for version control systems (appeared in FHS-2.3 in 2004). /sys Contains information about devices, drivers, and some kernel features. /tmp Temporary files (see also /var/tmp). Often not preserved between system reboots, and may be severely size restricted. /usr Secondary hierarchy for read-only user data; contains the majority of (multi-)user utilities and applications. /usr/bin Non-essential command binaries (not needed in single user mode); for all users. /usr/include Standard include files. /usr/lib Libraries for the binaries in /usr/bin and /usr/sbin. /usr/lib Alternate format libraries, e.g. /usr/lib32 for 32-bit libraries on a 64-bit machine (optional). /usr/local Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., bin, lib, share.[9] /usr/sbin Non-essential system binaries, e.g., daemons for various network-services. /usr/share Architecture-independent (shared) data. /usr/src Source code, e.g., the kernel source code with its header files. /usr/X11R6 X Window System, Version 11, Release 6 (up to FHS-2.3, optional). /var Variable files\u2014files whose content is expected to continually change during normal operation of the system\u2014such as logs, spool files, and temporary e-mail files. /var/cache Application cache data. Such data are locally generated as a result of time-consuming I/O or calculation. The application must be able to regenerate or restore the data. The cached files can be deleted without loss of data. /var/lib State information. Persistent data modified by programs as they run, e.g., databases, packaging system metadata, etc. /var/lock Lock files. Files keeping track of resources currently in use. /var/log Log files. Various logs. /var/mail Mailbox files. In some distributions, these files may be located in the deprecated /var/spool/mail. /var/opt Variable data from add-on packages that are stored in /opt. /var/run Run-time variable data. This directory contains system information data describing the system since it was booted. In FHS 3.0, /var/run is replaced by /run; a system should either continue to provide a /var/run directory, or provide a symbolic link from /var/run to /run, for backwards compatibility. /var/spool Spool for tasks waiting to be processed, e.g., print queues and outgoing mail queue. /var/spool/mail Deprecated location for users' mailboxes. /var/tmp Temporary files to be preserved between reboots. [ls] Listar os arquivos de um diret\u00f3rio \u00b6 Listar os arquivos de um diret\u00f3rio. $ ls [-l] Mostra arquivos em lista. [-h] Mostra tamanho dos arquivos em unidade proporcional ao tamanho. [-a] Mostra os arquivos ocultos. Exemplos: Listar arquivos em forma de lista. ls -l [du] Ver espa\u00e7o ocupado pelos diret\u00f3rios \u00b6 Ver espa\u00e7o ocupado pelos diret\u00f3rios. $ du [-d] Profundidade da listagem recursiva. [-h] Mostra tamanho dos arquivos em unidade proporcional ao tamanho. [-c] Mostra o total de espa\u00e7o ocupado. Exemplos: Ver espa\u00e7o ocupado pelos diret\u00f3rios na caminho atual. du -h -d 1 CAMINHO Ver lista de arquivos em ordem decrescente de tamanho. du -h -d 1 CAMINHO | sort -h [dd] C\u00f3pia bit a bit de uma arquivo \u00b6 C\u00f3pia bit a bit de uma arquivo. $ dd [if] Arquivo de origem. [of] Local de destino. [bs] Tamanho de cada bloco a ser copiado. [count] A quantidade de blocos que ser\u00e3o copiados. Exemplos: Copiar aquivo .iso para uma parti\u00e7\u00e3o (pendrive). dd if = ORIGEM of = DESTINO dd if = ubuntu.iso of = /dev/sdc Criar arquivo com tamanho prefixado. Arquivo de 10 MB (10485760 bytes = 10*1024*1024)). O par\u00e2metro count=1 representa o n\u00famero de itera\u00e7\u00f5es a serem realizadas. No caso uma itera\u00e7\u00e3o com tamanho de bloco \u201810485760\u2019 = 10 MB. O par\u00e2metro if=/dev/zero representa o dispositivo de valores nulos. dd if = /dev/zero of = arquivo bs = 10485760 count = 1 Apagar dados definitivamente. Gravando zeros nos setores. Op\u00e7\u00e3o mais r\u00e1pida. dd if = /dev/zero of = /dev/sda bs = 1M Gravando n\u00fameros aleat\u00f3rios. Op\u00e7\u00e3o mais demorada, por\u00e9m mais segura contra equipamentos sofisticados para recuperar dados. dd if = /dev/urandom of = /dev/sda bs = 1M Recuperar dados de um disco defeituoso. Copiar para outra m\u00eddia, suprimindo erros encontrados. dd if = /dev/sda of = /dev/sdb bs = 4k conv = noerror,sync Copiar para uma arquivo .img dd if = /dev/sda of = /tmp/sda disk.img bs = 4k conv = noerror,sync [wc] Ver informa\u00e7\u00f5es sobre um arquivo \u00b6 Ver informa\u00e7\u00f5es sobre um arquivo. $ wc [-c] Tamanho em bytes. [-m] Quantidade de caracteres. [-l] N\u00famero de linha. [-w] Quantidade de palavras. Exemplos: Ver a quantidade de palavras de um arquivo. wc -w arquivo.txt [grep] Encontrar palavras em arquivos de texto \u00b6 Encontrar palavras em arquivos de texto. $ grep [-E] (antigo egrep) Interpreta o padr\u00e3o como uma express\u00e3o regular estendida (regexp). [-F] (antigo fgrep) Interpreta o padr\u00e3o como uma string fixa, sem express\u00e3o regular. Otimizado para busca de substrings. [-G] Interpreta o padr\u00e3o como um express\u00e3o regular b\u00e1sica (padr\u00e3o). [-i] N\u00e3o diferenciar mai\u00fasculas e min\u00fasculas. [-r] Busca recursiva sem seguir links simb\u00f3licos. [-R] Busca recursiva seguindo links simb\u00f3licos. [-e PADRAO] Procura pela express\u00e3o regular. [-n] Exibe o n\u00famero de linhas que cont\u00e9m o padr\u00e3o. [-c] Exibe apenas o n\u00famero das linhas que cont\u00e9m o padr\u00e3o. [-f ARQUIVO] L\u00ea o padr\u00e3o a partir do arquivo especificado. [-l] Exibe apenas os nomes dos arquivos que cont\u00e9m o padr\u00e3o. [-v] Exibe as linhas que n\u00e3o cont\u00e9m o padr\u00e3o. [-w] Procura apenas palavras inteiras. Exemplos: Exibir as linhas onde a palavra registro aparece nos arquivos durante a busca recursiva a partir do local corrente. grep -Fir \"registro\" # ou especificar raiz da busca grep -Fir \"registro\" /ect Busca recursiva a partir do local informado com a informa\u00e7\u00e3o do n\u00famero de linhas retornadas. grep -Fir \"registro\" ~/imagens | wc -l Exibe apenas o n\u00famero da linha do arquivo onde registro est\u00e1 no in\u00edcio da linha. grep -il \"^registro\" ~/arquivo.txt Usando o par\u00e2metro -E . Exibe a linha do arquivo onde possui uma palavra que inicia com \"re\" e termina com \"tro\". grep -iE \"re(.*)tro\" ~/arquivo.txt # ou escapando os par\u00eanteses grep -i \"re\\(.*\\)tro\" ~/arquivo.txt [tar] Empacotamento e compress\u00e3o de arquivos \u00b6 O tar n\u00e3o compacta os arquivos, apenas une todos os arquivos em um s\u00f3. Para a compacta\u00e7\u00e3o, deve ser informado no par\u00e2metro qual tipo de compacta\u00e7\u00e3o ser\u00e1 aplicada no arquivo .tar . $ tar [-c] Criar um novo arquivo .tar. [-x] Extrair os arquivos. [-v] Modo verboso. Mostrar detalhes. [-f ARQUIVO] Nome do arquivo que ser\u00e1 criado ou extra\u00eddo. [-C] Diret\u00f3rio de destino, onde o arquivo extra\u00eddo ou gerado. [-a] Modo compacta\u00e7\u00e3o autom\u00e1tica, baseada na extens\u00e3o informada no nome do arquivo. [-z] Compacta\u00e7\u00e3o gzip (.tar.gz, .tgz). [-j] Compacta\u00e7\u00e3o bzip2 (.tar.bz, .tbz). Obs: Por padr\u00e3o tar \u00e9 recursivo, portanto n\u00e3o precisa do par\u00e2metro -r . Exemplos: Criar um arquivo .tar contendo todos arquivos do diret\u00f3rio home. tar -cvf arquivo.tar home/ Criar um arquivo .bz2 de todos arquivos do diret\u00f3rio atual. tar -cvjf arquivo.tar.bz * Extrair o arquivo para o diret\u00f3rio home. tar -cvjf arquivo.tar.bz -C /home","title":"Arquivos e diret\u00f3rios"},{"location":"linux/arquivos-e-diretorios/#arquivos-e-diretorios","text":"Arquivos e diret\u00f3rios [.desktop] Lan\u00e7adores Diret\u00f3rios onde os arquivos possuem visibilidade em todo ambiente $PATH Diret\u00f3rios e arquivos que concatenam o $PATH Organiza\u00e7\u00e3o dos diret\u00f3rios [ls] Listar os arquivos de um diret\u00f3rio [du] Ver espa\u00e7o ocupado pelos diret\u00f3rios [dd] C\u00f3pia bit a bit de uma arquivo [wc] Ver informa\u00e7\u00f5es sobre um arquivo [grep] Encontrar palavras em arquivos de texto [tar] Empacotamento e compress\u00e3o de arquivos [[ TOC ]]","title":"Arquivos e diret\u00f3rios"},{"location":"linux/arquivos-e-diretorios/#desktop-lancadores","text":"Lan\u00e7adores s\u00e3o atalhos que executam comandos. Geralmente usados para chamar algum programa. Para criar um lan\u00e7ador basta criar um arquivo com a extens\u00e3o \".desktop\" em \"/usr/share/applications\" para ser vis\u00edvel a todos usu\u00e1rios, ou em \"~/.local/share/applications\" para ser vis\u00edvel localmente. O conte\u00fado do lan\u00e7ador deve informar os dados da aplica\u00e7\u00e3o que ser\u00e1 executada, seguindo o seguinte esquema: [Desktop Entry] Type=Application # tipo. Version=1.0 # vers\u00e3o. Name=Meu aplicativo # nome. Comment=Meu aplicativo de exemplo # coment\u00e1rio do tooltip. Exec=\"/opt/meu app.sh\" # comando de execu\u00e7\u00e3o. Icon=/opt/meu app/fig.png # local do \u00edcone a ser usado. Terminal=false # se roda no terminal. Categories=Languages;Java; # categorias onde deve ser listada. Para verificar se o arquio .desktop est\u00e1 correto: desktop-file-validate ARQUIVO.desktop","title":"[.desktop] Lan\u00e7adores"},{"location":"linux/arquivos-e-diretorios/#diretorios-onde-os-arquivos-possuem-visibilidade-em-todo-ambiente","text":"~/.local/share/applications # ou /usr/local/bin/","title":"Diret\u00f3rios onde os arquivos possuem visibilidade em todo ambiente"},{"location":"linux/arquivos-e-diretorios/#path","text":"\u00c9 uma vari\u00e1vel do sistema Linux que indica trajet\u00f3ria dos bin\u00e1rios, que podem ser executados sem indicar o caminho completo de onde se encontram. Exibir as vari\u00e1veis de ambiente que j\u00e1 foram definidas. echo \" ${ PATH //:/ $'\\n' } \" Adicionar mais um caminho nas vari\u00e1veis de ambiente. export PATH = $PATH :/NOVO-CAMINHO Para remover um caminho \u00e9 necess\u00e1rio adicionar todos caminhos novamente, exceto o que ser\u00e1 removido. Para isso basta copiar o conteudo de $PATH, remover o caminho desejado e defin[i-lo novamente em $PATH. echo $PATH export PATH = /CAMINHO1:/CAMINHO2:/CAMINHO3","title":"$PATH"},{"location":"linux/arquivos-e-diretorios/#diretorios-e-arquivos-que-concatenam-o-path","text":"N\u00edvel de usu\u00e1rio: .bashrc , .bash_profile , .bash_login e .profile . N\u00edvel de sistema: /etc/environment , /etc/profile , /etc/profile.d/ e /etc/bash.bashrc .","title":"Diret\u00f3rios e arquivos que concatenam o $PATH"},{"location":"linux/arquivos-e-diretorios/#organizacao-dos-diretorios","text":"Directory Description / Primary hierarchy root and root directory of the entire file system hierarchy. /bin Essential command binaries that need to be available in single user mode; for all users, e.g., cat, ls, cp. /boot Boot loader files, e.g., kernels, initrd. /dev Essential device files, e.g., /dev/null. /etc Host-specific system-wide configuration files. There has been controversy over the meaning of the name itself. In early versions of the UNIX Implementation Document from Bell labs, /etc is referred to as the etcetera directory, as this directory historically held everything that did not belong elsewhere (however, the FHS restricts /etc to static configuration files and may not contain binaries).Since the publication of early documentation, the directory name has been re-explained in various ways. Recent interpretations include backronyms such as \"Editable Text Configuration\" or \"Extended Tool Chest\". /etc/opt Configuration files for add-on packages that are stored in /opt. /etc/sgml Configuration files, such as catalogs, for software that processes SGML. /etc/X11 Configuration files for the X Window System, version 11. /etc/xml Configuration files, such as catalogs, for software that processes XML. /home Users' home directories, containing saved files, personal settings, etc. /lib Libraries essential for the binaries in /bin and /sbin. /lib Alternate format essential libraries. Such directories are optional, but if they exist, they have some requirements. /mnt Temporarily mounted filesystems. /opt Optional application software packages.[6] /proc Virtual filesystem providing process and kernel information as files. In Linux, corresponds to a procfs mount. Generally automatically generated and populated by the system, on the fly. /root Home directory for the root user. /run Run-time variable data: Information about the running system since last boot, e.g., currently logged-in users and running daemons. Files under this directory must be either removed or truncated at the beginning of the boot process; but this is not necessary on systems that provide this directory as a temporary filesystem (tmpfs). /sbin Essential system binaries, e.g., fsck, init, route. /srv Site-specific data served by this system, such as data and scripts for web servers, data offered by FTP servers, and repositories for version control systems (appeared in FHS-2.3 in 2004). /sys Contains information about devices, drivers, and some kernel features. /tmp Temporary files (see also /var/tmp). Often not preserved between system reboots, and may be severely size restricted. /usr Secondary hierarchy for read-only user data; contains the majority of (multi-)user utilities and applications. /usr/bin Non-essential command binaries (not needed in single user mode); for all users. /usr/include Standard include files. /usr/lib Libraries for the binaries in /usr/bin and /usr/sbin. /usr/lib Alternate format libraries, e.g. /usr/lib32 for 32-bit libraries on a 64-bit machine (optional). /usr/local Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., bin, lib, share.[9] /usr/sbin Non-essential system binaries, e.g., daemons for various network-services. /usr/share Architecture-independent (shared) data. /usr/src Source code, e.g., the kernel source code with its header files. /usr/X11R6 X Window System, Version 11, Release 6 (up to FHS-2.3, optional). /var Variable files\u2014files whose content is expected to continually change during normal operation of the system\u2014such as logs, spool files, and temporary e-mail files. /var/cache Application cache data. Such data are locally generated as a result of time-consuming I/O or calculation. The application must be able to regenerate or restore the data. The cached files can be deleted without loss of data. /var/lib State information. Persistent data modified by programs as they run, e.g., databases, packaging system metadata, etc. /var/lock Lock files. Files keeping track of resources currently in use. /var/log Log files. Various logs. /var/mail Mailbox files. In some distributions, these files may be located in the deprecated /var/spool/mail. /var/opt Variable data from add-on packages that are stored in /opt. /var/run Run-time variable data. This directory contains system information data describing the system since it was booted. In FHS 3.0, /var/run is replaced by /run; a system should either continue to provide a /var/run directory, or provide a symbolic link from /var/run to /run, for backwards compatibility. /var/spool Spool for tasks waiting to be processed, e.g., print queues and outgoing mail queue. /var/spool/mail Deprecated location for users' mailboxes. /var/tmp Temporary files to be preserved between reboots.","title":"Organiza\u00e7\u00e3o dos diret\u00f3rios"},{"location":"linux/arquivos-e-diretorios/#ls-listar-os-arquivos-de-um-diretorio","text":"Listar os arquivos de um diret\u00f3rio. $ ls [-l] Mostra arquivos em lista. [-h] Mostra tamanho dos arquivos em unidade proporcional ao tamanho. [-a] Mostra os arquivos ocultos. Exemplos: Listar arquivos em forma de lista. ls -l","title":"[ls] Listar os arquivos de um diret\u00f3rio"},{"location":"linux/arquivos-e-diretorios/#du-ver-espaco-ocupado-pelos-diretorios","text":"Ver espa\u00e7o ocupado pelos diret\u00f3rios. $ du [-d] Profundidade da listagem recursiva. [-h] Mostra tamanho dos arquivos em unidade proporcional ao tamanho. [-c] Mostra o total de espa\u00e7o ocupado. Exemplos: Ver espa\u00e7o ocupado pelos diret\u00f3rios na caminho atual. du -h -d 1 CAMINHO Ver lista de arquivos em ordem decrescente de tamanho. du -h -d 1 CAMINHO | sort -h","title":"[du] Ver espa\u00e7o ocupado pelos diret\u00f3rios"},{"location":"linux/arquivos-e-diretorios/#dd-copia-bit-a-bit-de-uma-arquivo","text":"C\u00f3pia bit a bit de uma arquivo. $ dd [if] Arquivo de origem. [of] Local de destino. [bs] Tamanho de cada bloco a ser copiado. [count] A quantidade de blocos que ser\u00e3o copiados. Exemplos: Copiar aquivo .iso para uma parti\u00e7\u00e3o (pendrive). dd if = ORIGEM of = DESTINO dd if = ubuntu.iso of = /dev/sdc Criar arquivo com tamanho prefixado. Arquivo de 10 MB (10485760 bytes = 10*1024*1024)). O par\u00e2metro count=1 representa o n\u00famero de itera\u00e7\u00f5es a serem realizadas. No caso uma itera\u00e7\u00e3o com tamanho de bloco \u201810485760\u2019 = 10 MB. O par\u00e2metro if=/dev/zero representa o dispositivo de valores nulos. dd if = /dev/zero of = arquivo bs = 10485760 count = 1 Apagar dados definitivamente. Gravando zeros nos setores. Op\u00e7\u00e3o mais r\u00e1pida. dd if = /dev/zero of = /dev/sda bs = 1M Gravando n\u00fameros aleat\u00f3rios. Op\u00e7\u00e3o mais demorada, por\u00e9m mais segura contra equipamentos sofisticados para recuperar dados. dd if = /dev/urandom of = /dev/sda bs = 1M Recuperar dados de um disco defeituoso. Copiar para outra m\u00eddia, suprimindo erros encontrados. dd if = /dev/sda of = /dev/sdb bs = 4k conv = noerror,sync Copiar para uma arquivo .img dd if = /dev/sda of = /tmp/sda disk.img bs = 4k conv = noerror,sync","title":"[dd] C\u00f3pia bit a bit de uma arquivo"},{"location":"linux/arquivos-e-diretorios/#wc-ver-informacoes-sobre-um-arquivo","text":"Ver informa\u00e7\u00f5es sobre um arquivo. $ wc [-c] Tamanho em bytes. [-m] Quantidade de caracteres. [-l] N\u00famero de linha. [-w] Quantidade de palavras. Exemplos: Ver a quantidade de palavras de um arquivo. wc -w arquivo.txt","title":"[wc] Ver informa\u00e7\u00f5es sobre um arquivo"},{"location":"linux/arquivos-e-diretorios/#grep-encontrar-palavras-em-arquivos-de-texto","text":"Encontrar palavras em arquivos de texto. $ grep [-E] (antigo egrep) Interpreta o padr\u00e3o como uma express\u00e3o regular estendida (regexp). [-F] (antigo fgrep) Interpreta o padr\u00e3o como uma string fixa, sem express\u00e3o regular. Otimizado para busca de substrings. [-G] Interpreta o padr\u00e3o como um express\u00e3o regular b\u00e1sica (padr\u00e3o). [-i] N\u00e3o diferenciar mai\u00fasculas e min\u00fasculas. [-r] Busca recursiva sem seguir links simb\u00f3licos. [-R] Busca recursiva seguindo links simb\u00f3licos. [-e PADRAO] Procura pela express\u00e3o regular. [-n] Exibe o n\u00famero de linhas que cont\u00e9m o padr\u00e3o. [-c] Exibe apenas o n\u00famero das linhas que cont\u00e9m o padr\u00e3o. [-f ARQUIVO] L\u00ea o padr\u00e3o a partir do arquivo especificado. [-l] Exibe apenas os nomes dos arquivos que cont\u00e9m o padr\u00e3o. [-v] Exibe as linhas que n\u00e3o cont\u00e9m o padr\u00e3o. [-w] Procura apenas palavras inteiras. Exemplos: Exibir as linhas onde a palavra registro aparece nos arquivos durante a busca recursiva a partir do local corrente. grep -Fir \"registro\" # ou especificar raiz da busca grep -Fir \"registro\" /ect Busca recursiva a partir do local informado com a informa\u00e7\u00e3o do n\u00famero de linhas retornadas. grep -Fir \"registro\" ~/imagens | wc -l Exibe apenas o n\u00famero da linha do arquivo onde registro est\u00e1 no in\u00edcio da linha. grep -il \"^registro\" ~/arquivo.txt Usando o par\u00e2metro -E . Exibe a linha do arquivo onde possui uma palavra que inicia com \"re\" e termina com \"tro\". grep -iE \"re(.*)tro\" ~/arquivo.txt # ou escapando os par\u00eanteses grep -i \"re\\(.*\\)tro\" ~/arquivo.txt","title":"[grep] Encontrar palavras em arquivos de texto"},{"location":"linux/arquivos-e-diretorios/#tar-empacotamento-e-compressao-de-arquivos","text":"O tar n\u00e3o compacta os arquivos, apenas une todos os arquivos em um s\u00f3. Para a compacta\u00e7\u00e3o, deve ser informado no par\u00e2metro qual tipo de compacta\u00e7\u00e3o ser\u00e1 aplicada no arquivo .tar . $ tar [-c] Criar um novo arquivo .tar. [-x] Extrair os arquivos. [-v] Modo verboso. Mostrar detalhes. [-f ARQUIVO] Nome do arquivo que ser\u00e1 criado ou extra\u00eddo. [-C] Diret\u00f3rio de destino, onde o arquivo extra\u00eddo ou gerado. [-a] Modo compacta\u00e7\u00e3o autom\u00e1tica, baseada na extens\u00e3o informada no nome do arquivo. [-z] Compacta\u00e7\u00e3o gzip (.tar.gz, .tgz). [-j] Compacta\u00e7\u00e3o bzip2 (.tar.bz, .tbz). Obs: Por padr\u00e3o tar \u00e9 recursivo, portanto n\u00e3o precisa do par\u00e2metro -r . Exemplos: Criar um arquivo .tar contendo todos arquivos do diret\u00f3rio home. tar -cvf arquivo.tar home/ Criar um arquivo .bz2 de todos arquivos do diret\u00f3rio atual. tar -cvjf arquivo.tar.bz * Extrair o arquivo para o diret\u00f3rio home. tar -cvjf arquivo.tar.bz -C /home","title":"[tar] Empacotamento e compress\u00e3o de arquivos"},{"location":"linux/formatacao-e-backup/","text":"Formata\u00e7\u00e3o e backup \u00b6 Backup \u00b6 FreeFileSync Configura\u00e7\u00f5es Visual Studio Code Configura\u00e7\u00f5es Linux ~/.zshrc ~/.bashrc Instala\u00e7\u00e3o \u00b6 Visual Studio Code (Extens\u00f5es) Markdown Lint (davidanson.vscode-markdownlint) Markdown Preview (shd101wyy.markdown-preview-enhanced) Gnome Gnome Tweaks (Extens\u00f5es) WindowOverlay Icons (\u00cdcones sobre janelas modo overview) Sound Input & Output Device Chooser (Escolha de entrada e sa\u00edda de \u00e1udio) Lock Keys (Mostrar se Caps ou Num Lock est\u00e1 ativo) VeraCrypt FreeFileSync Visual Studio Code","title":"Formata\u00e7\u00e3o e backup"},{"location":"linux/formatacao-e-backup/#formatacao-e-backup","text":"","title":"Formata\u00e7\u00e3o e backup"},{"location":"linux/formatacao-e-backup/#backup","text":"FreeFileSync Configura\u00e7\u00f5es Visual Studio Code Configura\u00e7\u00f5es Linux ~/.zshrc ~/.bashrc","title":"Backup"},{"location":"linux/formatacao-e-backup/#instalacao","text":"Visual Studio Code (Extens\u00f5es) Markdown Lint (davidanson.vscode-markdownlint) Markdown Preview (shd101wyy.markdown-preview-enhanced) Gnome Gnome Tweaks (Extens\u00f5es) WindowOverlay Icons (\u00cdcones sobre janelas modo overview) Sound Input & Output Device Chooser (Escolha de entrada e sa\u00edda de \u00e1udio) Lock Keys (Mostrar se Caps ou Num Lock est\u00e1 ativo) VeraCrypt FreeFileSync Visual Studio Code","title":"Instala\u00e7\u00e3o"},{"location":"linux/hardware-e-dispositivos-io/","text":"Dispositivos de Hardware e Dispositivos de I/O \u00b6 Dispositivos de Hardware e Dispositivos de I/O Mem\u00f3ria Informa\u00e7\u00f5es da mem\u00f3ria Informa\u00e7\u00f5es da quantidade de mem\u00f3ria RAM e swap Processador Informa\u00e7\u00f5es da CPU Placa de wireless Teclado Mudan\u00e7a de Layout Bluetooth Caixas de Som Auto connect Problemas Monitor Adicionar resolu\u00e7\u00e3o Disco Listar parti\u00e7\u00f5es Badblocks Agendamento de atividade Outros Informa\u00e7\u00e3o dos barramentos PCI Mem\u00f3ria \u00b6 Informa\u00e7\u00f5es da mem\u00f3ria \u00b6 cat /proc/meminfo Informa\u00e7\u00f5es da quantidade de mem\u00f3ria RAM e swap \u00b6 Mostra a quantidade de mem\u00f3ria RAM e swap. $ free [ -h ] Grandeza informada baseada no tamanho. [ -m ] Grandeza informada em MB. [ -g ] Grandeza informada em GB. Processador \u00b6 Informa\u00e7\u00f5es da CPU \u00b6 cat /proc/cpuinfo Placa de wireless \u00b6 Instalacao da placa Archer T9E no Archer Linux sudo pacman -S b43-firmware sudo pacman -S broadcom-wl Teclado \u00b6 Mudan\u00e7a de Layout \u00b6 Configura\u00e7\u00e3o do teclado em layout americano. setxkbmap -model pc104 -layout us_intl Bluetooth \u00b6 Inicar servi\u00e7o e habilitart ap\u00f3s o boot. sudo systemctl start bluetooth sudo systemctl enable bluetooth Caixas de Som \u00b6 Instalar os pacotes: pulseaudio-module-bluetooth, bluez, bluez-tools Instalar o pacote \"pavucontrol\" para op\u00e7\u00f5es avan\u00e7adas de controle de \u00e1udio, como controlar qual sa\u00edda de \u00e1udio para cada aplica\u00e7\u00e3o. Auto connect \u00b6 Conectar automaticamente ao dispositivo bluetooth. $ bluetoothctl [ bluetooth ] $ scan on # espere at\u00e9 encontrar [ bluetooth ] $ scan off [ bluetooth ] $ connect 34 :88:5D:87:C0:A6 [ bluetooth ] $ trust 34 :88:5D:87:C0:A6 Problemas \u00b6 N\u00e3o aparece o dispositivo bluetooth de \u00e1udio nas op\u00e7\u00f5es de output quando usando o Gnome com GDM: When using GDM, another instance of PulseAudio is started, which \"captures\" your bluetooth device connection. This can be prevented by masking the pulseaudio socket for the GDM user: sudo mkdir -p /var/lib/gdm/.config/systemd/user sudo ln -s /dev/null /var/lib/gdm/.config/systemd/user/pulseaudio.socket Monitor \u00b6 Adicionar resolu\u00e7\u00e3o \u00b6 Ver dispositivos de tela xrandr Adicionar resolu\u00e7\u00e3o # criar novo modelo \"1366x768-0\" xrandr --newmode \"1366x768-0\" 75 .61 1366 1406 1438 1574 768 771 777 800 -hsync -vsync # vincular modelo ao monitor (monitor do notebook - sDP1) xrandr --addmode eDP1 \"1366x768-0\" # ativar a saida para o novo modo xrandr --output eDP1 --mode \"1366x768-0\" Para salvar o novo modo permanente, basta criar o arquivo ~/.xprofile e copiar os comandos anteriores de adicionar resolu\u00e7\u00e3o. #!/bin/bash xrandr --newmode \"1366x768-0\" 75 .61 1366 1406 1438 1574 768 771 777 800 -hsync -vsync xrandr --addmode eDP1 \"1366x768-0\" xrandr --output eDP1 --mode \"1366x768-0\" Disco \u00b6 Listar parti\u00e7\u00f5es \u00b6 Lista as parti\u00e7\u00f5es $ df [ -h ] Grandeza informada baseada no tamanho. Badblocks \u00b6 $ badblocks [ -b ] Especifica o tamanho de cada bloco. [ -s ] Mostra o avan\u00e7o do procedimento. [ -v ] Verbose mode. [ -c ] 10240 = Verifica 10 mil blocos de HD por vez. [] Verificando apenas modo leitura. sudo badblocks -sv -c 1024 /dev/sdaX Verificando em modo leitura e escrita sem perda de dados. sudo badblocks -nsv -c 10240 /dev/sdaX Verificando em modo leitura e escrita com perda de dados. sudo badblocks -wsv -c 10240 /dev/sdaX badblocks [ -svwnf ] [ -b block-size ] [ -c blocks_at_once ] [ -e max_bad_blocks ] [ -d read_delay_factor ] [ -i input_file ] [ -o output_file ] [ -p num_passes ] [ -t test_pattern ] device [ last-block ] [ first-block ] Agendamento de atividade \u00b6 Entrar em modo de dorm\u00eancia at\u00e9 o tempo determinado. Substitui o antigo comando apmsleep . $ rtcwake [ -m ] modo de desligamento. [ standby ] Modo suspender ( standby ) . Economia de energia pequena. [ mem ] Suspender para a mem\u00f3ria RAM. Todos os dispositivos s\u00e3o colocados em estado de baixo consumo, exceto a mem\u00f3ria RAM, pois deve ficar ligada para evitar que as informa\u00e7\u00f5es se percam. Economia de energia moderada. [ disk ] Suspender para o disco. Todo o conte\u00fado da mem\u00f3ria RAM \u00e9 salvo no disco, ap\u00f3s isso o computador \u00e9 desligado. Economia de energia alta. [ off ] Desligar o computador completamente. A BIOS precisa dar suporte. [ no ] N\u00e3o suspende o computador, apenas define o hor\u00e1rio para acordar. [ -v ] Modo verboso. Mostrar detalhes. [ -t ] Tempo absoluto. [ -s ] Tempo em segundos. [ -l ] Tempo informado \u00e9 local, usado pelo sistema. [ -u ] Tempo informado \u00e9 o UTC. Exemplos: Suspender para o disco e acordar depois de duas horas. rtcwake -m disk -s 7200 Desligar e acordar 19:00. sudo rtcwake -m off -t 19 :00 N\u00e3o suspender ou desligar imediatamente, somente definir para acordar 8:00. sudo rtcwake -m no -t 8 :00 Outros \u00b6 Informa\u00e7\u00e3o dos barramentos PCI \u00b6 Mostra informa\u00e7\u00e3o dos barramentos pci e todos os dispositivos conectados a ele. $ lspci [ -v ] Modo detalhado n\u00edvel 1 [ -vv ] Modo detalhado n\u00edvel 2 [ -vvv ] Modo detalhado n\u00edvel 3","title":"Dispositivos de Hardware e Dispositivos de I/O"},{"location":"linux/hardware-e-dispositivos-io/#dispositivos-de-hardware-e-dispositivos-de-io","text":"Dispositivos de Hardware e Dispositivos de I/O Mem\u00f3ria Informa\u00e7\u00f5es da mem\u00f3ria Informa\u00e7\u00f5es da quantidade de mem\u00f3ria RAM e swap Processador Informa\u00e7\u00f5es da CPU Placa de wireless Teclado Mudan\u00e7a de Layout Bluetooth Caixas de Som Auto connect Problemas Monitor Adicionar resolu\u00e7\u00e3o Disco Listar parti\u00e7\u00f5es Badblocks Agendamento de atividade Outros Informa\u00e7\u00e3o dos barramentos PCI","title":"Dispositivos de Hardware e Dispositivos de I/O"},{"location":"linux/hardware-e-dispositivos-io/#memoria","text":"","title":"Mem\u00f3ria"},{"location":"linux/hardware-e-dispositivos-io/#informacoes-da-memoria","text":"cat /proc/meminfo","title":"Informa\u00e7\u00f5es da mem\u00f3ria"},{"location":"linux/hardware-e-dispositivos-io/#informacoes-da-quantidade-de-memoria-ram-e-swap","text":"Mostra a quantidade de mem\u00f3ria RAM e swap. $ free [ -h ] Grandeza informada baseada no tamanho. [ -m ] Grandeza informada em MB. [ -g ] Grandeza informada em GB.","title":"Informa\u00e7\u00f5es da quantidade de mem\u00f3ria RAM e swap"},{"location":"linux/hardware-e-dispositivos-io/#processador","text":"","title":"Processador"},{"location":"linux/hardware-e-dispositivos-io/#informacoes-da-cpu","text":"cat /proc/cpuinfo","title":"Informa\u00e7\u00f5es da CPU"},{"location":"linux/hardware-e-dispositivos-io/#placa-de-wireless","text":"Instalacao da placa Archer T9E no Archer Linux sudo pacman -S b43-firmware sudo pacman -S broadcom-wl","title":"Placa de wireless"},{"location":"linux/hardware-e-dispositivos-io/#teclado","text":"","title":"Teclado"},{"location":"linux/hardware-e-dispositivos-io/#mudanca-de-layout","text":"Configura\u00e7\u00e3o do teclado em layout americano. setxkbmap -model pc104 -layout us_intl","title":"Mudan\u00e7a de Layout"},{"location":"linux/hardware-e-dispositivos-io/#bluetooth","text":"Inicar servi\u00e7o e habilitart ap\u00f3s o boot. sudo systemctl start bluetooth sudo systemctl enable bluetooth","title":"Bluetooth"},{"location":"linux/hardware-e-dispositivos-io/#caixas-de-som","text":"Instalar os pacotes: pulseaudio-module-bluetooth, bluez, bluez-tools Instalar o pacote \"pavucontrol\" para op\u00e7\u00f5es avan\u00e7adas de controle de \u00e1udio, como controlar qual sa\u00edda de \u00e1udio para cada aplica\u00e7\u00e3o.","title":"Caixas de Som"},{"location":"linux/hardware-e-dispositivos-io/#auto-connect","text":"Conectar automaticamente ao dispositivo bluetooth. $ bluetoothctl [ bluetooth ] $ scan on # espere at\u00e9 encontrar [ bluetooth ] $ scan off [ bluetooth ] $ connect 34 :88:5D:87:C0:A6 [ bluetooth ] $ trust 34 :88:5D:87:C0:A6","title":"Auto connect"},{"location":"linux/hardware-e-dispositivos-io/#problemas","text":"N\u00e3o aparece o dispositivo bluetooth de \u00e1udio nas op\u00e7\u00f5es de output quando usando o Gnome com GDM: When using GDM, another instance of PulseAudio is started, which \"captures\" your bluetooth device connection. This can be prevented by masking the pulseaudio socket for the GDM user: sudo mkdir -p /var/lib/gdm/.config/systemd/user sudo ln -s /dev/null /var/lib/gdm/.config/systemd/user/pulseaudio.socket","title":"Problemas"},{"location":"linux/hardware-e-dispositivos-io/#monitor","text":"","title":"Monitor"},{"location":"linux/hardware-e-dispositivos-io/#adicionar-resolucao","text":"Ver dispositivos de tela xrandr Adicionar resolu\u00e7\u00e3o # criar novo modelo \"1366x768-0\" xrandr --newmode \"1366x768-0\" 75 .61 1366 1406 1438 1574 768 771 777 800 -hsync -vsync # vincular modelo ao monitor (monitor do notebook - sDP1) xrandr --addmode eDP1 \"1366x768-0\" # ativar a saida para o novo modo xrandr --output eDP1 --mode \"1366x768-0\" Para salvar o novo modo permanente, basta criar o arquivo ~/.xprofile e copiar os comandos anteriores de adicionar resolu\u00e7\u00e3o. #!/bin/bash xrandr --newmode \"1366x768-0\" 75 .61 1366 1406 1438 1574 768 771 777 800 -hsync -vsync xrandr --addmode eDP1 \"1366x768-0\" xrandr --output eDP1 --mode \"1366x768-0\"","title":"Adicionar resolu\u00e7\u00e3o"},{"location":"linux/hardware-e-dispositivos-io/#disco","text":"","title":"Disco"},{"location":"linux/hardware-e-dispositivos-io/#listar-particoes","text":"Lista as parti\u00e7\u00f5es $ df [ -h ] Grandeza informada baseada no tamanho.","title":"Listar parti\u00e7\u00f5es"},{"location":"linux/hardware-e-dispositivos-io/#badblocks","text":"$ badblocks [ -b ] Especifica o tamanho de cada bloco. [ -s ] Mostra o avan\u00e7o do procedimento. [ -v ] Verbose mode. [ -c ] 10240 = Verifica 10 mil blocos de HD por vez. [] Verificando apenas modo leitura. sudo badblocks -sv -c 1024 /dev/sdaX Verificando em modo leitura e escrita sem perda de dados. sudo badblocks -nsv -c 10240 /dev/sdaX Verificando em modo leitura e escrita com perda de dados. sudo badblocks -wsv -c 10240 /dev/sdaX badblocks [ -svwnf ] [ -b block-size ] [ -c blocks_at_once ] [ -e max_bad_blocks ] [ -d read_delay_factor ] [ -i input_file ] [ -o output_file ] [ -p num_passes ] [ -t test_pattern ] device [ last-block ] [ first-block ]","title":"Badblocks"},{"location":"linux/hardware-e-dispositivos-io/#agendamento-de-atividade","text":"Entrar em modo de dorm\u00eancia at\u00e9 o tempo determinado. Substitui o antigo comando apmsleep . $ rtcwake [ -m ] modo de desligamento. [ standby ] Modo suspender ( standby ) . Economia de energia pequena. [ mem ] Suspender para a mem\u00f3ria RAM. Todos os dispositivos s\u00e3o colocados em estado de baixo consumo, exceto a mem\u00f3ria RAM, pois deve ficar ligada para evitar que as informa\u00e7\u00f5es se percam. Economia de energia moderada. [ disk ] Suspender para o disco. Todo o conte\u00fado da mem\u00f3ria RAM \u00e9 salvo no disco, ap\u00f3s isso o computador \u00e9 desligado. Economia de energia alta. [ off ] Desligar o computador completamente. A BIOS precisa dar suporte. [ no ] N\u00e3o suspende o computador, apenas define o hor\u00e1rio para acordar. [ -v ] Modo verboso. Mostrar detalhes. [ -t ] Tempo absoluto. [ -s ] Tempo em segundos. [ -l ] Tempo informado \u00e9 local, usado pelo sistema. [ -u ] Tempo informado \u00e9 o UTC. Exemplos: Suspender para o disco e acordar depois de duas horas. rtcwake -m disk -s 7200 Desligar e acordar 19:00. sudo rtcwake -m off -t 19 :00 N\u00e3o suspender ou desligar imediatamente, somente definir para acordar 8:00. sudo rtcwake -m no -t 8 :00","title":"Agendamento de atividade"},{"location":"linux/hardware-e-dispositivos-io/#outros","text":"","title":"Outros"},{"location":"linux/hardware-e-dispositivos-io/#informacao-dos-barramentos-pci","text":"Mostra informa\u00e7\u00e3o dos barramentos pci e todos os dispositivos conectados a ele. $ lspci [ -v ] Modo detalhado n\u00edvel 1 [ -vv ] Modo detalhado n\u00edvel 2 [ -vvv ] Modo detalhado n\u00edvel 3","title":"Informa\u00e7\u00e3o dos barramentos PCI"},{"location":"linux/servicos-e-processos/","text":"Servi\u00e7os e processos \u00b6 Servi\u00e7os e processos [service, systemctl] Servi\u00e7os [[ TOC ]] [service, systemctl] Servi\u00e7os \u00b6 O comando service \u00e9 um comando de alto n\u00edvel usado para iniciar e para servi\u00e7os em diferentes distribui\u00e7\u00f5es linux e unix. Ele redireciona para um comando de baixo n\u00edvel. Dependendo da distribui\u00e7\u00e3o linux, pode redirecionar para systemctl ou /etc/init.d . O comando service \u00e9 adequdo para o gerenciamento b\u00e1sico de servi\u00e7os, enquanto o comando systemctl possui mais op\u00e7\u00f5es de controle. Exemplos: # Verificar se houve falha ao iniciar systemctl is-failed name.service # Ou mascarando servi\u00e7\u00f5es systemctl mask name.service A op\u00e7\u00e3o mask e uma vers\u00e3o mais forte de disable . Usando disable todos os symlinks do arquivo de unidade especificado s\u00e3o removidos. Usando mask as unidades ser\u00e3o linkadas para /dev/null . Isso ser\u00e1 exibido se executar por exemplo systemctl status halt.service . A vantagem da m\u00e1scara \u00e9 impedir qualquer tipo de ativa\u00e7\u00e3o, mesmo manual.","title":"Servi\u00e7os e processos"},{"location":"linux/servicos-e-processos/#servicos-e-processos","text":"Servi\u00e7os e processos [service, systemctl] Servi\u00e7os [[ TOC ]]","title":"Servi\u00e7os e processos"},{"location":"linux/servicos-e-processos/#service-systemctl-servicos","text":"O comando service \u00e9 um comando de alto n\u00edvel usado para iniciar e para servi\u00e7os em diferentes distribui\u00e7\u00f5es linux e unix. Ele redireciona para um comando de baixo n\u00edvel. Dependendo da distribui\u00e7\u00e3o linux, pode redirecionar para systemctl ou /etc/init.d . O comando service \u00e9 adequdo para o gerenciamento b\u00e1sico de servi\u00e7os, enquanto o comando systemctl possui mais op\u00e7\u00f5es de controle. Exemplos: # Verificar se houve falha ao iniciar systemctl is-failed name.service # Ou mascarando servi\u00e7\u00f5es systemctl mask name.service A op\u00e7\u00e3o mask e uma vers\u00e3o mais forte de disable . Usando disable todos os symlinks do arquivo de unidade especificado s\u00e3o removidos. Usando mask as unidades ser\u00e3o linkadas para /dev/null . Isso ser\u00e1 exibido se executar por exemplo systemctl status halt.service . A vantagem da m\u00e1scara \u00e9 impedir qualquer tipo de ativa\u00e7\u00e3o, mesmo manual.","title":"[service, systemctl] Servi\u00e7os"},{"location":"linux/usuario/","text":"Usu\u00e1rio e vari\u00e1veis de ambiente \u00b6 Usu\u00e1rio e vari\u00e1veis de ambiente Lista do hist\u00f3rico de login de usu\u00e1rios $PATH Diret\u00f3rios e arquivos que formam o $PATH Lista do hist\u00f3rico de login de usu\u00e1rios \u00b6 Lista do hist\u00f3rico de login de usu\u00e1rios. Informa o tempo em que foi feito o login, assim como quando o m\u00e1quina foi reiniciada ou desligada. $ last [ -x ] Tipo de registro. [ reboot ] Registros de quando a m\u00e1quina foi ligada. [ shutdown ] Registros de quando a m\u00e1quina foi desligada. [ -R ] Ocultar informa\u00e7\u00f5es do hostname. [ -n ] N\u00famero de registros a serem mostrados. Exemplos: Obter informa\u00e7\u00f5es de login de todos usu\u00e1rios. last Obter informa\u00e7\u00f5es de login de um usu\u00e1rio espec\u00edfico. last USUARIO Obter informa\u00e7\u00f5es dos 10 \u00faltimos registros de quando a m\u00e1quina foi ligada e desligada. last -x reboot shutdown -n 10 $PATH \u00b6 \u00c9 uma vari\u00e1vel do sistema Linux que indica trajet\u00f3ria dos bin\u00e1rios, que podem ser executados sem indicar o caminho completo de onde se encontram. Exibir as vari\u00e1veis de ambiente que j\u00e1 foram definidas. echo \" ${ PATH //:/ $'\\n' } \" Adicionar mais um caminho nas vari\u00e1veis de ambiente. export PATH = $PATH :/NOVO-CAMINHO Para remover um caminho \u00e9 necess\u00e1rio adicionar todos caminhos novamente, exceto o que ser\u00e1 removido. Para isso basta copiar o conteudo de $PATH, remover o caminho desejado e defin[i-lo novamente em $PATH. echo $PATH export PATH = /CAMINHO1:/CAMINHO2:/CAMINHO3 Diret\u00f3rios e arquivos que formam o $PATH \u00b6 N\u00edvel de usu\u00e1rio: .bashrc , .bash_profile , .bash_login e .profile . N\u00edvel de sistema: /etc/environment , /etc/profile , /etc/profile.d/ e /etc/bash.bashrc .","title":"Usu\u00e1rio e vari\u00e1veis de ambiente"},{"location":"linux/usuario/#usuario-e-variaveis-de-ambiente","text":"Usu\u00e1rio e vari\u00e1veis de ambiente Lista do hist\u00f3rico de login de usu\u00e1rios $PATH Diret\u00f3rios e arquivos que formam o $PATH","title":"Usu\u00e1rio e vari\u00e1veis de ambiente"},{"location":"linux/usuario/#lista-do-historico-de-login-de-usuarios","text":"Lista do hist\u00f3rico de login de usu\u00e1rios. Informa o tempo em que foi feito o login, assim como quando o m\u00e1quina foi reiniciada ou desligada. $ last [ -x ] Tipo de registro. [ reboot ] Registros de quando a m\u00e1quina foi ligada. [ shutdown ] Registros de quando a m\u00e1quina foi desligada. [ -R ] Ocultar informa\u00e7\u00f5es do hostname. [ -n ] N\u00famero de registros a serem mostrados. Exemplos: Obter informa\u00e7\u00f5es de login de todos usu\u00e1rios. last Obter informa\u00e7\u00f5es de login de um usu\u00e1rio espec\u00edfico. last USUARIO Obter informa\u00e7\u00f5es dos 10 \u00faltimos registros de quando a m\u00e1quina foi ligada e desligada. last -x reboot shutdown -n 10","title":"Lista do hist\u00f3rico de login de usu\u00e1rios"},{"location":"linux/usuario/#path","text":"\u00c9 uma vari\u00e1vel do sistema Linux que indica trajet\u00f3ria dos bin\u00e1rios, que podem ser executados sem indicar o caminho completo de onde se encontram. Exibir as vari\u00e1veis de ambiente que j\u00e1 foram definidas. echo \" ${ PATH //:/ $'\\n' } \" Adicionar mais um caminho nas vari\u00e1veis de ambiente. export PATH = $PATH :/NOVO-CAMINHO Para remover um caminho \u00e9 necess\u00e1rio adicionar todos caminhos novamente, exceto o que ser\u00e1 removido. Para isso basta copiar o conteudo de $PATH, remover o caminho desejado e defin[i-lo novamente em $PATH. echo $PATH export PATH = /CAMINHO1:/CAMINHO2:/CAMINHO3","title":"$PATH"},{"location":"linux/usuario/#diretorios-e-arquivos-que-formam-o-path","text":"N\u00edvel de usu\u00e1rio: .bashrc , .bash_profile , .bash_login e .profile . N\u00edvel de sistema: /etc/environment , /etc/profile , /etc/profile.d/ e /etc/bash.bashrc .","title":"Diret\u00f3rios e arquivos que formam o $PATH"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/","text":"Arch Linux \u00b6 Arch Linux Instala\u00e7\u00e3o da Distribui\u00e7\u00e3o Configuracao do instalador Teclado Idioma da instala\u00e7\u00e3o Conectar na rede wireless Particionamento Instalar o sistema base Gerar o arquivo fstab Configuracao do sistema instalado Acesso ao sistema instalado Idioma do sistema Teclado Fuso hor\u00e1rio Sincroniza\u00e7\u00e3o do rel\u00f3gio Rede cabeada Rede wireless Configurar os reposit\u00f3rios Criar senha de root Criar usu\u00e1rio e definir senha Instalar o sudo Editor padr\u00e3o para o terminal Instala\u00e7\u00e3o do grub Sair do arch-chroot Desmontar as parti\u00e7\u00f5es Reiniciar Nome do host Conex\u00e3o com a internet Instalar xorg Instalar driver de video da intel Instalar audio Dual boot Gnome Configura\u00e7\u00e3o do Reposit\u00f3rio Configura\u00e7\u00e3o dos mirrors Backup da lista de mirrors Gerar a lista de mirrors Descomentar a lista de mirrors Atualizar a lista de pacotes Gerar os 6 mirrors com melhor conex\u00e3o Restaura\u00e7\u00e3o do Grub Yaourt Comandos Instala\u00e7\u00e3o da Distribui\u00e7\u00e3o \u00b6 Configuracao do instalador \u00b6 Teclado \u00b6 Layout abnt2 loadkeys br-abnt2 Idioma da instala\u00e7\u00e3o \u00b6 nano /etc/locale.gen Descomentar as linhas: en_US.UTF-8 UTF-8 pt_BR.UTF-8 UTF-8 Executar os comandos: locale-gen export LANG = pt_BR.UTF-8 Conectar na rede wireless \u00b6 $ wifi-menu Verificar conex\u00e3o com a internet $ ping -c 3 www.google.com Particionamento \u00b6 Ver as parti\u00e7\u00f5es fdisk -l Criar os particionamentos \u00c9 preciso criar a parti\u00e7\u00e3o UEFI se ela n\u00e3o existe (>200MB) cfdisk /dev/sda Formatar as parti\u00e7\u00f5es mkfs.ext4 /dev/sdaX Formatar a parti\u00e7\u00e3o swap e ativ\u00e1-lo mkswap /dev/sdaX swapon /dev/sdaX Verificar se o swap foi habilitado free -m Ver o layout do particionamento lsblk /dev/sda Montar as parti\u00e7\u00f5es mount /dev/sdaX /mnt Opcional: Criar a pasta home em uma parti\u00e7\u00e3o diferente mkdir /mnt/home mount /dev/sda4 /mnt/home Criar a pasta boot para o UEFI e montar. Sendo sdaX a parti\u00e7\u00e3o do EFI. mkdir -p /mnt/boot/efi mount /dev/sdaX /mnt/boot/efi Instalar o sistema base \u00b6 pacstrap /mnt base base-devel Gerar o arquivo fstab \u00b6 O arquivo fstab armazenar as configura\u00e7\u00f5es das parti\u00e7\u00f5es genfstab -U -p /mnt >> /mnt/etc/fstab Ver o que est\u00e1 escrito nesse arquivo cat /mnt/etc/fstab Configuracao do sistema instalado \u00b6 Acesso ao sistema instalado \u00b6 arch-chroot /mnt Idioma do sistema \u00b6 nano /etc/locale.gen descomentar essas linhas: en_US.UTF-8 UTF-8 pt_BR.UTF-8 UTF-8 executar esse comando: locale-gen Armazenar no arquivo de configura\u00e7\u00e3o echo LANG = pt_BR.UTF-8 > /etc/locale.conf export LANG = pt_BR.UTF-8 Teclado \u00b6 nano /etc/vconsole.conf Adicionar as linhas KEYMAP = br-abnt2 FONT = Lat2-Terminus16 FONT_MAP = Fuso hor\u00e1rio \u00b6 ls /usr/share/zoneinfo/America ln -s /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime Sincroniza\u00e7\u00e3o do rel\u00f3gio \u00b6 hwclock --systohc --utc Rede cabeada \u00b6 systemctl enable dhcpcd@eth0.service Rede wireless \u00b6 pacman -S wireless_tools wpa_supplicant wpa_actiond dialog Configurar os reposit\u00f3rios \u00b6 nano /etc/pacman.conf descomentar multilib Sincronizar os reposit\u00f3rios pacman -Sy Criar senha de root \u00b6 passwd Criar usu\u00e1rio e definir senha \u00b6 useradd -m -g users -G wheel,storage,power -s /bin/bash <USUARIO> passwd <USUARIO> Instalar o sudo \u00b6 pacman -S sudo Editar as propriedades para os usuarios do grupo wheel terem permissoes de root. nano /etc/sudoers Descomentar a linha que mostra \"%wheel ALL=(ALL) ALL\" Editor padr\u00e3o para o terminal \u00b6 EDITOR = nano visudo Instala\u00e7\u00e3o do grub \u00b6 Baixar os pacotes pacman -S grub pacman -S efibootmgr Instalar o grub grub-install /dev/sda Gerar o RAM Disk inicial mkinitcpio -p linux Criar o arquivo de configura\u00e7\u00e3o do grub grub-mkconfig -o /boot/grub/grub.cfg Idioma das mensagens cp /usr/share/locale/en \\@ quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo Sair do arch-chroot \u00b6 exit Desmontar as parti\u00e7\u00f5es \u00b6 umount -a Reiniciar \u00b6 reboot Nome do host \u00b6 sudo hostnamectl set-hostname <HOSTNAME> Conex\u00e3o com a internet \u00b6 dhcpcd ping -c 3 www.google.com Ativar o gerenciador de rede automaticamente systemctl start NetworkManager.service systemctl enable NetworkManager.service Instalar xorg \u00b6 sudo pacman -S xorg xorg-server Instalar driver de video da intel \u00b6 pacman -S xf86-video-intel Instalar audio \u00b6 sudo pacman -S pulseaudio pulseaudio-alsa Dual boot \u00b6 pacman -Syu os-prober grub-mkconfig -o /boot/grub/grub.cfg Gnome \u00b6 sudo pacman -S gnome Habilitar o GDM sudo systemctl start gdm.service sudo systemctl enable gdm.service Configura\u00e7\u00e3o do Reposit\u00f3rio \u00b6 Configura\u00e7\u00e3o dos mirrors \u00b6 Backup da lista de mirrors \u00b6 cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup Gerar a lista de mirrors \u00b6 Gerador de mirrors Descomentar a lista de mirrors \u00b6 sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist Atualizar a lista de pacotes \u00b6 pacman -Syyu Gerar os 6 mirrors com melhor conex\u00e3o \u00b6 rankmirrors -n 6 /etc/pacman.d/mirrorlist Restaura\u00e7\u00e3o do Grub \u00b6 mount /dev/sda7 /mnt # parti\u00e7\u00e3o linux mkdir -p /mnt/boot/efi mount /dev/sda2 /mnt/boot/efi # parti\u00e7\u00e3o efi arch-chroot /mnt os-prober grub-mkconfig -o /boot/grub/grub.cfg grub-install /dev/sda Caso o comando \"os-prober\" n\u00e3o retorne o local do windows, o grub contar\u00e1 apenas com o linux. Neste caso entre no sistema linux e execute os comandos abaixo novamente: os-prober grub-mkconfig -o /boot/grub/grub.cfg grub-install /dev/sda Yaourt \u00b6 O Yaourt (Yet AnOther User Repository Tool) \u00e9 um gerenciador de pacotes desenvolvido para completar o conhecido pacman. Foi desenvolvido por Julien Mischkowitz e Tuxce; usu\u00e1rios da Comunidade Arch Linux Franc\u00eas e tem como o diferencial conseguir pesquisar, atualizar e instalar pacotes do AUR. Comandos \u00b6 Instalar ou atualizar um pacote yaourt -S pacote --noconfirm O par\u00e2metro --noconfirm desabilita as perguntas durante de instala\u00e7\u00e3o. Instale um pacote local ou a partir da web yaourt -U caminho_do_pacote --noconfirm Encontre um pacote yaourt pacote Informa\u00e7\u00e3o sobre um pacote instalado yaourt -Qi pacote Obter informa\u00e7\u00f5es sobre um pacote nos reposit\u00f3rios yaourt pacote -Si Remover um pacote yaourt -R pacote Remover um pacote e suas depend\u00eancias que n\u00e3o s\u00e3o necess\u00e1rios a outro pacote instalado yaourt -Rs pacote Remover um pacote e suas depend\u00eancias e todos os pacotes que dependem dele ATEN\u00c7\u00c3O : Esta opera\u00e7\u00e3o \u00e9 recursiva, e deve ser usado com muito cuidado, pois poderia eliminar um pacote principal e corromper o sistema. yaourt -Rsc pacote Remover um pacote que \u00e9 exigido por outro, sem retirar suas depend\u00eancias yaourt -Rdd pacote Atualizar os pacotes de banco de dados yaourt -Syy Limpar o cache de pacotes yaourt -Scc Atualizar o sistema yaourt -Syu A atualiza\u00e7\u00e3o do sistema, incluindo pacotes do AUR instalados yaourt -Syua","title":"Arch Linux"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#arch-linux","text":"Arch Linux Instala\u00e7\u00e3o da Distribui\u00e7\u00e3o Configuracao do instalador Teclado Idioma da instala\u00e7\u00e3o Conectar na rede wireless Particionamento Instalar o sistema base Gerar o arquivo fstab Configuracao do sistema instalado Acesso ao sistema instalado Idioma do sistema Teclado Fuso hor\u00e1rio Sincroniza\u00e7\u00e3o do rel\u00f3gio Rede cabeada Rede wireless Configurar os reposit\u00f3rios Criar senha de root Criar usu\u00e1rio e definir senha Instalar o sudo Editor padr\u00e3o para o terminal Instala\u00e7\u00e3o do grub Sair do arch-chroot Desmontar as parti\u00e7\u00f5es Reiniciar Nome do host Conex\u00e3o com a internet Instalar xorg Instalar driver de video da intel Instalar audio Dual boot Gnome Configura\u00e7\u00e3o do Reposit\u00f3rio Configura\u00e7\u00e3o dos mirrors Backup da lista de mirrors Gerar a lista de mirrors Descomentar a lista de mirrors Atualizar a lista de pacotes Gerar os 6 mirrors com melhor conex\u00e3o Restaura\u00e7\u00e3o do Grub Yaourt Comandos","title":"Arch Linux"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#instalacao-da-distribuicao","text":"","title":"Instala\u00e7\u00e3o da Distribui\u00e7\u00e3o"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#configuracao-do-instalador","text":"","title":"Configuracao do instalador"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#teclado","text":"Layout abnt2 loadkeys br-abnt2","title":"Teclado"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#idioma-da-instalacao","text":"nano /etc/locale.gen Descomentar as linhas: en_US.UTF-8 UTF-8 pt_BR.UTF-8 UTF-8 Executar os comandos: locale-gen export LANG = pt_BR.UTF-8","title":"Idioma da instala\u00e7\u00e3o"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#conectar-na-rede-wireless","text":"$ wifi-menu Verificar conex\u00e3o com a internet $ ping -c 3 www.google.com","title":"Conectar na rede wireless"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#particionamento","text":"Ver as parti\u00e7\u00f5es fdisk -l Criar os particionamentos \u00c9 preciso criar a parti\u00e7\u00e3o UEFI se ela n\u00e3o existe (>200MB) cfdisk /dev/sda Formatar as parti\u00e7\u00f5es mkfs.ext4 /dev/sdaX Formatar a parti\u00e7\u00e3o swap e ativ\u00e1-lo mkswap /dev/sdaX swapon /dev/sdaX Verificar se o swap foi habilitado free -m Ver o layout do particionamento lsblk /dev/sda Montar as parti\u00e7\u00f5es mount /dev/sdaX /mnt Opcional: Criar a pasta home em uma parti\u00e7\u00e3o diferente mkdir /mnt/home mount /dev/sda4 /mnt/home Criar a pasta boot para o UEFI e montar. Sendo sdaX a parti\u00e7\u00e3o do EFI. mkdir -p /mnt/boot/efi mount /dev/sdaX /mnt/boot/efi","title":"Particionamento"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#instalar-o-sistema-base","text":"pacstrap /mnt base base-devel","title":"Instalar o sistema base"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#gerar-o-arquivo-fstab","text":"O arquivo fstab armazenar as configura\u00e7\u00f5es das parti\u00e7\u00f5es genfstab -U -p /mnt >> /mnt/etc/fstab Ver o que est\u00e1 escrito nesse arquivo cat /mnt/etc/fstab","title":"Gerar o arquivo fstab"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#configuracao-do-sistema-instalado","text":"","title":"Configuracao do sistema instalado"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#acesso-ao-sistema-instalado","text":"arch-chroot /mnt","title":"Acesso ao sistema instalado"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#idioma-do-sistema","text":"nano /etc/locale.gen descomentar essas linhas: en_US.UTF-8 UTF-8 pt_BR.UTF-8 UTF-8 executar esse comando: locale-gen Armazenar no arquivo de configura\u00e7\u00e3o echo LANG = pt_BR.UTF-8 > /etc/locale.conf export LANG = pt_BR.UTF-8","title":"Idioma do sistema"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#teclado_1","text":"nano /etc/vconsole.conf Adicionar as linhas KEYMAP = br-abnt2 FONT = Lat2-Terminus16 FONT_MAP =","title":"Teclado"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#fuso-horario","text":"ls /usr/share/zoneinfo/America ln -s /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime","title":"Fuso hor\u00e1rio"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#sincronizacao-do-relogio","text":"hwclock --systohc --utc","title":"Sincroniza\u00e7\u00e3o do rel\u00f3gio"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#rede-cabeada","text":"systemctl enable dhcpcd@eth0.service","title":"Rede cabeada"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#rede-wireless","text":"pacman -S wireless_tools wpa_supplicant wpa_actiond dialog","title":"Rede wireless"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#configurar-os-repositorios","text":"nano /etc/pacman.conf descomentar multilib Sincronizar os reposit\u00f3rios pacman -Sy","title":"Configurar os reposit\u00f3rios"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#criar-senha-de-root","text":"passwd","title":"Criar senha de root"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#criar-usuario-e-definir-senha","text":"useradd -m -g users -G wheel,storage,power -s /bin/bash <USUARIO> passwd <USUARIO>","title":"Criar usu\u00e1rio e definir senha"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#instalar-o-sudo","text":"pacman -S sudo Editar as propriedades para os usuarios do grupo wheel terem permissoes de root. nano /etc/sudoers Descomentar a linha que mostra \"%wheel ALL=(ALL) ALL\"","title":"Instalar o sudo"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#editor-padrao-para-o-terminal","text":"EDITOR = nano visudo","title":"Editor padr\u00e3o para o terminal"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#instalacao-do-grub","text":"Baixar os pacotes pacman -S grub pacman -S efibootmgr Instalar o grub grub-install /dev/sda Gerar o RAM Disk inicial mkinitcpio -p linux Criar o arquivo de configura\u00e7\u00e3o do grub grub-mkconfig -o /boot/grub/grub.cfg Idioma das mensagens cp /usr/share/locale/en \\@ quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo","title":"Instala\u00e7\u00e3o do grub"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#sair-do-arch-chroot","text":"exit","title":"Sair do arch-chroot"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#desmontar-as-particoes","text":"umount -a","title":"Desmontar as parti\u00e7\u00f5es"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#reiniciar","text":"reboot","title":"Reiniciar"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#nome-do-host","text":"sudo hostnamectl set-hostname <HOSTNAME>","title":"Nome do host"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#conexao-com-a-internet","text":"dhcpcd ping -c 3 www.google.com Ativar o gerenciador de rede automaticamente systemctl start NetworkManager.service systemctl enable NetworkManager.service","title":"Conex\u00e3o com a internet"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#instalar-xorg","text":"sudo pacman -S xorg xorg-server","title":"Instalar xorg"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#instalar-driver-de-video-da-intel","text":"pacman -S xf86-video-intel","title":"Instalar driver de video da intel"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#instalar-audio","text":"sudo pacman -S pulseaudio pulseaudio-alsa","title":"Instalar audio"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#dual-boot","text":"pacman -Syu os-prober grub-mkconfig -o /boot/grub/grub.cfg","title":"Dual boot"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#gnome","text":"sudo pacman -S gnome Habilitar o GDM sudo systemctl start gdm.service sudo systemctl enable gdm.service","title":"Gnome"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#configuracao-do-repositorio","text":"","title":"Configura\u00e7\u00e3o do Reposit\u00f3rio"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#configuracao-dos-mirrors","text":"","title":"Configura\u00e7\u00e3o dos mirrors"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#backup-da-lista-de-mirrors","text":"cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup","title":"Backup da lista de mirrors"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#gerar-a-lista-de-mirrors","text":"Gerador de mirrors","title":"Gerar a lista de mirrors"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#descomentar-a-lista-de-mirrors","text":"sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist","title":"Descomentar a lista de mirrors"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#atualizar-a-lista-de-pacotes","text":"pacman -Syyu","title":"Atualizar a lista de pacotes"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#gerar-os-6-mirrors-com-melhor-conexao","text":"rankmirrors -n 6 /etc/pacman.d/mirrorlist","title":"Gerar os 6 mirrors com melhor conex\u00e3o"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#restauracao-do-grub","text":"mount /dev/sda7 /mnt # parti\u00e7\u00e3o linux mkdir -p /mnt/boot/efi mount /dev/sda2 /mnt/boot/efi # parti\u00e7\u00e3o efi arch-chroot /mnt os-prober grub-mkconfig -o /boot/grub/grub.cfg grub-install /dev/sda Caso o comando \"os-prober\" n\u00e3o retorne o local do windows, o grub contar\u00e1 apenas com o linux. Neste caso entre no sistema linux e execute os comandos abaixo novamente: os-prober grub-mkconfig -o /boot/grub/grub.cfg grub-install /dev/sda","title":"Restaura\u00e7\u00e3o do Grub"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#yaourt","text":"O Yaourt (Yet AnOther User Repository Tool) \u00e9 um gerenciador de pacotes desenvolvido para completar o conhecido pacman. Foi desenvolvido por Julien Mischkowitz e Tuxce; usu\u00e1rios da Comunidade Arch Linux Franc\u00eas e tem como o diferencial conseguir pesquisar, atualizar e instalar pacotes do AUR.","title":"Yaourt"},{"location":"linux/distribuicoes-e-ambientes-graficos/arch-linux/#comandos","text":"Instalar ou atualizar um pacote yaourt -S pacote --noconfirm O par\u00e2metro --noconfirm desabilita as perguntas durante de instala\u00e7\u00e3o. Instale um pacote local ou a partir da web yaourt -U caminho_do_pacote --noconfirm Encontre um pacote yaourt pacote Informa\u00e7\u00e3o sobre um pacote instalado yaourt -Qi pacote Obter informa\u00e7\u00f5es sobre um pacote nos reposit\u00f3rios yaourt pacote -Si Remover um pacote yaourt -R pacote Remover um pacote e suas depend\u00eancias que n\u00e3o s\u00e3o necess\u00e1rios a outro pacote instalado yaourt -Rs pacote Remover um pacote e suas depend\u00eancias e todos os pacotes que dependem dele ATEN\u00c7\u00c3O : Esta opera\u00e7\u00e3o \u00e9 recursiva, e deve ser usado com muito cuidado, pois poderia eliminar um pacote principal e corromper o sistema. yaourt -Rsc pacote Remover um pacote que \u00e9 exigido por outro, sem retirar suas depend\u00eancias yaourt -Rdd pacote Atualizar os pacotes de banco de dados yaourt -Syy Limpar o cache de pacotes yaourt -Scc Atualizar o sistema yaourt -Syu A atualiza\u00e7\u00e3o do sistema, incluindo pacotes do AUR instalados yaourt -Syua","title":"Comandos"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/","text":"Gnome \u00b6 Gnome Configura\u00e7\u00f5es Montar parti\u00e7\u00e3o NTFS automaticamente Habilitar lixeira em parti\u00e7\u00e3o NTFS File manager Bookmark Pastas padr\u00e3o Hot Corner GDM Definir tela de login no monitor padr\u00e3o Problemas Open containing folder Exibindo dois Docks Configura\u00e7\u00f5es \u00b6 Montar parti\u00e7\u00e3o NTFS automaticamente \u00b6 Usar o gnome-disk-utility e em \"Edit Mount Options\" desabilitar \"User Session Defaults\" e escolher \"Mount at system startup\" \u00c9 necess\u00e1rio instalar o pacote ntfs-3g para ter permissao de escrita. sudo pacman -S ntfs-3g Habilitar lixeira em parti\u00e7\u00e3o NTFS \u00b6 Acrescentar o comando uid=1000 nas op\u00e7\u00f5es de montagem /dev/sda3 /home/user/shared ntfs defaults,uid = 1000 ,noatime 0 0 Criar pasta .Trash-1000 na raiz da parti\u00e7\u00e3o Desmontar e montar a parti\u00e7\u00e3o File manager Bookmark \u00b6 Local onde s\u00e3o armazenados os bookmarks ~/.config/gtk-3.0/bookmark Pastas padr\u00e3o \u00b6 Local de configura\u00e7\u00e3o ~/.config/user-dirs.dirs . Para remover uma pasta padr\u00e3o, basta deixar $HOME/ . Na pasta Templates fica os modelos de arquivos que ir\u00e3o aparecer no menu do bot\u00e3o direito para criar um novo arquivo. XDG_DESKTOP_DIR=\"$HOME/Desktop\" XDG_DOWNLOAD_DIR=\"$HOME/Downloads\" XDG_TEMPLATES_DIR=\"$HOME/Templates\" XDG_PUBLICSHARE_DIR=\"$HOME/\" XDG_DOCUMENTS_DIR=\"$HOME/\" XDG_MUSIC_DIR=\"$HOME/\" XDG_PICTURES_DIR=\"$HOME/\" XDG_VIDEOS_DIR=\"$HOME/\" Atualizar a configura\u00e7\u00e3o: xdg-user-dirs-update Hot Corner \u00b6 Fun\u00e7\u00e3o acionada quando o mouse encosta no canto superior esquerdo da tela. Verificar se est\u00e1 habilitado. gsettings get org.gnome.shell enable-hot-corners Habilitadar. gsettings set org.gnome.shell enable-hot-corners true Desabilitar. gsettings set org.gnome.shell enable-hot-corners false GDM \u00b6 Definir tela de login no monitor padr\u00e3o \u00b6 Tela de login no monitor definido como prim\u00e1rio quando usado GDM (GNOME Display Manager), ou seja, o programa que permite o login gr\u00e1fico do Gnome. Definir as configura\u00e7\u00f5es das telas pela interface. Force alguma mudan\u00e7a para que o arquivo ~/.config/monitors.xml seja criado. Execute: cp ~/.config/monitors.xml /var/lib/gdm3/.config/ Problemas \u00b6 Open containing folder \u00b6 O gerenciador de arquivos n\u00e3o est\u00e1 sendo aberto quando um aplicativo tem a op\u00e7\u00e3o \"Open containing folder\". Remover o aplicativo que est\u00e1 usando a diretiva \"inode/directory=\" no \"mimeinfo.cache\". sudo nano /usr/share/applications/mimeinfo.cache Adicionar a diretiva \"inode/directory=\" no \"mimeapps.list\". nano ~/.config/mimeapps.list [ Default Applications ] inode/directory = nautilus.desktop Exibindo dois Docks \u00b6 Abra a janela \"extensions\" (n\u00e3o \u00e9 a do Tweak) e desmarque o \"Ubuntu Dock\". Depois Alt + F2 e digite r .","title":"Gnome"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#gnome","text":"Gnome Configura\u00e7\u00f5es Montar parti\u00e7\u00e3o NTFS automaticamente Habilitar lixeira em parti\u00e7\u00e3o NTFS File manager Bookmark Pastas padr\u00e3o Hot Corner GDM Definir tela de login no monitor padr\u00e3o Problemas Open containing folder Exibindo dois Docks","title":"Gnome"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#configuracoes","text":"","title":"Configura\u00e7\u00f5es"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#montar-particao-ntfs-automaticamente","text":"Usar o gnome-disk-utility e em \"Edit Mount Options\" desabilitar \"User Session Defaults\" e escolher \"Mount at system startup\" \u00c9 necess\u00e1rio instalar o pacote ntfs-3g para ter permissao de escrita. sudo pacman -S ntfs-3g","title":"Montar parti\u00e7\u00e3o NTFS automaticamente"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#habilitar-lixeira-em-particao-ntfs","text":"Acrescentar o comando uid=1000 nas op\u00e7\u00f5es de montagem /dev/sda3 /home/user/shared ntfs defaults,uid = 1000 ,noatime 0 0 Criar pasta .Trash-1000 na raiz da parti\u00e7\u00e3o Desmontar e montar a parti\u00e7\u00e3o","title":"Habilitar lixeira em parti\u00e7\u00e3o NTFS"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#file-manager-bookmark","text":"Local onde s\u00e3o armazenados os bookmarks ~/.config/gtk-3.0/bookmark","title":"File manager Bookmark"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#pastas-padrao","text":"Local de configura\u00e7\u00e3o ~/.config/user-dirs.dirs . Para remover uma pasta padr\u00e3o, basta deixar $HOME/ . Na pasta Templates fica os modelos de arquivos que ir\u00e3o aparecer no menu do bot\u00e3o direito para criar um novo arquivo. XDG_DESKTOP_DIR=\"$HOME/Desktop\" XDG_DOWNLOAD_DIR=\"$HOME/Downloads\" XDG_TEMPLATES_DIR=\"$HOME/Templates\" XDG_PUBLICSHARE_DIR=\"$HOME/\" XDG_DOCUMENTS_DIR=\"$HOME/\" XDG_MUSIC_DIR=\"$HOME/\" XDG_PICTURES_DIR=\"$HOME/\" XDG_VIDEOS_DIR=\"$HOME/\" Atualizar a configura\u00e7\u00e3o: xdg-user-dirs-update","title":"Pastas padr\u00e3o"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#hot-corner","text":"Fun\u00e7\u00e3o acionada quando o mouse encosta no canto superior esquerdo da tela. Verificar se est\u00e1 habilitado. gsettings get org.gnome.shell enable-hot-corners Habilitadar. gsettings set org.gnome.shell enable-hot-corners true Desabilitar. gsettings set org.gnome.shell enable-hot-corners false","title":"Hot Corner"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#gdm","text":"","title":"GDM"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#definir-tela-de-login-no-monitor-padrao","text":"Tela de login no monitor definido como prim\u00e1rio quando usado GDM (GNOME Display Manager), ou seja, o programa que permite o login gr\u00e1fico do Gnome. Definir as configura\u00e7\u00f5es das telas pela interface. Force alguma mudan\u00e7a para que o arquivo ~/.config/monitors.xml seja criado. Execute: cp ~/.config/monitors.xml /var/lib/gdm3/.config/","title":"Definir tela de login no monitor padr\u00e3o"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#problemas","text":"","title":"Problemas"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#open-containing-folder","text":"O gerenciador de arquivos n\u00e3o est\u00e1 sendo aberto quando um aplicativo tem a op\u00e7\u00e3o \"Open containing folder\". Remover o aplicativo que est\u00e1 usando a diretiva \"inode/directory=\" no \"mimeinfo.cache\". sudo nano /usr/share/applications/mimeinfo.cache Adicionar a diretiva \"inode/directory=\" no \"mimeapps.list\". nano ~/.config/mimeapps.list [ Default Applications ] inode/directory = nautilus.desktop","title":"Open containing folder"},{"location":"linux/distribuicoes-e-ambientes-graficos/gnome/#exibindo-dois-docks","text":"Abra a janela \"extensions\" (n\u00e3o \u00e9 a do Tweak) e desmarque o \"Ubuntu Dock\". Depois Alt + F2 e digite r .","title":"Exibindo dois Docks"},{"location":"linux/distribuicoes-e-ambientes-graficos/manjaro/","text":"Manjaro \u00b6 Manjaro Restaura\u00e7\u00e3o do Grub Restaura\u00e7\u00e3o do Grub \u00b6 sudo efibootmgr --create --disk /dev/sda --part 2 --loader /EFI/Manjaro/grubx64.efi --label \"Manjaro GRUB\" --verbose Onde: /dev/sda \u00e9 a parti\u00e7\u00e3o /boot/efi. -part 2 \u00e9 o n\u00famero da parti\u00e7\u00e3o /boot/efi (sda2). -label \u00e9 a label (opcional)","title":"Manjaro"},{"location":"linux/distribuicoes-e-ambientes-graficos/manjaro/#manjaro","text":"Manjaro Restaura\u00e7\u00e3o do Grub","title":"Manjaro"},{"location":"linux/distribuicoes-e-ambientes-graficos/manjaro/#restauracao-do-grub","text":"sudo efibootmgr --create --disk /dev/sda --part 2 --loader /EFI/Manjaro/grubx64.efi --label \"Manjaro GRUB\" --verbose Onde: /dev/sda \u00e9 a parti\u00e7\u00e3o /boot/efi. -part 2 \u00e9 o n\u00famero da parti\u00e7\u00e3o /boot/efi (sda2). -label \u00e9 a label (opcional)","title":"Restaura\u00e7\u00e3o do Grub"},{"location":"linux/distribuicoes-e-ambientes-graficos/pop-os/","text":"Pop! OS \u00b6 Reparar o systemd-boot \u00b6 # Ex: sistema = /dev/nvme1n1p1; efi = /dev/nvme1n1p7 sudo mount /dev/nvme1n1p7 /mnt sudo mount /dev/nvme1n1p1 /mnt/boot/efi for i in /dev /dev/pts /proc /sys /run ; do sudo mount -B $i /mnt $i ; done sudo cp /etc/resolv.conf /mnt/etc/ sudo chroot /mnt apt install --reinstall linux-generic linux-headers-generic update-initramfs -c -k all exit sudo bootctl --path = /mnt/boot/efi install Alterar op\u00e7\u00f5es de boot do systemd-boot \u00b6 As op\u00e7\u00f5es de boot s\u00e3o os arquivos .conf em /boot/efi/loader/entries . Para colocar a op\u00e7\u00e3o do windows como padr\u00e3o, por exemplo ou mudar o nome, \u00e9 necess\u00e1rio criar um arquivo .conf contendo: title Windows 10 # Nome que ser\u00e1 exibido nas op\u00e7\u00f5es de boot efi /EFI/Microsoft/Boot/bootmgfw.efi # A parti\u00e7\u00e3o `/boot` \u00e9 s\u00f3 um ponto de montagem da parti\u00e7\u00e3o `efi` As configura\u00e7\u00f5es de boot est\u00e3o em: /boot/efi/loader/loader.conf : default windows.conf timeout 10 auto-entries 0 # Evitar que apare\u00e7a op\u00e7\u00f5es de busca autom\u00e1tica que n\u00e3o ent\u00e3o em `/boot/efi/loader/entries`. Listar sistemas presentes na parti\u00e7\u00e3o EFI \u00b6 ls -l /boot/efi/EFI","title":"Pop! OS"},{"location":"linux/distribuicoes-e-ambientes-graficos/pop-os/#pop-os","text":"","title":"Pop! OS"},{"location":"linux/distribuicoes-e-ambientes-graficos/pop-os/#reparar-o-systemd-boot","text":"# Ex: sistema = /dev/nvme1n1p1; efi = /dev/nvme1n1p7 sudo mount /dev/nvme1n1p7 /mnt sudo mount /dev/nvme1n1p1 /mnt/boot/efi for i in /dev /dev/pts /proc /sys /run ; do sudo mount -B $i /mnt $i ; done sudo cp /etc/resolv.conf /mnt/etc/ sudo chroot /mnt apt install --reinstall linux-generic linux-headers-generic update-initramfs -c -k all exit sudo bootctl --path = /mnt/boot/efi install","title":"Reparar o systemd-boot"},{"location":"linux/distribuicoes-e-ambientes-graficos/pop-os/#alterar-opcoes-de-boot-do-systemd-boot","text":"As op\u00e7\u00f5es de boot s\u00e3o os arquivos .conf em /boot/efi/loader/entries . Para colocar a op\u00e7\u00e3o do windows como padr\u00e3o, por exemplo ou mudar o nome, \u00e9 necess\u00e1rio criar um arquivo .conf contendo: title Windows 10 # Nome que ser\u00e1 exibido nas op\u00e7\u00f5es de boot efi /EFI/Microsoft/Boot/bootmgfw.efi # A parti\u00e7\u00e3o `/boot` \u00e9 s\u00f3 um ponto de montagem da parti\u00e7\u00e3o `efi` As configura\u00e7\u00f5es de boot est\u00e3o em: /boot/efi/loader/loader.conf : default windows.conf timeout 10 auto-entries 0 # Evitar que apare\u00e7a op\u00e7\u00f5es de busca autom\u00e1tica que n\u00e3o ent\u00e3o em `/boot/efi/loader/entries`.","title":"Alterar op\u00e7\u00f5es de boot do systemd-boot"},{"location":"linux/distribuicoes-e-ambientes-graficos/pop-os/#listar-sistemas-presentes-na-particao-efi","text":"ls -l /boot/efi/EFI","title":"Listar sistemas presentes na parti\u00e7\u00e3o EFI"},{"location":"linux/gerenciador-pacotes/apt/","text":"Apt \u00b6 Apt Comandos Verificar a vers\u00e3o do pacote Verificar depend\u00eancias Comandos \u00b6 Verificar a vers\u00e3o do pacote \u00b6 # Pacote que ser\u00e1 instalado apt policy <nome-pacote> # Pacote instalado apt-cache policy <nome-pacote> Verificar depend\u00eancias \u00b6 # Pacote que ser\u00e1 instalado apt rdepends <nome-pacote> # Pacote instalado apt-cache rdepends <nome-pacote>","title":"Apt"},{"location":"linux/gerenciador-pacotes/apt/#apt","text":"Apt Comandos Verificar a vers\u00e3o do pacote Verificar depend\u00eancias","title":"Apt"},{"location":"linux/gerenciador-pacotes/apt/#comandos","text":"","title":"Comandos"},{"location":"linux/gerenciador-pacotes/apt/#verificar-a-versao-do-pacote","text":"# Pacote que ser\u00e1 instalado apt policy <nome-pacote> # Pacote instalado apt-cache policy <nome-pacote>","title":"Verificar a vers\u00e3o do pacote"},{"location":"linux/gerenciador-pacotes/apt/#verificar-dependencias","text":"# Pacote que ser\u00e1 instalado apt rdepends <nome-pacote> # Pacote instalado apt-cache rdepends <nome-pacote>","title":"Verificar depend\u00eancias"},{"location":"linux/gerenciador-pacotes/flatpak/","text":"Flatpak \u00b6 Flatpak Comandos Runtimes e aplica\u00e7\u00f5es Comandos \u00b6 Runtimes e aplica\u00e7\u00f5es \u00b6 Procurar por runtimes e aplica\u00e7\u00f5es nos reposit\u00f3rios. $ flatpak update $ flatpak search <NOME> Executar aplica\u00e7\u00f5es $ flatpak run <APLICACAO> Atualizar aplica\u00e7\u00e3o $ flatpak update <APLICACAO> Desinstalar runtime ou aplica\u00e7\u00e3o $ flatpak uninstall <APLICACAO> Remover runtimes n\u00e3o usados $ flatpak uninstall --unused Listar runtimes e aplica\u00e7\u00f5es $ flatpak list Ver permiss\u00f5es do sandbox da aplica\u00e7\u00e3o $ flatpak info --show-permissions <APLICACAO> Sobrescrever permiss\u00f5es do sandbox da aplica\u00e7\u00e3o # Previne a aplica\u00e7\u00e3o de acessar o diret\u00f3rio home $ flatpak override --nofilesystem = home <APLICACAO> Outros par\u00e2metros Comando Descri\u00e7\u00e3o \u2013filesystem=host Access all files \u2013filesystem=home Access the home directory \u2013filesystem=home:ro Access the home directory, read-only \u2013filesystem=/some/dir \u2013filesystem=~/other/dir Access paths \u2013filesystem=xdg-download Access the XDG download directory \u2013nofilesystem=... Undo some of the above \u2013socket=x11 \u2013share=ipc Show windows using X11) \u2013device=dri OpenGL rendering \u2013socket=wayland Show windows using Wayland \u2013socket=pulseaudio Play sounds using PulseAudio \u2013share=network Access the network \u2013talk-name=org.freedesktop.secrets Talk to a named service on the session bus \u2013system-talk-name=org.freedesktop.GeoClue2 Talk to a named service on the system bus \u2013socket=system-bus Unlimited access to all of D-Bus Resetar permiss\u00f5es sobrescritas do sandbox da aplica\u00e7\u00e3o $ flatpak override --reset <APLICACAO>","title":"Flatpak"},{"location":"linux/gerenciador-pacotes/flatpak/#flatpak","text":"Flatpak Comandos Runtimes e aplica\u00e7\u00f5es","title":"Flatpak"},{"location":"linux/gerenciador-pacotes/flatpak/#comandos","text":"","title":"Comandos"},{"location":"linux/gerenciador-pacotes/flatpak/#runtimes-e-aplicacoes","text":"Procurar por runtimes e aplica\u00e7\u00f5es nos reposit\u00f3rios. $ flatpak update $ flatpak search <NOME> Executar aplica\u00e7\u00f5es $ flatpak run <APLICACAO> Atualizar aplica\u00e7\u00e3o $ flatpak update <APLICACAO> Desinstalar runtime ou aplica\u00e7\u00e3o $ flatpak uninstall <APLICACAO> Remover runtimes n\u00e3o usados $ flatpak uninstall --unused Listar runtimes e aplica\u00e7\u00f5es $ flatpak list Ver permiss\u00f5es do sandbox da aplica\u00e7\u00e3o $ flatpak info --show-permissions <APLICACAO> Sobrescrever permiss\u00f5es do sandbox da aplica\u00e7\u00e3o # Previne a aplica\u00e7\u00e3o de acessar o diret\u00f3rio home $ flatpak override --nofilesystem = home <APLICACAO> Outros par\u00e2metros Comando Descri\u00e7\u00e3o \u2013filesystem=host Access all files \u2013filesystem=home Access the home directory \u2013filesystem=home:ro Access the home directory, read-only \u2013filesystem=/some/dir \u2013filesystem=~/other/dir Access paths \u2013filesystem=xdg-download Access the XDG download directory \u2013nofilesystem=... Undo some of the above \u2013socket=x11 \u2013share=ipc Show windows using X11) \u2013device=dri OpenGL rendering \u2013socket=wayland Show windows using Wayland \u2013socket=pulseaudio Play sounds using PulseAudio \u2013share=network Access the network \u2013talk-name=org.freedesktop.secrets Talk to a named service on the session bus \u2013system-talk-name=org.freedesktop.GeoClue2 Talk to a named service on the system bus \u2013socket=system-bus Unlimited access to all of D-Bus Resetar permiss\u00f5es sobrescritas do sandbox da aplica\u00e7\u00e3o $ flatpak override --reset <APLICACAO>","title":"Runtimes e aplica\u00e7\u00f5es"},{"location":"linux/gerenciador-pacotes/snap/","text":"Snap \u00b6 Snap Comandos Sistema Runtimes e aplica\u00e7\u00f5es Comandos \u00b6 Sistema \u00b6 Ver vers\u00e3o do snap snap version Runtimes e aplica\u00e7\u00f5es \u00b6 Busca de aplicativos snap find \"nome\" Informa\u00e7\u00e3o do aplicativo snap info <APLICATIVO> Instala\u00e7\u00e3o de aplicativos sudo snap install <APLICATIVO> # Escolhendo o canal do reposit\u00f3rio (stable, candidate, beta, edge) sudo snap install --channel = edge <APLICATIVO> # Mudando o canal do reposit\u00f3rio sudo snap switch --channel = stable <APLICATIVO> Remover aplicativo sudo snap remove <APLICATIVO> Local onde os aplicativos s\u00e3o instalados ( /snap/bin ) which <APLICATIVO> $ /snap/bin/<APLICATIVO> Executar aplicativo /snap/bin/vlc Listar aplicativos instalados snap list # Listar com todas as vers\u00f5es instaladas snap list --all Atualizar os aplicativos sudo snap refresh <APLICATIVO> # Mudar o canal e atualizar sudo snap refresh --channel = beta <APLICATIVO> Reverter para a vers\u00e3o anterior sudo snap revert <APLICATIVO> Desabilitar e habilitar um aplicativo sudo snap disable <APLICATIVO> sudo snap enable <APLICATIVO>","title":"Snap"},{"location":"linux/gerenciador-pacotes/snap/#snap","text":"Snap Comandos Sistema Runtimes e aplica\u00e7\u00f5es","title":"Snap"},{"location":"linux/gerenciador-pacotes/snap/#comandos","text":"","title":"Comandos"},{"location":"linux/gerenciador-pacotes/snap/#sistema","text":"Ver vers\u00e3o do snap snap version","title":"Sistema"},{"location":"linux/gerenciador-pacotes/snap/#runtimes-e-aplicacoes","text":"Busca de aplicativos snap find \"nome\" Informa\u00e7\u00e3o do aplicativo snap info <APLICATIVO> Instala\u00e7\u00e3o de aplicativos sudo snap install <APLICATIVO> # Escolhendo o canal do reposit\u00f3rio (stable, candidate, beta, edge) sudo snap install --channel = edge <APLICATIVO> # Mudando o canal do reposit\u00f3rio sudo snap switch --channel = stable <APLICATIVO> Remover aplicativo sudo snap remove <APLICATIVO> Local onde os aplicativos s\u00e3o instalados ( /snap/bin ) which <APLICATIVO> $ /snap/bin/<APLICATIVO> Executar aplicativo /snap/bin/vlc Listar aplicativos instalados snap list # Listar com todas as vers\u00f5es instaladas snap list --all Atualizar os aplicativos sudo snap refresh <APLICATIVO> # Mudar o canal e atualizar sudo snap refresh --channel = beta <APLICATIVO> Reverter para a vers\u00e3o anterior sudo snap revert <APLICATIVO> Desabilitar e habilitar um aplicativo sudo snap disable <APLICATIVO> sudo snap enable <APLICATIVO>","title":"Runtimes e aplica\u00e7\u00f5es"},{"location":"linux/shell/bash/","text":"Bash \u00b6 Lan\u00e7ado originalmente em 1989, Bash (acr\u00f4nimo para \"Bourne-Again SHell\") \u00e9 uma evolu\u00e7\u00e3o retro-compat\u00edvel muito mais interativa do Bourne Shell (sh). O Bash \u00e9 amplamente compat\u00edvel com o shell sh, e incorpora caracter\u00edsticas \u00fateis do Korn shell (ksh), e do shell C (csh). Ele oferece melhorias funcionais em rela\u00e7\u00e3o ao sh tanto para uso interativo como para programa\u00e7\u00e3o. O Bash apresenta recursos e caracter\u00edsticas de uma linguagem de programa\u00e7\u00e3o alto n\u00edvel. \u00c9 compat\u00edvel por configura\u00e7\u00e3o com as normas POSIX, de forma que os scripts Bash podem ser executados em diversos sistemas tipo Unix. Desta forma, o Bash cresceu e se tornou facilmente o shell mais usado em todo o mundo Linux/Unix. Com o passar do tempo, Bash adquiriu muitas extens\u00f5es incompat\u00edveis com o padr\u00e3o POSIX. Por\u00e9m, \u00e9 poss\u00edvel executar o Bash de forma compat\u00edvel com POSIX utilizando o par\u00e2metro --posix : bash --posix Arquivos de ambiente \u00b6 Voc\u00ea pode customizar seu ambiente do Bash utilizando alguns arquivos como: .bash_profile Este arquivo fica localizado no diret\u00f3rio pessoal de cada usu\u00e1rio. \u00c9 executado por shells que usam autentica\u00e7\u00e3o (nome e senha). Ele cont\u00e9m comandos que s\u00e3o executados para o usu\u00e1rio no momento do login no sistema ap\u00f3s o /etc/profile . .bashrc Possui as mesmas caracter\u00edsticas do .bash_profile mas \u00e9 executado por shells que n\u00e3o requerem autentica\u00e7\u00e3o (como uma se\u00e7\u00e3o de terminal no modo gr\u00e1fico) /etc/profile Este arquivo cont\u00e9m comandos que s\u00e3o executados para todos os usu\u00e1rios do sistema no momento de autentica\u00e7\u00e3o. Somente o usu\u00e1rio root pode ter permiss\u00e3o para modificar este arquivo. Este arquivo \u00e9 lido antes do arquivo de configura\u00e7\u00e3o pessoal de cada usu\u00e1rio (.bash_profile ou .profile ). Pode ser utilizado caso seja necess\u00e1rio fazer alguma personaliza\u00e7\u00e3o do ambiente para todos os usu\u00e1rios que utilizam o computador. Quando \u00e9 carregado atrav\u00e9s de um shell que requer autentica\u00e7\u00e3o (nome e senha), o Bash procura estes arquivos em sequ\u00eancia e executa os comandos contidos, caso existam: /etc/profile ~/.bash_profile ~/.bash_login ~/.profile A pesquisa ser\u00e1 interrompida assim que localiza o primeiro arquivo no diret\u00f3rio do usu\u00e1rio. Por exemplo, se tem o arquivo ~/.bash_login e ~/.bash_profile no seu diret\u00f3rio de usu\u00e1rio, processar\u00e1 o /etc/profile e ~/.bash_profile , mas nunca processar\u00e1 o ~/.bash_login . Caso o Bash seja carregado atrav\u00e9s de um shell que n\u00e3o requer autentica\u00e7\u00e3o (um terminal no modo gr\u00e1fico), o seguinte arquivo \u00e9 executado: ~/.bashrc. Estruturas da linguagem \u00b6 Coment\u00e1rios \u00b6 Coment\u00e1rio de uma linha. # Coment\u00e1rio de uma linha N\u00e3o h\u00e1 suporte para coment\u00e1rio de bloco, mas uma alternativa seria usar here document . : << \"END\" Conte\u00fado do bloco. Tudo aqui ser\u00e1 tratado como um bloco de comandos que ser\u00e1 enviado para : END Aspas \u00b6 Aspas s\u00e3o usadas para delimitar uma string ou um par\u00e2metro. Sem o uso de aspas \u00e9 necess\u00e1rios usar a barra invertida para escapar os espa\u00e7os. COMANDO \"arquivo de teste.txt\" COMANDO 'arquivo de teste.txt' # Equivalente COMANDO arquivo \\ de \\ teste.txt # Equivalente Aspas duplas s\u00e3o usadas se o conte\u00fado possui vari\u00e1veis que ser\u00e3o substitu\u00eddas por seu valor. Quebra de linha \u00b6 Quebrar linhas para comandos grandes. printf \"Imprimindo: %s %s\\n\" \\ $( echo \"Ol\u00e1\" ) \\ $( echo \"Mundo!\" ) # Imprimindo: Ol\u00e1 Mundo! Expans\u00e3o de nomes de arquivos \u00b6 O Bash suporta uma s\u00e9rie de nota\u00e7\u00f5es especiais, conhecidas como expans\u00f5es, para passar tipos de argumentos comumente usados em programas. COMANDO arquivo1.txt arquivo2.txt arquivo3.txt COMANDO arquivo { 1 ,2,3 } .txt # Equivalente COMANDO arquivo { 1 ..3 } .txt # Equivalente Vari\u00e1veis \u00b6 Para atribuir um valor para uma vari\u00e1vel \u00e9 utilizado o sinal \" = \" e n\u00e3o deve haver espa\u00e7os nem antes nem depois. String \u00b6 As aspas duplas s\u00e3o usadas se o conte\u00fado da string cont\u00e9m vari\u00e1veis que devem retornar seu valor. Sem o uso de aspas \u00e9 necess\u00e1rios escapar os espa\u00e7os. VAR = 'string simples' VAR = \"string com vari\u00e1vel $VAR \" VAR = string \\ simples VAR = string \\ com \\ vari\u00e1vel \\ \" $VAR \" Concatenar strings. VAR = \"Hello\" VAR += \" World\" echo \" $VAR \" # Hello World Concatenar valor de duas vari\u00e1veis string. VAR1 = \"Hello\" VAR2 = \"World\" VAR3 = \" $VAR1 $VAR2 \" echo \" $VAR3 \" # Hello World # ou VAR1 = \"Hello\" VAR2 = \" $VAR1 World\" echo \" $VAR2 \" # Hello World Retornar o tamanho de uma vari\u00e1vel string. VAR = 'Hello World' echo ${# VAR } # 11 Para retornar uma substrings segue-se o padr\u00e3o \" ${string:posicao:tamanho} \". Se a posi\u00e7\u00e3o for negativa (informada a partir do fim), deve usar par\u00eanteses ou um espa\u00e7o ap\u00f3s \" : \" dois pontos. Se n\u00e3o for informado o tamanho, ser\u00e1 considerado at\u00e9 o final da string. Se n\u00e3o for informado a posi\u00e7\u00e3o, ser\u00e1 considerado a posi\u00e7\u00e3o inicial. VAR = 0123456789 echo ${ VAR : -3 } # 789 echo ${ VAR :(-3) } # 789 echo ${ VAR :- 3 } # 0123456789 (n\u00e3o funciona) echo ${ VAR : -3: 1 } # 7 echo ${ VAR : 3 : 2 } # 34 echo ${ VAR : 5 } # 56789 echo ${ VAR :: 3 } # 012 Para substituir caracteres em strings segue-se o padr\u00e3o \" ${string/substring/substituicao} \" para substituir somente a primeira substring encontrada ou \" ${string//substring/substituicao} \" para substituir todas as ocorr\u00eancias encontradas. VAR = abcb VAR = ${ VAR /b/x } # axcb echo $VAR VAR = abcb VAR = ${ VAR //b/x } # axcx echo $VAR Inteiro \u00b6 Opera\u00e7\u00f5es de inteiros, usando par\u00eanteses duplos. echo $(( 3 + 4 * ( 5 - 1 ) )) # 19 echo $(( 10 ** 2 )) # 100 VAR = 1 (( VAR += 2 )) echo $VAR # 3 Usando o comando \" bc \" para valores grandes. echo 2 ^100 | bc # ou atribuir para uma vari\u00e1vel VAR = $( echo '2^100' | bc -l ) echo $VAR Ou simplesmente usando a fun\u00e7\u00e3o Bash \" let \". N\u00e3o pode haver espa\u00e7o entre os operadores, a n\u00e3o ser se escapar o espa\u00e7o ou usar aspas. let VAR = 5 +4 echo $VAR # 9 let VAR++ echo $VAR # 10 let VAR = VAR**2 echo $VAR # 100 let VAR = \"5 - 2\" # 3 A fun\u00e7\u00e3o Bash \" expr \" \u00e9 semelhante a \" let \" mas apenas imprime o resultado. Precisa haver espa\u00e7o entre os operadores. expr 5 + 4 # 9 Float \u00b6 Para realizar opera\u00e7\u00f5es com ponto flutuante geralmente utiliza o comando \" bc \". O par\u00e2metro \" -l \" \u00e9 passado para usar a biblioteca matem\u00e1tica para manipular float se n\u00e3o for soma ou subtra\u00e7\u00e3o. Por padr\u00e3o o par\u00e2metro usa precis\u00e3o de 20 casas, portanto para outros valores \u00e9 necess\u00e1rio informar a escala. echo '3.4 + 2.2' | bc # 5.6 echo '5.5 / 2' | bc # 2 echo 'scale=2; 5.5 / 2' | bc -l # 2.75 # ou atribuir para uma vari\u00e1vel VAR = $( echo '5.5 / 2' | bc -l ) echo $VAR Comando \u00b6 Atribui\u00e7\u00e3o de comandos. VAR = ` comando -parametro ` # ou VAR = $( comando -parametro ) Executar um comando armazenado em vari\u00e1vel. VAR = \"ls -l\" eval \" $VAR \" Vetor \u00b6 Concatena\u00e7\u00e3o em vetores. Para imprimir todos valores do vetor pode-se usar \" * \" ou \" @ \". O espa\u00e7o separa os elementos de um vetor. ARRAY =( 1 2 ) echo ${ ARRAY [@] } # 1 2 ARRAY +=( 3 ) echo ${ ARRAY [@] } # 1 2 3 echo ${ ARRAY [0] } # 1 echo ${ ARRAY [1] } # 2 echo ${ ARRAY [2] } # 3 Remover elemento do vetor. ARRAY =( 1 2 3 ) unset ARRAY [ 1 ] echo ${ ARRAY [@] } # 1 3 Criar vetor associativo usando \" declare -A \". declare -A VAR VAR =([ a ]= 0 [ b ]= 1 [ c ]= 2 ) echo ${ VAR [b] } # 1 VAR [ d ]= 3 echo ${ VAR [c] } ${ VAR [d] } # 2 3 unset VAR [ b ] echo ${ VAR [*] } # 0 2 3 Fun\u00e7\u00e3o \u00b6 Para obter o retorno de uma fun\u00e7\u00e3o \u00e9 usado \" $( ) \". function funcao { echo Ol\u00e1 } VAR = $( funcao ) echo \" $VAR \" # Ol\u00e1 Vari\u00e1veis especiais \u00b6 Vari\u00e1vel Descri\u00e7\u00e3o $0 O nome do script Bash. $1 - $9 Os primeiros 9 argumentos passados para o script. $# Quantos argumentos foram passados para o script. $@ Todos os argumentos passados para o script. $? O status de sa\u00edda da \u00faltima fun\u00e7\u00e3o ou processo executado. $$ Id do processo do script atual. $USER Usu\u00e1rio que est\u00e1 executando o script. $HOSTNAME Hostname da m\u00e1quina que est\u00e1 executando o script. $SECONDS Quantos segundos o script est\u00e1 executando. $RANDOM Retorna um n\u00famero rand\u00f4mico. $LINENO Retorna a linha que est\u00e1 sendo executada. Impress\u00e3o \u00b6 Imprimir o conte\u00fado de uma vari\u00e1vel. echo $VAR Se a vari\u00e1vel \u00e9 uma string que possui quebra de linha ou tabula\u00e7\u00f5es \u00e9 necess\u00e1rio usar aspas duplas. VAR = \"Ol\u00e1 Mundo\" echo \" $VAR \" O comando \" tput \" pode ser usado para imprimir em uma posi\u00e7\u00e3o espec\u00edfica da tela. colunas = $( tput cols ) # n\u00famero colunas terminal linhas = $( tput lines ) # n\u00famero linhas terminal mensagem = $@ tamanho_mensagem = ${# mensagem } metade_tamanho_mensagem = $(( $tamanho_mensagem / 2 )) metade_linhas = $(( $linhas / 2 )) metade_colunas = $(( ( $colunas / 2 ) - $metade_tamanho_mensagem )) tput clear # limpar terminal tput cup $metade_linhas $metade_colunas # local de impress\u00e3o tput bold echo $@ tput sgr0 tput cup $( tput lines ) 0 Fun\u00e7\u00f5es e escopo de vari\u00e1veis \u00b6 Para declarar vari\u00e1veis locais \u00e9 usado a palavra-chave \" local \". Par\u00eanteses em fun\u00e7\u00f5es s\u00e3o opcionais. VAR = 'Vari\u00e1vel Global' function funcao { local VAR = 'Var\u00e1vel Local' echo $VAR } echo $VAR # 'Vari\u00e1vel Global' funcao # 'Var\u00e1vel Local' echo $VAR # 'Vari\u00e1vel Global' Os par\u00e2metros passados para as fun\u00e7\u00f5es s\u00e3o acessados da mesma forma que os par\u00e2metros passados para executar o script \" $ + n\u00famero \". function funcao { echo $1 # oi } funcao oi O \" return \" tamb\u00e9m pode ser usado, mas serve apenar para retornar valores num\u00e9ricos que podem ser usados como status da execu\u00e7\u00e3o. Para obter o valor retornado pela \u00faltima fun\u00e7\u00e3o \u00e9 usado \" $? \". Normalmente, um status de retorno de 0 indica que tudo foi feito com sucesso. Um valor n\u00e3o zero indica que ocorreu um erro. function funcao { return 5 } funcao echo $? # 5 Para retornar algum valor, \u00e9 usado o pr\u00f3prio \" echo\" que pode ser capturado por \" $( )\" . function funcao { echo Ol\u00e1 } VAR = $( funcao ) echo \" $VAR \" # Ol\u00e1 Para criar uma fun\u00e7\u00e3o com o mesmo nome de um comando \u00e9 usado a palavra-chave \" command \". ls { command ls -lh # chamar\u00e1 o comando ls } ls Fluxos de entrada, sa\u00edda e erro \u00b6 Os fluxos padr\u00e3o s\u00e3o canais de entrada/sa\u00edda entre um programa de computador e o seu ambiente (tipicamente um terminal de texto) que s\u00e3o pr\u00e9-conectados no in\u00edcio da execu\u00e7\u00e3o. Entrada padr\u00e3o (stdin): \\ A entrada padr\u00e3o indica que o dado (frequentemente texto) est\u00e1 indo para um programa. Sa\u00edda padr\u00e3o (stdout): \\ A sa\u00edda padr\u00e3o \u00e9 um fluxo onde o programa escreve dados de sa\u00edda. Erro padr\u00e3o (stderr): \\ O erro padr\u00e3o \u00e9 um outro tipo de sa\u00edda padr\u00e3o, \u00e9 utilizada pelos programas para envio de mensagens de erro ou de diagn\u00f3stico. Formas de capturar os fluxos padr\u00f5es de I/O dos processos executados: arquivo para stdin COMANDO < ARQUIVO stdout para arquivo COMANDO > ARQUIVO # ou COMANDO 1 > ARQUIVO stderr para arquivo COMANDO 2 > ARQUIVO stdout e stderr para arquivo COMANDO & > ARQUIVO stdout para o stderr COMANDO 1 > & 2 stderr para o stdout COMANDO 2 > & 1 Obs: Para anexar a sa\u00edda ao final do arquivo, ao inv\u00e9s de sobreescrev\u00ea-lo \u00e9 usado >> ao inv\u00e9s de > . Here document \u00b6 Um here document \u00e9 um bloco de c\u00f3digo de prop\u00f3sito especial. Ele usa uma forma de redirecionamento de I/O para alimentar um programa interativo ou um comando. Passar o conte\u00fado de uma vari\u00e1vel como entrada para outro comando. COMANDO << \" $VARIAVEL \" Passar uma lista de comandos como entrada parar outro comando. COMANDO << DELIMITADOR comando1 \"$VAR\" comando2 DELIMITADOR Para n\u00e3o substituir $VAR pelo valor da vari\u00e1vel, basta usar aspas no delimitador inicial. COMANDO << \"DELIMITADOR\" comando1 \" $VAR \" comando2 DELIMITADOR Passagem de par\u00e2metros \u00b6 S\u00e3o usados os caracteres especiais $ + n\u00famero . $ ./script.sh a b c echo \" $1 \" # a echo \" $2 \" # b echo \" $3 \" # c \" Obs: \" As aspas duplas s\u00e3o usadas para obter quebra de linhas ou tabula\u00e7\u00f5es caso sejam fornecidas. Estrutura Condicional \u00b6 O teste condicional pode ser definido entre os delimitadores [], [[ ]] e (( )). Deve haver um espa\u00e7o ente o teste condicional e os delimitadores. Os colchetes simples [ ] permitem comandos condicionais mais limitado, compat\u00edveis com o POSIX. Enquanto que os colchetes duplos [[ ]] \u00e9 uma extens\u00e3o mais completa que foi adotada do ksh88 e possui algumas vantagens como: N\u00e3o \u00e9 necess\u00e1rio escapar uma var\u00e1vel que contenha quebra de linhas ou espa\u00e7os. if [ -f \" $file \" ] # contra if [[ -f $file ]] Permite o uso de && ou || para compara\u00e7\u00f5es boleanas e uso de par\u00eanteses. if [ INTEIRO -eq 1 ] || [ INTEIRO -eq 2 ] # contra if [[ INTEIRO -eq 1 || INTEIRO -eq 2 ]] O uso de < ou > sem escape para compara\u00e7\u00f5es com strings. if [ STRING1 \\> STRING2 ] # contra if [[ STRING1 > STRING2 ]] Permite a compara\u00e7\u00e3o com express\u00f5es regulares if [[ $RESPOSTA = ~ ^s ( im ) ?$ ]] # ou if [[ $RESPOSTA = y* ]] Os par\u00eanteses duplos (( )) permitem o uso dos operadores para as opera\u00e7\u00f5es aritm\u00e9ticas de forma mais simples ( <, >, >=, <=, !=, ==). if [[ $VAR1 -ge 5 || $VAR2 -eq -1 ]] # contra if (( $VAR1 > = 5 || $VAR2 == -1 )) [[ 01 -eq 1 ]] e (( 01 == 1 )) # ambos verdadeiros (inteiros) [[ 01 == 1 ]] e [ 01 = 1 ] # ambos falsos (string) (( 01 -eq 1 )) e (( 01 = 1 )) # ambos retornam erro Para o teste das condi\u00e7\u00f5es, ser\u00e1 retornado o estado de sa\u00edda zero (sucesso) se a condi\u00e7\u00e3o \u00e9 verdadeira e estado de sa\u00edda n\u00e3o zero (falha) se a condi\u00e7\u00e3o \u00e9 falsa. T1 = \"a\" T2 = \"b\" if [[ \" $T1 \" = \" $T2 \" ]] ; then echo Express\u00e3o verdadeira elif [[ \" $T1 \" > \" $T2 \" ]] ; then echo Express\u00e3o verdadeira else echo Express\u00e3o falsa # entra aqui fi Condicionais combinadas. if [[ -e origem.txt ]] && ! [[ -e destino.txt ]] ; then # Se origem.txt existe e destino.txt n\u00e3o existe fi Obs: Para usar mais de um comando na mesma linha, \u00e9 usado o \" ; \". Estrutura \"case\". VAR = segundo case $VAR in primeiro ) echo 1 ;; segundo ) echo 2 # 2 ;; terceiro ) echo 3 ;; * ) echo desconhecido ;; esac Operadores condicionais \u00b6 Operadores condicionais para arquivos \u00b6 Express\u00e3o Descri\u00e7\u00e3o -e ARQUIVO Se o arquivo existe. -d ARQUIVO Se o arquivo existe e \u00e9 um diret\u00f3rio. -f ARQUIVO Se o arquivo existe e \u00e9 um arquivo comum. -s ARQUIVO Se o arquivo n\u00e3o possui tamanho 0 (zero). -r ARQUIVO Se o arquivo possui permiss\u00e3o de leitura para o usu\u00e1rio. -w ARQUIVO Se o arquivo possui permiss\u00e3o de escrita para o usu\u00e1rio. -w ARQUIVO Se o arquivo possui permiss\u00e3o de execu\u00e7\u00e3o para o usu\u00e1rio. Operadores condicionais para inteiros \u00b6 Express\u00e3o Descri\u00e7\u00e3o INTEIRO1 -lt INTEIRO2 Se INTEIRO1 < INTEIRO2. INTEIRO1 -gt INTEIRO2 Se INTEIRO1 > INTEIRO2. INTEIRO1 -le INTEIRO2 Se INTEIRO1 <= INTEIRO2. INTEIRO1 -ge INTEIRO2 Se INTEIRO1 >= INTEIRO2. INTEIRO1 -eq INTEIRO2 Se INTEIRO1 == INTEIRO2. INTEIRO1 -ne INTEIRO2 Se INTEIRO1 != INTEIRO2. Obs: Usando Par\u00eanteses duplos (( )) \u00e9 poss\u00edvel usar os operadores tradicionais <, >, >=, <=, !=, ==. Operadores condicionais para strings \u00b6 Express\u00e3o Descri\u00e7\u00e3o STRING1 == STRING2 Se STRING1 == STRING2. STRING1 != STRING2 Se STRING1 != STRING2. STRING1 \\< STRING2 Se STRING1 < STRING2 ordem ASCII. STRING1 \\> STRING2 Se STRING1 > STRING2 ordem ASCII. STRING =~ PADRAO Se a string casa com o padr\u00e3o. -n STRING Se a string n\u00e3o \u00e9 vazia. -z STRING Se a string \u00e9 vazia. Operadores condicionais para boleanos \u00b6 Express\u00e3o Descri\u00e7\u00e3o BOLEANO && valor l\u00f3gico \"e\" BOLEANO || valor l\u00f3gico \"ou\" Operadores condicionais I/O \u00b6 Express\u00e3o Descri\u00e7\u00e3o -t <0, 1> Se o stdin [-t 0] ou o stdout [-t 1] est\u00e1 sendo feito pelo terminal. Estrutura de repeti\u00e7\u00e3o \u00b6 Usando \" for \" for file in $( ls ) ; do echo \"item: $file \" done for i in { 1 ..20 } ; do echo \" $i \" done CORES =( 'rosa' 'verde lima' 'amarelo' ) for COR in \" ${ CORES [@] } \" ; do echo \" $COR \" done Usando \" while \". Realiza o comando enquanto a condi\u00e7\u00e3o for verdadeira. while [[ -e arquivo.txt ]] ; do sleep 3 done Usando \" until \". Realiza o comando enquanto a condi\u00e7\u00e3o for falsa. O mesmo que usar o \" while \" com \" ! \". until [[ -e arquivo.txt ]] ; do sleep 3 done Todas as estruturas de repeti\u00e7\u00e3o suporta \"continue\" e \"break\". A estrutura \" select \" pode ser usada para criar menus. names = 'Maria Jos\u00e9 Pedro Laura *Sair' PS3 = 'Selecione uma pessoa: ' select name in $names do if [ $name == 'Sair' ] ; then echo Bye break fi echo Ol\u00e1 $name done Fun\u00e7\u00f5es Shell \u00b6 Esse recurso permite agrupar uma sequ\u00eancia de comandos em um \u00fanico comando. get () { if [[ -t 0 ]] ; then read -r -p 'Password:' -s \" $1 \" && echo else return 1 fi } get PASSWORD && echo \" $PASSWORD \" O comando \" read \" armazena a entrada do usu\u00e1rio em vari\u00e1veis. A vari\u00e1vel \"PASSWORD\" \u00e9 passada como par\u00e2metro (\"$1\")e \" read \" ir\u00e1 armazenar a entrada do usu\u00e1rio na vari\u00e1vel. Subshell \u00b6 Um subshell recebe uma c\u00f3pia do \"ambiente de execu\u00e7\u00e3o\" do contexto circundante, que inclui quaisquer vari\u00e1veis, entre outras coisas; mas as altera\u00e7\u00f5es que o subshell faz para o ambiente de execu\u00e7\u00e3o n\u00e3o s\u00e3o copiadas de volta quando o subshell \u00e9 conclu\u00eddo. VAR1 = ol\u00e1 echo \" $VAR1 \" # ol\u00e1 ( echo \" $VAR1 \" # ol\u00e1 VAR2 = mundo echo \" $VAR2 \" # mundo VAR1 = cruel echo \" $VAR1 \" # cruel ) echo \" $VAR2 \" # nada, pois n\u00e3o existe echo \" $VAR1 \" # ol\u00e1 Intera\u00e7\u00e3o com o usu\u00e1rio \u00b6 Para obter a entrada do usu\u00e1rio, pode-se usar o comando \" read \". echo Entre com seu primeiro e \u00faltimo nome: read FN LN echo \"Ol\u00e1 $LN $FN !\" Refer\u00eancias \u00b6 https://pt.wikipedia.org/wiki/Bash https://en.wikipedia.org/wiki/Bash_(Unix_shell) https://devhints.io/bash http://tldp.org/LDP/abs/html/index.html","title":"Bash"},{"location":"linux/shell/bash/#bash","text":"Lan\u00e7ado originalmente em 1989, Bash (acr\u00f4nimo para \"Bourne-Again SHell\") \u00e9 uma evolu\u00e7\u00e3o retro-compat\u00edvel muito mais interativa do Bourne Shell (sh). O Bash \u00e9 amplamente compat\u00edvel com o shell sh, e incorpora caracter\u00edsticas \u00fateis do Korn shell (ksh), e do shell C (csh). Ele oferece melhorias funcionais em rela\u00e7\u00e3o ao sh tanto para uso interativo como para programa\u00e7\u00e3o. O Bash apresenta recursos e caracter\u00edsticas de uma linguagem de programa\u00e7\u00e3o alto n\u00edvel. \u00c9 compat\u00edvel por configura\u00e7\u00e3o com as normas POSIX, de forma que os scripts Bash podem ser executados em diversos sistemas tipo Unix. Desta forma, o Bash cresceu e se tornou facilmente o shell mais usado em todo o mundo Linux/Unix. Com o passar do tempo, Bash adquiriu muitas extens\u00f5es incompat\u00edveis com o padr\u00e3o POSIX. Por\u00e9m, \u00e9 poss\u00edvel executar o Bash de forma compat\u00edvel com POSIX utilizando o par\u00e2metro --posix : bash --posix","title":"Bash"},{"location":"linux/shell/bash/#arquivos-de-ambiente","text":"Voc\u00ea pode customizar seu ambiente do Bash utilizando alguns arquivos como: .bash_profile Este arquivo fica localizado no diret\u00f3rio pessoal de cada usu\u00e1rio. \u00c9 executado por shells que usam autentica\u00e7\u00e3o (nome e senha). Ele cont\u00e9m comandos que s\u00e3o executados para o usu\u00e1rio no momento do login no sistema ap\u00f3s o /etc/profile . .bashrc Possui as mesmas caracter\u00edsticas do .bash_profile mas \u00e9 executado por shells que n\u00e3o requerem autentica\u00e7\u00e3o (como uma se\u00e7\u00e3o de terminal no modo gr\u00e1fico) /etc/profile Este arquivo cont\u00e9m comandos que s\u00e3o executados para todos os usu\u00e1rios do sistema no momento de autentica\u00e7\u00e3o. Somente o usu\u00e1rio root pode ter permiss\u00e3o para modificar este arquivo. Este arquivo \u00e9 lido antes do arquivo de configura\u00e7\u00e3o pessoal de cada usu\u00e1rio (.bash_profile ou .profile ). Pode ser utilizado caso seja necess\u00e1rio fazer alguma personaliza\u00e7\u00e3o do ambiente para todos os usu\u00e1rios que utilizam o computador. Quando \u00e9 carregado atrav\u00e9s de um shell que requer autentica\u00e7\u00e3o (nome e senha), o Bash procura estes arquivos em sequ\u00eancia e executa os comandos contidos, caso existam: /etc/profile ~/.bash_profile ~/.bash_login ~/.profile A pesquisa ser\u00e1 interrompida assim que localiza o primeiro arquivo no diret\u00f3rio do usu\u00e1rio. Por exemplo, se tem o arquivo ~/.bash_login e ~/.bash_profile no seu diret\u00f3rio de usu\u00e1rio, processar\u00e1 o /etc/profile e ~/.bash_profile , mas nunca processar\u00e1 o ~/.bash_login . Caso o Bash seja carregado atrav\u00e9s de um shell que n\u00e3o requer autentica\u00e7\u00e3o (um terminal no modo gr\u00e1fico), o seguinte arquivo \u00e9 executado: ~/.bashrc.","title":"Arquivos de ambiente"},{"location":"linux/shell/bash/#estruturas-da-linguagem","text":"","title":"Estruturas da linguagem"},{"location":"linux/shell/bash/#comentarios","text":"Coment\u00e1rio de uma linha. # Coment\u00e1rio de uma linha N\u00e3o h\u00e1 suporte para coment\u00e1rio de bloco, mas uma alternativa seria usar here document . : << \"END\" Conte\u00fado do bloco. Tudo aqui ser\u00e1 tratado como um bloco de comandos que ser\u00e1 enviado para : END","title":"Coment\u00e1rios"},{"location":"linux/shell/bash/#aspas","text":"Aspas s\u00e3o usadas para delimitar uma string ou um par\u00e2metro. Sem o uso de aspas \u00e9 necess\u00e1rios usar a barra invertida para escapar os espa\u00e7os. COMANDO \"arquivo de teste.txt\" COMANDO 'arquivo de teste.txt' # Equivalente COMANDO arquivo \\ de \\ teste.txt # Equivalente Aspas duplas s\u00e3o usadas se o conte\u00fado possui vari\u00e1veis que ser\u00e3o substitu\u00eddas por seu valor.","title":"Aspas"},{"location":"linux/shell/bash/#quebra-de-linha","text":"Quebrar linhas para comandos grandes. printf \"Imprimindo: %s %s\\n\" \\ $( echo \"Ol\u00e1\" ) \\ $( echo \"Mundo!\" ) # Imprimindo: Ol\u00e1 Mundo!","title":"Quebra de linha"},{"location":"linux/shell/bash/#expansao-de-nomes-de-arquivos","text":"O Bash suporta uma s\u00e9rie de nota\u00e7\u00f5es especiais, conhecidas como expans\u00f5es, para passar tipos de argumentos comumente usados em programas. COMANDO arquivo1.txt arquivo2.txt arquivo3.txt COMANDO arquivo { 1 ,2,3 } .txt # Equivalente COMANDO arquivo { 1 ..3 } .txt # Equivalente","title":"Expans\u00e3o de nomes de arquivos"},{"location":"linux/shell/bash/#variaveis","text":"Para atribuir um valor para uma vari\u00e1vel \u00e9 utilizado o sinal \" = \" e n\u00e3o deve haver espa\u00e7os nem antes nem depois.","title":"Vari\u00e1veis"},{"location":"linux/shell/bash/#string","text":"As aspas duplas s\u00e3o usadas se o conte\u00fado da string cont\u00e9m vari\u00e1veis que devem retornar seu valor. Sem o uso de aspas \u00e9 necess\u00e1rios escapar os espa\u00e7os. VAR = 'string simples' VAR = \"string com vari\u00e1vel $VAR \" VAR = string \\ simples VAR = string \\ com \\ vari\u00e1vel \\ \" $VAR \" Concatenar strings. VAR = \"Hello\" VAR += \" World\" echo \" $VAR \" # Hello World Concatenar valor de duas vari\u00e1veis string. VAR1 = \"Hello\" VAR2 = \"World\" VAR3 = \" $VAR1 $VAR2 \" echo \" $VAR3 \" # Hello World # ou VAR1 = \"Hello\" VAR2 = \" $VAR1 World\" echo \" $VAR2 \" # Hello World Retornar o tamanho de uma vari\u00e1vel string. VAR = 'Hello World' echo ${# VAR } # 11 Para retornar uma substrings segue-se o padr\u00e3o \" ${string:posicao:tamanho} \". Se a posi\u00e7\u00e3o for negativa (informada a partir do fim), deve usar par\u00eanteses ou um espa\u00e7o ap\u00f3s \" : \" dois pontos. Se n\u00e3o for informado o tamanho, ser\u00e1 considerado at\u00e9 o final da string. Se n\u00e3o for informado a posi\u00e7\u00e3o, ser\u00e1 considerado a posi\u00e7\u00e3o inicial. VAR = 0123456789 echo ${ VAR : -3 } # 789 echo ${ VAR :(-3) } # 789 echo ${ VAR :- 3 } # 0123456789 (n\u00e3o funciona) echo ${ VAR : -3: 1 } # 7 echo ${ VAR : 3 : 2 } # 34 echo ${ VAR : 5 } # 56789 echo ${ VAR :: 3 } # 012 Para substituir caracteres em strings segue-se o padr\u00e3o \" ${string/substring/substituicao} \" para substituir somente a primeira substring encontrada ou \" ${string//substring/substituicao} \" para substituir todas as ocorr\u00eancias encontradas. VAR = abcb VAR = ${ VAR /b/x } # axcb echo $VAR VAR = abcb VAR = ${ VAR //b/x } # axcx echo $VAR","title":"String"},{"location":"linux/shell/bash/#inteiro","text":"Opera\u00e7\u00f5es de inteiros, usando par\u00eanteses duplos. echo $(( 3 + 4 * ( 5 - 1 ) )) # 19 echo $(( 10 ** 2 )) # 100 VAR = 1 (( VAR += 2 )) echo $VAR # 3 Usando o comando \" bc \" para valores grandes. echo 2 ^100 | bc # ou atribuir para uma vari\u00e1vel VAR = $( echo '2^100' | bc -l ) echo $VAR Ou simplesmente usando a fun\u00e7\u00e3o Bash \" let \". N\u00e3o pode haver espa\u00e7o entre os operadores, a n\u00e3o ser se escapar o espa\u00e7o ou usar aspas. let VAR = 5 +4 echo $VAR # 9 let VAR++ echo $VAR # 10 let VAR = VAR**2 echo $VAR # 100 let VAR = \"5 - 2\" # 3 A fun\u00e7\u00e3o Bash \" expr \" \u00e9 semelhante a \" let \" mas apenas imprime o resultado. Precisa haver espa\u00e7o entre os operadores. expr 5 + 4 # 9","title":"Inteiro"},{"location":"linux/shell/bash/#float","text":"Para realizar opera\u00e7\u00f5es com ponto flutuante geralmente utiliza o comando \" bc \". O par\u00e2metro \" -l \" \u00e9 passado para usar a biblioteca matem\u00e1tica para manipular float se n\u00e3o for soma ou subtra\u00e7\u00e3o. Por padr\u00e3o o par\u00e2metro usa precis\u00e3o de 20 casas, portanto para outros valores \u00e9 necess\u00e1rio informar a escala. echo '3.4 + 2.2' | bc # 5.6 echo '5.5 / 2' | bc # 2 echo 'scale=2; 5.5 / 2' | bc -l # 2.75 # ou atribuir para uma vari\u00e1vel VAR = $( echo '5.5 / 2' | bc -l ) echo $VAR","title":"Float"},{"location":"linux/shell/bash/#comando","text":"Atribui\u00e7\u00e3o de comandos. VAR = ` comando -parametro ` # ou VAR = $( comando -parametro ) Executar um comando armazenado em vari\u00e1vel. VAR = \"ls -l\" eval \" $VAR \"","title":"Comando"},{"location":"linux/shell/bash/#vetor","text":"Concatena\u00e7\u00e3o em vetores. Para imprimir todos valores do vetor pode-se usar \" * \" ou \" @ \". O espa\u00e7o separa os elementos de um vetor. ARRAY =( 1 2 ) echo ${ ARRAY [@] } # 1 2 ARRAY +=( 3 ) echo ${ ARRAY [@] } # 1 2 3 echo ${ ARRAY [0] } # 1 echo ${ ARRAY [1] } # 2 echo ${ ARRAY [2] } # 3 Remover elemento do vetor. ARRAY =( 1 2 3 ) unset ARRAY [ 1 ] echo ${ ARRAY [@] } # 1 3 Criar vetor associativo usando \" declare -A \". declare -A VAR VAR =([ a ]= 0 [ b ]= 1 [ c ]= 2 ) echo ${ VAR [b] } # 1 VAR [ d ]= 3 echo ${ VAR [c] } ${ VAR [d] } # 2 3 unset VAR [ b ] echo ${ VAR [*] } # 0 2 3","title":"Vetor"},{"location":"linux/shell/bash/#funcao","text":"Para obter o retorno de uma fun\u00e7\u00e3o \u00e9 usado \" $( ) \". function funcao { echo Ol\u00e1 } VAR = $( funcao ) echo \" $VAR \" # Ol\u00e1","title":"Fun\u00e7\u00e3o"},{"location":"linux/shell/bash/#variaveis-especiais","text":"Vari\u00e1vel Descri\u00e7\u00e3o $0 O nome do script Bash. $1 - $9 Os primeiros 9 argumentos passados para o script. $# Quantos argumentos foram passados para o script. $@ Todos os argumentos passados para o script. $? O status de sa\u00edda da \u00faltima fun\u00e7\u00e3o ou processo executado. $$ Id do processo do script atual. $USER Usu\u00e1rio que est\u00e1 executando o script. $HOSTNAME Hostname da m\u00e1quina que est\u00e1 executando o script. $SECONDS Quantos segundos o script est\u00e1 executando. $RANDOM Retorna um n\u00famero rand\u00f4mico. $LINENO Retorna a linha que est\u00e1 sendo executada.","title":"Vari\u00e1veis especiais"},{"location":"linux/shell/bash/#impressao","text":"Imprimir o conte\u00fado de uma vari\u00e1vel. echo $VAR Se a vari\u00e1vel \u00e9 uma string que possui quebra de linha ou tabula\u00e7\u00f5es \u00e9 necess\u00e1rio usar aspas duplas. VAR = \"Ol\u00e1 Mundo\" echo \" $VAR \" O comando \" tput \" pode ser usado para imprimir em uma posi\u00e7\u00e3o espec\u00edfica da tela. colunas = $( tput cols ) # n\u00famero colunas terminal linhas = $( tput lines ) # n\u00famero linhas terminal mensagem = $@ tamanho_mensagem = ${# mensagem } metade_tamanho_mensagem = $(( $tamanho_mensagem / 2 )) metade_linhas = $(( $linhas / 2 )) metade_colunas = $(( ( $colunas / 2 ) - $metade_tamanho_mensagem )) tput clear # limpar terminal tput cup $metade_linhas $metade_colunas # local de impress\u00e3o tput bold echo $@ tput sgr0 tput cup $( tput lines ) 0","title":"Impress\u00e3o"},{"location":"linux/shell/bash/#funcoes-e-escopo-de-variaveis","text":"Para declarar vari\u00e1veis locais \u00e9 usado a palavra-chave \" local \". Par\u00eanteses em fun\u00e7\u00f5es s\u00e3o opcionais. VAR = 'Vari\u00e1vel Global' function funcao { local VAR = 'Var\u00e1vel Local' echo $VAR } echo $VAR # 'Vari\u00e1vel Global' funcao # 'Var\u00e1vel Local' echo $VAR # 'Vari\u00e1vel Global' Os par\u00e2metros passados para as fun\u00e7\u00f5es s\u00e3o acessados da mesma forma que os par\u00e2metros passados para executar o script \" $ + n\u00famero \". function funcao { echo $1 # oi } funcao oi O \" return \" tamb\u00e9m pode ser usado, mas serve apenar para retornar valores num\u00e9ricos que podem ser usados como status da execu\u00e7\u00e3o. Para obter o valor retornado pela \u00faltima fun\u00e7\u00e3o \u00e9 usado \" $? \". Normalmente, um status de retorno de 0 indica que tudo foi feito com sucesso. Um valor n\u00e3o zero indica que ocorreu um erro. function funcao { return 5 } funcao echo $? # 5 Para retornar algum valor, \u00e9 usado o pr\u00f3prio \" echo\" que pode ser capturado por \" $( )\" . function funcao { echo Ol\u00e1 } VAR = $( funcao ) echo \" $VAR \" # Ol\u00e1 Para criar uma fun\u00e7\u00e3o com o mesmo nome de um comando \u00e9 usado a palavra-chave \" command \". ls { command ls -lh # chamar\u00e1 o comando ls } ls","title":"Fun\u00e7\u00f5es e escopo de vari\u00e1veis"},{"location":"linux/shell/bash/#fluxos-de-entrada-saida-e-erro","text":"Os fluxos padr\u00e3o s\u00e3o canais de entrada/sa\u00edda entre um programa de computador e o seu ambiente (tipicamente um terminal de texto) que s\u00e3o pr\u00e9-conectados no in\u00edcio da execu\u00e7\u00e3o. Entrada padr\u00e3o (stdin): \\ A entrada padr\u00e3o indica que o dado (frequentemente texto) est\u00e1 indo para um programa. Sa\u00edda padr\u00e3o (stdout): \\ A sa\u00edda padr\u00e3o \u00e9 um fluxo onde o programa escreve dados de sa\u00edda. Erro padr\u00e3o (stderr): \\ O erro padr\u00e3o \u00e9 um outro tipo de sa\u00edda padr\u00e3o, \u00e9 utilizada pelos programas para envio de mensagens de erro ou de diagn\u00f3stico. Formas de capturar os fluxos padr\u00f5es de I/O dos processos executados: arquivo para stdin COMANDO < ARQUIVO stdout para arquivo COMANDO > ARQUIVO # ou COMANDO 1 > ARQUIVO stderr para arquivo COMANDO 2 > ARQUIVO stdout e stderr para arquivo COMANDO & > ARQUIVO stdout para o stderr COMANDO 1 > & 2 stderr para o stdout COMANDO 2 > & 1 Obs: Para anexar a sa\u00edda ao final do arquivo, ao inv\u00e9s de sobreescrev\u00ea-lo \u00e9 usado >> ao inv\u00e9s de > .","title":"Fluxos de entrada, sa\u00edda e erro"},{"location":"linux/shell/bash/#here-document","text":"Um here document \u00e9 um bloco de c\u00f3digo de prop\u00f3sito especial. Ele usa uma forma de redirecionamento de I/O para alimentar um programa interativo ou um comando. Passar o conte\u00fado de uma vari\u00e1vel como entrada para outro comando. COMANDO << \" $VARIAVEL \" Passar uma lista de comandos como entrada parar outro comando. COMANDO << DELIMITADOR comando1 \"$VAR\" comando2 DELIMITADOR Para n\u00e3o substituir $VAR pelo valor da vari\u00e1vel, basta usar aspas no delimitador inicial. COMANDO << \"DELIMITADOR\" comando1 \" $VAR \" comando2 DELIMITADOR","title":"Here document"},{"location":"linux/shell/bash/#passagem-de-parametros","text":"S\u00e3o usados os caracteres especiais $ + n\u00famero . $ ./script.sh a b c echo \" $1 \" # a echo \" $2 \" # b echo \" $3 \" # c \" Obs: \" As aspas duplas s\u00e3o usadas para obter quebra de linhas ou tabula\u00e7\u00f5es caso sejam fornecidas.","title":"Passagem de par\u00e2metros"},{"location":"linux/shell/bash/#estrutura-condicional","text":"O teste condicional pode ser definido entre os delimitadores [], [[ ]] e (( )). Deve haver um espa\u00e7o ente o teste condicional e os delimitadores. Os colchetes simples [ ] permitem comandos condicionais mais limitado, compat\u00edveis com o POSIX. Enquanto que os colchetes duplos [[ ]] \u00e9 uma extens\u00e3o mais completa que foi adotada do ksh88 e possui algumas vantagens como: N\u00e3o \u00e9 necess\u00e1rio escapar uma var\u00e1vel que contenha quebra de linhas ou espa\u00e7os. if [ -f \" $file \" ] # contra if [[ -f $file ]] Permite o uso de && ou || para compara\u00e7\u00f5es boleanas e uso de par\u00eanteses. if [ INTEIRO -eq 1 ] || [ INTEIRO -eq 2 ] # contra if [[ INTEIRO -eq 1 || INTEIRO -eq 2 ]] O uso de < ou > sem escape para compara\u00e7\u00f5es com strings. if [ STRING1 \\> STRING2 ] # contra if [[ STRING1 > STRING2 ]] Permite a compara\u00e7\u00e3o com express\u00f5es regulares if [[ $RESPOSTA = ~ ^s ( im ) ?$ ]] # ou if [[ $RESPOSTA = y* ]] Os par\u00eanteses duplos (( )) permitem o uso dos operadores para as opera\u00e7\u00f5es aritm\u00e9ticas de forma mais simples ( <, >, >=, <=, !=, ==). if [[ $VAR1 -ge 5 || $VAR2 -eq -1 ]] # contra if (( $VAR1 > = 5 || $VAR2 == -1 )) [[ 01 -eq 1 ]] e (( 01 == 1 )) # ambos verdadeiros (inteiros) [[ 01 == 1 ]] e [ 01 = 1 ] # ambos falsos (string) (( 01 -eq 1 )) e (( 01 = 1 )) # ambos retornam erro Para o teste das condi\u00e7\u00f5es, ser\u00e1 retornado o estado de sa\u00edda zero (sucesso) se a condi\u00e7\u00e3o \u00e9 verdadeira e estado de sa\u00edda n\u00e3o zero (falha) se a condi\u00e7\u00e3o \u00e9 falsa. T1 = \"a\" T2 = \"b\" if [[ \" $T1 \" = \" $T2 \" ]] ; then echo Express\u00e3o verdadeira elif [[ \" $T1 \" > \" $T2 \" ]] ; then echo Express\u00e3o verdadeira else echo Express\u00e3o falsa # entra aqui fi Condicionais combinadas. if [[ -e origem.txt ]] && ! [[ -e destino.txt ]] ; then # Se origem.txt existe e destino.txt n\u00e3o existe fi Obs: Para usar mais de um comando na mesma linha, \u00e9 usado o \" ; \". Estrutura \"case\". VAR = segundo case $VAR in primeiro ) echo 1 ;; segundo ) echo 2 # 2 ;; terceiro ) echo 3 ;; * ) echo desconhecido ;; esac","title":"Estrutura Condicional"},{"location":"linux/shell/bash/#operadores-condicionais","text":"","title":"Operadores condicionais"},{"location":"linux/shell/bash/#operadores-condicionais-para-arquivos","text":"Express\u00e3o Descri\u00e7\u00e3o -e ARQUIVO Se o arquivo existe. -d ARQUIVO Se o arquivo existe e \u00e9 um diret\u00f3rio. -f ARQUIVO Se o arquivo existe e \u00e9 um arquivo comum. -s ARQUIVO Se o arquivo n\u00e3o possui tamanho 0 (zero). -r ARQUIVO Se o arquivo possui permiss\u00e3o de leitura para o usu\u00e1rio. -w ARQUIVO Se o arquivo possui permiss\u00e3o de escrita para o usu\u00e1rio. -w ARQUIVO Se o arquivo possui permiss\u00e3o de execu\u00e7\u00e3o para o usu\u00e1rio.","title":"Operadores condicionais para arquivos"},{"location":"linux/shell/bash/#operadores-condicionais-para-inteiros","text":"Express\u00e3o Descri\u00e7\u00e3o INTEIRO1 -lt INTEIRO2 Se INTEIRO1 < INTEIRO2. INTEIRO1 -gt INTEIRO2 Se INTEIRO1 > INTEIRO2. INTEIRO1 -le INTEIRO2 Se INTEIRO1 <= INTEIRO2. INTEIRO1 -ge INTEIRO2 Se INTEIRO1 >= INTEIRO2. INTEIRO1 -eq INTEIRO2 Se INTEIRO1 == INTEIRO2. INTEIRO1 -ne INTEIRO2 Se INTEIRO1 != INTEIRO2. Obs: Usando Par\u00eanteses duplos (( )) \u00e9 poss\u00edvel usar os operadores tradicionais <, >, >=, <=, !=, ==.","title":"Operadores condicionais para inteiros"},{"location":"linux/shell/bash/#operadores-condicionais-para-strings","text":"Express\u00e3o Descri\u00e7\u00e3o STRING1 == STRING2 Se STRING1 == STRING2. STRING1 != STRING2 Se STRING1 != STRING2. STRING1 \\< STRING2 Se STRING1 < STRING2 ordem ASCII. STRING1 \\> STRING2 Se STRING1 > STRING2 ordem ASCII. STRING =~ PADRAO Se a string casa com o padr\u00e3o. -n STRING Se a string n\u00e3o \u00e9 vazia. -z STRING Se a string \u00e9 vazia.","title":"Operadores condicionais para strings"},{"location":"linux/shell/bash/#operadores-condicionais-para-boleanos","text":"Express\u00e3o Descri\u00e7\u00e3o BOLEANO && valor l\u00f3gico \"e\" BOLEANO || valor l\u00f3gico \"ou\"","title":"Operadores condicionais para boleanos"},{"location":"linux/shell/bash/#operadores-condicionais-io","text":"Express\u00e3o Descri\u00e7\u00e3o -t <0, 1> Se o stdin [-t 0] ou o stdout [-t 1] est\u00e1 sendo feito pelo terminal.","title":"Operadores condicionais I/O"},{"location":"linux/shell/bash/#estrutura-de-repeticao","text":"Usando \" for \" for file in $( ls ) ; do echo \"item: $file \" done for i in { 1 ..20 } ; do echo \" $i \" done CORES =( 'rosa' 'verde lima' 'amarelo' ) for COR in \" ${ CORES [@] } \" ; do echo \" $COR \" done Usando \" while \". Realiza o comando enquanto a condi\u00e7\u00e3o for verdadeira. while [[ -e arquivo.txt ]] ; do sleep 3 done Usando \" until \". Realiza o comando enquanto a condi\u00e7\u00e3o for falsa. O mesmo que usar o \" while \" com \" ! \". until [[ -e arquivo.txt ]] ; do sleep 3 done Todas as estruturas de repeti\u00e7\u00e3o suporta \"continue\" e \"break\". A estrutura \" select \" pode ser usada para criar menus. names = 'Maria Jos\u00e9 Pedro Laura *Sair' PS3 = 'Selecione uma pessoa: ' select name in $names do if [ $name == 'Sair' ] ; then echo Bye break fi echo Ol\u00e1 $name done","title":"Estrutura de repeti\u00e7\u00e3o"},{"location":"linux/shell/bash/#funcoes-shell","text":"Esse recurso permite agrupar uma sequ\u00eancia de comandos em um \u00fanico comando. get () { if [[ -t 0 ]] ; then read -r -p 'Password:' -s \" $1 \" && echo else return 1 fi } get PASSWORD && echo \" $PASSWORD \" O comando \" read \" armazena a entrada do usu\u00e1rio em vari\u00e1veis. A vari\u00e1vel \"PASSWORD\" \u00e9 passada como par\u00e2metro (\"$1\")e \" read \" ir\u00e1 armazenar a entrada do usu\u00e1rio na vari\u00e1vel.","title":"Fun\u00e7\u00f5es Shell"},{"location":"linux/shell/bash/#subshell","text":"Um subshell recebe uma c\u00f3pia do \"ambiente de execu\u00e7\u00e3o\" do contexto circundante, que inclui quaisquer vari\u00e1veis, entre outras coisas; mas as altera\u00e7\u00f5es que o subshell faz para o ambiente de execu\u00e7\u00e3o n\u00e3o s\u00e3o copiadas de volta quando o subshell \u00e9 conclu\u00eddo. VAR1 = ol\u00e1 echo \" $VAR1 \" # ol\u00e1 ( echo \" $VAR1 \" # ol\u00e1 VAR2 = mundo echo \" $VAR2 \" # mundo VAR1 = cruel echo \" $VAR1 \" # cruel ) echo \" $VAR2 \" # nada, pois n\u00e3o existe echo \" $VAR1 \" # ol\u00e1","title":"Subshell"},{"location":"linux/shell/bash/#interacao-com-o-usuario","text":"Para obter a entrada do usu\u00e1rio, pode-se usar o comando \" read \". echo Entre com seu primeiro e \u00faltimo nome: read FN LN echo \"Ol\u00e1 $LN $FN !\"","title":"Intera\u00e7\u00e3o com o usu\u00e1rio"},{"location":"linux/shell/bash/#referencias","text":"https://pt.wikipedia.org/wiki/Bash https://en.wikipedia.org/wiki/Bash_(Unix_shell) https://devhints.io/bash http://tldp.org/LDP/abs/html/index.html","title":"Refer\u00eancias"},{"location":"linux/shell/dash/","text":"Dash \u00b6 O shell Dash, tamb\u00e9m conhecido como Debian Almquist Shell . Dash implementa o Single UNIX Specification, suportando apenas recursos compat\u00edveis com POSIX. O Dash geralmente \u00e9 usado apenas como shell n\u00e3o-interativo.","title":"Dash"},{"location":"linux/shell/dash/#dash","text":"O shell Dash, tamb\u00e9m conhecido como Debian Almquist Shell . Dash implementa o Single UNIX Specification, suportando apenas recursos compat\u00edveis com POSIX. O Dash geralmente \u00e9 usado apenas como shell n\u00e3o-interativo.","title":"Dash"},{"location":"linux/shell/gnome-terminal/","text":"Gnome terminal \u00b6 GNOME Terminal \u00e9 um emulador de terminal para o ambiente GNOME escrito por Havoc Pennington. Configura\u00e7\u00f5es \u00b6 Autocompletar case-insensitive \u00b6 echo 'set completion-ignore-case On' >> ~/.inputrc Informa\u00e7\u00f5es Git (Shell Bash) \u00b6 Editar o arquivo ~/.bashrc e adicionar os comandos abaixo: parse_git_branch () { git branch 2 > /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/' } PS1 = '\\[\\033[01;96m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;37m\\]\\w\\[\\033[01;33m\\]$(parse_git_branch)\\[\\033[00m\\]\\$ '","title":"Gnome terminal"},{"location":"linux/shell/gnome-terminal/#gnome-terminal","text":"GNOME Terminal \u00e9 um emulador de terminal para o ambiente GNOME escrito por Havoc Pennington.","title":"Gnome terminal"},{"location":"linux/shell/gnome-terminal/#configuracoes","text":"","title":"Configura\u00e7\u00f5es"},{"location":"linux/shell/gnome-terminal/#autocompletar-case-insensitive","text":"echo 'set completion-ignore-case On' >> ~/.inputrc","title":"Autocompletar case-insensitive"},{"location":"linux/shell/gnome-terminal/#informacoes-git-shell-bash","text":"Editar o arquivo ~/.bashrc e adicionar os comandos abaixo: parse_git_branch () { git branch 2 > /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/' } PS1 = '\\[\\033[01;96m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;37m\\]\\w\\[\\033[01;33m\\]$(parse_git_branch)\\[\\033[00m\\]\\$ '","title":"Informa\u00e7\u00f5es Git (Shell Bash)"},{"location":"linux/shell/linux-shell/","text":"Linux shell \u00b6 O shell \u00e9 o interpretador de comandos dos sistemas tipo Unix (Unix-like). Na realidade, o shell \u00e9 apenas um arquivo execut\u00e1vel armazenado em /bin , como por exemplo, o Bash em /bin/bash . Alguns exemplos de shell: Bourne Shell C-shell Tsch Ksh Bash Dash Zsh Fish O shell padr\u00e3o do sistema \u00e9 referenciado pelo link /bin/sh , e pode ser encontrado executando o comando: file -h /bin/sh # ou readlink -f -- /bin/sh Nas distribui\u00e7\u00f5es baseadas em Debian, /bin/sh \u00e9 um link para o shell Dash, localizado em /usr/bin/dash . Entretanto, o shell dos emuladores de terminal nestas distribui\u00e7\u00f5es \u00e9 o Bash, localizado em /usr/bin/bash . Os shells, embora pequenos em tamanho, s\u00e3o programas sofisticados e poderosos que s\u00e3o usados para: execu\u00e7\u00e3o de programas, substitui\u00e7\u00e3o de vari\u00e1veis e de nomes de arquivo, entrada/sa\u00edda (I/O), redirecionamento (ou seja, envio de sa\u00edda de um programa para um destino diferente de seu destino padr\u00e3o, incluindo para ser usado como entrada para outro programa), controle do ambiente do usu\u00e1rio (por exemplo, alterando o shell ou o prompt do shell) e servindo como uma linguagem de programa\u00e7\u00e3o (ou seja, um linguagem que pode ser usada para escrever scripts em shell). Shells em sistemas tipo Unix s\u00e3o incomuns por serem tanto uma linguagem de comando interativa quanto uma linguagem de programa\u00e7\u00e3o. O shell \u00e9 usado de forma iterativa pelo usu\u00e1rio atrav\u00e9s de um terminal. Um terminal \u00e9 um dispositivo de entrada/sa\u00edda que permite a intera\u00e7\u00e3o com um computador. Nos prim\u00f3rdios do Unix, um terminal era um dispositivo chamado teletipo (em ingl\u00eas, teletypewriter ), identificado na forma abreviada como tty . Teletypewriter Na terminologia Unix, um tty \u00e9 um tipo particular de arquivo de dispositivo que implementa uma s\u00e9rie de comandos adicionais ( input/output control - ioctls) al\u00e9m de leitura e escrita. Portanto, o arquivo que representa um terminal \u00e9, tradicionalmente, chamado de arquivo tty e s\u00e3o localizados no diret\u00f3rio /dev . De forma geral, podemos dizer que terminal \u00e9 sin\u00f4nimo de tty. Alguns ttys s\u00e3o fornecidos pelo kernel para acesso a dispositivos de hardware, como por exemplo, uma interface serial. Outros ttys, s\u00e3o fornecidos para acesso a vers\u00f5es virtuais de um terminal f\u00edsico. No modo de texto, onde temos somente interface de linha de comando (CLI), estes terminais virtuais costumam ser chamados de consoles virtuais . No modo gr\u00e1fico (GUI), onte estes terminais est\u00e3o sendo executados em janelas, estes terminais virtuais s\u00e3o chamados de pseudo-ttys e s\u00e3o fornecidos por programas denominados emuladores de terminal . Alguns exemplos de emuladores de terminal: Termite Terminator Tmux Gnome Terminal Xterm PuTTy KiTTy Tipos de terminais e seus arquivos de dispositivo pseudo-tty Surge quando o shell \u00e9 aberto num ambiente gr\u00e1fico, como por exemplo, ao abrir um emulador de terminal. Normalmente os usu\u00e1rios veem esse como pts/x onde X \u00e9 um n\u00famero, definido pela ordem em que diversos usu\u00e1rios logaram na m\u00e1quina. Se o sistema pertence \u00e1 1 pessoa, este ser\u00e1 o pts/1. tty Um terminal virtual que surge no comando CTRL + ALT + F1 na maioria dos sistemas tipo Unix. Tamb\u00e9m s\u00e3o conhecidos como consoles virtuais. S\u00e3o em tela cheia e exibem o sistema na tela. Sua numera\u00e7\u00e3o come\u00e7a em 1, pois o tty0 \u00e9 quem faz a comunica\u00e7\u00e3o direta entre sistema e placa de v\u00eddeo e n\u00e3o aparece para o usu\u00e1rio. Por exemplo, tty1, tty2, etc. ttyS Usado para comunicar com o sistema via portas seriais RS-232. Praticamente n\u00e3o s\u00e3o mais utilizadas devido ao uso atual das portas USB. S\u00e3o numeradas como ttyS1, ttyS2, etc. Para saber qual o arquivo de dispositivo do terminal atual, execute um dos comandos: tty who Reservas de terminais Normalmente \u00e9 poss\u00edvel alternar entre os diversos TTY usando os comandos CTRL + ALT + F(1-6) , enquanto F7 e F8 representam os terminais reservados para o servidor gr\u00e1fico, como o XOrg ou Wayland. Sob \"o mesmo teclado, mouse e monitor\" \u00e9 poss\u00edvel logar at\u00e9 7 ou 8 usu\u00e1rios dependendo da distribui\u00e7\u00e3o Linux. Por\u00e9m com a conex\u00e3o remota via SSH, \u00e9 poss\u00edvel at\u00e9 4096 usu\u00e1rios simult\u00e2neos logados e usando o sistema Os terminais virtuais executam o shell que por sua vez disponibiliza um prompt de shell, tamb\u00e9m conhecido como prompt de comando que \u00e9 um caractere ou conjunto de caracteres no in\u00edcio da linha de comando que indica que o shell est\u00e1 pronto para receber comandos. Geralmente \u00e9, ou termina com $ , ou # no caso de ser um usu\u00e1rio administrativo (root). De certa forma, podemos dizer os terminais virtuais apenas fornecem uma interface de I/O para que o usu\u00e1rio forne\u00e7a os comandos para o prompt de comando, e visualize as sa\u00eddas geradas por estes comandos. O hist\u00f3rico de entradas e a op\u00e7\u00e3o para auto completar comandos, tamb\u00e9m s\u00e3o funcionalidades fornecidas pelo shell. Gnome Terminal Para saber qual o shell est\u00e1 sendo executado por um terminal, basta executar o comando: echo $SHELL Shell script \u00b6 Shell scripts ou scripts em shell s\u00e3o programas curtos escritos em uma linguagem de programa\u00e7\u00e3o shell que ser\u00e3o interpretados por um shell. Eles s\u00e3o extremamente \u00fateis para automatizar tarefas em sistemas tipo Unix. Um script em shell geralmente \u00e9 criado para sequ\u00eancias de comandos nas quais o usu\u00e1rio precisa usar repetidamente para economizar tempo. Como outros programas, o script em shell pode conter par\u00e2metros, vari\u00e1veis, estruturas de repeti\u00e7\u00e3o, estruturas de condi\u00e7\u00e3o, coment\u00e1rios, subcomandos, entre outros recursos. Um arquivo contendo um script em shell, geralmente possui a extens\u00e3o .sh . Exemplo de um script em shell para o shell Bash: #!/bin/bash directory = \"./mytest\" if [ -d $directory ] ; then echo \"Directory exists\" else echo \"Directory does not exists\" fi Refer\u00eancias \u00b6 http://www.linfo.org/shell.html http://www.linfo.org/terminal_window.html http://www.linfo.org/console.html https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con https://askubuntu.com/questions/506510/what-is-the-difference-between-terminal-console-shell-and-command-line https://unixuniverse.com.br/artigo/tty-teletypewriter https://searchdatacenter.techtarget.com/definition/shell-script","title":"Linux shell"},{"location":"linux/shell/linux-shell/#linux-shell","text":"O shell \u00e9 o interpretador de comandos dos sistemas tipo Unix (Unix-like). Na realidade, o shell \u00e9 apenas um arquivo execut\u00e1vel armazenado em /bin , como por exemplo, o Bash em /bin/bash . Alguns exemplos de shell: Bourne Shell C-shell Tsch Ksh Bash Dash Zsh Fish O shell padr\u00e3o do sistema \u00e9 referenciado pelo link /bin/sh , e pode ser encontrado executando o comando: file -h /bin/sh # ou readlink -f -- /bin/sh Nas distribui\u00e7\u00f5es baseadas em Debian, /bin/sh \u00e9 um link para o shell Dash, localizado em /usr/bin/dash . Entretanto, o shell dos emuladores de terminal nestas distribui\u00e7\u00f5es \u00e9 o Bash, localizado em /usr/bin/bash . Os shells, embora pequenos em tamanho, s\u00e3o programas sofisticados e poderosos que s\u00e3o usados para: execu\u00e7\u00e3o de programas, substitui\u00e7\u00e3o de vari\u00e1veis e de nomes de arquivo, entrada/sa\u00edda (I/O), redirecionamento (ou seja, envio de sa\u00edda de um programa para um destino diferente de seu destino padr\u00e3o, incluindo para ser usado como entrada para outro programa), controle do ambiente do usu\u00e1rio (por exemplo, alterando o shell ou o prompt do shell) e servindo como uma linguagem de programa\u00e7\u00e3o (ou seja, um linguagem que pode ser usada para escrever scripts em shell). Shells em sistemas tipo Unix s\u00e3o incomuns por serem tanto uma linguagem de comando interativa quanto uma linguagem de programa\u00e7\u00e3o. O shell \u00e9 usado de forma iterativa pelo usu\u00e1rio atrav\u00e9s de um terminal. Um terminal \u00e9 um dispositivo de entrada/sa\u00edda que permite a intera\u00e7\u00e3o com um computador. Nos prim\u00f3rdios do Unix, um terminal era um dispositivo chamado teletipo (em ingl\u00eas, teletypewriter ), identificado na forma abreviada como tty . Teletypewriter Na terminologia Unix, um tty \u00e9 um tipo particular de arquivo de dispositivo que implementa uma s\u00e9rie de comandos adicionais ( input/output control - ioctls) al\u00e9m de leitura e escrita. Portanto, o arquivo que representa um terminal \u00e9, tradicionalmente, chamado de arquivo tty e s\u00e3o localizados no diret\u00f3rio /dev . De forma geral, podemos dizer que terminal \u00e9 sin\u00f4nimo de tty. Alguns ttys s\u00e3o fornecidos pelo kernel para acesso a dispositivos de hardware, como por exemplo, uma interface serial. Outros ttys, s\u00e3o fornecidos para acesso a vers\u00f5es virtuais de um terminal f\u00edsico. No modo de texto, onde temos somente interface de linha de comando (CLI), estes terminais virtuais costumam ser chamados de consoles virtuais . No modo gr\u00e1fico (GUI), onte estes terminais est\u00e3o sendo executados em janelas, estes terminais virtuais s\u00e3o chamados de pseudo-ttys e s\u00e3o fornecidos por programas denominados emuladores de terminal . Alguns exemplos de emuladores de terminal: Termite Terminator Tmux Gnome Terminal Xterm PuTTy KiTTy Tipos de terminais e seus arquivos de dispositivo pseudo-tty Surge quando o shell \u00e9 aberto num ambiente gr\u00e1fico, como por exemplo, ao abrir um emulador de terminal. Normalmente os usu\u00e1rios veem esse como pts/x onde X \u00e9 um n\u00famero, definido pela ordem em que diversos usu\u00e1rios logaram na m\u00e1quina. Se o sistema pertence \u00e1 1 pessoa, este ser\u00e1 o pts/1. tty Um terminal virtual que surge no comando CTRL + ALT + F1 na maioria dos sistemas tipo Unix. Tamb\u00e9m s\u00e3o conhecidos como consoles virtuais. S\u00e3o em tela cheia e exibem o sistema na tela. Sua numera\u00e7\u00e3o come\u00e7a em 1, pois o tty0 \u00e9 quem faz a comunica\u00e7\u00e3o direta entre sistema e placa de v\u00eddeo e n\u00e3o aparece para o usu\u00e1rio. Por exemplo, tty1, tty2, etc. ttyS Usado para comunicar com o sistema via portas seriais RS-232. Praticamente n\u00e3o s\u00e3o mais utilizadas devido ao uso atual das portas USB. S\u00e3o numeradas como ttyS1, ttyS2, etc. Para saber qual o arquivo de dispositivo do terminal atual, execute um dos comandos: tty who Reservas de terminais Normalmente \u00e9 poss\u00edvel alternar entre os diversos TTY usando os comandos CTRL + ALT + F(1-6) , enquanto F7 e F8 representam os terminais reservados para o servidor gr\u00e1fico, como o XOrg ou Wayland. Sob \"o mesmo teclado, mouse e monitor\" \u00e9 poss\u00edvel logar at\u00e9 7 ou 8 usu\u00e1rios dependendo da distribui\u00e7\u00e3o Linux. Por\u00e9m com a conex\u00e3o remota via SSH, \u00e9 poss\u00edvel at\u00e9 4096 usu\u00e1rios simult\u00e2neos logados e usando o sistema Os terminais virtuais executam o shell que por sua vez disponibiliza um prompt de shell, tamb\u00e9m conhecido como prompt de comando que \u00e9 um caractere ou conjunto de caracteres no in\u00edcio da linha de comando que indica que o shell est\u00e1 pronto para receber comandos. Geralmente \u00e9, ou termina com $ , ou # no caso de ser um usu\u00e1rio administrativo (root). De certa forma, podemos dizer os terminais virtuais apenas fornecem uma interface de I/O para que o usu\u00e1rio forne\u00e7a os comandos para o prompt de comando, e visualize as sa\u00eddas geradas por estes comandos. O hist\u00f3rico de entradas e a op\u00e7\u00e3o para auto completar comandos, tamb\u00e9m s\u00e3o funcionalidades fornecidas pelo shell. Gnome Terminal Para saber qual o shell est\u00e1 sendo executado por um terminal, basta executar o comando: echo $SHELL","title":"Linux shell"},{"location":"linux/shell/linux-shell/#shell-script","text":"Shell scripts ou scripts em shell s\u00e3o programas curtos escritos em uma linguagem de programa\u00e7\u00e3o shell que ser\u00e3o interpretados por um shell. Eles s\u00e3o extremamente \u00fateis para automatizar tarefas em sistemas tipo Unix. Um script em shell geralmente \u00e9 criado para sequ\u00eancias de comandos nas quais o usu\u00e1rio precisa usar repetidamente para economizar tempo. Como outros programas, o script em shell pode conter par\u00e2metros, vari\u00e1veis, estruturas de repeti\u00e7\u00e3o, estruturas de condi\u00e7\u00e3o, coment\u00e1rios, subcomandos, entre outros recursos. Um arquivo contendo um script em shell, geralmente possui a extens\u00e3o .sh . Exemplo de um script em shell para o shell Bash: #!/bin/bash directory = \"./mytest\" if [ -d $directory ] ; then echo \"Directory exists\" else echo \"Directory does not exists\" fi","title":"Shell script"},{"location":"linux/shell/linux-shell/#referencias","text":"http://www.linfo.org/shell.html http://www.linfo.org/terminal_window.html http://www.linfo.org/console.html https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con https://askubuntu.com/questions/506510/what-is-the-difference-between-terminal-console-shell-and-command-line https://unixuniverse.com.br/artigo/tty-teletypewriter https://searchdatacenter.techtarget.com/definition/shell-script","title":"Refer\u00eancias"},{"location":"linux/shell/zsh/","text":"Z-shell \u00b6 O shell Z-shell ou Zsh, como tamb\u00e9m \u00e9 conhecido, se assemelha ao Korn shell (ksh); sua compatibilidade com o shell Korn de 1988 vem aumentando gradualmente. Ele inclui v\u00e1rios tipos de aprimoramentos, principalmente no editor de linha de comando, op\u00e7\u00f5es para personalizar seu comportamento, globbing de nome de arquivo, recursos para fazer com que os usu\u00e1rios do C-shell (csh) se sintam mais \u00e0 vontade e recursos extras extra\u00eddos do tcsh (outro shell personalizado). Instala\u00e7\u00e3o \u00b6 Instala\u00e7\u00e3o do Zsh em derivados Debian: sudo apt install zsh configura\u00e7\u00e3o \u00b6 Instalar o framework Oh-my-zsh : sh -c \" $( curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \" Para alterar o tema, configure o arquivo ~/.zshrc : ZSH_THEME = \"af-magic\" Para definir como o shell do emulador de terminal, nas configura\u00e7\u00f5es do terminal, adicione o comando zsh como o comando de inicializa\u00e7\u00e3o do terminal.","title":"Z-shell"},{"location":"linux/shell/zsh/#z-shell","text":"O shell Z-shell ou Zsh, como tamb\u00e9m \u00e9 conhecido, se assemelha ao Korn shell (ksh); sua compatibilidade com o shell Korn de 1988 vem aumentando gradualmente. Ele inclui v\u00e1rios tipos de aprimoramentos, principalmente no editor de linha de comando, op\u00e7\u00f5es para personalizar seu comportamento, globbing de nome de arquivo, recursos para fazer com que os usu\u00e1rios do C-shell (csh) se sintam mais \u00e0 vontade e recursos extras extra\u00eddos do tcsh (outro shell personalizado).","title":"Z-shell"},{"location":"linux/shell/zsh/#instalacao","text":"Instala\u00e7\u00e3o do Zsh em derivados Debian: sudo apt install zsh","title":"Instala\u00e7\u00e3o"},{"location":"linux/shell/zsh/#configuracao","text":"Instalar o framework Oh-my-zsh : sh -c \" $( curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \" Para alterar o tema, configure o arquivo ~/.zshrc : ZSH_THEME = \"af-magic\" Para definir como o shell do emulador de terminal, nas configura\u00e7\u00f5es do terminal, adicione o comando zsh como o comando de inicializa\u00e7\u00e3o do terminal.","title":"configura\u00e7\u00e3o"},{"location":"markdown/markdown/","text":"Markdown (GitHub Flavored Markdown) \u00b6 Markdown (GitHub Flavored Markdown) Links Cabe\u00e7alhos Estilos Cita\u00e7\u00f5es de texto Cita\u00e7\u00f5es de c\u00f3digo Links Listas Listas numeradas Lista de tarefas Par\u00e1grafos Escapar Quebra de Linha Tabelas V\u00eddeo (GitLab) Imagem (GitLab) Matem\u00e1tica (GitLab) Html Linha horizontal Notas rodap\u00e9 Refer\u00eancias (GitLab) Ferramentas Conversores Formata\u00e7\u00e3o Visualizadoreres Links Links \u00b6 Writing on GitLab Writing on GitHub Cabe\u00e7alhos \u00b6 # Cabe\u00e7alho n\u00edvel 1 (maior) ## Cabe\u00e7alho n\u00edvel 2 ###### Cabe\u00e7alho n\u00edvel 6 (menor) Estilos \u00b6 Negrito: **Texto em negrito**, __Texto em negrito__ It\u00e1lico: *Texto em it\u00e1lico*, _Texto em it\u00e1lico_ Tachado: ~~Texto tachado~~ Negrito e it\u00e1lico: **_Texto negrito e it\u00e1lico_** , _**Texto negrito e it\u00e1lico**_ Cita\u00e7\u00f5es de texto \u00b6 Como diria o meu av\u00f4: > \u00c1gua mole, pedra dura, tanto bate at\u00e9 que fura. Cita\u00e7\u00f5es de c\u00f3digo \u00b6 `# Texto sem formata\u00e7\u00e3o` `` ` Exemplo de **c\u00f3digo** que pode ser usado em *blocos* `` ` Links \u00b6 Somente link <http://localhost:3000> Texto com link [ Link para cabe\u00e7alho ]( #nome-do-cabecalho ) [ Link para linha ]( caminho/arquivo#L13 ) [ Link relativo ]( caminho/arquivo.md ) [ Link relativo ]( ./caminho/arquivo.md ) [ Link absoluto ]( /caminho/arquivo.md ) [ Link com texto ]( https://www.dominio.com ) Listas \u00b6 - Primeiro - Segundo - Primeiro filho - Segundo filho - Primeiro neto Listas numeradas \u00b6 1. Primeiro - Filho 1. Segundo 1. Terceiro Ou usar a nota\u00e7\u00e3o mais antiga 1. Primeiro - Filho 2. Segundo 3. Terceiro Se usar o modo antigo com markdownlint habilitado, \u00e9 necess\u00e1rio mudar a configura\u00e7\u00e3o para: \"MD029\" : { \"style\" : \"ordered\" } Lista de tarefas \u00b6 - [x] Tarefa 1 - [ ] Tarefa 2 - [ ] Tarefa 3 - [ ] \\(Se iniciar com par\u00eanteses tem que escapar) Par\u00e1grafos \u00b6 Basta deixar uma linha em branco Par\u00e1grafo 1 Par\u00e1grafo 2 Escapar \u00b6 Basta usar a barra \\*invertida\\* para escapar Quebra de Linha \u00b6 Basta quebrar a linha (ENTER) logo ap\u00f3s a barra \\*invertida\\* Evitar a separa\u00e7\u00e3o de palavras durante uma quebra de linha. <nobr>N\u00e3o serei quebrado</nobr> Tabelas \u00b6 | Primeiro cabe\u00e7alho | Segundo cabe\u00e7alho | | ------------------ | ----------------- | | Conte\u00fado c\u00e9lula | Conte\u00fado c\u00e9lula | | Conte\u00fado c\u00e9lula | Conte\u00fado c\u00e9lula | Tabela com formata\u00e7\u00e3o | Primeiro cabe\u00e7alho | Segundo cabe\u00e7alho | | --- | --- | | **c\u00e9lula negrito** | \\| Usando pipe | | *c\u00e9lula it\u00e1lico* | Conte\u00fado c\u00e9lula | Tabela com alinhamento | Alinhado na esquerda | Alinhado no centro | Alinhado na direita | | :--- | :---: | ---: | | Conte\u00fado | Conte\u00fado | Conte\u00fado | | Conte\u00fado | Conte\u00fado | Conte\u00fado | V\u00eddeo (GitLab) \u00b6 ![ Amostra V\u00eddeo ]( caminho/video.mp4 ) Imagem (GitLab) \u00b6 ![ alt text ]( caminho/img.png ) Matem\u00e1tica (GitLab) \u00b6 `` `math a^2+b^2=c^2 `` ` Html \u00b6 <dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl> Linha horizontal \u00b6 Tr\u00eas ou mais caracteres iguais a: *** --- ___ Notas rodap\u00e9 \u00b6 Este texto possui uma anota\u00e7\u00e3o de rodap\u00e9.[^1] [ ^1 ]: Este \u00e9 meu rodap\u00e9. Refer\u00eancias (GitLab) \u00b6 Entrada Refer\u00eancia @user_name specific user @group_name specific group @all entire team #123 issue !123 merge request $123 snippet ~123 label by ID ~bug one-word label by name ~\"feature request\" multi-word label by name %123 project milestone by ID %v1.23 one-word milestone by name %\"release candidate\" multi-word milestone by name 9ba12248 specific commit 9ba12248...b19a04f5 commit range comparison README repository file references README repository file line references Refer\u00eancia Cross-project Entrada Refer\u00eancia namespace/project#123 issue namespace/project!123 merge request namespace/project%123 project milestone namespace/project$123 snippet namespace/project@9ba12248 specific commit namespace/project@9ba12248...b19a04f5 commit range comparison namespace/project~\"Some label\" issues with given label Refer\u00eancia Cross-project (Anota\u00e7\u00e3o curta) Entrada Refer\u00eancia project#123 issue project!123 merge request project%123 project milestone project$123 snippet project@9ba12248 specific commit project@9ba12248...b19a04f5 commit range comparison project~\"Some label\" issues with given label Ferramentas \u00b6 Conversores \u00b6 Converter tabela HTML para tabela markdown http://markdowntables.mrvautin.com Converter geral para markdown https://pandoc.org/try Formata\u00e7\u00e3o \u00b6 Formatar tabela markdown de modo mais leg\u00edvel http://markdowntable.com Visualizadoreres \u00b6 Visualizador markdown https://dillinger.io Links \u00b6 Representa\u00e7\u00e3o de comandos de prompt http://docopt.org/ https://developers.google.com/style/code-syntax Convert texto em tabela https://jakebathman.github.io/Markdown-Table-Generator Gerador de tabela https://www.tablesgenerator.com/markdown_tables","title":"Markdown (GitHub Flavored Markdown)"},{"location":"markdown/markdown/#markdown-github-flavored-markdown","text":"Markdown (GitHub Flavored Markdown) Links Cabe\u00e7alhos Estilos Cita\u00e7\u00f5es de texto Cita\u00e7\u00f5es de c\u00f3digo Links Listas Listas numeradas Lista de tarefas Par\u00e1grafos Escapar Quebra de Linha Tabelas V\u00eddeo (GitLab) Imagem (GitLab) Matem\u00e1tica (GitLab) Html Linha horizontal Notas rodap\u00e9 Refer\u00eancias (GitLab) Ferramentas Conversores Formata\u00e7\u00e3o Visualizadoreres Links","title":"Markdown (GitHub Flavored Markdown)"},{"location":"markdown/markdown/#links","text":"Writing on GitLab Writing on GitHub","title":"Links"},{"location":"markdown/markdown/#cabecalhos","text":"# Cabe\u00e7alho n\u00edvel 1 (maior) ## Cabe\u00e7alho n\u00edvel 2 ###### Cabe\u00e7alho n\u00edvel 6 (menor)","title":"Cabe\u00e7alhos"},{"location":"markdown/markdown/#estilos","text":"Negrito: **Texto em negrito**, __Texto em negrito__ It\u00e1lico: *Texto em it\u00e1lico*, _Texto em it\u00e1lico_ Tachado: ~~Texto tachado~~ Negrito e it\u00e1lico: **_Texto negrito e it\u00e1lico_** , _**Texto negrito e it\u00e1lico**_","title":"Estilos"},{"location":"markdown/markdown/#citacoes-de-texto","text":"Como diria o meu av\u00f4: > \u00c1gua mole, pedra dura, tanto bate at\u00e9 que fura.","title":"Cita\u00e7\u00f5es de texto"},{"location":"markdown/markdown/#citacoes-de-codigo","text":"`# Texto sem formata\u00e7\u00e3o` `` ` Exemplo de **c\u00f3digo** que pode ser usado em *blocos* `` `","title":"Cita\u00e7\u00f5es de c\u00f3digo"},{"location":"markdown/markdown/#links_1","text":"Somente link <http://localhost:3000> Texto com link [ Link para cabe\u00e7alho ]( #nome-do-cabecalho ) [ Link para linha ]( caminho/arquivo#L13 ) [ Link relativo ]( caminho/arquivo.md ) [ Link relativo ]( ./caminho/arquivo.md ) [ Link absoluto ]( /caminho/arquivo.md ) [ Link com texto ]( https://www.dominio.com )","title":"Links"},{"location":"markdown/markdown/#listas","text":"- Primeiro - Segundo - Primeiro filho - Segundo filho - Primeiro neto","title":"Listas"},{"location":"markdown/markdown/#listas-numeradas","text":"1. Primeiro - Filho 1. Segundo 1. Terceiro Ou usar a nota\u00e7\u00e3o mais antiga 1. Primeiro - Filho 2. Segundo 3. Terceiro Se usar o modo antigo com markdownlint habilitado, \u00e9 necess\u00e1rio mudar a configura\u00e7\u00e3o para: \"MD029\" : { \"style\" : \"ordered\" }","title":"Listas numeradas"},{"location":"markdown/markdown/#lista-de-tarefas","text":"- [x] Tarefa 1 - [ ] Tarefa 2 - [ ] Tarefa 3 - [ ] \\(Se iniciar com par\u00eanteses tem que escapar)","title":"Lista de tarefas"},{"location":"markdown/markdown/#paragrafos","text":"Basta deixar uma linha em branco Par\u00e1grafo 1 Par\u00e1grafo 2","title":"Par\u00e1grafos"},{"location":"markdown/markdown/#escapar","text":"Basta usar a barra \\*invertida\\* para escapar","title":"Escapar"},{"location":"markdown/markdown/#quebra-de-linha","text":"Basta quebrar a linha (ENTER) logo ap\u00f3s a barra \\*invertida\\* Evitar a separa\u00e7\u00e3o de palavras durante uma quebra de linha. <nobr>N\u00e3o serei quebrado</nobr>","title":"Quebra de Linha"},{"location":"markdown/markdown/#tabelas","text":"| Primeiro cabe\u00e7alho | Segundo cabe\u00e7alho | | ------------------ | ----------------- | | Conte\u00fado c\u00e9lula | Conte\u00fado c\u00e9lula | | Conte\u00fado c\u00e9lula | Conte\u00fado c\u00e9lula | Tabela com formata\u00e7\u00e3o | Primeiro cabe\u00e7alho | Segundo cabe\u00e7alho | | --- | --- | | **c\u00e9lula negrito** | \\| Usando pipe | | *c\u00e9lula it\u00e1lico* | Conte\u00fado c\u00e9lula | Tabela com alinhamento | Alinhado na esquerda | Alinhado no centro | Alinhado na direita | | :--- | :---: | ---: | | Conte\u00fado | Conte\u00fado | Conte\u00fado | | Conte\u00fado | Conte\u00fado | Conte\u00fado |","title":"Tabelas"},{"location":"markdown/markdown/#video-gitlab","text":"![ Amostra V\u00eddeo ]( caminho/video.mp4 )","title":"V\u00eddeo (GitLab)"},{"location":"markdown/markdown/#imagem-gitlab","text":"![ alt text ]( caminho/img.png )","title":"Imagem (GitLab)"},{"location":"markdown/markdown/#matematica-gitlab","text":"`` `math a^2+b^2=c^2 `` `","title":"Matem\u00e1tica (GitLab)"},{"location":"markdown/markdown/#html","text":"<dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl>","title":"Html"},{"location":"markdown/markdown/#linha-horizontal","text":"Tr\u00eas ou mais caracteres iguais a: *** --- ___","title":"Linha horizontal"},{"location":"markdown/markdown/#notas-rodape","text":"Este texto possui uma anota\u00e7\u00e3o de rodap\u00e9.[^1] [ ^1 ]: Este \u00e9 meu rodap\u00e9.","title":"Notas rodap\u00e9"},{"location":"markdown/markdown/#referencias-gitlab","text":"Entrada Refer\u00eancia @user_name specific user @group_name specific group @all entire team #123 issue !123 merge request $123 snippet ~123 label by ID ~bug one-word label by name ~\"feature request\" multi-word label by name %123 project milestone by ID %v1.23 one-word milestone by name %\"release candidate\" multi-word milestone by name 9ba12248 specific commit 9ba12248...b19a04f5 commit range comparison README repository file references README repository file line references Refer\u00eancia Cross-project Entrada Refer\u00eancia namespace/project#123 issue namespace/project!123 merge request namespace/project%123 project milestone namespace/project$123 snippet namespace/project@9ba12248 specific commit namespace/project@9ba12248...b19a04f5 commit range comparison namespace/project~\"Some label\" issues with given label Refer\u00eancia Cross-project (Anota\u00e7\u00e3o curta) Entrada Refer\u00eancia project#123 issue project!123 merge request project%123 project milestone project$123 snippet project@9ba12248 specific commit project@9ba12248...b19a04f5 commit range comparison project~\"Some label\" issues with given label","title":"Refer\u00eancias (GitLab)"},{"location":"markdown/markdown/#ferramentas","text":"","title":"Ferramentas"},{"location":"markdown/markdown/#conversores","text":"Converter tabela HTML para tabela markdown http://markdowntables.mrvautin.com Converter geral para markdown https://pandoc.org/try","title":"Conversores"},{"location":"markdown/markdown/#formatacao","text":"Formatar tabela markdown de modo mais leg\u00edvel http://markdowntable.com","title":"Formata\u00e7\u00e3o"},{"location":"markdown/markdown/#visualizadoreres","text":"Visualizador markdown https://dillinger.io","title":"Visualizadoreres"},{"location":"markdown/markdown/#links_2","text":"Representa\u00e7\u00e3o de comandos de prompt http://docopt.org/ https://developers.google.com/style/code-syntax Convert texto em tabela https://jakebathman.github.io/Markdown-Table-Generator Gerador de tabela https://www.tablesgenerator.com/markdown_tables","title":"Links"},{"location":"markdown/mkdocs/","text":"MkDocs \u00b6 Erros e solu\u00e7\u00f5es \u00b6 Erros e solu\u00e7\u00f5es relacionados ao MkDocs. Caminhos relativos \u00b6 Por padr\u00e3o a configura\u00e7\u00e3o use_directory_urls \u00e9 true , ou seja, caso o arquivo chame pagina.md a url de acesso ser\u00e1 <site>\\pagina\\index.html e n\u00e3o <site>\\pagina.html . Portanto, usar o endere\u00e7o relativo no atributo src pode n\u00e3o funcionar. Solu\u00e7\u00e3o Considerando a estrutura de arquivos: /docs/ | -- img/ | -- image.svg # /docs/img/image.svg | -- index.md # /docs/index.md | --pagina.md # /docs/pagina.md Importando a imagem image.svg em index.md temos as seguintes possibilidades que funcionam: ![](./img/image.svg) ![](img/image.svg) < img src = \"./img/image.svg\" /> < img src = \"img/image.svg\" /> Importando a imagem image.svg em page.md , ao usar o atributo src devemos voltar mais um n\u00edvel no path \"../\", j\u00e1 que use_directory_urls adicionou mais n\u00edvel ao criar o diret\u00f3rio /pagina/ . Desta forma, temos as seguintes possibilidades que funcionam: ![](../img/image.svg) ![](./img/image.svg) ![](img/image.svg) < img src = \"../img/image.svg\" /> Refer\u00eancias \u00b6 https://github.com/mkdocs/mkdocs/issues/1757","title":"MkDocs"},{"location":"markdown/mkdocs/#mkdocs","text":"","title":"MkDocs"},{"location":"markdown/mkdocs/#erros-e-solucoes","text":"Erros e solu\u00e7\u00f5es relacionados ao MkDocs.","title":"Erros e solu\u00e7\u00f5es"},{"location":"markdown/mkdocs/#caminhos-relativos","text":"Por padr\u00e3o a configura\u00e7\u00e3o use_directory_urls \u00e9 true , ou seja, caso o arquivo chame pagina.md a url de acesso ser\u00e1 <site>\\pagina\\index.html e n\u00e3o <site>\\pagina.html . Portanto, usar o endere\u00e7o relativo no atributo src pode n\u00e3o funcionar. Solu\u00e7\u00e3o Considerando a estrutura de arquivos: /docs/ | -- img/ | -- image.svg # /docs/img/image.svg | -- index.md # /docs/index.md | --pagina.md # /docs/pagina.md Importando a imagem image.svg em index.md temos as seguintes possibilidades que funcionam: ![](./img/image.svg) ![](img/image.svg) < img src = \"./img/image.svg\" /> < img src = \"img/image.svg\" /> Importando a imagem image.svg em page.md , ao usar o atributo src devemos voltar mais um n\u00edvel no path \"../\", j\u00e1 que use_directory_urls adicionou mais n\u00edvel ao criar o diret\u00f3rio /pagina/ . Desta forma, temos as seguintes possibilidades que funcionam: ![](../img/image.svg) ![](./img/image.svg) ![](img/image.svg) < img src = \"../img/image.svg\" />","title":"Caminhos relativos"},{"location":"markdown/mkdocs/#referencias","text":"https://github.com/mkdocs/mkdocs/issues/1757","title":"Refer\u00eancias"},{"location":"programas/docker-compose/","text":"Docker-Compose \u00b6 Docker-Compose Introdu\u00e7\u00e3o Anatomia do docker-compose.yml Criar e iniciar Containers Parar Containers Listar containers Erros [[ TOC ]] Introdu\u00e7\u00e3o \u00b6 Geralmente com o aumento do n\u00famero de containers em execu\u00e7\u00e3o, fica evidente a necessidade de um melhor gerenciamento da sua comunica\u00e7\u00e3o, pois \u00e9 ideal que os servi\u00e7os consigam trocar dados entre os containers quando necess\u00e1rio, ou seja, voc\u00ea precisa lidar com a rede desse novo ambiente. Imagine o trabalho que seria executar algumas dezenas de containers manualmente na linha de comando, um por um e todos seus par\u00e2metros necess\u00e1rios, suas configura\u00e7\u00f5es de rede entre containers, volumes e afins. Pode parar de imaginar, pois isso n\u00e3o ser\u00e1 mais necess\u00e1rio. Para atender essa demanda de gerenciamento de m\u00faltiplos containers a solu\u00e7\u00e3o \u00e9 o Docker Compose . Docker compose \u00e9 uma ferramenta para defini\u00e7\u00e3o e execu\u00e7\u00e3o de m\u00faltiplos containers Docker. Com ela \u00e9 poss\u00edvel configurar todos os par\u00e2metros necess\u00e1rios para executar cada container a partir de um arquivo de defini\u00e7\u00e3o. Dentro desse arquivo, definimos cada container como servi\u00e7o, ou seja, sempre que esse texto citar servi\u00e7o de agora em diante, imagine que \u00e9 a defini\u00e7\u00e3o que ser\u00e1 usada para iniciar um container, tal como portas expostas, vari\u00e1veis de ambiente e afins. Com o Docker Compose podemos tamb\u00e9m especificar quais volumes e rede ser\u00e3o criados para serem utilizados nos par\u00e2metros dos servi\u00e7os, ou seja, isso quer dizer que n\u00e3o preciso cri\u00e1-los manualmente para que os servi\u00e7os utilizem recursos adicionais de rede e volume. O arquivo de defini\u00e7\u00e3o do Docker Compose \u00e9 o local onde \u00e9 especificado todo o ambiente (rede, volume e servi\u00e7os), ele \u00e9 escrito seguindo o formato YAML. Esse arquivo por padr\u00e3o tem como nome docker-compose.yml . Para ver a vers\u00e3o do arquivo que \u00e9 compat\u00edvel com a vers\u00e3o do docker, acesse esse link . Anatomia do docker-compose.yml \u00b6 version: '3.4' # vers\u00e3o do docker-compose services: app: image: yuri/web # imagem do container container_name: app # nome do container definido pelo usuario ports: - 8080:80 # portas <exposta>:<container> depends_on: - db # container que tamb\u00e9m deve ser iniciado db: image: mysql container_name: db environment: # vari\u00e1veis de ambiente do mysql - MYSQL_USER=root - MYSQL_ALLOW_EMPTY_PASSWORD=yes - MYSQL_DATABASE=loja volumes: - ./dados:/docker-entrypoint-initdb.d # mapeia o volume <exposta>:<container> Outro exemplo version: '3.6' services: db: container_name: postgres-container image: postgres restart: always environment: POSTGRES_PASSWORD: postgres POSTGRES_USER: postgres POSTGRES_DB: cqrs ports: - 5432:5432 volumes: - db-data:/var/lib/postgresql/data volumes: db-data: name: postgres-volume Criar e iniciar Containers \u00b6 Cria e inicia os containers. Se o nome do arquivo for docker-compose.yml n\u00e3o \u00e9 necess\u00e1rio inform\u00e1-lo com -f <nome> . docker-compose -f <nome.yml> up -d # -f: arquivo Inicia os containers sem cri\u00e1-los. Usado caso os containers j\u00e1 foram criados. docker-compose start <nome.yml> Parar Containers \u00b6 Para e remove containers. docker-compose -f <nome.yml> down Para containers sem remov\u00ea-los. docker-compose stop <nome.yml> Listar containers \u00b6 Listar todos os servi\u00e7os que foram iniciados a partir do arquivo yml. docker-compose ps <nome.yml> Erros \u00b6 N\u00e3o encontrado em localhost. Solu\u00e7\u00e3o: export DOCKER_HOST = 127 .0.0.1","title":"Docker-Compose"},{"location":"programas/docker-compose/#docker-compose","text":"Docker-Compose Introdu\u00e7\u00e3o Anatomia do docker-compose.yml Criar e iniciar Containers Parar Containers Listar containers Erros [[ TOC ]]","title":"Docker-Compose"},{"location":"programas/docker-compose/#introducao","text":"Geralmente com o aumento do n\u00famero de containers em execu\u00e7\u00e3o, fica evidente a necessidade de um melhor gerenciamento da sua comunica\u00e7\u00e3o, pois \u00e9 ideal que os servi\u00e7os consigam trocar dados entre os containers quando necess\u00e1rio, ou seja, voc\u00ea precisa lidar com a rede desse novo ambiente. Imagine o trabalho que seria executar algumas dezenas de containers manualmente na linha de comando, um por um e todos seus par\u00e2metros necess\u00e1rios, suas configura\u00e7\u00f5es de rede entre containers, volumes e afins. Pode parar de imaginar, pois isso n\u00e3o ser\u00e1 mais necess\u00e1rio. Para atender essa demanda de gerenciamento de m\u00faltiplos containers a solu\u00e7\u00e3o \u00e9 o Docker Compose . Docker compose \u00e9 uma ferramenta para defini\u00e7\u00e3o e execu\u00e7\u00e3o de m\u00faltiplos containers Docker. Com ela \u00e9 poss\u00edvel configurar todos os par\u00e2metros necess\u00e1rios para executar cada container a partir de um arquivo de defini\u00e7\u00e3o. Dentro desse arquivo, definimos cada container como servi\u00e7o, ou seja, sempre que esse texto citar servi\u00e7o de agora em diante, imagine que \u00e9 a defini\u00e7\u00e3o que ser\u00e1 usada para iniciar um container, tal como portas expostas, vari\u00e1veis de ambiente e afins. Com o Docker Compose podemos tamb\u00e9m especificar quais volumes e rede ser\u00e3o criados para serem utilizados nos par\u00e2metros dos servi\u00e7os, ou seja, isso quer dizer que n\u00e3o preciso cri\u00e1-los manualmente para que os servi\u00e7os utilizem recursos adicionais de rede e volume. O arquivo de defini\u00e7\u00e3o do Docker Compose \u00e9 o local onde \u00e9 especificado todo o ambiente (rede, volume e servi\u00e7os), ele \u00e9 escrito seguindo o formato YAML. Esse arquivo por padr\u00e3o tem como nome docker-compose.yml . Para ver a vers\u00e3o do arquivo que \u00e9 compat\u00edvel com a vers\u00e3o do docker, acesse esse link .","title":"Introdu\u00e7\u00e3o"},{"location":"programas/docker-compose/#anatomia-do-docker-composeyml","text":"version: '3.4' # vers\u00e3o do docker-compose services: app: image: yuri/web # imagem do container container_name: app # nome do container definido pelo usuario ports: - 8080:80 # portas <exposta>:<container> depends_on: - db # container que tamb\u00e9m deve ser iniciado db: image: mysql container_name: db environment: # vari\u00e1veis de ambiente do mysql - MYSQL_USER=root - MYSQL_ALLOW_EMPTY_PASSWORD=yes - MYSQL_DATABASE=loja volumes: - ./dados:/docker-entrypoint-initdb.d # mapeia o volume <exposta>:<container> Outro exemplo version: '3.6' services: db: container_name: postgres-container image: postgres restart: always environment: POSTGRES_PASSWORD: postgres POSTGRES_USER: postgres POSTGRES_DB: cqrs ports: - 5432:5432 volumes: - db-data:/var/lib/postgresql/data volumes: db-data: name: postgres-volume","title":"Anatomia do docker-compose.yml"},{"location":"programas/docker-compose/#criar-e-iniciar-containers","text":"Cria e inicia os containers. Se o nome do arquivo for docker-compose.yml n\u00e3o \u00e9 necess\u00e1rio inform\u00e1-lo com -f <nome> . docker-compose -f <nome.yml> up -d # -f: arquivo Inicia os containers sem cri\u00e1-los. Usado caso os containers j\u00e1 foram criados. docker-compose start <nome.yml>","title":"Criar e iniciar Containers"},{"location":"programas/docker-compose/#parar-containers","text":"Para e remove containers. docker-compose -f <nome.yml> down Para containers sem remov\u00ea-los. docker-compose stop <nome.yml>","title":"Parar Containers"},{"location":"programas/docker-compose/#listar-containers","text":"Listar todos os servi\u00e7os que foram iniciados a partir do arquivo yml. docker-compose ps <nome.yml>","title":"Listar containers"},{"location":"programas/docker-compose/#erros","text":"N\u00e3o encontrado em localhost. Solu\u00e7\u00e3o: export DOCKER_HOST = 127 .0.0.1","title":"Erros"},{"location":"programas/docker/","text":"Docker \u00b6 Docker Introdu\u00e7\u00e3o Imagem Camadas e controle de vers\u00e3o Volume Funcionamento Vantagens Desvantagens Instala\u00e7\u00e3o Vers\u00e3o Status Servi\u00e7o Usu\u00e1rio Comandos Trabalhando com imagens Docker Verificar acesso ao Docker Hub Procurar imagem Baixar imagem Listar imagens Remover imagem Trabalhando com containers Docker Criar container Criar container com nome desejado Criar e acessar terminal do container Criar container com portas mapeadas Criar container auto destrutivo Criar container em segundo plano Criar container com volume Status do container Informa\u00e7\u00f5es do container Acessar container Listar containers Iniciar container parado Parar container Remover containers Vari\u00e1veis de ambiente Commit para uma Imagem Docker Trabalhando com volumes Docker Criar volume port\u00e1vel Criar volume n\u00e3o port\u00e1vel Listar volumes Remover volume Informa\u00e7\u00f5es do volume Geral Remover recursos n\u00e3o usados ou pendentes Links Introdu\u00e7\u00e3o \u00b6 A Conteineriza\u00e7\u00e3o \u00e9 o processo de distribui\u00e7\u00e3o e implanta\u00e7\u00e3o de aplicativos de uma forma port\u00e1til e previs\u00edvel. Ele faz isso empacotando componentes e suas depend\u00eancias em um ambiente de processos padronizado, isolado e leve chamado cont\u00eainer. A tecnologia Docker usa o kernel do Linux e recursos do kernel como Cgroups e namespaces para segregar processos. Assim, eles podem ser executados de maneira independente. O objetivo dos containers \u00e9 criar essa independ\u00eancia: a habilidade de executar diversos processos e aplica\u00e7\u00f5es separadamente para utilizar melhor a infraestrutura e, ao mesmo tempo, manter a seguran\u00e7a que voc\u00ea teria em sistemas separados. As ferramentas de container, incluindo o Docker, fornecem um modelo de implanta\u00e7\u00e3o com base em imagem . Isso facilita o compartilhamento de uma aplica\u00e7\u00e3o ou conjunto de servi\u00e7os, incluindo todas as depend\u00eancias deles em v\u00e1rios ambientes. O Docker tamb\u00e9m automatiza a implanta\u00e7\u00e3o da aplica\u00e7\u00e3o (ou de conjuntos de processos que constituem uma aplica\u00e7\u00e3o) dentro desse ambiente de container. Essas ferramentas baseadas nos containers Linux (o que faz com que o Docker seja exclusivo e f\u00e1cil de usar) oferecem aos usu\u00e1rios acesso sem precedentes a aplica\u00e7\u00f5es, al\u00e9m da habilidade de implantar com rapidez e de ter total controle sobre as vers\u00f5es e distribui\u00e7\u00e3o. Imagem \u00b6 Pense em imagens como um template compostas por um sistema de camadas que ficam uma sobre as outras para rodar um container, elas s\u00e3o a nossa base para constru\u00e7\u00e3o de nossas aplica\u00e7\u00f5es. Em uma imagem temos um sistema de inicializa\u00e7\u00e3o chamado bootfs , que \u00e9 muito parecido com o sistema de boot do Linux, a partir de imagens conseguimos criar nossos containers e com facilidade fazer a migra\u00e7\u00e3o de sistema operacional ou ambiente de trabalho. Voc\u00ea precisa baixar as imagens de algum reposit\u00f3rio ou cri\u00e1-las, as imagens ficam armazenados no Dockerhub . Containers s\u00e3o inst\u00e2ncias criadas \u00e0 partir de imagens Docker. Camadas e controle de vers\u00e3o \u00b6 Cada arquivo de imagem Docker \u00e9 composto por uma s\u00e9rie de camadas. Elas s\u00e3o combinadas em uma \u00fanica imagem. Uma nova camada \u00e9 criada quando h\u00e1 altera\u00e7\u00e3o na imagem. Toda vez que um usu\u00e1rio especifica um comando, como executar ou copiar, uma nova camada \u00e9 criada. O Docker reutiliza essas camadas para a constru\u00e7\u00e3o de novos containers, o que torna o processo de cria\u00e7\u00e3o muito mais r\u00e1pido. As altera\u00e7\u00f5es intermedi\u00e1rias s\u00e3o compartilhadas entre imagens, o que melhora ainda mais a velocidade, o tamanho e a efici\u00eancia. O controle de vers\u00f5es \u00e9 inerente ao uso de camadas. Sempre que \u00e9 realizada uma nova altera\u00e7\u00e3o, \u00e9 gerado um changelog integrado, o que fornece controle total sobre as imagens do container. ![exemplo-camadas](_docker/exemplo-camadas.png) Na imagem acima, voc\u00ea pode come\u00e7ar a ver (em uma vis\u00e3o simplificada) como os cont\u00eaineres se relacionam com o sistema host. Os cont\u00eaineres isolam aplica\u00e7\u00f5es individuais e utilizam recursos do sistema operacional que foram abstra\u00eddos pelo Docker. Na vis\u00e3o explodida na direita, podemos ver que os cont\u00eaineres podem ser constru\u00eddos por \"camadas\", com v\u00e1rios cont\u00eaineres compartilhando camadas subjacentes, diminuindo o uso de recursos. Volume \u00b6 Quando um container \u00e9 removido todas as suas informa\u00e7\u00f5es s\u00e3o perdidas, portanto queremos criar uma c\u00f3pia dos dados que est\u00e3o no container para a nossa m\u00e1quina. Caso o container venha a cair ou seja removido, podemos falar para ele onde est\u00e1 os dados. Dessa forma, nossas informa\u00e7\u00f5es ficam salvas independente do estado do container. Ou seja, queremos falar para o Docker criar um reposit\u00f3rio de dados para os containers, ou, como \u00e9 chamado volume . Funcionamento \u00b6 A tecnologia Docker foi desenvolvida inicialmente com base na tecnologia LXC , que a maioria das pessoas associa aos containers Linux \"tradicionais\". No entanto, desde ent\u00e3o, essa tecnologia tornou-se independente. O LXC era \u00fatil como uma virtualiza\u00e7\u00e3o leve, mas n\u00e3o oferecia uma boa experi\u00eancia para usu\u00e1rios e desenvolvedores. A tecnologia Docker oferece mais do que a habilidade de executar containers: ela tamb\u00e9m facilita o processo de cria\u00e7\u00e3o e constru\u00e7\u00e3o de containers, o envio e o controle de vers\u00e3o de imagens, dentre outras coisas. ![traditional-linux-containers-vs-docker](_docker/traditional-linux-containers-vs-docker.png) Os containers Linux tradicionais usam um sistema init capaz de gerenciar v\u00e1rios processos. Isso significa que aplica\u00e7\u00f5es inteiras s\u00e3o executadas como uma. A tecnologia Docker incentiva que as aplica\u00e7\u00f5es sejam segregadas em processos separados e oferece as ferramentas para fazer isso. Essa abordagem granular tem algumas vantagens. Vantagens \u00b6 Utiliza\u00e7\u00e3o leve de recursos : Em vez da virtualiza\u00e7\u00e3o de um sistema operacional inteiro, os cont\u00eaineres isolam no n\u00edvel de processos e utilizam o kernel do host. Portabilidade : Todas as depend\u00eancias para uma aplica\u00e7\u00e3o conteinerizada s\u00e3o empacotadas dentro do cont\u00eainer, permitindo-a executar em qualquer host Docker. Modularidade : A abordagem do Docker para a containeriza\u00e7\u00e3o se concentra na habilidade de desativar uma parte de uma aplica\u00e7\u00e3o, seja para reparo ou atualiza\u00e7\u00e3o, sem interromp\u00ea-la totalmente. Al\u00e9m dessa abordagem baseada em microsservi\u00e7os, \u00e9 poss\u00edvel compartilhar processos entre v\u00e1rias aplica\u00e7\u00f5es da mesma maneira como na arquitetura orientada a servi\u00e7o (SOA). Controle de vers\u00f5es : O controle de vers\u00f5es \u00e9 inerente ao uso de camadas. Sempre que \u00e9 realizada uma nova altera\u00e7\u00e3o, \u00e9 gerado um changelog integrado, o que fornece controle total sobre as imagens do container. Revers\u00e3o : Talvez a melhor vantagem da cria\u00e7\u00e3o de camadas seja a habilidade de reverter quando necess\u00e1rio. Toda imagem possui camadas. N\u00e3o gostou da itera\u00e7\u00e3o atual de uma imagem? Simples, basta reverter para a vers\u00e3o anterior. Esse processo \u00e9 compat\u00edvel com uma abordagem de desenvolvimento \u00e1gil e possibilita as pr\u00e1ticas de integra\u00e7\u00e3o e implanta\u00e7\u00e3o cont\u00ednuas (CI/CD) em rela\u00e7\u00e3o \u00e0s ferramentas. Implanta\u00e7\u00e3o r\u00e1pida Antigamente, colocar novo hardware em funcionamento, provisionado e dispon\u00edvel, levava dias. E as despesas e esfor\u00e7o necess\u00e1rios para mant\u00ea-lo eram onerosos. Os containers baseados em docker podem reduzir o tempo de implanta\u00e7\u00e3o de horas para segundos. Ao criar um container para cada processo, \u00e9 poss\u00edvel compartilhar rapidamente esses processos similares com novos aplicativos. Como n\u00e3o \u00e9 necess\u00e1rio inicializar um sistema operacional para adicionar ou mover um container, o tempo de implanta\u00e7\u00e3o \u00e9 substancialmente menor. Al\u00e9m disso, com a velocidade de implanta\u00e7\u00e3o, \u00e9 poss\u00edvel criar dados e destruir os criados pelos containers sem nenhuma preocupa\u00e7\u00e3o e com facilidade e economia. Em resumo, a tecnologia Docker \u00e9 uma abordagem mais granular, control\u00e1vel e baseada em microsservi\u00e7os que valoriza a efici\u00eancia. Desvantagens \u00b6 O Docker n\u00e3o fornece as mesmas funcionalidades parecidas com UNIX que os containers Linux tradicionais oferecem. Isso inclui a capacidade de usar processos como cron ou syslog dentro do container, junto \u00e0 aplica\u00e7\u00e3o. O Docker tamb\u00e9m tem algumas limita\u00e7\u00f5es em quest\u00f5es como a limpeza de processos netos ( grandchild ) ap\u00f3s o encerramento dos processos filhos ( child ), algo que \u00e9 processado de forma natural nos containers Linux tradicionais. Essas desvantagens podem ser mitigadas ao modificar o arquivo de configura\u00e7\u00e3o e configurar essas funcionalidade desde o in\u00edcio, algo que n\u00e3o est\u00e1 imediatamente \u00f3bvio em um primeiro momento. Al\u00e9m disso, h\u00e1 outros subsistemas e dispositivos do Linux sem espa\u00e7o de nomes. Incluindo os dispositivos SELinux , Cgroups e /dev/sd* . Isso significa que, se um invasor adquirir controle sobre esses subsistemas, o host ser\u00e1 comprometido. Para manter-se leve, o compartilhamento do kernel do host com os containers gera a possibilidade dessa vulnerabilidade na seguran\u00e7a. Isso \u00e9 diferente nas m\u00e1quinas virtuais, que s\u00e3o mais firmemente segregadas a partir do sistema host. Instala\u00e7\u00e3o \u00b6 # Ubuntu sudo apt install docker.io Vers\u00e3o \u00b6 Ver a vers\u00e3o instalada: sudo docker -v Status \u00b6 Ver status do docker: sudo systemctl status docker \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled) Active: inactive (dead) Docs: https://docs.docker.com Servi\u00e7o \u00b6 Iniciar servi\u00e7o. sudo systemctl start docker \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled) Active: active (running) since Wed 2019-09-11 16:35:29 -03; 29s ago Docs: https://docs.docker.com Main PID: 46625 (dockerd) Tasks: 28 Memory: 57.5M CGroup: /system.slice/docker.service \u251c\u250046625 /usr/bin/dockerd -H fd:// \u2514\u250046633 containerd --config /var/run/docker/containerd/containerd.toml --log-level info set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.547513653-03:00\" level=warning msg=\"Your kernel does not support cgroup blkio weight\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.547523446-03:00\" level=warning msg=\"Your kernel does not support cgroup blkio weight_device\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.547724864-03:00\" level=info msg=\"Loading containers: start.\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.687707718-03:00\" level=info msg=\"Default bridge (docker0) is assigned with an IP address 172.17.0.0/> set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.758083807-03:00\" level=info msg=\"Loading containers: done.\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.792834766-03:00\" level=warning msg=\"Not using native diff for overlay2, this may cause degraded perf> set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.793107525-03:00\" level=info msg=\"Docker daemon\" commit=6a30dfca03 graphdriver(s)=overlay2 version=19> set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.793230539-03:00\" level=info msg=\"Daemon has completed initialization\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.828163899-03:00\" level=info msg=\"API listen on /run/docker.sock\" set 11 16:35:29 archlinux systemd[1]: Started Docker Application Container Engine. Habilitar servi\u00e7o para iniciar ap\u00f3s boot sudo systemctl enable docker Usu\u00e1rio \u00b6 Para adicionar o usu\u00e1rio no grupo docker e realizar o acesso sem utilizar sudo . Execute o comando abaixo: sudo usermod -aG docker ${ USER } # ou sudo usermod -aG docker <nome-usuario> Fa\u00e7a o logout ou execute: su - ${ USER } Confira os grupos do usu\u00e1rio: id -nG Comandos \u00b6 Um comando docker segue o formato: docker [ option ] [ command ] [ arguments ] Para ver a lista de op\u00e7\u00f5es e comandos: docker --help Para ver mais informa\u00e7\u00f5es de um comando: docker <comando> --help Para especificar se um comando ser\u00e1 executado sobre um volume ou um container, podemos usar: docker container <comando> docker volume <comando> Trabalhando com imagens Docker \u00b6 Verificar acesso ao Docker Hub \u00b6 Verificar se voc\u00ea pode acessar e baixar imagens do Docker Hub: docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 9bb5a5d4561a: Pull complete Digest: sha256:3e1764d0f546ceac4565547df2ac4907fe46f007ea229fd7ef2718514bcec35d Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. Procurar imagem \u00b6 Procurar imagem no Docker Hub: docker search <imagem> Baixar imagem \u00b6 Baixar imagem do Docker Hub: docker pull <imagem> Listar imagens \u00b6 Listar todas imagens: docker images # ou docker images --all # ou docker images -a Remover imagem \u00b6 Remover imagem: docker rmi <imagem> Remover imagens pendentes: docker images purge Trabalhando com containers Docker \u00b6 Criar container \u00b6 Criar e inicia um container. docker run <imagem> Criar container com nome desejado \u00b6 Criar e inicia um container com nome definido pelo usu\u00e1rio. docker run --name <nome> <imagem> Criar e acessar terminal do container \u00b6 docker run -it <imagem> # -i: iteratividade # -t: link com o terminal do container root@d9b100f2f636:/# Onde d9b100f2f636 \u00e9 o id do container. \u00c9 poss\u00edvel mudar o nome de um container com a chave --name Criar container com portas mapeadas \u00b6 docker run -it -p <porta-host>:<porta-container> <imagem> /bin/bash # -p: portas Criar container auto destrutivo \u00b6 Ao usar um exit para sair do Terminal do SO rodando no container, o mesmo ser\u00e1 removido. docker run -it --rm <imagem> /bin/bash # --rm: remover container Criar container em segundo plano \u00b6 Cria e inicia o container em segundo plano. docker run -d -p <porta-host>:<porta-container> <imagem> <comando> # -d: executar em segundo plano Criar container com volume \u00b6 Cria e inicia o container com volume mapeado. Se o volume n\u00e3o existe, ele ser\u00e1 criado automaticamente. docker run -d --name <nome> -v <volume>:<path-container> <imagem> # -v: volume Status do container \u00b6 docker stats <id-ou-nome> Informa\u00e7\u00f5es do container \u00b6 docker inspect <id-ou-nome> Veja mais Acessar container \u00b6 Acessar terminal de um container ativo. O comando exec executa o comando passado, portando poderia executar qualquer comando dentro do container al\u00e9m de bash . docker exec -it <id-container> bash # ou docker exec -it <id-container> /bin/bash Listar containers \u00b6 Listar somente containers ativos: docker ps Listar todos containers ativos e inativos: docker ps -a # ou docker ps --all Listar \u00faltimo container criado: docker ps -l Iniciar container parado \u00b6 Para iniciar um container parado: docker start <id-ou-nome> Parar container \u00b6 Para parar um container ativo: docker stop <id-ou-nome> Remover containers \u00b6 Remover container: docker rm <id-ou-nome> As mudan\u00e7as feitas no container ser\u00e3o perdidas para sempre. Vari\u00e1veis de ambiente \u00b6 Definindo valor para as vari\u00e1veis de ambiente presentes no container. docker run -d -e <variavel> = <valor> -e <variavel> = <valor> <imagem> Commit para uma Imagem Docker \u00b6 Quando voc\u00ea inicia uma imagem Docker, voc\u00ea pode criar, modificar e excluir arquivos da mesma forma que voc\u00ea faz em m\u00e1quinas virtuais. As altera\u00e7\u00f5es que voc\u00ea fizer ser\u00e3o aplicadas apenas a esse container. Voc\u00ea pode inici\u00e1-lo ou par\u00e1-lo, mas uma vez que voc\u00ea o destrua com o comando docker rm , as mudan\u00e7as ser\u00e3o perdidas para sempre. Salvar o estado de um container como uma nova imagem do Docker localmente: docker commit -m \"MENSAGEM\" -a \"NOME-AUTOR\" ID-CONTAINER USUARIO/<novo-nome-imagem> # -m: mensagem de commit # -a: especificar o autor Para enviar a imagem para Docker Hub: docker login -u <usuario-dockerhub> Se seu nome de usu\u00e1rio do registro do Docker for diferente do nome de usu\u00e1rio local usado para criar a imagem, voc\u00ea ter\u00e1 que marcar sua imagem com o nome de usu\u00e1rio do registro: docker tag USUARIO/<novo-nome-imagem> <usuario-dockerhub>/<novo-nome-imagem> Enviar imagem: docker push <usuario-dockerhub>/<novo-nome-imagem> Agora estar\u00e1 dispon\u00edvel para baixar: docker pull <usuario-dockerhub>/<novo-nome-imagem> Trabalhando com volumes Docker \u00b6 Criar volume port\u00e1vel \u00b6 Criar um volume port\u00e1vel, sem a necessidade de associ\u00e1-lo a um container especial. O volume pode ser consumido por qualquer container. docker volume create <nome> Iniciar container com volume criado. docker run -d -v <volume>:<path-container> <imagem> # -v: volume Iniciar container com volume criado com permiss\u00e3o de somente para leitura. docker run -d -v <volume>:<path-container>:ro <imagem> # -ro: somente leitura Criar volume n\u00e3o port\u00e1vel \u00b6 O volume ser\u00e1 atrelado ao container. Inicia container e cria e mapeia o volume para o path do container. O path do host ser\u00e1 o padr\u00e3o definido pelo docker. No Ubuntu o path padr\u00e3o \u00e9 /var/lib/docker/volumes docker run -d --name <nome-container> -v <path-container> <imagem> Iniciar container e tamb\u00e9m cria e mapeia o volume definindo o path do host e container. docker run -d --name <nome-container> -v <path-host>:<path-container> <imagem> Listar volumes \u00b6 docker volume ls Remover volume \u00b6 docker volume rm <volume> Remover volumes n\u00e3o usados docker volume prune Informa\u00e7\u00f5es do volume \u00b6 docker volume inspect <volume> Geral \u00b6 Remover recursos n\u00e3o usados ou pendentes \u00b6 Remover imagens, containers, volumes e redes n\u00e3o usadas ou pendentes. docker system prune Links \u00b6 https://docs.docker.com/compose/compose-file https://www.digitalocean.com/community/tutorials/o-ecossistema-do-docker-uma-introducao-aos-componentes-comuns-pt https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes","title":"Docker"},{"location":"programas/docker/#docker","text":"Docker Introdu\u00e7\u00e3o Imagem Camadas e controle de vers\u00e3o Volume Funcionamento Vantagens Desvantagens Instala\u00e7\u00e3o Vers\u00e3o Status Servi\u00e7o Usu\u00e1rio Comandos Trabalhando com imagens Docker Verificar acesso ao Docker Hub Procurar imagem Baixar imagem Listar imagens Remover imagem Trabalhando com containers Docker Criar container Criar container com nome desejado Criar e acessar terminal do container Criar container com portas mapeadas Criar container auto destrutivo Criar container em segundo plano Criar container com volume Status do container Informa\u00e7\u00f5es do container Acessar container Listar containers Iniciar container parado Parar container Remover containers Vari\u00e1veis de ambiente Commit para uma Imagem Docker Trabalhando com volumes Docker Criar volume port\u00e1vel Criar volume n\u00e3o port\u00e1vel Listar volumes Remover volume Informa\u00e7\u00f5es do volume Geral Remover recursos n\u00e3o usados ou pendentes Links","title":"Docker"},{"location":"programas/docker/#introducao","text":"A Conteineriza\u00e7\u00e3o \u00e9 o processo de distribui\u00e7\u00e3o e implanta\u00e7\u00e3o de aplicativos de uma forma port\u00e1til e previs\u00edvel. Ele faz isso empacotando componentes e suas depend\u00eancias em um ambiente de processos padronizado, isolado e leve chamado cont\u00eainer. A tecnologia Docker usa o kernel do Linux e recursos do kernel como Cgroups e namespaces para segregar processos. Assim, eles podem ser executados de maneira independente. O objetivo dos containers \u00e9 criar essa independ\u00eancia: a habilidade de executar diversos processos e aplica\u00e7\u00f5es separadamente para utilizar melhor a infraestrutura e, ao mesmo tempo, manter a seguran\u00e7a que voc\u00ea teria em sistemas separados. As ferramentas de container, incluindo o Docker, fornecem um modelo de implanta\u00e7\u00e3o com base em imagem . Isso facilita o compartilhamento de uma aplica\u00e7\u00e3o ou conjunto de servi\u00e7os, incluindo todas as depend\u00eancias deles em v\u00e1rios ambientes. O Docker tamb\u00e9m automatiza a implanta\u00e7\u00e3o da aplica\u00e7\u00e3o (ou de conjuntos de processos que constituem uma aplica\u00e7\u00e3o) dentro desse ambiente de container. Essas ferramentas baseadas nos containers Linux (o que faz com que o Docker seja exclusivo e f\u00e1cil de usar) oferecem aos usu\u00e1rios acesso sem precedentes a aplica\u00e7\u00f5es, al\u00e9m da habilidade de implantar com rapidez e de ter total controle sobre as vers\u00f5es e distribui\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/docker/#imagem","text":"Pense em imagens como um template compostas por um sistema de camadas que ficam uma sobre as outras para rodar um container, elas s\u00e3o a nossa base para constru\u00e7\u00e3o de nossas aplica\u00e7\u00f5es. Em uma imagem temos um sistema de inicializa\u00e7\u00e3o chamado bootfs , que \u00e9 muito parecido com o sistema de boot do Linux, a partir de imagens conseguimos criar nossos containers e com facilidade fazer a migra\u00e7\u00e3o de sistema operacional ou ambiente de trabalho. Voc\u00ea precisa baixar as imagens de algum reposit\u00f3rio ou cri\u00e1-las, as imagens ficam armazenados no Dockerhub . Containers s\u00e3o inst\u00e2ncias criadas \u00e0 partir de imagens Docker.","title":"Imagem"},{"location":"programas/docker/#camadas-e-controle-de-versao","text":"Cada arquivo de imagem Docker \u00e9 composto por uma s\u00e9rie de camadas. Elas s\u00e3o combinadas em uma \u00fanica imagem. Uma nova camada \u00e9 criada quando h\u00e1 altera\u00e7\u00e3o na imagem. Toda vez que um usu\u00e1rio especifica um comando, como executar ou copiar, uma nova camada \u00e9 criada. O Docker reutiliza essas camadas para a constru\u00e7\u00e3o de novos containers, o que torna o processo de cria\u00e7\u00e3o muito mais r\u00e1pido. As altera\u00e7\u00f5es intermedi\u00e1rias s\u00e3o compartilhadas entre imagens, o que melhora ainda mais a velocidade, o tamanho e a efici\u00eancia. O controle de vers\u00f5es \u00e9 inerente ao uso de camadas. Sempre que \u00e9 realizada uma nova altera\u00e7\u00e3o, \u00e9 gerado um changelog integrado, o que fornece controle total sobre as imagens do container. ![exemplo-camadas](_docker/exemplo-camadas.png) Na imagem acima, voc\u00ea pode come\u00e7ar a ver (em uma vis\u00e3o simplificada) como os cont\u00eaineres se relacionam com o sistema host. Os cont\u00eaineres isolam aplica\u00e7\u00f5es individuais e utilizam recursos do sistema operacional que foram abstra\u00eddos pelo Docker. Na vis\u00e3o explodida na direita, podemos ver que os cont\u00eaineres podem ser constru\u00eddos por \"camadas\", com v\u00e1rios cont\u00eaineres compartilhando camadas subjacentes, diminuindo o uso de recursos.","title":"Camadas e controle de vers\u00e3o"},{"location":"programas/docker/#volume","text":"Quando um container \u00e9 removido todas as suas informa\u00e7\u00f5es s\u00e3o perdidas, portanto queremos criar uma c\u00f3pia dos dados que est\u00e3o no container para a nossa m\u00e1quina. Caso o container venha a cair ou seja removido, podemos falar para ele onde est\u00e1 os dados. Dessa forma, nossas informa\u00e7\u00f5es ficam salvas independente do estado do container. Ou seja, queremos falar para o Docker criar um reposit\u00f3rio de dados para os containers, ou, como \u00e9 chamado volume .","title":"Volume"},{"location":"programas/docker/#funcionamento","text":"A tecnologia Docker foi desenvolvida inicialmente com base na tecnologia LXC , que a maioria das pessoas associa aos containers Linux \"tradicionais\". No entanto, desde ent\u00e3o, essa tecnologia tornou-se independente. O LXC era \u00fatil como uma virtualiza\u00e7\u00e3o leve, mas n\u00e3o oferecia uma boa experi\u00eancia para usu\u00e1rios e desenvolvedores. A tecnologia Docker oferece mais do que a habilidade de executar containers: ela tamb\u00e9m facilita o processo de cria\u00e7\u00e3o e constru\u00e7\u00e3o de containers, o envio e o controle de vers\u00e3o de imagens, dentre outras coisas. ![traditional-linux-containers-vs-docker](_docker/traditional-linux-containers-vs-docker.png) Os containers Linux tradicionais usam um sistema init capaz de gerenciar v\u00e1rios processos. Isso significa que aplica\u00e7\u00f5es inteiras s\u00e3o executadas como uma. A tecnologia Docker incentiva que as aplica\u00e7\u00f5es sejam segregadas em processos separados e oferece as ferramentas para fazer isso. Essa abordagem granular tem algumas vantagens.","title":"Funcionamento"},{"location":"programas/docker/#vantagens","text":"Utiliza\u00e7\u00e3o leve de recursos : Em vez da virtualiza\u00e7\u00e3o de um sistema operacional inteiro, os cont\u00eaineres isolam no n\u00edvel de processos e utilizam o kernel do host. Portabilidade : Todas as depend\u00eancias para uma aplica\u00e7\u00e3o conteinerizada s\u00e3o empacotadas dentro do cont\u00eainer, permitindo-a executar em qualquer host Docker. Modularidade : A abordagem do Docker para a containeriza\u00e7\u00e3o se concentra na habilidade de desativar uma parte de uma aplica\u00e7\u00e3o, seja para reparo ou atualiza\u00e7\u00e3o, sem interromp\u00ea-la totalmente. Al\u00e9m dessa abordagem baseada em microsservi\u00e7os, \u00e9 poss\u00edvel compartilhar processos entre v\u00e1rias aplica\u00e7\u00f5es da mesma maneira como na arquitetura orientada a servi\u00e7o (SOA). Controle de vers\u00f5es : O controle de vers\u00f5es \u00e9 inerente ao uso de camadas. Sempre que \u00e9 realizada uma nova altera\u00e7\u00e3o, \u00e9 gerado um changelog integrado, o que fornece controle total sobre as imagens do container. Revers\u00e3o : Talvez a melhor vantagem da cria\u00e7\u00e3o de camadas seja a habilidade de reverter quando necess\u00e1rio. Toda imagem possui camadas. N\u00e3o gostou da itera\u00e7\u00e3o atual de uma imagem? Simples, basta reverter para a vers\u00e3o anterior. Esse processo \u00e9 compat\u00edvel com uma abordagem de desenvolvimento \u00e1gil e possibilita as pr\u00e1ticas de integra\u00e7\u00e3o e implanta\u00e7\u00e3o cont\u00ednuas (CI/CD) em rela\u00e7\u00e3o \u00e0s ferramentas. Implanta\u00e7\u00e3o r\u00e1pida Antigamente, colocar novo hardware em funcionamento, provisionado e dispon\u00edvel, levava dias. E as despesas e esfor\u00e7o necess\u00e1rios para mant\u00ea-lo eram onerosos. Os containers baseados em docker podem reduzir o tempo de implanta\u00e7\u00e3o de horas para segundos. Ao criar um container para cada processo, \u00e9 poss\u00edvel compartilhar rapidamente esses processos similares com novos aplicativos. Como n\u00e3o \u00e9 necess\u00e1rio inicializar um sistema operacional para adicionar ou mover um container, o tempo de implanta\u00e7\u00e3o \u00e9 substancialmente menor. Al\u00e9m disso, com a velocidade de implanta\u00e7\u00e3o, \u00e9 poss\u00edvel criar dados e destruir os criados pelos containers sem nenhuma preocupa\u00e7\u00e3o e com facilidade e economia. Em resumo, a tecnologia Docker \u00e9 uma abordagem mais granular, control\u00e1vel e baseada em microsservi\u00e7os que valoriza a efici\u00eancia.","title":"Vantagens"},{"location":"programas/docker/#desvantagens","text":"O Docker n\u00e3o fornece as mesmas funcionalidades parecidas com UNIX que os containers Linux tradicionais oferecem. Isso inclui a capacidade de usar processos como cron ou syslog dentro do container, junto \u00e0 aplica\u00e7\u00e3o. O Docker tamb\u00e9m tem algumas limita\u00e7\u00f5es em quest\u00f5es como a limpeza de processos netos ( grandchild ) ap\u00f3s o encerramento dos processos filhos ( child ), algo que \u00e9 processado de forma natural nos containers Linux tradicionais. Essas desvantagens podem ser mitigadas ao modificar o arquivo de configura\u00e7\u00e3o e configurar essas funcionalidade desde o in\u00edcio, algo que n\u00e3o est\u00e1 imediatamente \u00f3bvio em um primeiro momento. Al\u00e9m disso, h\u00e1 outros subsistemas e dispositivos do Linux sem espa\u00e7o de nomes. Incluindo os dispositivos SELinux , Cgroups e /dev/sd* . Isso significa que, se um invasor adquirir controle sobre esses subsistemas, o host ser\u00e1 comprometido. Para manter-se leve, o compartilhamento do kernel do host com os containers gera a possibilidade dessa vulnerabilidade na seguran\u00e7a. Isso \u00e9 diferente nas m\u00e1quinas virtuais, que s\u00e3o mais firmemente segregadas a partir do sistema host.","title":"Desvantagens"},{"location":"programas/docker/#instalacao","text":"# Ubuntu sudo apt install docker.io","title":"Instala\u00e7\u00e3o"},{"location":"programas/docker/#versao","text":"Ver a vers\u00e3o instalada: sudo docker -v","title":"Vers\u00e3o"},{"location":"programas/docker/#status","text":"Ver status do docker: sudo systemctl status docker \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled) Active: inactive (dead) Docs: https://docs.docker.com","title":"Status"},{"location":"programas/docker/#servico","text":"Iniciar servi\u00e7o. sudo systemctl start docker \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled) Active: active (running) since Wed 2019-09-11 16:35:29 -03; 29s ago Docs: https://docs.docker.com Main PID: 46625 (dockerd) Tasks: 28 Memory: 57.5M CGroup: /system.slice/docker.service \u251c\u250046625 /usr/bin/dockerd -H fd:// \u2514\u250046633 containerd --config /var/run/docker/containerd/containerd.toml --log-level info set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.547513653-03:00\" level=warning msg=\"Your kernel does not support cgroup blkio weight\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.547523446-03:00\" level=warning msg=\"Your kernel does not support cgroup blkio weight_device\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.547724864-03:00\" level=info msg=\"Loading containers: start.\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.687707718-03:00\" level=info msg=\"Default bridge (docker0) is assigned with an IP address 172.17.0.0/> set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.758083807-03:00\" level=info msg=\"Loading containers: done.\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.792834766-03:00\" level=warning msg=\"Not using native diff for overlay2, this may cause degraded perf> set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.793107525-03:00\" level=info msg=\"Docker daemon\" commit=6a30dfca03 graphdriver(s)=overlay2 version=19> set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.793230539-03:00\" level=info msg=\"Daemon has completed initialization\" set 11 16:35:29 archlinux dockerd[46625]: time=\"2019-09-11T16:35:29.828163899-03:00\" level=info msg=\"API listen on /run/docker.sock\" set 11 16:35:29 archlinux systemd[1]: Started Docker Application Container Engine. Habilitar servi\u00e7o para iniciar ap\u00f3s boot sudo systemctl enable docker","title":"Servi\u00e7o"},{"location":"programas/docker/#usuario","text":"Para adicionar o usu\u00e1rio no grupo docker e realizar o acesso sem utilizar sudo . Execute o comando abaixo: sudo usermod -aG docker ${ USER } # ou sudo usermod -aG docker <nome-usuario> Fa\u00e7a o logout ou execute: su - ${ USER } Confira os grupos do usu\u00e1rio: id -nG","title":"Usu\u00e1rio"},{"location":"programas/docker/#comandos","text":"Um comando docker segue o formato: docker [ option ] [ command ] [ arguments ] Para ver a lista de op\u00e7\u00f5es e comandos: docker --help Para ver mais informa\u00e7\u00f5es de um comando: docker <comando> --help Para especificar se um comando ser\u00e1 executado sobre um volume ou um container, podemos usar: docker container <comando> docker volume <comando>","title":"Comandos"},{"location":"programas/docker/#trabalhando-com-imagens-docker","text":"","title":"Trabalhando com imagens Docker"},{"location":"programas/docker/#verificar-acesso-ao-docker-hub","text":"Verificar se voc\u00ea pode acessar e baixar imagens do Docker Hub: docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 9bb5a5d4561a: Pull complete Digest: sha256:3e1764d0f546ceac4565547df2ac4907fe46f007ea229fd7ef2718514bcec35d Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly.","title":"Verificar acesso ao Docker Hub"},{"location":"programas/docker/#procurar-imagem","text":"Procurar imagem no Docker Hub: docker search <imagem>","title":"Procurar imagem"},{"location":"programas/docker/#baixar-imagem","text":"Baixar imagem do Docker Hub: docker pull <imagem>","title":"Baixar imagem"},{"location":"programas/docker/#listar-imagens","text":"Listar todas imagens: docker images # ou docker images --all # ou docker images -a","title":"Listar imagens"},{"location":"programas/docker/#remover-imagem","text":"Remover imagem: docker rmi <imagem> Remover imagens pendentes: docker images purge","title":"Remover imagem"},{"location":"programas/docker/#trabalhando-com-containers-docker","text":"","title":"Trabalhando com containers Docker"},{"location":"programas/docker/#criar-container","text":"Criar e inicia um container. docker run <imagem>","title":"Criar container"},{"location":"programas/docker/#criar-container-com-nome-desejado","text":"Criar e inicia um container com nome definido pelo usu\u00e1rio. docker run --name <nome> <imagem>","title":"Criar container com nome desejado"},{"location":"programas/docker/#criar-e-acessar-terminal-do-container","text":"docker run -it <imagem> # -i: iteratividade # -t: link com o terminal do container root@d9b100f2f636:/# Onde d9b100f2f636 \u00e9 o id do container. \u00c9 poss\u00edvel mudar o nome de um container com a chave --name","title":"Criar e acessar terminal do container"},{"location":"programas/docker/#criar-container-com-portas-mapeadas","text":"docker run -it -p <porta-host>:<porta-container> <imagem> /bin/bash # -p: portas","title":"Criar container com portas mapeadas"},{"location":"programas/docker/#criar-container-auto-destrutivo","text":"Ao usar um exit para sair do Terminal do SO rodando no container, o mesmo ser\u00e1 removido. docker run -it --rm <imagem> /bin/bash # --rm: remover container","title":"Criar container auto destrutivo"},{"location":"programas/docker/#criar-container-em-segundo-plano","text":"Cria e inicia o container em segundo plano. docker run -d -p <porta-host>:<porta-container> <imagem> <comando> # -d: executar em segundo plano","title":"Criar container em segundo plano"},{"location":"programas/docker/#criar-container-com-volume","text":"Cria e inicia o container com volume mapeado. Se o volume n\u00e3o existe, ele ser\u00e1 criado automaticamente. docker run -d --name <nome> -v <volume>:<path-container> <imagem> # -v: volume","title":"Criar container com volume"},{"location":"programas/docker/#status-do-container","text":"docker stats <id-ou-nome>","title":"Status do container"},{"location":"programas/docker/#informacoes-do-container","text":"docker inspect <id-ou-nome> Veja mais","title":"Informa\u00e7\u00f5es do container"},{"location":"programas/docker/#acessar-container","text":"Acessar terminal de um container ativo. O comando exec executa o comando passado, portando poderia executar qualquer comando dentro do container al\u00e9m de bash . docker exec -it <id-container> bash # ou docker exec -it <id-container> /bin/bash","title":"Acessar container"},{"location":"programas/docker/#listar-containers","text":"Listar somente containers ativos: docker ps Listar todos containers ativos e inativos: docker ps -a # ou docker ps --all Listar \u00faltimo container criado: docker ps -l","title":"Listar containers"},{"location":"programas/docker/#iniciar-container-parado","text":"Para iniciar um container parado: docker start <id-ou-nome>","title":"Iniciar container parado"},{"location":"programas/docker/#parar-container","text":"Para parar um container ativo: docker stop <id-ou-nome>","title":"Parar container"},{"location":"programas/docker/#remover-containers","text":"Remover container: docker rm <id-ou-nome> As mudan\u00e7as feitas no container ser\u00e3o perdidas para sempre.","title":"Remover containers"},{"location":"programas/docker/#variaveis-de-ambiente","text":"Definindo valor para as vari\u00e1veis de ambiente presentes no container. docker run -d -e <variavel> = <valor> -e <variavel> = <valor> <imagem>","title":"Vari\u00e1veis de ambiente"},{"location":"programas/docker/#commit-para-uma-imagem-docker","text":"Quando voc\u00ea inicia uma imagem Docker, voc\u00ea pode criar, modificar e excluir arquivos da mesma forma que voc\u00ea faz em m\u00e1quinas virtuais. As altera\u00e7\u00f5es que voc\u00ea fizer ser\u00e3o aplicadas apenas a esse container. Voc\u00ea pode inici\u00e1-lo ou par\u00e1-lo, mas uma vez que voc\u00ea o destrua com o comando docker rm , as mudan\u00e7as ser\u00e3o perdidas para sempre. Salvar o estado de um container como uma nova imagem do Docker localmente: docker commit -m \"MENSAGEM\" -a \"NOME-AUTOR\" ID-CONTAINER USUARIO/<novo-nome-imagem> # -m: mensagem de commit # -a: especificar o autor Para enviar a imagem para Docker Hub: docker login -u <usuario-dockerhub> Se seu nome de usu\u00e1rio do registro do Docker for diferente do nome de usu\u00e1rio local usado para criar a imagem, voc\u00ea ter\u00e1 que marcar sua imagem com o nome de usu\u00e1rio do registro: docker tag USUARIO/<novo-nome-imagem> <usuario-dockerhub>/<novo-nome-imagem> Enviar imagem: docker push <usuario-dockerhub>/<novo-nome-imagem> Agora estar\u00e1 dispon\u00edvel para baixar: docker pull <usuario-dockerhub>/<novo-nome-imagem>","title":"Commit para uma Imagem Docker"},{"location":"programas/docker/#trabalhando-com-volumes-docker","text":"","title":"Trabalhando com volumes Docker"},{"location":"programas/docker/#criar-volume-portavel","text":"Criar um volume port\u00e1vel, sem a necessidade de associ\u00e1-lo a um container especial. O volume pode ser consumido por qualquer container. docker volume create <nome> Iniciar container com volume criado. docker run -d -v <volume>:<path-container> <imagem> # -v: volume Iniciar container com volume criado com permiss\u00e3o de somente para leitura. docker run -d -v <volume>:<path-container>:ro <imagem> # -ro: somente leitura","title":"Criar volume port\u00e1vel"},{"location":"programas/docker/#criar-volume-nao-portavel","text":"O volume ser\u00e1 atrelado ao container. Inicia container e cria e mapeia o volume para o path do container. O path do host ser\u00e1 o padr\u00e3o definido pelo docker. No Ubuntu o path padr\u00e3o \u00e9 /var/lib/docker/volumes docker run -d --name <nome-container> -v <path-container> <imagem> Iniciar container e tamb\u00e9m cria e mapeia o volume definindo o path do host e container. docker run -d --name <nome-container> -v <path-host>:<path-container> <imagem>","title":"Criar volume n\u00e3o port\u00e1vel"},{"location":"programas/docker/#listar-volumes","text":"docker volume ls","title":"Listar volumes"},{"location":"programas/docker/#remover-volume","text":"docker volume rm <volume> Remover volumes n\u00e3o usados docker volume prune","title":"Remover volume"},{"location":"programas/docker/#informacoes-do-volume","text":"docker volume inspect <volume>","title":"Informa\u00e7\u00f5es do volume"},{"location":"programas/docker/#geral","text":"","title":"Geral"},{"location":"programas/docker/#remover-recursos-nao-usados-ou-pendentes","text":"Remover imagens, containers, volumes e redes n\u00e3o usadas ou pendentes. docker system prune","title":"Remover recursos n\u00e3o usados ou pendentes"},{"location":"programas/docker/#links","text":"https://docs.docker.com/compose/compose-file https://www.digitalocean.com/community/tutorials/o-ecossistema-do-docker-uma-introducao-aos-componentes-comuns-pt https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes","title":"Links"},{"location":"programas/favoritos/","text":"Programas Favoritos \u00b6 Programas Favoritos Rede mtr-tiny \u00c1udio e V\u00eddeo MKVToolNix Puddletag MusicBrainz Picard Gerenciamento Htop FontManager Psensor Rede \u00b6 mtr-tiny \u00b6 [Linux] Programa que reune fun\u00e7\u00f5es de tra\u00e7o de rota e ping. \u00c9 poss\u00edvel analisar o ping de em cada salto realizado em cada salto pela rota. Intala\u00e7\u00e3o sudo apt-get install mtr-tiny Execu\u00e7\u00e3o mtr www.google.com \u00c1udio e V\u00eddeo \u00b6 MKVToolNix \u00b6 https://mkvtoolnix.download [Linux, Windows] Programa para manipula\u00e7\u00e3o de arquivos .mkv Caracter\u00edsticas: Inserir e remover legendas embutidas (.srt) Definir qual a legenda e \u00e1udio padr\u00e3o Inserir e remover trilhas de \u00e1udio Puddletag \u00b6 [Linux] Editor de tags ID3v1 OBS: Abandonado, prefira o MusicBrainz Picard MusicBrainz Picard \u00b6 [Linux] Renomea\u00e7\u00e3o de arquivos para ID3 e vice-versa com op\u00e7\u00e3o de busca em bancos on-line. Gerenciamento \u00b6 Htop \u00b6 [Linux] Gerenciamento de processos FontManager \u00b6 [Linux] Gerenciamento de fontes Psensor \u00b6 [Linux] Interface gr\u00e1fica para monitoramento de temperatura dos componentes do pc","title":"Programas Favoritos"},{"location":"programas/favoritos/#programas-favoritos","text":"Programas Favoritos Rede mtr-tiny \u00c1udio e V\u00eddeo MKVToolNix Puddletag MusicBrainz Picard Gerenciamento Htop FontManager Psensor","title":"Programas Favoritos"},{"location":"programas/favoritos/#rede","text":"","title":"Rede"},{"location":"programas/favoritos/#mtr-tiny","text":"[Linux] Programa que reune fun\u00e7\u00f5es de tra\u00e7o de rota e ping. \u00c9 poss\u00edvel analisar o ping de em cada salto realizado em cada salto pela rota. Intala\u00e7\u00e3o sudo apt-get install mtr-tiny Execu\u00e7\u00e3o mtr www.google.com","title":"mtr-tiny"},{"location":"programas/favoritos/#audio-e-video","text":"","title":"\u00c1udio e V\u00eddeo"},{"location":"programas/favoritos/#mkvtoolnix","text":"https://mkvtoolnix.download [Linux, Windows] Programa para manipula\u00e7\u00e3o de arquivos .mkv Caracter\u00edsticas: Inserir e remover legendas embutidas (.srt) Definir qual a legenda e \u00e1udio padr\u00e3o Inserir e remover trilhas de \u00e1udio","title":"MKVToolNix"},{"location":"programas/favoritos/#puddletag","text":"[Linux] Editor de tags ID3v1 OBS: Abandonado, prefira o MusicBrainz Picard","title":"Puddletag"},{"location":"programas/favoritos/#musicbrainz-picard","text":"[Linux] Renomea\u00e7\u00e3o de arquivos para ID3 e vice-versa com op\u00e7\u00e3o de busca em bancos on-line.","title":"MusicBrainz Picard"},{"location":"programas/favoritos/#gerenciamento","text":"","title":"Gerenciamento"},{"location":"programas/favoritos/#htop","text":"[Linux] Gerenciamento de processos","title":"Htop"},{"location":"programas/favoritos/#fontmanager","text":"[Linux] Gerenciamento de fontes","title":"FontManager"},{"location":"programas/favoritos/#psensor","text":"[Linux] Interface gr\u00e1fica para monitoramento de temperatura dos componentes do pc","title":"Psensor"},{"location":"programas/firebase/","text":"Firebase \u00b6 [[ TOC ]] Firebase Introdu\u00e7\u00e3o Comandos Instala\u00e7\u00e3o Vers\u00e3o Inciar novo projeto Autoriza\u00e7\u00e3o do Firebase CLI Associar a aplica\u00e7\u00e3o com o projeto Firebase Iniciar servidor local Deploy Introdu\u00e7\u00e3o \u00b6 O Firebase \u00e9 uma plataforma de desenvolvimento de aplicativos m\u00f3veis e da Web desenvolvida pela Firebase, Inc. em 2011 e adquirida pelo Google em 2014. Comandos \u00b6 Instala\u00e7\u00e3o \u00b6 npm -g install firebase-tools Vers\u00e3o \u00b6 firebase --version Inciar novo projeto \u00b6 firebase init Autoriza\u00e7\u00e3o do Firebase CLI \u00b6 <aplicacao>$ firebase login Associar a aplica\u00e7\u00e3o com o projeto Firebase \u00b6 <aplicacao>$ firebase use --add Iniciar servidor local \u00b6 <aplicacao>$ firebase serve --only hosting Deploy \u00b6 firebase deploy","title":"Firebase"},{"location":"programas/firebase/#firebase","text":"[[ TOC ]] Firebase Introdu\u00e7\u00e3o Comandos Instala\u00e7\u00e3o Vers\u00e3o Inciar novo projeto Autoriza\u00e7\u00e3o do Firebase CLI Associar a aplica\u00e7\u00e3o com o projeto Firebase Iniciar servidor local Deploy","title":"Firebase"},{"location":"programas/firebase/#introducao","text":"O Firebase \u00e9 uma plataforma de desenvolvimento de aplicativos m\u00f3veis e da Web desenvolvida pela Firebase, Inc. em 2011 e adquirida pelo Google em 2014.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/firebase/#comandos","text":"","title":"Comandos"},{"location":"programas/firebase/#instalacao","text":"npm -g install firebase-tools","title":"Instala\u00e7\u00e3o"},{"location":"programas/firebase/#versao","text":"firebase --version","title":"Vers\u00e3o"},{"location":"programas/firebase/#inciar-novo-projeto","text":"firebase init","title":"Inciar novo projeto"},{"location":"programas/firebase/#autorizacao-do-firebase-cli","text":"<aplicacao>$ firebase login","title":"Autoriza\u00e7\u00e3o do Firebase CLI"},{"location":"programas/firebase/#associar-a-aplicacao-com-o-projeto-firebase","text":"<aplicacao>$ firebase use --add","title":"Associar a aplica\u00e7\u00e3o com o projeto Firebase"},{"location":"programas/firebase/#iniciar-servidor-local","text":"<aplicacao>$ firebase serve --only hosting","title":"Iniciar servidor local"},{"location":"programas/firebase/#deploy","text":"firebase deploy","title":"Deploy"},{"location":"programas/git/","text":"Git \u00b6 Git Autentica\u00e7\u00e3o via SSH Comandos config clone status branch checkout merge add commit remote prune log fetch pull push difftool rm mv Autentica\u00e7\u00e3o via SSH \u00b6 cd ~/.ssh ls -l Se aparecer os arquivos id_rsa id_rsa.pub known_hosts quer dizer que j\u00e1 existe uma chave privada e p\u00fablica para ser usada pelo SVN. Caso contr\u00e1rio \u00e9 necess\u00e1rio executar: ssh-keygen Copie o conte\u00fado do arquivo id_rsa.pub para as configura\u00e7\u00f5es de SSH dispon\u00edvel no site do servidor. Comandos \u00b6 config \u00b6 Configurar nome do usu\u00e1rio e email que ir\u00e1 acessar o reposit\u00f3rio git config --global user.name \"Nome Usu\u00e1rio\" git config --global user.email \"email@gmail.com\" Ver as configura\u00e7\u00f5es definidas git config --global --list clone \u00b6 Clone tem efetivamente um checkout de tudo, sem colocar algum \"bloqueio\" nesses arquivos no reposit\u00f3rio de refer\u00eancia git clone https://gitlab.com/user/user-project.git Entrar no repos\u00edtorio local criado cd user-project status \u00b6 Verifica o status dos arquivos em rela\u00e7\u00e3o ao \u00faltimo checkout git status branch \u00b6 Listar as branchs git branch Ver branch atual git rev-parse --abbrev-ref HEAD Criar branch git branch <nome> Criar branch mais checkout git checkout -b <nome> # Atalho para: # git branch <nome> # git checkout <nome> Criar branch mais checkout informando branch pai git checkout -b <branch-filha> <branch-pai> Excluir branch git branch -D <NOME> checkout \u00b6 Definir qual branch ser\u00e1 usada git checkout <NOME> merge \u00b6 Mesclar uma branch com outra ou com a master git merge <NOME> add \u00b6 Adiciona os arquivos modificados ao controle de versionamento git add -A ou git add . Adiciona somente um arquivo espec\u00edfico ao controle de versionamento git add <ARQUIVO> commit \u00b6 Versiona os arquivos que foram adicionados pelo comando add . git commit Commit j\u00e1 informando a mensagem de descri\u00e7\u00e3o git commit -m \"Mensagem commit\" Commit j\u00e1 adicionando os arquivos (add + commit) git commit -am \"Mensagem commit\" Commit sem informar mensagem (add + commit) git commit -am. remote prune \u00b6 Remove todas branchs locais que n\u00e3o n\u00e3o est\u00e3o mais no lado remoto. git remote prune origin log \u00b6 Ver os \u00faltimos commits git log fetch \u00b6 Baixa os HEADs com nomes ou tags de um ou mais reposit\u00f3rios (caso voc\u00ea tenha outro remote al\u00e9m do origin configurado), junto com os objetos necess\u00e1rios para complet\u00e1-los. Basicamente ele atualiza as refer\u00eancias locais com rela\u00e7\u00f5es \u00e0s remotas, mas n\u00e3o faz o merge com o branch local. git fetch pull \u00b6 Receber os arquivos que est\u00e3o no reposit\u00f3rio Incorpora mudan\u00e7as de um reposit\u00f3rio remoto para o branch local. \u00c9 equivalente a $ git fetch seguido de $ git merge FETCH_HEAD . git pull origin master push \u00b6 Enviar os arquivos que receberam commit para o reposit\u00f3rio git push -u origin master ou git push origin master origin master \u00e9 a branch mestre no reposit\u00f3rio remoto chamado origin difftool \u00b6 Comparar arquivos modificados com os arquivos j\u00e1 versionados git difftool rm \u00b6 Remover arquivo git rm <ARQUIVO> mv \u00b6 Mover arquivo git mv <ARQUIVO ORIGEM> <ARQUIVO DESTINO>","title":"Git"},{"location":"programas/git/#git","text":"Git Autentica\u00e7\u00e3o via SSH Comandos config clone status branch checkout merge add commit remote prune log fetch pull push difftool rm mv","title":"Git"},{"location":"programas/git/#autenticacao-via-ssh","text":"cd ~/.ssh ls -l Se aparecer os arquivos id_rsa id_rsa.pub known_hosts quer dizer que j\u00e1 existe uma chave privada e p\u00fablica para ser usada pelo SVN. Caso contr\u00e1rio \u00e9 necess\u00e1rio executar: ssh-keygen Copie o conte\u00fado do arquivo id_rsa.pub para as configura\u00e7\u00f5es de SSH dispon\u00edvel no site do servidor.","title":"Autentica\u00e7\u00e3o via SSH"},{"location":"programas/git/#comandos","text":"","title":"Comandos"},{"location":"programas/git/#config","text":"Configurar nome do usu\u00e1rio e email que ir\u00e1 acessar o reposit\u00f3rio git config --global user.name \"Nome Usu\u00e1rio\" git config --global user.email \"email@gmail.com\" Ver as configura\u00e7\u00f5es definidas git config --global --list","title":"config"},{"location":"programas/git/#clone","text":"Clone tem efetivamente um checkout de tudo, sem colocar algum \"bloqueio\" nesses arquivos no reposit\u00f3rio de refer\u00eancia git clone https://gitlab.com/user/user-project.git Entrar no repos\u00edtorio local criado cd user-project","title":"clone"},{"location":"programas/git/#status","text":"Verifica o status dos arquivos em rela\u00e7\u00e3o ao \u00faltimo checkout git status","title":"status"},{"location":"programas/git/#branch","text":"Listar as branchs git branch Ver branch atual git rev-parse --abbrev-ref HEAD Criar branch git branch <nome> Criar branch mais checkout git checkout -b <nome> # Atalho para: # git branch <nome> # git checkout <nome> Criar branch mais checkout informando branch pai git checkout -b <branch-filha> <branch-pai> Excluir branch git branch -D <NOME>","title":"branch"},{"location":"programas/git/#checkout","text":"Definir qual branch ser\u00e1 usada git checkout <NOME>","title":"checkout"},{"location":"programas/git/#merge","text":"Mesclar uma branch com outra ou com a master git merge <NOME>","title":"merge"},{"location":"programas/git/#add","text":"Adiciona os arquivos modificados ao controle de versionamento git add -A ou git add . Adiciona somente um arquivo espec\u00edfico ao controle de versionamento git add <ARQUIVO>","title":"add"},{"location":"programas/git/#commit","text":"Versiona os arquivos que foram adicionados pelo comando add . git commit Commit j\u00e1 informando a mensagem de descri\u00e7\u00e3o git commit -m \"Mensagem commit\" Commit j\u00e1 adicionando os arquivos (add + commit) git commit -am \"Mensagem commit\" Commit sem informar mensagem (add + commit) git commit -am.","title":"commit"},{"location":"programas/git/#remote-prune","text":"Remove todas branchs locais que n\u00e3o n\u00e3o est\u00e3o mais no lado remoto. git remote prune origin","title":"remote prune"},{"location":"programas/git/#log","text":"Ver os \u00faltimos commits git log","title":"log"},{"location":"programas/git/#fetch","text":"Baixa os HEADs com nomes ou tags de um ou mais reposit\u00f3rios (caso voc\u00ea tenha outro remote al\u00e9m do origin configurado), junto com os objetos necess\u00e1rios para complet\u00e1-los. Basicamente ele atualiza as refer\u00eancias locais com rela\u00e7\u00f5es \u00e0s remotas, mas n\u00e3o faz o merge com o branch local. git fetch","title":"fetch"},{"location":"programas/git/#pull","text":"Receber os arquivos que est\u00e3o no reposit\u00f3rio Incorpora mudan\u00e7as de um reposit\u00f3rio remoto para o branch local. \u00c9 equivalente a $ git fetch seguido de $ git merge FETCH_HEAD . git pull origin master","title":"pull"},{"location":"programas/git/#push","text":"Enviar os arquivos que receberam commit para o reposit\u00f3rio git push -u origin master ou git push origin master origin master \u00e9 a branch mestre no reposit\u00f3rio remoto chamado origin","title":"push"},{"location":"programas/git/#difftool","text":"Comparar arquivos modificados com os arquivos j\u00e1 versionados git difftool","title":"difftool"},{"location":"programas/git/#rm","text":"Remover arquivo git rm <ARQUIVO>","title":"rm"},{"location":"programas/git/#mv","text":"Mover arquivo git mv <ARQUIVO ORIGEM> <ARQUIVO DESTINO>","title":"mv"},{"location":"programas/intellij-idea/","text":"IntelliJIDEA \u00b6 IntelliJIDEA Atalhos Linux Navega\u00e7\u00e3o Bookmark Edi\u00e7\u00e3o Atalhos Linux \u00b6 Navega\u00e7\u00e3o \u00b6 Atalho Descri\u00e7\u00e3o CTR + F12 Ver lista de m\u00e9todos e campos ALT + SHIFT + LEFT/RIGHT Navegar para o ponto anterior/posterior CTR + SHIFT + BACKSPACE Navegar para o ponto de edi\u00e7\u00e3o anterior Bookmark \u00b6 Atalho Descri\u00e7\u00e3o CTR + F11 Criar/remover bookmak numerado CTR + SHIFT + #[0-9] Criar bookmark numerado CTR + #[0-9] Ir ao bookmark numerado F11 Criar/remover bookmak n\u00e3o numerado SHIFT + F11 Ver lista de bookmarks Edi\u00e7\u00e3o \u00b6 Atalho Descri\u00e7\u00e3o CTR + SHIFT + UP/DOWN Mover linha(s) para cima/baixo","title":"IntelliJIDEA"},{"location":"programas/intellij-idea/#intellijidea","text":"IntelliJIDEA Atalhos Linux Navega\u00e7\u00e3o Bookmark Edi\u00e7\u00e3o","title":"IntelliJIDEA"},{"location":"programas/intellij-idea/#atalhos-linux","text":"","title":"Atalhos Linux"},{"location":"programas/intellij-idea/#navegacao","text":"Atalho Descri\u00e7\u00e3o CTR + F12 Ver lista de m\u00e9todos e campos ALT + SHIFT + LEFT/RIGHT Navegar para o ponto anterior/posterior CTR + SHIFT + BACKSPACE Navegar para o ponto de edi\u00e7\u00e3o anterior","title":"Navega\u00e7\u00e3o"},{"location":"programas/intellij-idea/#bookmark","text":"Atalho Descri\u00e7\u00e3o CTR + F11 Criar/remover bookmak numerado CTR + SHIFT + #[0-9] Criar bookmark numerado CTR + #[0-9] Ir ao bookmark numerado F11 Criar/remover bookmak n\u00e3o numerado SHIFT + F11 Ver lista de bookmarks","title":"Bookmark"},{"location":"programas/intellij-idea/#edicao","text":"Atalho Descri\u00e7\u00e3o CTR + SHIFT + UP/DOWN Mover linha(s) para cima/baixo","title":"Edi\u00e7\u00e3o"},{"location":"programas/maven/","text":"Maven \u00b6 Maven Introdu\u00e7\u00e3o Instala\u00e7\u00e3o Configura\u00e7\u00f5es Gerenciamento de depend\u00eancia Utiliza\u00e7\u00e3o de plugins Ciclos de vida Introdu\u00e7\u00e3o \u00b6 Maven \u00e9 uma ferramenta de gerenciamento e automa\u00e7\u00e3o de constru\u00e7\u00e3o ( build ) de projetos. Entretanto, por fornecer diversas funcionalidades adicionais atrav\u00e9s do uso de plugins e estimular o emprego de melhores pr\u00e1ticas de organiza\u00e7\u00e3o, desenvolvimento e manuten\u00e7\u00e3o de projetos, \u00e9 muito mais do que apenas uma ferramenta auxiliar. Um desenvolvedor que seja alocado em um projeto Java EE que utilize o Maven corretamente n\u00e3o ter\u00e1 que saber de imediato quais depend\u00eancias (bibliotecas) o projeto necessita para compilar e executar, n\u00e3o precisar\u00e1 descobrir onde obt\u00ea-las e nem ir\u00e1 se preocupar em como realizar a constru\u00e7\u00e3o do pacote do aplicativo. Com um comando simples, como mvn install , na raiz do c\u00f3digo-fonte do projeto, instruir\u00e1 o Maven a gerar o c\u00f3digo extra necess\u00e1rio (cliente de um web service, por exemplo), validar e compilar o projeto, test\u00e1-lo atrav\u00e9s de seus testes unit\u00e1rios e gerar o pacote com o c\u00f3digo compilado. Outras etapas poderiam incluir auditoria de qualidade de c\u00f3digo, documenta\u00e7\u00e3o, gera\u00e7\u00e3o de estat\u00edsticas, entre diversas possibilidades. Instala\u00e7\u00e3o \u00b6 Download do arquivo compactado em https://maven.apache.org/download.cgi . Extrair arquivo. Adicionar o diret\u00f3rio bin na vari\u00e1vel de ambiente $PATH . PATH = $PATH : \\C AMINHO \\b in Conferir se foi configurado com sucesso. mvn -version Configura\u00e7\u00f5es \u00b6 A unidade b\u00e1sica de configura\u00e7\u00e3o do Maven \u00e9 um arquivo chamado pom.xml , que deve ficar na raiz do seu projeto. Ele \u00e9 um arquivo conhecido como Project Object Model . Nele \u00e9 declarado a estrutura, depend\u00eancias e caracter\u00edsticas do projeto. O pom.xml \u00e9 deixado na raiz do projeto para poder chamar as targets de build do projeto. O menor arquivo pom.xml v\u00e1lido \u00e9 o seguinte: <project> <modelVersion> 4.0.0 </modelVersion> <groupId> br.com.empresa </groupId> <artifactId> teste </artifactId> <version> 1.0 </version> </project> Onde: modelVersion : identifica\u00e7\u00e3o da vers\u00e3o do arquivo pom.xml e deve ser sempre 4.0.0. groupId : um identificador da empresa/grupo ao qual o projeto pertence. Geralmente o nome do site da empresa/grupo ao contr\u00e1rio. Ex: br.com.empresa. artifactId : o nome do projeto. Ex: teste. version : a vers\u00e3o atual do projeto. Ex: 1.0-SNAPSHOT. Gerenciamento de depend\u00eancia \u00b6 Para dizer que o log4j 1.2.15 , por exemplo, \u00e9 uma depend\u00eancia da sua aplica\u00e7\u00e3o \u00e9 s\u00f3 acrescentar no seu pom as linhas: <project> ... <dependencies> <dependency> <groupId> log4j </groupId> <artifactId> log4j </artifactId> <version> 1.2.15 </version> </dependency> </dependencies> ... </project> Quando necess\u00e1rio, o Maven vai baixar o jar do log4j 1.2.15 , e todas as suas depend\u00eancias, e vai coloc\u00e1-las no classpath da sua aplica\u00e7\u00e3o durante os builds , testes, etc. Ou seja, n\u00e3o \u00e9 necess\u00e1rio entrar no site do log4j , baixar um zip com v\u00e1rios jars e ter que procurar quais jars devem ser colocados no classpath . Todos os jars baixados pelo Maven s\u00e3o guardados na pasta repository dentro da M2_HOME que foi configurado durante a instala\u00e7\u00e3o de Maven. Assim, se mais de um projeto for depende do mesmo jar , ele n\u00e3o \u00e9 baixado de novo. Utiliza\u00e7\u00e3o de plugins \u00b6 Al\u00e9m dos principais targets do Maven, \u00e9 poss\u00edvel executar targets de plugins . Voc\u00ea s\u00f3 precisa digitar na linha de comando: mvn [nomedoplugin]:[target] E ent\u00e3o o Maven baixa o plugin , se necess\u00e1rio, e executa a target pra voc\u00ea. Existe uma lista bem grande de plugins do Maven e uma boa parte desses plugins podem ser usados sem nenhuma configura\u00e7\u00e3o adicional no pom.xml . Comando Descri\u00e7\u00e3o dependency:tree Listagem das depend\u00eancias que o projeto possui. spring-boot:run Executar o projeto feito em Spring-boot. Ciclos de vida \u00b6 Um conceito muito importante por tr\u00e1s do Maven \u00e9 o ciclo de vida do projeto. Um ciclo de vida possui est\u00e1gios, chamados de fases. Em cada fase, um ou mais objetivos podem ser executados. O Maven possui nativamente 3 ciclos de vida: clean , site , default . Esses ciclos de vida s\u00e3o divididos em fases, e s\u00e3o essas fases que invocamos quando queremos executar alguma opera\u00e7\u00e3o. Clean pre-clean : executa a\u00e7\u00f5es necess\u00e1rias antes da limpeza do build anterior. clean : remove os artefatos gerados no build anterior. Site site : cria as p\u00e1ginas web e a documenta\u00e7\u00e3o do projeto. site-deploy : faz o deploy(implanta\u00e7\u00e3o) da documenta\u00e7\u00e3o e das p\u00e1ginas web geradas na fase site em um servidor. Default initialize : prepara o build configurando propriedades, criando diret\u00f3rios, etc. process-resources : processa e copia os resources para o diret\u00f3rio das classes compiladas. compile : compila os c\u00f3digos-fontes de produ\u00e7\u00e3o. test-compile : compila os c\u00f3digos-fonte de teste. test : executa os testes unit\u00e1rios e cria os relat\u00f3rios. package : empacota os artefatos do build em um arquivo distribu\u00edvel, como um JAR, por exemplo. install : salva no reposit\u00f3rio local(/home/seuusername/.m2/repository) o arquivo distribu\u00edvel gerado na fase package. \u00c9 poss\u00edvel invocar qualquer dessas fases na linha de comando, digitando: mvn [ fase ] Quando executamos uma fase, todas as fases anteriores do ciclo de vida s\u00e3o executadas. Por exemplo, quando invocamos a fase compile , antes de executar os a\u00e7\u00f5es dessa fase, o Maven executa as fases initialize e process-resources . Algumas das fases do ciclo possuem plugins associadas a elas, e esses plugins s\u00e3o executados assim que a fase \u00e9 chamada para ser executada. \u00c9 poss\u00edvel registrar plugins para rodarem em qualquer fase do ciclo, conseguindo, assim, personalizar o build do seu projeto facilmente. Por exemplo, se voc\u00ea quiser criar um jar com o c\u00f3digo fonte do projeto, e que esse jar seja gerado depois que o projeto foi empacotado, \u00e9 s\u00f3 acrescentar no pom.xml : <project> ... <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-source-plugin </artifactId> <executions> <execution> <id> attach-sources </id> <phase> package </phase> <goals> <goal> jar </goal> </goals> </execution> </executions> </plugin> </plugins> </build> ... </project> Assim, o plugin Source vai executar seu goal jar na fase package do ciclo de vida. \u00c9 como se fosse chamado mvn source:jar quando o build passa pela fase de package . A fase package j\u00e1 possui um plugin associado a ela: o jar:jar (supondo que \u00e9 um projeto jar), ent\u00e3o o plugin source s\u00f3 ser\u00e1 executado depois do jar:jar . Em geral se for registrado mais de um plugin pra mesma fase, eles ser\u00e3o executados na ordem em que eles forem declarados.","title":"Maven"},{"location":"programas/maven/#maven","text":"Maven Introdu\u00e7\u00e3o Instala\u00e7\u00e3o Configura\u00e7\u00f5es Gerenciamento de depend\u00eancia Utiliza\u00e7\u00e3o de plugins Ciclos de vida","title":"Maven"},{"location":"programas/maven/#introducao","text":"Maven \u00e9 uma ferramenta de gerenciamento e automa\u00e7\u00e3o de constru\u00e7\u00e3o ( build ) de projetos. Entretanto, por fornecer diversas funcionalidades adicionais atrav\u00e9s do uso de plugins e estimular o emprego de melhores pr\u00e1ticas de organiza\u00e7\u00e3o, desenvolvimento e manuten\u00e7\u00e3o de projetos, \u00e9 muito mais do que apenas uma ferramenta auxiliar. Um desenvolvedor que seja alocado em um projeto Java EE que utilize o Maven corretamente n\u00e3o ter\u00e1 que saber de imediato quais depend\u00eancias (bibliotecas) o projeto necessita para compilar e executar, n\u00e3o precisar\u00e1 descobrir onde obt\u00ea-las e nem ir\u00e1 se preocupar em como realizar a constru\u00e7\u00e3o do pacote do aplicativo. Com um comando simples, como mvn install , na raiz do c\u00f3digo-fonte do projeto, instruir\u00e1 o Maven a gerar o c\u00f3digo extra necess\u00e1rio (cliente de um web service, por exemplo), validar e compilar o projeto, test\u00e1-lo atrav\u00e9s de seus testes unit\u00e1rios e gerar o pacote com o c\u00f3digo compilado. Outras etapas poderiam incluir auditoria de qualidade de c\u00f3digo, documenta\u00e7\u00e3o, gera\u00e7\u00e3o de estat\u00edsticas, entre diversas possibilidades.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/maven/#instalacao","text":"Download do arquivo compactado em https://maven.apache.org/download.cgi . Extrair arquivo. Adicionar o diret\u00f3rio bin na vari\u00e1vel de ambiente $PATH . PATH = $PATH : \\C AMINHO \\b in Conferir se foi configurado com sucesso. mvn -version","title":"Instala\u00e7\u00e3o"},{"location":"programas/maven/#configuracoes","text":"A unidade b\u00e1sica de configura\u00e7\u00e3o do Maven \u00e9 um arquivo chamado pom.xml , que deve ficar na raiz do seu projeto. Ele \u00e9 um arquivo conhecido como Project Object Model . Nele \u00e9 declarado a estrutura, depend\u00eancias e caracter\u00edsticas do projeto. O pom.xml \u00e9 deixado na raiz do projeto para poder chamar as targets de build do projeto. O menor arquivo pom.xml v\u00e1lido \u00e9 o seguinte: <project> <modelVersion> 4.0.0 </modelVersion> <groupId> br.com.empresa </groupId> <artifactId> teste </artifactId> <version> 1.0 </version> </project> Onde: modelVersion : identifica\u00e7\u00e3o da vers\u00e3o do arquivo pom.xml e deve ser sempre 4.0.0. groupId : um identificador da empresa/grupo ao qual o projeto pertence. Geralmente o nome do site da empresa/grupo ao contr\u00e1rio. Ex: br.com.empresa. artifactId : o nome do projeto. Ex: teste. version : a vers\u00e3o atual do projeto. Ex: 1.0-SNAPSHOT.","title":"Configura\u00e7\u00f5es"},{"location":"programas/maven/#gerenciamento-de-dependencia","text":"Para dizer que o log4j 1.2.15 , por exemplo, \u00e9 uma depend\u00eancia da sua aplica\u00e7\u00e3o \u00e9 s\u00f3 acrescentar no seu pom as linhas: <project> ... <dependencies> <dependency> <groupId> log4j </groupId> <artifactId> log4j </artifactId> <version> 1.2.15 </version> </dependency> </dependencies> ... </project> Quando necess\u00e1rio, o Maven vai baixar o jar do log4j 1.2.15 , e todas as suas depend\u00eancias, e vai coloc\u00e1-las no classpath da sua aplica\u00e7\u00e3o durante os builds , testes, etc. Ou seja, n\u00e3o \u00e9 necess\u00e1rio entrar no site do log4j , baixar um zip com v\u00e1rios jars e ter que procurar quais jars devem ser colocados no classpath . Todos os jars baixados pelo Maven s\u00e3o guardados na pasta repository dentro da M2_HOME que foi configurado durante a instala\u00e7\u00e3o de Maven. Assim, se mais de um projeto for depende do mesmo jar , ele n\u00e3o \u00e9 baixado de novo.","title":"Gerenciamento de depend\u00eancia"},{"location":"programas/maven/#utilizacao-de-plugins","text":"Al\u00e9m dos principais targets do Maven, \u00e9 poss\u00edvel executar targets de plugins . Voc\u00ea s\u00f3 precisa digitar na linha de comando: mvn [nomedoplugin]:[target] E ent\u00e3o o Maven baixa o plugin , se necess\u00e1rio, e executa a target pra voc\u00ea. Existe uma lista bem grande de plugins do Maven e uma boa parte desses plugins podem ser usados sem nenhuma configura\u00e7\u00e3o adicional no pom.xml . Comando Descri\u00e7\u00e3o dependency:tree Listagem das depend\u00eancias que o projeto possui. spring-boot:run Executar o projeto feito em Spring-boot.","title":"Utiliza\u00e7\u00e3o de plugins"},{"location":"programas/maven/#ciclos-de-vida","text":"Um conceito muito importante por tr\u00e1s do Maven \u00e9 o ciclo de vida do projeto. Um ciclo de vida possui est\u00e1gios, chamados de fases. Em cada fase, um ou mais objetivos podem ser executados. O Maven possui nativamente 3 ciclos de vida: clean , site , default . Esses ciclos de vida s\u00e3o divididos em fases, e s\u00e3o essas fases que invocamos quando queremos executar alguma opera\u00e7\u00e3o. Clean pre-clean : executa a\u00e7\u00f5es necess\u00e1rias antes da limpeza do build anterior. clean : remove os artefatos gerados no build anterior. Site site : cria as p\u00e1ginas web e a documenta\u00e7\u00e3o do projeto. site-deploy : faz o deploy(implanta\u00e7\u00e3o) da documenta\u00e7\u00e3o e das p\u00e1ginas web geradas na fase site em um servidor. Default initialize : prepara o build configurando propriedades, criando diret\u00f3rios, etc. process-resources : processa e copia os resources para o diret\u00f3rio das classes compiladas. compile : compila os c\u00f3digos-fontes de produ\u00e7\u00e3o. test-compile : compila os c\u00f3digos-fonte de teste. test : executa os testes unit\u00e1rios e cria os relat\u00f3rios. package : empacota os artefatos do build em um arquivo distribu\u00edvel, como um JAR, por exemplo. install : salva no reposit\u00f3rio local(/home/seuusername/.m2/repository) o arquivo distribu\u00edvel gerado na fase package. \u00c9 poss\u00edvel invocar qualquer dessas fases na linha de comando, digitando: mvn [ fase ] Quando executamos uma fase, todas as fases anteriores do ciclo de vida s\u00e3o executadas. Por exemplo, quando invocamos a fase compile , antes de executar os a\u00e7\u00f5es dessa fase, o Maven executa as fases initialize e process-resources . Algumas das fases do ciclo possuem plugins associadas a elas, e esses plugins s\u00e3o executados assim que a fase \u00e9 chamada para ser executada. \u00c9 poss\u00edvel registrar plugins para rodarem em qualquer fase do ciclo, conseguindo, assim, personalizar o build do seu projeto facilmente. Por exemplo, se voc\u00ea quiser criar um jar com o c\u00f3digo fonte do projeto, e que esse jar seja gerado depois que o projeto foi empacotado, \u00e9 s\u00f3 acrescentar no pom.xml : <project> ... <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-source-plugin </artifactId> <executions> <execution> <id> attach-sources </id> <phase> package </phase> <goals> <goal> jar </goal> </goals> </execution> </executions> </plugin> </plugins> </build> ... </project> Assim, o plugin Source vai executar seu goal jar na fase package do ciclo de vida. \u00c9 como se fosse chamado mvn source:jar quando o build passa pela fase de package . A fase package j\u00e1 possui um plugin associado a ela: o jar:jar (supondo que \u00e9 um projeto jar), ent\u00e3o o plugin source s\u00f3 ser\u00e1 executado depois do jar:jar . Em geral se for registrado mais de um plugin pra mesma fase, eles ser\u00e3o executados na ordem em que eles forem declarados.","title":"Ciclos de vida"},{"location":"programas/mysql/","text":"MySQL \u00b6 MySQL Introdu\u00e7\u00e3o Comandos Acesso ao MySQL Criar banco Definir banco corrente Importar arquivo Introdu\u00e7\u00e3o \u00b6 Comandos \u00b6 Acesso ao MySQL \u00b6 shell> mysql -p Criar banco \u00b6 shell> create database <banco> character set utf8 collate utf8_general_ci ; Definir banco corrente \u00b6 mysql> use <banco> ; Importar arquivo \u00b6 Linux shell> mysql <banco> < <arquivo.sql> Ambiente MySQL mysql> use <banco> ; mysql> source <arquivo.sql> ;","title":"MySQL"},{"location":"programas/mysql/#mysql","text":"MySQL Introdu\u00e7\u00e3o Comandos Acesso ao MySQL Criar banco Definir banco corrente Importar arquivo","title":"MySQL"},{"location":"programas/mysql/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"programas/mysql/#comandos","text":"","title":"Comandos"},{"location":"programas/mysql/#acesso-ao-mysql","text":"shell> mysql -p","title":"Acesso ao MySQL"},{"location":"programas/mysql/#criar-banco","text":"shell> create database <banco> character set utf8 collate utf8_general_ci ;","title":"Criar banco"},{"location":"programas/mysql/#definir-banco-corrente","text":"mysql> use <banco> ;","title":"Definir banco corrente"},{"location":"programas/mysql/#importar-arquivo","text":"Linux shell> mysql <banco> < <arquivo.sql> Ambiente MySQL mysql> use <banco> ; mysql> source <arquivo.sql> ;","title":"Importar arquivo"},{"location":"programas/nginx/","text":"Nginx \u00b6 Nginx Introdu\u00e7\u00e3o Status Iniciar Parar Reiniciar Recarregar configura\u00e7\u00f5es [[ TOC ]] Introdu\u00e7\u00e3o \u00b6 Nginx \u00e9 um servidor leve de HTTP, proxy reverso, proxy de e-mail IMAP/POP3, feito por Igor Sysoev em 2005, sob licen\u00e7a BSD-like 2-clause. O Nginx consome menos mem\u00f3ria que o Apache, pois lida com requisi\u00e7\u00f5es Web do tipo \"event-based web server\"; e o Apache \u00e9 baseado no \"process-based server\", podendo trabalhar juntos. \u00c9 poss\u00edvel diminuir o consumo de mem\u00f3ria do Apache, passando as requisi\u00e7\u00f5es Web primeiro no Nginx, assim, o Apache n\u00e3o precisa servir arquivos est\u00e1ticos, e pode depender do bom controle de cache feito pelo Nginx. Status \u00b6 sudo systemctl status nginx # ou sudo service nginx status Iniciar \u00b6 sudo systemctl start nginx # ou sudo service nginx start Parar \u00b6 sudo systemctl stop nginx # ou sudo service nginx stop Reiniciar \u00b6 sudo systemctl restart nginx # ou sudo service nginx restart Recarregar configura\u00e7\u00f5es \u00b6 Reinicia o nginx de forma mais r\u00e1pida para apenas recarregar as configura\u00e7\u00f5es. sudo systemctl reload nginx # ou sudo service nginx reload","title":"Nginx"},{"location":"programas/nginx/#nginx","text":"Nginx Introdu\u00e7\u00e3o Status Iniciar Parar Reiniciar Recarregar configura\u00e7\u00f5es [[ TOC ]]","title":"Nginx"},{"location":"programas/nginx/#introducao","text":"Nginx \u00e9 um servidor leve de HTTP, proxy reverso, proxy de e-mail IMAP/POP3, feito por Igor Sysoev em 2005, sob licen\u00e7a BSD-like 2-clause. O Nginx consome menos mem\u00f3ria que o Apache, pois lida com requisi\u00e7\u00f5es Web do tipo \"event-based web server\"; e o Apache \u00e9 baseado no \"process-based server\", podendo trabalhar juntos. \u00c9 poss\u00edvel diminuir o consumo de mem\u00f3ria do Apache, passando as requisi\u00e7\u00f5es Web primeiro no Nginx, assim, o Apache n\u00e3o precisa servir arquivos est\u00e1ticos, e pode depender do bom controle de cache feito pelo Nginx.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/nginx/#status","text":"sudo systemctl status nginx # ou sudo service nginx status","title":"Status"},{"location":"programas/nginx/#iniciar","text":"sudo systemctl start nginx # ou sudo service nginx start","title":"Iniciar"},{"location":"programas/nginx/#parar","text":"sudo systemctl stop nginx # ou sudo service nginx stop","title":"Parar"},{"location":"programas/nginx/#reiniciar","text":"sudo systemctl restart nginx # ou sudo service nginx restart","title":"Reiniciar"},{"location":"programas/nginx/#recarregar-configuracoes","text":"Reinicia o nginx de forma mais r\u00e1pida para apenas recarregar as configura\u00e7\u00f5es. sudo systemctl reload nginx # ou sudo service nginx reload","title":"Recarregar configura\u00e7\u00f5es"},{"location":"programas/postgres-sql/","text":"PostgreSQL \u00b6 PostgreSQL \u00e9 um sistema gerenciador de banco de dados objeto relacional (SGBD), desenvolvido como projeto de c\u00f3digo aberto. PostgreSQL Acesso ao usu\u00e1rio postgres Configura\u00e7\u00e3o Alterar senha do usu\u00e1rio postgres Servi\u00e7o Criar banco Acesso ao shell do banco Role Schema Schemas Especiais Constraints Problemas Acesso ao usu\u00e1rio postgres \u00b6 Para acessar o usu\u00e1rio PostgreSQL sudo -u postgres -i # ou sudo su - postgres Configura\u00e7\u00e3o \u00b6 Instalar a \u00faltima vers\u00e3o do PostgreSQL Acessar o usu\u00e1rio PostgreSQL sudo -u postgres -i Antes que o PostgreSQL possa funcionar corretamente, o cluster do banco de dados deve ser inicializado: postgres> initdb --locale $LANG -E UTF8 -D '/var/lib/postgres/data' postgres> exit Alterar senha do usu\u00e1rio postgres \u00b6 postgres> psql -c \"alter user postgres with password 'NOVA-SENHA'\" Servi\u00e7o \u00b6 Iniciar o servi\u00e7o systemctl start postgresql Iniciar servi\u00e7o na inicializa\u00e7\u00e3o do S.O. systemctl enable postgresql Parar o servi\u00e7o systemctl stop postgresql Ver status systemctl status postgresql Criar banco \u00b6 postgres> createdb <banco> Acesso ao shell do banco \u00b6 psql -d <banco> Role \u00b6 At\u00e9 a vers\u00e3o 8.1, os conceitos de usu\u00e1rios e de grupos administrativos eram distintos em PostgreSQL . Esses conceitos foram abstra\u00eddos e absorvidos por uma \u00fanica entidade chamada role . Uma role descreve seu pr\u00f3prio papel e quais as fun\u00e7\u00f5es em que ela atua no contexto da seguran\u00e7a do banco de dados. De modo abstrato, uma role pode se comportar como um usu\u00e1rio, como um grupo ou ter ambos comportamentos ao mesmo tempo. A role pode conter e ser contida por outra role . Deste modo, fica claro que o conceito de role est\u00e1 relacionado com a defini\u00e7\u00e3o de permiss\u00f5es, privil\u00e9gios e garantias de acesso aos objetos do banco e aos dados. Roles podem ser donas de seus pr\u00f3prios objetos (tabelas) e podem delegar permiss\u00f5es ou direitos para outras roles atrav\u00e9s de heran\u00e7a e relacionamentos de confian\u00e7a. N\u00edvel Comando Descri\u00e7\u00e3o usu\u00e1rio createuser --interactive Criar role em modo iterativo banco \\du Mostrar roles Schema \u00b6 A partir da vers\u00e3o 7.3, o PostgreSQL iniciou o suporte a Schema, no qual \u00e9 poss\u00edvel criar um espa\u00e7o l\u00f3gico (namespace) dentro do banco de dados para armazenar os objetos: Dados, tabelas, fun\u00e7\u00f5es, sequence, etc. O conceito de Schema \u00e9 semelhante ao cross-database, a diferen\u00e7a \u00e9 que o cross-database relaciona objetos (Tabelas, \u00edndices, sequence, etc) de banco de dados distintos, j\u00e1 o Schema relaciona objetos (Tabelas, \u00edndices, sequence, etc) que est\u00e3o no mesmo banco de dados , mas em estruturas l\u00f3gicas (namespace) distintas - schema. Schemas Especiais \u00b6 Todo Banco de Dados PostgreSQL cont\u00e9m schemas especiais que s\u00e3o necess\u00e1rios para o Backend (processo postgreSQL que estabelece a conex\u00e3o com o cliente) por isso, eles n\u00e3o podem ser removidos ou renomeados. Os Schemas especiais: pg_catalog : Cont\u00e9m informa\u00e7\u00f5es sobre as tabelas, fun\u00e7\u00f5es, views e metainforma\u00e7\u00f5es sobre o banco; pg_temp_x : \u00c9 um schema usado na cria\u00e7\u00e3o e armazenamento de tabelas tempor\u00e1rias; pg_toast : Rela\u00e7\u00f5es internas do PostgreSQL usadas para v\u00e1rias atividades, como a reindex\u00e3o (vacuum), por exemplo. Constraints \u00b6 Constraints, ou Restri\u00e7\u00f5es, s\u00e3o regras espec\u00edficas aplicadas nas colunas de uma tabela, ou na tabela em si. \u00c9 poss\u00edvel definir restri\u00e7\u00f5es em colunas e em tabelas, permitindo um grande controle sobre os dados armazenados. Caso um usu\u00e1rio tente armazenar dados em uma coluna de forma a violar uma restri\u00e7\u00e3o, um erro ser\u00e1 gerado. Ou seja, s\u00e3o usadas para limitar os tipos de dados que s\u00e3o inseridos. As principais constraints SQL dispon\u00edveis no PostgreSQL s\u00e3o as seguintes: NOT NULL CHECK UNIQUE PRIMARY KEY FOREIGN KEY Para especificar uma constraint nomeada, \u00e9 usado a palavra CONSTRAINT seguido pelo identificador e a defini\u00e7\u00e3o da constraint . Se o nome da constraint n\u00e3o for especificado, o sistema escolher\u00e1 um automaticamente. A nomea\u00e7\u00e3o de constraint \u00e9 \u00fatil durante o debug de erros na leitura de logs . O nome da constraint deve ser \u00fanica no banco. CREATE TABLE produtos ( codigo integer , nome text , id_empresa integer NOT NULL , preco numeric CONSTRAINT produtos_preco_positivo CHECK ( preco > 0 ), CONSTRAINT fk_produtos_empresas FOREIGN KEY ( id_empresa ) REFERENCES empresas ( id ), ); Problemas \u00b6 An old version of the database format was found : sudo rm -rf /var/lib/postgres/data sudo mkdir /var/lib/postgres/data sudo chown -R postgres:postgres /var/lib/postgres/data","title":"PostgreSQL"},{"location":"programas/postgres-sql/#postgresql","text":"PostgreSQL \u00e9 um sistema gerenciador de banco de dados objeto relacional (SGBD), desenvolvido como projeto de c\u00f3digo aberto. PostgreSQL Acesso ao usu\u00e1rio postgres Configura\u00e7\u00e3o Alterar senha do usu\u00e1rio postgres Servi\u00e7o Criar banco Acesso ao shell do banco Role Schema Schemas Especiais Constraints Problemas","title":"PostgreSQL"},{"location":"programas/postgres-sql/#acesso-ao-usuario-postgres","text":"Para acessar o usu\u00e1rio PostgreSQL sudo -u postgres -i # ou sudo su - postgres","title":"Acesso ao usu\u00e1rio postgres"},{"location":"programas/postgres-sql/#configuracao","text":"Instalar a \u00faltima vers\u00e3o do PostgreSQL Acessar o usu\u00e1rio PostgreSQL sudo -u postgres -i Antes que o PostgreSQL possa funcionar corretamente, o cluster do banco de dados deve ser inicializado: postgres> initdb --locale $LANG -E UTF8 -D '/var/lib/postgres/data' postgres> exit","title":"Configura\u00e7\u00e3o"},{"location":"programas/postgres-sql/#alterar-senha-do-usuario-postgres","text":"postgres> psql -c \"alter user postgres with password 'NOVA-SENHA'\"","title":"Alterar senha do usu\u00e1rio postgres"},{"location":"programas/postgres-sql/#servico","text":"Iniciar o servi\u00e7o systemctl start postgresql Iniciar servi\u00e7o na inicializa\u00e7\u00e3o do S.O. systemctl enable postgresql Parar o servi\u00e7o systemctl stop postgresql Ver status systemctl status postgresql","title":"Servi\u00e7o"},{"location":"programas/postgres-sql/#criar-banco","text":"postgres> createdb <banco>","title":"Criar banco"},{"location":"programas/postgres-sql/#acesso-ao-shell-do-banco","text":"psql -d <banco>","title":"Acesso ao shell do banco"},{"location":"programas/postgres-sql/#role","text":"At\u00e9 a vers\u00e3o 8.1, os conceitos de usu\u00e1rios e de grupos administrativos eram distintos em PostgreSQL . Esses conceitos foram abstra\u00eddos e absorvidos por uma \u00fanica entidade chamada role . Uma role descreve seu pr\u00f3prio papel e quais as fun\u00e7\u00f5es em que ela atua no contexto da seguran\u00e7a do banco de dados. De modo abstrato, uma role pode se comportar como um usu\u00e1rio, como um grupo ou ter ambos comportamentos ao mesmo tempo. A role pode conter e ser contida por outra role . Deste modo, fica claro que o conceito de role est\u00e1 relacionado com a defini\u00e7\u00e3o de permiss\u00f5es, privil\u00e9gios e garantias de acesso aos objetos do banco e aos dados. Roles podem ser donas de seus pr\u00f3prios objetos (tabelas) e podem delegar permiss\u00f5es ou direitos para outras roles atrav\u00e9s de heran\u00e7a e relacionamentos de confian\u00e7a. N\u00edvel Comando Descri\u00e7\u00e3o usu\u00e1rio createuser --interactive Criar role em modo iterativo banco \\du Mostrar roles","title":"Role"},{"location":"programas/postgres-sql/#schema","text":"A partir da vers\u00e3o 7.3, o PostgreSQL iniciou o suporte a Schema, no qual \u00e9 poss\u00edvel criar um espa\u00e7o l\u00f3gico (namespace) dentro do banco de dados para armazenar os objetos: Dados, tabelas, fun\u00e7\u00f5es, sequence, etc. O conceito de Schema \u00e9 semelhante ao cross-database, a diferen\u00e7a \u00e9 que o cross-database relaciona objetos (Tabelas, \u00edndices, sequence, etc) de banco de dados distintos, j\u00e1 o Schema relaciona objetos (Tabelas, \u00edndices, sequence, etc) que est\u00e3o no mesmo banco de dados , mas em estruturas l\u00f3gicas (namespace) distintas - schema.","title":"Schema"},{"location":"programas/postgres-sql/#schemas-especiais","text":"Todo Banco de Dados PostgreSQL cont\u00e9m schemas especiais que s\u00e3o necess\u00e1rios para o Backend (processo postgreSQL que estabelece a conex\u00e3o com o cliente) por isso, eles n\u00e3o podem ser removidos ou renomeados. Os Schemas especiais: pg_catalog : Cont\u00e9m informa\u00e7\u00f5es sobre as tabelas, fun\u00e7\u00f5es, views e metainforma\u00e7\u00f5es sobre o banco; pg_temp_x : \u00c9 um schema usado na cria\u00e7\u00e3o e armazenamento de tabelas tempor\u00e1rias; pg_toast : Rela\u00e7\u00f5es internas do PostgreSQL usadas para v\u00e1rias atividades, como a reindex\u00e3o (vacuum), por exemplo.","title":"Schemas Especiais"},{"location":"programas/postgres-sql/#constraints","text":"Constraints, ou Restri\u00e7\u00f5es, s\u00e3o regras espec\u00edficas aplicadas nas colunas de uma tabela, ou na tabela em si. \u00c9 poss\u00edvel definir restri\u00e7\u00f5es em colunas e em tabelas, permitindo um grande controle sobre os dados armazenados. Caso um usu\u00e1rio tente armazenar dados em uma coluna de forma a violar uma restri\u00e7\u00e3o, um erro ser\u00e1 gerado. Ou seja, s\u00e3o usadas para limitar os tipos de dados que s\u00e3o inseridos. As principais constraints SQL dispon\u00edveis no PostgreSQL s\u00e3o as seguintes: NOT NULL CHECK UNIQUE PRIMARY KEY FOREIGN KEY Para especificar uma constraint nomeada, \u00e9 usado a palavra CONSTRAINT seguido pelo identificador e a defini\u00e7\u00e3o da constraint . Se o nome da constraint n\u00e3o for especificado, o sistema escolher\u00e1 um automaticamente. A nomea\u00e7\u00e3o de constraint \u00e9 \u00fatil durante o debug de erros na leitura de logs . O nome da constraint deve ser \u00fanica no banco. CREATE TABLE produtos ( codigo integer , nome text , id_empresa integer NOT NULL , preco numeric CONSTRAINT produtos_preco_positivo CHECK ( preco > 0 ), CONSTRAINT fk_produtos_empresas FOREIGN KEY ( id_empresa ) REFERENCES empresas ( id ), );","title":"Constraints"},{"location":"programas/postgres-sql/#problemas","text":"An old version of the database format was found : sudo rm -rf /var/lib/postgres/data sudo mkdir /var/lib/postgres/data sudo chown -R postgres:postgres /var/lib/postgres/data","title":"Problemas"},{"location":"programas/raspberry/","text":"Raspberry \u00b6 Raspberry Instala\u00e7\u00e3o Configura\u00e7\u00e3o sem monitor Configurar WIFI Habilitar SSH VNC Links Instala\u00e7\u00e3o \u00b6 Instala\u00e7\u00e3o da imagem usando o BalenaEtcher . Configura\u00e7\u00e3o sem monitor \u00b6 Configurar WIFI \u00b6 Adicionar os comandos abaixo no arquivo /etc/wpa_supplicant/wpa_supplicant.conf . Este arquivo tamb\u00e9m pode ser criado na parti\u00e7\u00e3o boot , pois ser\u00e1 automaticamente copaido para /etc/wpa_supplicant/wpa_supplicant.conf . country = BR network = { ssid=\"NOME_WIFI\" psk=\"SENHA_WIFI\" key_mgmt=WPA-PSK } Habilitar SSH \u00b6 Na parti\u00e7\u00e3o boot , criar um arquivo vazio chamado SSH . Acesso: Usu\u00e1rio: pi Senha: raspberry ssh pi@192.168.x.x VNC \u00b6 Instala\u00e7\u00e3o: sudo apt install realvnc-vnc-server realvnc-vnc-viewer Para habilitar, execute o comando abaixo e escolha a op\u00e7\u00e3o VNC em Interfacing Options . sudo raspi-config Usu\u00e1rio: pi Senha: raspberry Links \u00b6 https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md https://www.raspberrypi.org/documentation/configuration/wireless/headless.md","title":"Raspberry"},{"location":"programas/raspberry/#raspberry","text":"Raspberry Instala\u00e7\u00e3o Configura\u00e7\u00e3o sem monitor Configurar WIFI Habilitar SSH VNC Links","title":"Raspberry"},{"location":"programas/raspberry/#instalacao","text":"Instala\u00e7\u00e3o da imagem usando o BalenaEtcher .","title":"Instala\u00e7\u00e3o"},{"location":"programas/raspberry/#configuracao-sem-monitor","text":"","title":"Configura\u00e7\u00e3o sem monitor"},{"location":"programas/raspberry/#configurar-wifi","text":"Adicionar os comandos abaixo no arquivo /etc/wpa_supplicant/wpa_supplicant.conf . Este arquivo tamb\u00e9m pode ser criado na parti\u00e7\u00e3o boot , pois ser\u00e1 automaticamente copaido para /etc/wpa_supplicant/wpa_supplicant.conf . country = BR network = { ssid=\"NOME_WIFI\" psk=\"SENHA_WIFI\" key_mgmt=WPA-PSK }","title":"Configurar WIFI"},{"location":"programas/raspberry/#habilitar-ssh","text":"Na parti\u00e7\u00e3o boot , criar um arquivo vazio chamado SSH . Acesso: Usu\u00e1rio: pi Senha: raspberry ssh pi@192.168.x.x","title":"Habilitar SSH"},{"location":"programas/raspberry/#vnc","text":"Instala\u00e7\u00e3o: sudo apt install realvnc-vnc-server realvnc-vnc-viewer Para habilitar, execute o comando abaixo e escolha a op\u00e7\u00e3o VNC em Interfacing Options . sudo raspi-config Usu\u00e1rio: pi Senha: raspberry","title":"VNC"},{"location":"programas/raspberry/#links","text":"https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md https://www.raspberrypi.org/documentation/configuration/wireless/headless.md","title":"Links"},{"location":"programas/spotify-dl/","text":"","title":"Spotify dl"},{"location":"programas/steam/","text":"Steam \u00b6 Crack \u00b6 Mudar idioma \u00b6 Procurar arquivos como steam_emu.ini e mudar a linha: Language=brazilian","title":"Steam"},{"location":"programas/steam/#steam","text":"","title":"Steam"},{"location":"programas/steam/#crack","text":"","title":"Crack"},{"location":"programas/steam/#mudar-idioma","text":"Procurar arquivos como steam_emu.ini e mudar a linha: Language=brazilian","title":"Mudar idioma"},{"location":"programas/sublime/","text":"Sublime \u00b6 Sublime Comandos Edi\u00e7\u00e3o Navega\u00e7\u00e3o General Find/Replace Tabs Split window Bookmarks Text manipulation Cahves de Ativa\u00e7\u00e3o Vers\u00e3o 3 Comandos \u00b6 Edi\u00e7\u00e3o \u00b6 Comando Descri\u00e7\u00e3o Ctrl + D e Ctrl + U Selecionar e navegar entre as inst\u00e2ncias selecionadas Ctrl + L Selecionar linha Shift + R Mouse ou Ctrl + Alt + Up Selecionar coluna Ctrl + Backspace Apagar palavra Ctrl + Shift + Up Move linha para cima Ctrl + Shift + Down Move linha para baixo Ctrl + Enter Inserir nova linha ap\u00f3s Ctrl + Shift + Enter Inserir nova linha antes Ctrl + M Pular para o fechamento e abertura de par\u00eanteses Ctrl + Shift + M Select all contents of the current parentheses Ctrl + Shift + K Delete Line Ctrl + KK Delete from cursor to end of line Ctrl + K + Backspace Delete from cursor to start of line Ctrl + ] Indent current line(s) Ctrl + [ Un-indent current line(s) Ctrl + Shift + D Duplicate line(s) Ctrl + J Join line below to the end of the current line Ctrl + / Comment/un-comment current line Ctrl + Shift + / Block comment current selection Ctrl + Y Repetir ultima a\u00e7\u00e3o Ctrl + Shift + V Paste and indent correctly Ctrl + Space Select next auto-complete suggestion Ctrl + U Refazer Alt + Shift + W Wrap Selection in html tag Alt + . Close current html tag Navega\u00e7\u00e3o \u00b6 Comando Descri\u00e7\u00e3o Ctrl + P Quick-open files by name Ctrl + R Direciona para uma determinada fun\u00e7\u00e3o Ctrl + ; Direciona para uma determinada palavra Ctrl + G Goto line in current file General \u00b6 Comando Descri\u00e7\u00e3o Ctrl + Shift + P Command prompt Ctrl + KB Toggle side bar Ctrl + Shift + Alt + P Show scope in status Find/Replace \u00b6 Comando Descri\u00e7\u00e3o Ctrl + F Find Ctrl + H Replace Ctrl + Shift + F Find in files Tabs \u00b6 Comando Descri\u00e7\u00e3o Ctrl + Shift + t Open last closed tab Ctrl + PgUp Cycle up through tabs Ctrl + PgDn Cycle down through tabs Ctrl + Left/Right Find in files Ctrl + W Close current tab Alt + [NUM] Switch to tab number [NUM] Split window \u00b6 Comando Descri\u00e7\u00e3o Alt + Shift + 1 Revert view to single column Alt + Shift + 2 Split view into two columns Alt + Shift + 3 Split view into three columns Alt + Shift + 4 Split view into four columns Alt + Shift + 5 Set view to grid (4 groups) Alt + Shift + 8 Split view into two rows Ctrl + [NUM] Jump to group where num is 1-4 Ctrl + Shift + [NUM] Move file to specified group where num is 1-4 Bookmarks \u00b6 Comando Descri\u00e7\u00e3o Ctrl + F2 Toggle bookmark F2 Next bookmark Shift + F2 Previous bookmark Ctrl + Shift + F2 Clear bookmarks Text manipulation \u00b6 Comando Descri\u00e7\u00e3o Ctrl + KU Transform to Uppercase Ctrl + KL Transform to lowercase Cahves de Ativa\u00e7\u00e3o \u00b6 Vers\u00e3o 3 \u00b6 \u2014\u2013 BEGIN LICENSE \u2014\u2013 Michael Barnes Single User License EA7E-821385 8A353C41 872A0D5C DF9B2950 AFF6F667 C458EA6D 8EA3C286 98D1D650 131A97AB AA919AEC EF20E143 B361B1E7 4C8B7F04 B085E65E 2F5F5360 8489D422 FB8FC1AA 93F6323C FD7F7544 3F39C318 D95E6480 FCCC7561 8A4A1741 68FA4223 ADCEDE07 200C25BE DBBC4855 C4CFB774 C5EC138C 0FEC1CEF D9DCECEC D3A5DAD1 01316C36 \u2014\u2014 END LICENSE \u2014\u2014 \u2014\u2013 BEGIN LICENSE \u2014\u2013 Nicolas Hennion Single User License EA7E-866075 8A01AA83 1D668D24 4484AEBC 3B04512C 827B0DE5 69E9B07A A39ACCC0 F95F5410 729D5639 4C37CECB B2522FB3 8D37FDC1 72899363 BBA441AC A5F47F08 6CD3B3FE CEFB3783 B2E1BA96 71AAF7B4 AFB61B1D 0CC513E7 52FF2333 9F726D2C CDE53B4A 810C0D4F E1F419A3 CDA0832B 8440565A 35BF00F6 4CA9F869 ED10E245 469C233E \u2014\u2014 END LICENSE \u2014\u2014 \u2014\u2013 BEGIN LICENSE \u2014\u2013 Anthony Sansone Single User License EA7E-878563 28B9A648 42B99D8A F2E3E9E0 16DE076E E218B3DC F3606379 C33C1526 E8B58964 B2CB3F63 BDF901BE D31424D2 082891B5 F7058694 55FA46D8 EFC11878 0868F093 B17CAFE7 63A78881 86B78E38 0F146238 BAE22DBB D4EC71A1 0EC2E701 C7F9C648 5CF29CA3 1CB14285 19A46991 E9A98676 14FD4777 2D8A0AB6 A444EE0D CA009B54 \u2014\u2014 END LICENSE \u2014\u2014 \u2014\u2013 BEGIN LICENSE \u2014\u2013 Alexey Plutalov Single User License EA7E-860776 3DC19CC1 134CDF23 504DC871 2DE5CE55 585DC8A6 253BB0D9 637C87A2 D8D0BA85 AAE574AD BA7D6DA9 2B9773F2 324C5DEF 17830A4E FBCF9D1D 182406E9 F883EA87 E585BBA1 2538C270 E2E857C2 194283CA 7234FF9E D0392F93 1D16E021 F1914917 63909E12 203C0169 3F08FFC8 86D06EA8 73DDAEF0 AC559F30 A6A67947 B60104C6 \u2014\u2014 END LICENSE \u2014\u2014","title":"Sublime"},{"location":"programas/sublime/#sublime","text":"Sublime Comandos Edi\u00e7\u00e3o Navega\u00e7\u00e3o General Find/Replace Tabs Split window Bookmarks Text manipulation Cahves de Ativa\u00e7\u00e3o Vers\u00e3o 3","title":"Sublime"},{"location":"programas/sublime/#comandos","text":"","title":"Comandos"},{"location":"programas/sublime/#edicao","text":"Comando Descri\u00e7\u00e3o Ctrl + D e Ctrl + U Selecionar e navegar entre as inst\u00e2ncias selecionadas Ctrl + L Selecionar linha Shift + R Mouse ou Ctrl + Alt + Up Selecionar coluna Ctrl + Backspace Apagar palavra Ctrl + Shift + Up Move linha para cima Ctrl + Shift + Down Move linha para baixo Ctrl + Enter Inserir nova linha ap\u00f3s Ctrl + Shift + Enter Inserir nova linha antes Ctrl + M Pular para o fechamento e abertura de par\u00eanteses Ctrl + Shift + M Select all contents of the current parentheses Ctrl + Shift + K Delete Line Ctrl + KK Delete from cursor to end of line Ctrl + K + Backspace Delete from cursor to start of line Ctrl + ] Indent current line(s) Ctrl + [ Un-indent current line(s) Ctrl + Shift + D Duplicate line(s) Ctrl + J Join line below to the end of the current line Ctrl + / Comment/un-comment current line Ctrl + Shift + / Block comment current selection Ctrl + Y Repetir ultima a\u00e7\u00e3o Ctrl + Shift + V Paste and indent correctly Ctrl + Space Select next auto-complete suggestion Ctrl + U Refazer Alt + Shift + W Wrap Selection in html tag Alt + . Close current html tag","title":"Edi\u00e7\u00e3o"},{"location":"programas/sublime/#navegacao","text":"Comando Descri\u00e7\u00e3o Ctrl + P Quick-open files by name Ctrl + R Direciona para uma determinada fun\u00e7\u00e3o Ctrl + ; Direciona para uma determinada palavra Ctrl + G Goto line in current file","title":"Navega\u00e7\u00e3o"},{"location":"programas/sublime/#general","text":"Comando Descri\u00e7\u00e3o Ctrl + Shift + P Command prompt Ctrl + KB Toggle side bar Ctrl + Shift + Alt + P Show scope in status","title":"General"},{"location":"programas/sublime/#findreplace","text":"Comando Descri\u00e7\u00e3o Ctrl + F Find Ctrl + H Replace Ctrl + Shift + F Find in files","title":"Find/Replace"},{"location":"programas/sublime/#tabs","text":"Comando Descri\u00e7\u00e3o Ctrl + Shift + t Open last closed tab Ctrl + PgUp Cycle up through tabs Ctrl + PgDn Cycle down through tabs Ctrl + Left/Right Find in files Ctrl + W Close current tab Alt + [NUM] Switch to tab number [NUM]","title":"Tabs"},{"location":"programas/sublime/#split-window","text":"Comando Descri\u00e7\u00e3o Alt + Shift + 1 Revert view to single column Alt + Shift + 2 Split view into two columns Alt + Shift + 3 Split view into three columns Alt + Shift + 4 Split view into four columns Alt + Shift + 5 Set view to grid (4 groups) Alt + Shift + 8 Split view into two rows Ctrl + [NUM] Jump to group where num is 1-4 Ctrl + Shift + [NUM] Move file to specified group where num is 1-4","title":"Split window"},{"location":"programas/sublime/#bookmarks","text":"Comando Descri\u00e7\u00e3o Ctrl + F2 Toggle bookmark F2 Next bookmark Shift + F2 Previous bookmark Ctrl + Shift + F2 Clear bookmarks","title":"Bookmarks"},{"location":"programas/sublime/#text-manipulation","text":"Comando Descri\u00e7\u00e3o Ctrl + KU Transform to Uppercase Ctrl + KL Transform to lowercase","title":"Text manipulation"},{"location":"programas/sublime/#cahves-de-ativacao","text":"","title":"Cahves de Ativa\u00e7\u00e3o"},{"location":"programas/sublime/#versao-3","text":"\u2014\u2013 BEGIN LICENSE \u2014\u2013 Michael Barnes Single User License EA7E-821385 8A353C41 872A0D5C DF9B2950 AFF6F667 C458EA6D 8EA3C286 98D1D650 131A97AB AA919AEC EF20E143 B361B1E7 4C8B7F04 B085E65E 2F5F5360 8489D422 FB8FC1AA 93F6323C FD7F7544 3F39C318 D95E6480 FCCC7561 8A4A1741 68FA4223 ADCEDE07 200C25BE DBBC4855 C4CFB774 C5EC138C 0FEC1CEF D9DCECEC D3A5DAD1 01316C36 \u2014\u2014 END LICENSE \u2014\u2014 \u2014\u2013 BEGIN LICENSE \u2014\u2013 Nicolas Hennion Single User License EA7E-866075 8A01AA83 1D668D24 4484AEBC 3B04512C 827B0DE5 69E9B07A A39ACCC0 F95F5410 729D5639 4C37CECB B2522FB3 8D37FDC1 72899363 BBA441AC A5F47F08 6CD3B3FE CEFB3783 B2E1BA96 71AAF7B4 AFB61B1D 0CC513E7 52FF2333 9F726D2C CDE53B4A 810C0D4F E1F419A3 CDA0832B 8440565A 35BF00F6 4CA9F869 ED10E245 469C233E \u2014\u2014 END LICENSE \u2014\u2014 \u2014\u2013 BEGIN LICENSE \u2014\u2013 Anthony Sansone Single User License EA7E-878563 28B9A648 42B99D8A F2E3E9E0 16DE076E E218B3DC F3606379 C33C1526 E8B58964 B2CB3F63 BDF901BE D31424D2 082891B5 F7058694 55FA46D8 EFC11878 0868F093 B17CAFE7 63A78881 86B78E38 0F146238 BAE22DBB D4EC71A1 0EC2E701 C7F9C648 5CF29CA3 1CB14285 19A46991 E9A98676 14FD4777 2D8A0AB6 A444EE0D CA009B54 \u2014\u2014 END LICENSE \u2014\u2014 \u2014\u2013 BEGIN LICENSE \u2014\u2013 Alexey Plutalov Single User License EA7E-860776 3DC19CC1 134CDF23 504DC871 2DE5CE55 585DC8A6 253BB0D9 637C87A2 D8D0BA85 AAE574AD BA7D6DA9 2B9773F2 324C5DEF 17830A4E FBCF9D1D 182406E9 F883EA87 E585BBA1 2538C270 E2E857C2 194283CA 7234FF9E D0392F93 1D16E021 F1914917 63909E12 203C0169 3F08FFC8 86D06EA8 73DDAEF0 AC559F30 A6A67947 B60104C6 \u2014\u2014 END LICENSE \u2014\u2014","title":"Vers\u00e3o 3"},{"location":"programas/typora/","text":"Typora \u00b6 https://typora.io Typora, um editor de texto em formato Markdown gratuito que oferece uma interface minimalista para escrever textos livre de distra\u00e7\u00f5es. O programa permite exportar o documento em formatos como PDF, HTML, DOCX, RTF, ePub, OpenOffice, LaTeX e outros. Typora Table of contents (TOC) Table of contents (TOC) \u00b6 Sintaxe: [TOC] Para incluir a numera\u00e7\u00e3o nos cabe\u00e7alhos e no sum\u00e1rio deve-se alterar o arquivo ~/.config/Typora/themes/base.user.css acrescentando o estilo abaixo. No c\u00f3digo, os trechos content: counter(h1toc) e content: counter(h1) foram comentados para n\u00e3o incluir o cabe\u00e7alho h1 na numera\u00e7\u00e3o. /************************************** * Header Counters in TOC **************************************/ /* No link underlines in TOC */ . md-toc-inner { text-decoration : none ; } . md-toc-content { counter-reset : h1toc } . md-toc-h1 { margin-left : 0 ; font-size : 1.5 rem ; counter-reset : h2toc } . md-toc-h2 { font-size : 1.1 rem ; margin-left : 2 rem ; counter-reset : h3toc } . md-toc-h3 { margin-left : 3 rem ; font-size : .9 rem ; counter-reset : h4toc } . md-toc-h4 { margin-left : 4 rem ; font-size : .85 rem ; counter-reset : h5toc } . md-toc-h5 { margin-left : 5 rem ; font-size : .8 rem ; counter-reset : h6toc } . md-toc-h6 { margin-left : 6 rem ; font-size : .75 rem ; } . md-toc-h1 : before { color : black ; counter-increment : h1toc ; /*content: counter(h1toc) \". \"*/ } . md-toc-h1 . md-toc-inner { margin-left : 0 ; } . md-toc-h2 : before { color : black ; counter-increment : h2toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" } . md-toc-h2 . md-toc-inner { margin-left : 0 ; } . md-toc-h3 : before { color : black ; counter-increment : h3toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" } . md-toc-h3 . md-toc-inner { margin-left : 0 ; } . md-toc-h4 : before { color : black ; counter-increment : h4toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" counter ( h4toc ) \". \" } . md-toc-h4 . md-toc-inner { margin-left : 0 ; } . md-toc-h5 : before { color : black ; counter-increment : h5toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" counter ( h4toc ) \". \" counter ( h5toc ) \". \" } . md-toc-h5 . md-toc-inner { margin-left : 0 ; } . md-toc-h6 : before { color : black ; counter-increment : h6toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" counter ( h4toc ) \". \" counter ( h5toc ) \". \" counter ( h6toc ) \". \" } . md-toc-h6 . md-toc-inner { margin-left : 0 ; } /************************************** * Header Counters in Content **************************************/ /** initialize css counter */ # write { counter-reset : h1 } h1 { counter-reset : h2 } h2 { counter-reset : h3 } h3 { counter-reset : h4 } h4 { counter-reset : h5 } h5 { counter-reset : h6 } /** put counter result into headings */ # write h1 : before { counter-increment : h1 ; /*content: counter(h1) \". \"*/ } # write h2 : before { counter-increment : h2 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \". \" } # write h3 : before , h3 . md-focus . md-heading : before { /*override the default style for focused headings */ counter-increment : h3 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \". \" } # write h4 : before , h4 . md-focus . md-heading : before { counter-increment : h4 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \".\" counter ( h4 ) \". \" } # write h5 : before , h5 . md-focus . md-heading : before { counter-increment : h5 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \".\" counter ( h4 ) \".\" counter ( h5 ) \". \" } # write h6 : before , h6 . md-focus . md-heading : before { counter-increment : h6 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \".\" counter ( h4 ) \".\" counter ( h5 ) \".\" counter ( h6 ) \". \" } /** override the default style for focused headings */ # write > h3 . md-focus : before , # write > h4 . md-focus : before , # write > h5 . md-focus : before , # write > h6 . md-focus : before , h3 . md-focus : before , h4 . md-focus : before , h5 . md-focus : before , h6 . md-focus : before { color : inherit ; border : inherit ; border-radius : inherit ; position : inherit ; left : initial ; float : none ; top : initial ; font-size : inherit ; padding-left : inherit ; padding-right : inherit ; vertical-align : inherit ; font-weight : inherit ; line-height : inherit ; } Refer\u00eancia: https://support.typora.io/Auto-Numbering","title":"Typora"},{"location":"programas/typora/#typora","text":"https://typora.io Typora, um editor de texto em formato Markdown gratuito que oferece uma interface minimalista para escrever textos livre de distra\u00e7\u00f5es. O programa permite exportar o documento em formatos como PDF, HTML, DOCX, RTF, ePub, OpenOffice, LaTeX e outros. Typora Table of contents (TOC)","title":"Typora"},{"location":"programas/typora/#table-of-contents-toc","text":"Sintaxe: [TOC] Para incluir a numera\u00e7\u00e3o nos cabe\u00e7alhos e no sum\u00e1rio deve-se alterar o arquivo ~/.config/Typora/themes/base.user.css acrescentando o estilo abaixo. No c\u00f3digo, os trechos content: counter(h1toc) e content: counter(h1) foram comentados para n\u00e3o incluir o cabe\u00e7alho h1 na numera\u00e7\u00e3o. /************************************** * Header Counters in TOC **************************************/ /* No link underlines in TOC */ . md-toc-inner { text-decoration : none ; } . md-toc-content { counter-reset : h1toc } . md-toc-h1 { margin-left : 0 ; font-size : 1.5 rem ; counter-reset : h2toc } . md-toc-h2 { font-size : 1.1 rem ; margin-left : 2 rem ; counter-reset : h3toc } . md-toc-h3 { margin-left : 3 rem ; font-size : .9 rem ; counter-reset : h4toc } . md-toc-h4 { margin-left : 4 rem ; font-size : .85 rem ; counter-reset : h5toc } . md-toc-h5 { margin-left : 5 rem ; font-size : .8 rem ; counter-reset : h6toc } . md-toc-h6 { margin-left : 6 rem ; font-size : .75 rem ; } . md-toc-h1 : before { color : black ; counter-increment : h1toc ; /*content: counter(h1toc) \". \"*/ } . md-toc-h1 . md-toc-inner { margin-left : 0 ; } . md-toc-h2 : before { color : black ; counter-increment : h2toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" } . md-toc-h2 . md-toc-inner { margin-left : 0 ; } . md-toc-h3 : before { color : black ; counter-increment : h3toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" } . md-toc-h3 . md-toc-inner { margin-left : 0 ; } . md-toc-h4 : before { color : black ; counter-increment : h4toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" counter ( h4toc ) \". \" } . md-toc-h4 . md-toc-inner { margin-left : 0 ; } . md-toc-h5 : before { color : black ; counter-increment : h5toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" counter ( h4toc ) \". \" counter ( h5toc ) \". \" } . md-toc-h5 . md-toc-inner { margin-left : 0 ; } . md-toc-h6 : before { color : black ; counter-increment : h6toc ; content : /*counter(h1toc) \". \"*/ counter ( h2toc ) \". \" counter ( h3toc ) \". \" counter ( h4toc ) \". \" counter ( h5toc ) \". \" counter ( h6toc ) \". \" } . md-toc-h6 . md-toc-inner { margin-left : 0 ; } /************************************** * Header Counters in Content **************************************/ /** initialize css counter */ # write { counter-reset : h1 } h1 { counter-reset : h2 } h2 { counter-reset : h3 } h3 { counter-reset : h4 } h4 { counter-reset : h5 } h5 { counter-reset : h6 } /** put counter result into headings */ # write h1 : before { counter-increment : h1 ; /*content: counter(h1) \". \"*/ } # write h2 : before { counter-increment : h2 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \". \" } # write h3 : before , h3 . md-focus . md-heading : before { /*override the default style for focused headings */ counter-increment : h3 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \". \" } # write h4 : before , h4 . md-focus . md-heading : before { counter-increment : h4 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \".\" counter ( h4 ) \". \" } # write h5 : before , h5 . md-focus . md-heading : before { counter-increment : h5 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \".\" counter ( h4 ) \".\" counter ( h5 ) \". \" } # write h6 : before , h6 . md-focus . md-heading : before { counter-increment : h6 ; content : /*counter(h1) \".\"*/ counter ( h2 ) \".\" counter ( h3 ) \".\" counter ( h4 ) \".\" counter ( h5 ) \".\" counter ( h6 ) \". \" } /** override the default style for focused headings */ # write > h3 . md-focus : before , # write > h4 . md-focus : before , # write > h5 . md-focus : before , # write > h6 . md-focus : before , h3 . md-focus : before , h4 . md-focus : before , h5 . md-focus : before , h6 . md-focus : before { color : inherit ; border : inherit ; border-radius : inherit ; position : inherit ; left : initial ; float : none ; top : initial ; font-size : inherit ; padding-left : inherit ; padding-right : inherit ; vertical-align : inherit ; font-weight : inherit ; line-height : inherit ; } Refer\u00eancia: https://support.typora.io/Auto-Numbering","title":"Table of contents (TOC)"},{"location":"programas/ventoy/","text":"Ventoy \u00b6 [[ TOC ]] Introdu\u00e7\u00e3o \u00b6 Cria um drive USB boot\u00e1vel com m\u00faltiplos ISOs. Links \u00b6 https://www.ventoy.net","title":"Ventoy"},{"location":"programas/ventoy/#ventoy","text":"[[ TOC ]]","title":"Ventoy"},{"location":"programas/ventoy/#introducao","text":"Cria um drive USB boot\u00e1vel com m\u00faltiplos ISOs.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/ventoy/#links","text":"https://www.ventoy.net","title":"Links"},{"location":"programas/veracrypt/","text":"VeraCrypt \u00b6 VeraCrypt Introdu\u00e7\u00e3o Problemas Codifica\u00e7\u00e3o de caracteres no sistema de arquivos Introdu\u00e7\u00e3o \u00b6 https://www.veracrypt.fr VeraCrypt \u00e9 um utilit\u00e1rio freeware (software livre),, usado para criptografia on-the-fly (OTFE). Ele pode criar um disco virtual criptografado dentro de um arquivo ou criptografar uma parti\u00e7\u00e3o ou o dispositivo de armazenamento inteiro com autentica\u00e7\u00e3o pr\u00e9-boot. Problemas \u00b6 Codifica\u00e7\u00e3o de caracteres no sistema de arquivos \u00b6 Problemas ao exibir o nome dos arquivos com acentos. Solu\u00e7\u00e3o: Adicione o comando abaixo nas op\u00e7\u00f5es de montagem ou em \"Preferences\" para uso geral. iocharset=utf8","title":"VeraCrypt"},{"location":"programas/veracrypt/#veracrypt","text":"VeraCrypt Introdu\u00e7\u00e3o Problemas Codifica\u00e7\u00e3o de caracteres no sistema de arquivos","title":"VeraCrypt"},{"location":"programas/veracrypt/#introducao","text":"https://www.veracrypt.fr VeraCrypt \u00e9 um utilit\u00e1rio freeware (software livre),, usado para criptografia on-the-fly (OTFE). Ele pode criar um disco virtual criptografado dentro de um arquivo ou criptografar uma parti\u00e7\u00e3o ou o dispositivo de armazenamento inteiro com autentica\u00e7\u00e3o pr\u00e9-boot.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/veracrypt/#problemas","text":"","title":"Problemas"},{"location":"programas/veracrypt/#codificacao-de-caracteres-no-sistema-de-arquivos","text":"Problemas ao exibir o nome dos arquivos com acentos. Solu\u00e7\u00e3o: Adicione o comando abaixo nas op\u00e7\u00f5es de montagem ou em \"Preferences\" para uso geral. iocharset=utf8","title":"Codifica\u00e7\u00e3o de caracteres no sistema de arquivos"},{"location":"programas/visual-studio-code/","text":"Visual Studio \u00b6 Visual Studio Introdu\u00e7\u00e3o Configura\u00e7\u00e3o Debug Chrome Firefox Extens\u00f5es Markdown TO Configura\u00e7\u00f5es Markdownlint Configura\u00e7\u00f5es Markdown All in One Markdown Shortcuts Markdown Table Prettifier Configura\u00e7\u00f5es Markdown Preview Enhanced Configura\u00e7\u00f5es Code Spell (Portugu\u00eas) Configura\u00e7\u00f5es Debugger for Java Configura\u00e7\u00f5es [[ TOC ]] Introdu\u00e7\u00e3o \u00b6 O Visual Studio Code \u00e9 um editor de c\u00f3digo-fonte desenvolvido pela Microsoft para Windows, Linux e macOS. Ele inclui suporte para depura\u00e7\u00e3o, controle Git incorporado, realce de sintaxe, complementa\u00e7\u00e3o inteligente de c\u00f3digo, snippets e refatora\u00e7\u00e3o de c\u00f3digo. Ele tamb\u00e9m \u00e9 customiz\u00e1vel, fazendo com que os usu\u00e1rios possam mudar o tema do editor, teclas de atalho e prefer\u00eancias. Ele \u00e9 um software livre e de c\u00f3digo aberto, apesar do download oficial estar sob uma licen\u00e7a propriet\u00e1ria. Configura\u00e7\u00e3o \u00b6 As configura\u00e7\u00f5es s\u00e3o armazenadas no arquivo ~/.config/Code/User/settings.json . As \u00faltimas configura\u00e7\u00f5es usadas foram: { \"editor.formatOnSave\" : true , \"editor.rulers\" : [ 100 ], \"editor.suggestSelection\" : \"first\" , \"files.trimFinalNewlines\" : true , \"files.exclude\" : { \"**/.classpath\" : true , \"**/.project\" : true , \"**/.settings\" : true , \"**/.factorypath\" : true } } Debug \u00b6 Chrome \u00b6 Executar o comando: google-chrome --remote-debugging-port = 9222 Instalar a extens\u00e3o Debugger for Chrome e modificar o a rquivo launch.json : { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"chrome\" , \"request\" : \"attach\" , \"sourceMaps\" : true , \"port\" : 9222 , \"name\" : \"Attach Chrome\" , \"urlFilter\" : \"https://localhost:<porta>/*\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] } Outra forma mais simples, sem precisar executar via terminal. Entretanto sempre ir\u00e1 abrir uma nova janela no navegador. { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"chrome\" , \"request\" : \"launch\" , \"sourceMaps\" : true , \"name\" : \"Launch Chrome\" , \"url\" : \"https://localhost:<porta>\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] } Firefox \u00b6 Modificar os par\u00e2metros do firefox atrav\u00e9s da url about:config . Par\u00e2metro Valor devtools.debugger.remote-enabled true devtools.chrome.enabled true devtools.debugger.prompt-connection false devtools.debugger.force-local false (Somente para firefox remoto. Usar par\u00e2metro host ) Executar o comando: firefox -start-debugger-server -no-remote Instalar a extens\u00e3o Debugger for Firefox e modificar o a rquivo launch.json : { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Attach Firefox\" , \"type\" : \"firefox\" , \"request\" : \"attach\" , \"url\" : \"https://localhost:<porta>\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] } Outra forma mais simples, sem precisar executar via terminal. Entretanto sempre ir\u00e1 abrir uma nova janela no navegador. { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch Firefox\" , \"type\" : \"firefox\" , \"request\" : \"launch\" , \"url\" : \"https://localhost:<porta>\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] } Extens\u00f5es \u00b6 Markdown TO \u00b6 (AlanWalk.markdown-toc) Gera tabelas de conte\u00fados ( TOC - Table of Contents ) para o markdown. Cria sum\u00e1rios e mumera\u00e7\u00e3o dos cabe\u00e7alhos. Configura\u00e7\u00f5es \u00b6 Numera\u00e7\u00e3o a partir do cabe\u00e7alho de n\u00edvel 2. No TOC gerado <!-- TOC depthFrom:2 --> - Lista gerada <!-- /TOC --> Ou no arquivo de configura\u00e7\u00e3o. \"markdown-toc.depthFrom\" : 2 Markdownlint \u00b6 (DavidAnson.vscode-markdownlint) Define um conjunto de padr\u00f5es para manter o c\u00f3digo markdown padronizado. Configura\u00e7\u00f5es \u00b6 \"markdownlint.config\" : { \"MD033\" : { \"allowed_elements\" : [ \"div\" , \"span\" ] } } , Markdown All in One \u00b6 yzhang.markdown-all-in-one Atalhos para o markdown. Markdown Shortcuts \u00b6 mdickin.markdown-shortcuts Atalhos para o markdown com criador de tabelas. Markdown Table Prettifier \u00b6 darkriszty.markdown-table-prettify Formator de tabelas. Configura\u00e7\u00f5es \u00b6 \"markdownShortcuts.italics.marker\" : \"*\" , \"markdownShortcuts.bullets.marker\" : \"-\" Markdown Preview Enhanced \u00b6 shd101wyy.markdown-preview-enhanced Visualizador markdown com op\u00e7\u00e3o de TOC. Configura\u00e7\u00f5es \u00b6 Ignorar cabe\u00e7alho no TOC: # Cabe\u00e7alho {ignore=true} Arquivo de estilos: ~/.mume/style.less /* Please visit the URL below for more information: */ /* https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */ . markdown-preview . markdown-preview { text-align : justify ; h1 { font-size : 34 px ; } h2 { margin-top : 130 px ; border-bottom : 1 px solid #ccc ; font-size : 28 px ; } h3 { font-size : 20 px ; } h4 { font-size : 16 px ; } table { border-collapse : collapse ; border-spacing : 0 ; font-size : 100 % ; font : inherit ; } table th { font-weight : bold ; border : 1 px solid #ccc ; padding : 6 px 13 px ; } table td { border : 1 px solid #ccc ; padding : 6 px 13 px ; } table tr { border-top : 1 px solid #ccc ; background-color : #fff ; } table tr : nth-child ( 2n ) { background-color : #f8f8f8 ; } pre { background-color : #f8f8f8 cb ; border : 1 px solid #ccc ; font-size : 14 px ; line-height : 19 px ; overflow : auto ; border-radius : 3 px ; margin : 25 px 0 ; } div . importante : before { content : \"Importante: \" ; font-weight : bold ; } div . importante { background-color : #e4f3ff ; border : 1 px solid #a8c1d6 ; color : #304a68 ; padding : 6 px 10 px ; border-radius : 3 px ; margin : 20 px 0 ; } span . mais : before { content : \"Veja mais em: \" ; font-weight : bold ; } span . mais { background-color : #e4f3ff ; border : 1 px solid #a8c1d6 ; padding : 6 px 10 px ; border-radius : 3 px ; } div . imagem { margin : 12 px 10 px ; margin-left : auto ; margin-right : auto ; text-align : center ; } } Code Spell (Portugu\u00eas) \u00b6 streetsidesoftware.code-spell-checker-portuguese Corretor ortogr\u00e1fico. Configura\u00e7\u00f5es \u00b6 \"cSpell.language\" : \"en,pt\" , \"cSpell.ignoreRegExpList\" : [ \"/^\\\\s*```(.|\\\\n)+?^\\\\s*```/gm\" ] , \"cSpell.enabledLanguageIds\" : [ \"markdown\" ] , \"cSpell.userWords\" : [ \"An\u00f4nima\" , \"aceitos\" , \"an\u00f4nimas\" , \"customiz\u00e1vel\" , \"encapsuladora\" , \"mumera\u00e7\u00e3o\" , \"refatora\u00e7\u00e3o\" , \"subrotina\" , \"subrotinas\" ] Debugger for Java \u00b6 vscjava.vscode-java-debug Debug e build para java. Configura\u00e7\u00f5es \u00b6 Arquivo de configura\u00e7\u00e3o: <worspace>/.vscode/launch.json { \"configurations\" : [ { \"type\" : \"java\" , \"name\" : \"Current File\" , \"request\" : \"launch\" , \"mainClass\" : \"${file}\" } ] }","title":"Visual Studio"},{"location":"programas/visual-studio-code/#visual-studio","text":"Visual Studio Introdu\u00e7\u00e3o Configura\u00e7\u00e3o Debug Chrome Firefox Extens\u00f5es Markdown TO Configura\u00e7\u00f5es Markdownlint Configura\u00e7\u00f5es Markdown All in One Markdown Shortcuts Markdown Table Prettifier Configura\u00e7\u00f5es Markdown Preview Enhanced Configura\u00e7\u00f5es Code Spell (Portugu\u00eas) Configura\u00e7\u00f5es Debugger for Java Configura\u00e7\u00f5es [[ TOC ]]","title":"Visual Studio"},{"location":"programas/visual-studio-code/#introducao","text":"O Visual Studio Code \u00e9 um editor de c\u00f3digo-fonte desenvolvido pela Microsoft para Windows, Linux e macOS. Ele inclui suporte para depura\u00e7\u00e3o, controle Git incorporado, realce de sintaxe, complementa\u00e7\u00e3o inteligente de c\u00f3digo, snippets e refatora\u00e7\u00e3o de c\u00f3digo. Ele tamb\u00e9m \u00e9 customiz\u00e1vel, fazendo com que os usu\u00e1rios possam mudar o tema do editor, teclas de atalho e prefer\u00eancias. Ele \u00e9 um software livre e de c\u00f3digo aberto, apesar do download oficial estar sob uma licen\u00e7a propriet\u00e1ria.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/visual-studio-code/#configuracao","text":"As configura\u00e7\u00f5es s\u00e3o armazenadas no arquivo ~/.config/Code/User/settings.json . As \u00faltimas configura\u00e7\u00f5es usadas foram: { \"editor.formatOnSave\" : true , \"editor.rulers\" : [ 100 ], \"editor.suggestSelection\" : \"first\" , \"files.trimFinalNewlines\" : true , \"files.exclude\" : { \"**/.classpath\" : true , \"**/.project\" : true , \"**/.settings\" : true , \"**/.factorypath\" : true } }","title":"Configura\u00e7\u00e3o"},{"location":"programas/visual-studio-code/#debug","text":"","title":"Debug"},{"location":"programas/visual-studio-code/#chrome","text":"Executar o comando: google-chrome --remote-debugging-port = 9222 Instalar a extens\u00e3o Debugger for Chrome e modificar o a rquivo launch.json : { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"chrome\" , \"request\" : \"attach\" , \"sourceMaps\" : true , \"port\" : 9222 , \"name\" : \"Attach Chrome\" , \"urlFilter\" : \"https://localhost:<porta>/*\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] } Outra forma mais simples, sem precisar executar via terminal. Entretanto sempre ir\u00e1 abrir uma nova janela no navegador. { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"chrome\" , \"request\" : \"launch\" , \"sourceMaps\" : true , \"name\" : \"Launch Chrome\" , \"url\" : \"https://localhost:<porta>\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] }","title":"Chrome"},{"location":"programas/visual-studio-code/#firefox","text":"Modificar os par\u00e2metros do firefox atrav\u00e9s da url about:config . Par\u00e2metro Valor devtools.debugger.remote-enabled true devtools.chrome.enabled true devtools.debugger.prompt-connection false devtools.debugger.force-local false (Somente para firefox remoto. Usar par\u00e2metro host ) Executar o comando: firefox -start-debugger-server -no-remote Instalar a extens\u00e3o Debugger for Firefox e modificar o a rquivo launch.json : { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Attach Firefox\" , \"type\" : \"firefox\" , \"request\" : \"attach\" , \"url\" : \"https://localhost:<porta>\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] } Outra forma mais simples, sem precisar executar via terminal. Entretanto sempre ir\u00e1 abrir uma nova janela no navegador. { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch Firefox\" , \"type\" : \"firefox\" , \"request\" : \"launch\" , \"url\" : \"https://localhost:<porta>\" , \"webRoot\" : \"${workspaceFolder}/<diretorio-base>\" , } ] }","title":"Firefox"},{"location":"programas/visual-studio-code/#extensoes","text":"","title":"Extens\u00f5es"},{"location":"programas/visual-studio-code/#markdown-to","text":"(AlanWalk.markdown-toc) Gera tabelas de conte\u00fados ( TOC - Table of Contents ) para o markdown. Cria sum\u00e1rios e mumera\u00e7\u00e3o dos cabe\u00e7alhos.","title":"Markdown TO"},{"location":"programas/visual-studio-code/#configuracoes","text":"Numera\u00e7\u00e3o a partir do cabe\u00e7alho de n\u00edvel 2. No TOC gerado <!-- TOC depthFrom:2 --> - Lista gerada <!-- /TOC --> Ou no arquivo de configura\u00e7\u00e3o. \"markdown-toc.depthFrom\" : 2","title":"Configura\u00e7\u00f5es"},{"location":"programas/visual-studio-code/#markdownlint","text":"(DavidAnson.vscode-markdownlint) Define um conjunto de padr\u00f5es para manter o c\u00f3digo markdown padronizado.","title":"Markdownlint"},{"location":"programas/visual-studio-code/#configuracoes_1","text":"\"markdownlint.config\" : { \"MD033\" : { \"allowed_elements\" : [ \"div\" , \"span\" ] } } ,","title":"Configura\u00e7\u00f5es"},{"location":"programas/visual-studio-code/#markdown-all-in-one","text":"yzhang.markdown-all-in-one Atalhos para o markdown.","title":"Markdown All in One"},{"location":"programas/visual-studio-code/#markdown-shortcuts","text":"mdickin.markdown-shortcuts Atalhos para o markdown com criador de tabelas.","title":"Markdown Shortcuts"},{"location":"programas/visual-studio-code/#markdown-table-prettifier","text":"darkriszty.markdown-table-prettify Formator de tabelas.","title":"Markdown Table Prettifier"},{"location":"programas/visual-studio-code/#configuracoes_2","text":"\"markdownShortcuts.italics.marker\" : \"*\" , \"markdownShortcuts.bullets.marker\" : \"-\"","title":"Configura\u00e7\u00f5es"},{"location":"programas/visual-studio-code/#markdown-preview-enhanced","text":"shd101wyy.markdown-preview-enhanced Visualizador markdown com op\u00e7\u00e3o de TOC.","title":"Markdown Preview Enhanced"},{"location":"programas/visual-studio-code/#configuracoes_3","text":"Ignorar cabe\u00e7alho no TOC: # Cabe\u00e7alho {ignore=true} Arquivo de estilos: ~/.mume/style.less /* Please visit the URL below for more information: */ /* https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */ . markdown-preview . markdown-preview { text-align : justify ; h1 { font-size : 34 px ; } h2 { margin-top : 130 px ; border-bottom : 1 px solid #ccc ; font-size : 28 px ; } h3 { font-size : 20 px ; } h4 { font-size : 16 px ; } table { border-collapse : collapse ; border-spacing : 0 ; font-size : 100 % ; font : inherit ; } table th { font-weight : bold ; border : 1 px solid #ccc ; padding : 6 px 13 px ; } table td { border : 1 px solid #ccc ; padding : 6 px 13 px ; } table tr { border-top : 1 px solid #ccc ; background-color : #fff ; } table tr : nth-child ( 2n ) { background-color : #f8f8f8 ; } pre { background-color : #f8f8f8 cb ; border : 1 px solid #ccc ; font-size : 14 px ; line-height : 19 px ; overflow : auto ; border-radius : 3 px ; margin : 25 px 0 ; } div . importante : before { content : \"Importante: \" ; font-weight : bold ; } div . importante { background-color : #e4f3ff ; border : 1 px solid #a8c1d6 ; color : #304a68 ; padding : 6 px 10 px ; border-radius : 3 px ; margin : 20 px 0 ; } span . mais : before { content : \"Veja mais em: \" ; font-weight : bold ; } span . mais { background-color : #e4f3ff ; border : 1 px solid #a8c1d6 ; padding : 6 px 10 px ; border-radius : 3 px ; } div . imagem { margin : 12 px 10 px ; margin-left : auto ; margin-right : auto ; text-align : center ; } }","title":"Configura\u00e7\u00f5es"},{"location":"programas/visual-studio-code/#code-spell-portugues","text":"streetsidesoftware.code-spell-checker-portuguese Corretor ortogr\u00e1fico.","title":"Code Spell (Portugu\u00eas)"},{"location":"programas/visual-studio-code/#configuracoes_4","text":"\"cSpell.language\" : \"en,pt\" , \"cSpell.ignoreRegExpList\" : [ \"/^\\\\s*```(.|\\\\n)+?^\\\\s*```/gm\" ] , \"cSpell.enabledLanguageIds\" : [ \"markdown\" ] , \"cSpell.userWords\" : [ \"An\u00f4nima\" , \"aceitos\" , \"an\u00f4nimas\" , \"customiz\u00e1vel\" , \"encapsuladora\" , \"mumera\u00e7\u00e3o\" , \"refatora\u00e7\u00e3o\" , \"subrotina\" , \"subrotinas\" ]","title":"Configura\u00e7\u00f5es"},{"location":"programas/visual-studio-code/#debugger-for-java","text":"vscjava.vscode-java-debug Debug e build para java.","title":"Debugger for Java"},{"location":"programas/visual-studio-code/#configuracoes_5","text":"Arquivo de configura\u00e7\u00e3o: <worspace>/.vscode/launch.json { \"configurations\" : [ { \"type\" : \"java\" , \"name\" : \"Current File\" , \"request\" : \"launch\" , \"mainClass\" : \"${file}\" } ] }","title":"Configura\u00e7\u00f5es"},{"location":"programas/visual-studio/","text":"Visual Studio \u00b6 Visual Studio Atalhos Atalhos \u00b6 Descri\u00e7\u00e3o Comando Comentar ctrl+k ctrl+c Descomentar ctrl+k ctrl+u Procurar arquivos ctrl+,","title":"Visual Studio"},{"location":"programas/visual-studio/#visual-studio","text":"Visual Studio Atalhos","title":"Visual Studio"},{"location":"programas/visual-studio/#atalhos","text":"Descri\u00e7\u00e3o Comando Comentar ctrl+k ctrl+c Descomentar ctrl+k ctrl+u Procurar arquivos ctrl+,","title":"Atalhos"},{"location":"programas/youtube-dl/","text":"Youtube-dl \u00b6 Download videos from youtube.com or other video platforms Link \u00b6 https://github.com/ytdl-org/youtube-dl","title":"Youtube-dl"},{"location":"programas/youtube-dl/#youtube-dl","text":"Download videos from youtube.com or other video platforms","title":"Youtube-dl"},{"location":"programas/youtube-dl/#link","text":"https://github.com/ytdl-org/youtube-dl","title":"Link"},{"location":"programas/linux/music-brainz-picard/","text":"MusicBrainz Picard \u00b6 MusicBrainz Picard Introdu\u00e7\u00e3o Configura\u00e7\u00e3o Introdu\u00e7\u00e3o \u00b6 Renomea\u00e7\u00e3o de arquivos para ID3 e vice-versa com op\u00e7\u00e3o de busca em bancos on-line. Configura\u00e7\u00e3o \u00b6 Em Options habilitar a op\u00e7\u00e3o Rename Files Em Options->File Naming usar o padr\u00e3o $if2 ( %albumartist%,%artist% ) / $if ( $ne ( %albumartist%, ) ,%album%/, ) $if ( $gt ( %totaldiscs%,1 ) ,%discnumber%-, ) $if ( $ne ( %albumartist%, ) , $num ( %tracknumber%,2 ) , ) $if ( %_multiartist%,%artist% - , ) - %title% Ao salvar os arquivos ser\u00e3o renomeados","title":"MusicBrainz Picard"},{"location":"programas/linux/music-brainz-picard/#musicbrainz-picard","text":"MusicBrainz Picard Introdu\u00e7\u00e3o Configura\u00e7\u00e3o","title":"MusicBrainz Picard"},{"location":"programas/linux/music-brainz-picard/#introducao","text":"Renomea\u00e7\u00e3o de arquivos para ID3 e vice-versa com op\u00e7\u00e3o de busca em bancos on-line.","title":"Introdu\u00e7\u00e3o"},{"location":"programas/linux/music-brainz-picard/#configuracao","text":"Em Options habilitar a op\u00e7\u00e3o Rename Files Em Options->File Naming usar o padr\u00e3o $if2 ( %albumartist%,%artist% ) / $if ( $ne ( %albumartist%, ) ,%album%/, ) $if ( $gt ( %totaldiscs%,1 ) ,%discnumber%-, ) $if ( $ne ( %albumartist%, ) , $num ( %tracknumber%,2 ) , ) $if ( %_multiartist%,%artist% - , ) - %title% Ao salvar os arquivos ser\u00e3o renomeados","title":"Configura\u00e7\u00e3o"},{"location":"programas/linux/ntfsfix/","text":"ntfsfix \u00b6 Corre\u00e7\u00e3o do sistema de diret\u00f3rios NTFS ntfsfix Comando Comando \u00b6 ntfsfix /dev/sd## Onde:\\ /dev/sd## \u00e9 o local onde se encontra o dispositivo. Ex: /dev/sdb1","title":"ntfsfix"},{"location":"programas/linux/ntfsfix/#ntfsfix","text":"Corre\u00e7\u00e3o do sistema de diret\u00f3rios NTFS ntfsfix Comando","title":"ntfsfix"},{"location":"programas/linux/ntfsfix/#comando","text":"ntfsfix /dev/sd## Onde:\\ /dev/sd## \u00e9 o local onde se encontra o dispositivo. Ex: /dev/sdb1","title":"Comando"},{"location":"programas/linux/puddletag/","text":"Puddletag (Abandonado, prefira Picard) \u00b6 Editor de tags ID3v1 Puddletag (Abandonado, prefira Picard) Padr\u00e3o de renomea\u00e7\u00e3o Padr\u00e3o de renomea\u00e7\u00e3o \u00b6 Nome arquivo para Tag Id3 %artist%/%year% - %album%/Disco %discnumber%/%track% - %title% ou %artist%/%year% - %album%/%track% - %title%","title":"Puddletag (Abandonado, prefira Picard)"},{"location":"programas/linux/puddletag/#puddletag-abandonado-prefira-picard","text":"Editor de tags ID3v1 Puddletag (Abandonado, prefira Picard) Padr\u00e3o de renomea\u00e7\u00e3o","title":"Puddletag (Abandonado, prefira Picard)"},{"location":"programas/linux/puddletag/#padrao-de-renomeacao","text":"Nome arquivo para Tag Id3 %artist%/%year% - %album%/Disco %discnumber%/%track% - %title% ou %artist%/%year% - %album%/%track% - %title%","title":"Padr\u00e3o de renomea\u00e7\u00e3o"},{"location":"programas/linux/rsync/","text":"rsync \u00b6 Realiza o sincronismo de arquivos entre dois locais diferentes, seja em diret\u00f3rios ou dispositivos diferentes, local ou remotamente. rsync Comando Exemplos Comando \u00b6 $ rsync rsync <OPCOES> <ORIGEM> <DESTINO> [ -C ] auto-ignorar arquivos id\u00eanticos [ -r ] copiar de forma recursiva, ou seja todos os diret\u00f3rios e subdiret\u00f3rios no caminho especificado [ -a ] modo archive que permite a c\u00f3pia recursiva de arquivos, preservando links simb\u00f3licos, permiss\u00f5es de arquivos e timestamps [ -v ] modo verboso, mais informa\u00e7\u00f5es do processo [ -z ] comprime os arquivos durante a c\u00f3pia [ -z ] comprime os dados, antes de transferir [ -h ] exibe as informa\u00e7\u00f5es de tamanho conforme o grandeza [ -e ] especifica o shell remoto [ --progress ] indicador do progresso total da transfer\u00eancia [ -P ] indicador do progresso parcial da transfer\u00eancia Exemplos \u00b6 Sincronizar um \u00fanico arquivo rsync -vhPr /caminho_origem/arquivo.ext /caminho_destino/arquivo.ext Sincronizar remotamente - diret\u00f3rio remoto \"home\" para o diret\u00f3rio local \"backup\" rsync -avz -e ssh usuario@host.com.br:/home /backup Obs : Usando a barra no final implica nos arquivos internos ao diret\u00f3rio e n\u00e3o ao diret\u00f3rio","title":"rsync"},{"location":"programas/linux/rsync/#rsync","text":"Realiza o sincronismo de arquivos entre dois locais diferentes, seja em diret\u00f3rios ou dispositivos diferentes, local ou remotamente. rsync Comando Exemplos","title":"rsync"},{"location":"programas/linux/rsync/#comando","text":"$ rsync rsync <OPCOES> <ORIGEM> <DESTINO> [ -C ] auto-ignorar arquivos id\u00eanticos [ -r ] copiar de forma recursiva, ou seja todos os diret\u00f3rios e subdiret\u00f3rios no caminho especificado [ -a ] modo archive que permite a c\u00f3pia recursiva de arquivos, preservando links simb\u00f3licos, permiss\u00f5es de arquivos e timestamps [ -v ] modo verboso, mais informa\u00e7\u00f5es do processo [ -z ] comprime os arquivos durante a c\u00f3pia [ -z ] comprime os dados, antes de transferir [ -h ] exibe as informa\u00e7\u00f5es de tamanho conforme o grandeza [ -e ] especifica o shell remoto [ --progress ] indicador do progresso total da transfer\u00eancia [ -P ] indicador do progresso parcial da transfer\u00eancia","title":"Comando"},{"location":"programas/linux/rsync/#exemplos","text":"Sincronizar um \u00fanico arquivo rsync -vhPr /caminho_origem/arquivo.ext /caminho_destino/arquivo.ext Sincronizar remotamente - diret\u00f3rio remoto \"home\" para o diret\u00f3rio local \"backup\" rsync -avz -e ssh usuario@host.com.br:/home /backup Obs : Usando a barra no final implica nos arquivos internos ao diret\u00f3rio e n\u00e3o ao diret\u00f3rio","title":"Exemplos"},{"location":"sql/sql/","text":"SQL \u00b6 SQL Join Refer\u00eancia Join \u00b6 Refer\u00eancia \u00b6 https://www.devmedia.com.br/sql-join-entenda-como-funciona-o-retorno-dos-dados/31006 https://www.w3schools.com/sql/sql_join.asp https://pt.stackoverflow.com/questions/6441/qual-%C3%A9-a-diferen%C3%A7a-entre-inner-join-e-outer-join","title":"SQL"},{"location":"sql/sql/#sql","text":"SQL Join Refer\u00eancia","title":"SQL"},{"location":"sql/sql/#join","text":"","title":"Join"},{"location":"sql/sql/#referencia","text":"https://www.devmedia.com.br/sql-join-entenda-como-funciona-o-retorno-dos-dados/31006 https://www.w3schools.com/sql/sql_join.asp https://pt.stackoverflow.com/questions/6441/qual-%C3%A9-a-diferen%C3%A7a-entre-inner-join-e-outer-join","title":"Refer\u00eancia"},{"location":"vuejs/criar-projeto/","text":"Instala\u00e7\u00e3o \u00b6 Instala\u00e7\u00e3o Criar um projeto Depend\u00eancias Execu\u00e7\u00e3o Criar um projeto \u00b6 vue init <TEMPLATE> <PROJETO> cd PROJETO Tipos de template: webpack : Usa o webpack como module bundler, possui o vue-loader com hot reload, javascript lint e testes unit\u00e1rios. \u00c9 o pacote mais completo existente. webpack-simple : Usa o webpack, com menos recursos que o primeiro. N\u00e3o possui hot reload, javascript lint e nem testes unit\u00e1rios. \u00c9 recomendo para quem est\u00e1 come\u00e7ando com o vue. browserify : Ao inv\u00e9s do webpack, usa o browserify como module bundler. Possui o vue-loader com hot reload, javascript lint e testes unit\u00e1rios. browserify-simple : Mais simples que o anterior, sem hot reload, lint ou testes unit\u00e1rios. simple : Mais simples, imposs\u00edvel. Possui apenas uma \u00fanica p\u00e1gina com o Vue sendo carregado atrav\u00e9s de um endere\u00e7o CDN. Depend\u00eancias \u00b6 Baixar depend\u00eancias informadas no arquivo de configura\u00e7\u00e3o npm install Baixar depend\u00eancia espec\u00edfica definidas no arquivo de configura\u00e7\u00e3o npm install <elemento> --save Execu\u00e7\u00e3o \u00b6 Execu\u00e7\u00e3o em modo de desenvolvimento nmp run dev Execu\u00e7\u00e3o em modo de teste nmp run test","title":"Instala\u00e7\u00e3o"},{"location":"vuejs/criar-projeto/#instalacao","text":"Instala\u00e7\u00e3o Criar um projeto Depend\u00eancias Execu\u00e7\u00e3o","title":"Instala\u00e7\u00e3o"},{"location":"vuejs/criar-projeto/#criar-um-projeto","text":"vue init <TEMPLATE> <PROJETO> cd PROJETO Tipos de template: webpack : Usa o webpack como module bundler, possui o vue-loader com hot reload, javascript lint e testes unit\u00e1rios. \u00c9 o pacote mais completo existente. webpack-simple : Usa o webpack, com menos recursos que o primeiro. N\u00e3o possui hot reload, javascript lint e nem testes unit\u00e1rios. \u00c9 recomendo para quem est\u00e1 come\u00e7ando com o vue. browserify : Ao inv\u00e9s do webpack, usa o browserify como module bundler. Possui o vue-loader com hot reload, javascript lint e testes unit\u00e1rios. browserify-simple : Mais simples que o anterior, sem hot reload, lint ou testes unit\u00e1rios. simple : Mais simples, imposs\u00edvel. Possui apenas uma \u00fanica p\u00e1gina com o Vue sendo carregado atrav\u00e9s de um endere\u00e7o CDN.","title":"Criar um projeto"},{"location":"vuejs/criar-projeto/#dependencias","text":"Baixar depend\u00eancias informadas no arquivo de configura\u00e7\u00e3o npm install Baixar depend\u00eancia espec\u00edfica definidas no arquivo de configura\u00e7\u00e3o npm install <elemento> --save","title":"Depend\u00eancias"},{"location":"vuejs/criar-projeto/#execucao","text":"Execu\u00e7\u00e3o em modo de desenvolvimento nmp run dev Execu\u00e7\u00e3o em modo de teste nmp run test","title":"Execu\u00e7\u00e3o"},{"location":"vuejs/metodos-instancia--eventos--vm.emit/","text":"M\u00e9todos da Inst\u00e2ncia - Eventos - vm.$emit \u00b6 M\u00e9todos da Inst\u00e2ncia - Eventos - vm.$emit Introdu\u00e7\u00e3o Refer\u00eancia Introdu\u00e7\u00e3o \u00b6 vm.$emit( event, [\u2026args] ) Argumentos: {string} event [...args] Lan\u00e7a um evento na inst\u00e2ncia atual. Qualquer argumento adicional ser\u00e1 passado para a fun\u00e7\u00e3o de callback da escuta. Refer\u00eancia \u00b6 https://br.vuejs.org/v2/guide/components.html#Eventos-Personalizados https://vuejs.org/v2/guide/components.html#Custom-Events https://br.vuejs.org/v2/api/index.html#vm-emit https://vuejs.org/v2/api/#vm-emit Exemplo - https://jsfiddle.net/kustavo/cf95ezet/","title":"M\u00e9todos da Inst\u00e2ncia - Eventos - vm.$emit"},{"location":"vuejs/metodos-instancia--eventos--vm.emit/#metodos-da-instancia-eventos-vmemit","text":"M\u00e9todos da Inst\u00e2ncia - Eventos - vm.$emit Introdu\u00e7\u00e3o Refer\u00eancia","title":"M\u00e9todos da Inst\u00e2ncia - Eventos - vm.$emit"},{"location":"vuejs/metodos-instancia--eventos--vm.emit/#introducao","text":"vm.$emit( event, [\u2026args] ) Argumentos: {string} event [...args] Lan\u00e7a um evento na inst\u00e2ncia atual. Qualquer argumento adicional ser\u00e1 passado para a fun\u00e7\u00e3o de callback da escuta.","title":"Introdu\u00e7\u00e3o"},{"location":"vuejs/metodos-instancia--eventos--vm.emit/#referencia","text":"https://br.vuejs.org/v2/guide/components.html#Eventos-Personalizados https://vuejs.org/v2/guide/components.html#Custom-Events https://br.vuejs.org/v2/api/index.html#vm-emit https://vuejs.org/v2/api/#vm-emit Exemplo - https://jsfiddle.net/kustavo/cf95ezet/","title":"Refer\u00eancia"},{"location":"vuejs/propriedades-instancia--vm.slot/","text":"Propriedades de Inst\u00e2ncia - vm.$slot \u00b6 Propriedades de Inst\u00e2ncia - vm.$slot Introdu\u00e7\u00e3o Slot simples Refer\u00eancia Introdu\u00e7\u00e3o \u00b6 Imagine um template assim: < child-component > {{ message }} </ child-component > A message deveria ser ligada aos dados do pai ou aos dados do filho? A resposta \u00e9 do pai . Uma regra simples para o escopo do componente \u00e9: Tudo que estiver no template do pai \u00e9 compilado no escopo do pai; tudo que estiver no template do filho \u00e9 compilado no escopo do filho. Um erro comum \u00e9 tentar ligar uma diretiva a um dado do filho no template do pai: <!-- N\u00c3O funciona --> < template > < child-component v-show = \"someChildProperty\" > </ child-component > </ template > Assumindo que someChildProperty \u00e9 uma propriedade no componente filho, o exemplo acima n\u00e3o funcionaria. O template do pai n\u00e3o tem conhecimento do estado do filho. Para ligar diretivas do escopo-filho a um n\u00f3 de um componente raiz, deveria-se fazer isso no pr\u00f3prio template do componente filho: Vue . component ( 'child-component' , { // isto funciona, pois n\u00f3s estamos no escopo correto template : '<div v-show=\"someChildProperty\">Child</div>' , data : function () { return { someChildProperty : true } } }) Slot simples \u00b6 O conte\u00fado do pai ser\u00e1 descartado a menos que o template do componente filho contenha pelo menos um elemento \\<slot>. Quando h\u00e1 apenas um slot sem campos, todo o fragmento de conte\u00fado ser\u00e1 inserido em sua posi\u00e7\u00e3o no DOM, substituindo o pr\u00f3prio slot. Qualquer coisa originalmente dentro das tags \\<slot> \u00e9 considerado conte\u00fado reserva. O conte\u00fado reserva \u00e9 compilado no escopo do filho e ser\u00e1 exibido somente se o elemento hospedeiro estiver vazio e n\u00e3o tiver conte\u00fado a ser inserido. Suponha que n\u00f3s temos um componente chamado my-component com o seguinte template: <!-- Componente filho --> < div > < h2 > Eu sou o t\u00edtulo do filho </ h2 > < h3 >< slot name = \"nome1\" ></ slot ></ h3 > < slot > Isto s\u00f3 ser\u00e1 exibido se n\u00e3o h\u00e1 conte\u00fado a ser distribu\u00eddo. </ slot > < h4 >< slot name = \"nome2\" > Nunca ser\u00e1 exibido </ slot ></ h4 > </ div > E um pai que usa o componente: <!-- Componente pai --> < div > < h1 > Eu sou o t\u00edtulo do pai </ h1 > < componente-filho > < span slot = \"nome1\" > Slot 1 </ span > < p > Este \u00e9 um conte\u00fado informado pelo pai </ p > < span slot = \"nome2\" > Slot 2 </ span > </ componente-filho > </ div > O resultado renderizado ser\u00e1: < div > < h1 > Eu sou o t\u00edtulo do pai </ h1 > < div > < h2 > Eu sou o t\u00edtulo do filho </ h2 > < h3 > Slot 1 </ h3 > < p > Este \u00e9 um conte\u00fado informado pelo pai </ p > < h4 > Slot 2 </ h4 > </ div > </ div > Pode haver somente um slot sem nomea\u00e7\u00e3o, que ser\u00e1 o slot padr\u00e3o caso n\u00e3o seja informado um slot nomeado. Este slot pode fornecer um conte\u00fado pelo filho, caso o pai n\u00e3o informe nenhum conte\u00fado (n\u00e3o h\u00e1 conte\u00fado a ser distribu\u00eddo). Os slots nomeados n\u00e3o fornecem conte\u00fado pelo filho. O pai pode chamar os slots fora da ordem em que foram definidos. Refer\u00eancia \u00b6 https://br.vuejs.org/v2/guide/components.html#Distribuicao-de-Conteudo-com-Slots https://vuejs.org/v2/guide/components.html#Content-Distribution-with-Slots https://br.vuejs.org/v2/api/index.html#vm-slots https://vuejs.org/v2/api/#vm-slots Exemplos - https://jsfiddle.net/kustavo/wmw99tsL/","title":"Propriedades de Inst\u00e2ncia - vm.$slot"},{"location":"vuejs/propriedades-instancia--vm.slot/#propriedades-de-instancia-vmslot","text":"Propriedades de Inst\u00e2ncia - vm.$slot Introdu\u00e7\u00e3o Slot simples Refer\u00eancia","title":"Propriedades de Inst\u00e2ncia - vm.$slot"},{"location":"vuejs/propriedades-instancia--vm.slot/#introducao","text":"Imagine um template assim: < child-component > {{ message }} </ child-component > A message deveria ser ligada aos dados do pai ou aos dados do filho? A resposta \u00e9 do pai . Uma regra simples para o escopo do componente \u00e9: Tudo que estiver no template do pai \u00e9 compilado no escopo do pai; tudo que estiver no template do filho \u00e9 compilado no escopo do filho. Um erro comum \u00e9 tentar ligar uma diretiva a um dado do filho no template do pai: <!-- N\u00c3O funciona --> < template > < child-component v-show = \"someChildProperty\" > </ child-component > </ template > Assumindo que someChildProperty \u00e9 uma propriedade no componente filho, o exemplo acima n\u00e3o funcionaria. O template do pai n\u00e3o tem conhecimento do estado do filho. Para ligar diretivas do escopo-filho a um n\u00f3 de um componente raiz, deveria-se fazer isso no pr\u00f3prio template do componente filho: Vue . component ( 'child-component' , { // isto funciona, pois n\u00f3s estamos no escopo correto template : '<div v-show=\"someChildProperty\">Child</div>' , data : function () { return { someChildProperty : true } } })","title":"Introdu\u00e7\u00e3o"},{"location":"vuejs/propriedades-instancia--vm.slot/#slot-simples","text":"O conte\u00fado do pai ser\u00e1 descartado a menos que o template do componente filho contenha pelo menos um elemento \\<slot>. Quando h\u00e1 apenas um slot sem campos, todo o fragmento de conte\u00fado ser\u00e1 inserido em sua posi\u00e7\u00e3o no DOM, substituindo o pr\u00f3prio slot. Qualquer coisa originalmente dentro das tags \\<slot> \u00e9 considerado conte\u00fado reserva. O conte\u00fado reserva \u00e9 compilado no escopo do filho e ser\u00e1 exibido somente se o elemento hospedeiro estiver vazio e n\u00e3o tiver conte\u00fado a ser inserido. Suponha que n\u00f3s temos um componente chamado my-component com o seguinte template: <!-- Componente filho --> < div > < h2 > Eu sou o t\u00edtulo do filho </ h2 > < h3 >< slot name = \"nome1\" ></ slot ></ h3 > < slot > Isto s\u00f3 ser\u00e1 exibido se n\u00e3o h\u00e1 conte\u00fado a ser distribu\u00eddo. </ slot > < h4 >< slot name = \"nome2\" > Nunca ser\u00e1 exibido </ slot ></ h4 > </ div > E um pai que usa o componente: <!-- Componente pai --> < div > < h1 > Eu sou o t\u00edtulo do pai </ h1 > < componente-filho > < span slot = \"nome1\" > Slot 1 </ span > < p > Este \u00e9 um conte\u00fado informado pelo pai </ p > < span slot = \"nome2\" > Slot 2 </ span > </ componente-filho > </ div > O resultado renderizado ser\u00e1: < div > < h1 > Eu sou o t\u00edtulo do pai </ h1 > < div > < h2 > Eu sou o t\u00edtulo do filho </ h2 > < h3 > Slot 1 </ h3 > < p > Este \u00e9 um conte\u00fado informado pelo pai </ p > < h4 > Slot 2 </ h4 > </ div > </ div > Pode haver somente um slot sem nomea\u00e7\u00e3o, que ser\u00e1 o slot padr\u00e3o caso n\u00e3o seja informado um slot nomeado. Este slot pode fornecer um conte\u00fado pelo filho, caso o pai n\u00e3o informe nenhum conte\u00fado (n\u00e3o h\u00e1 conte\u00fado a ser distribu\u00eddo). Os slots nomeados n\u00e3o fornecem conte\u00fado pelo filho. O pai pode chamar os slots fora da ordem em que foram definidos.","title":"Slot simples"},{"location":"vuejs/propriedades-instancia--vm.slot/#referencia","text":"https://br.vuejs.org/v2/guide/components.html#Distribuicao-de-Conteudo-com-Slots https://vuejs.org/v2/guide/components.html#Content-Distribution-with-Slots https://br.vuejs.org/v2/api/index.html#vm-slots https://vuejs.org/v2/api/#vm-slots Exemplos - https://jsfiddle.net/kustavo/wmw99tsL/","title":"Refer\u00eancia"},{"location":"windows/windows/","text":"Windows \u00b6 Restaurar parti\u00e7\u00e3o EFI \u00b6 Caso queira formatar as parti\u00e7\u00f5es EFI e MBR diskpart list disk select disk 0 # selecionar disco que possui a parti\u00e7\u00e3o EFI list partition select partition 1 # selecionar parti\u00e7\u00e3o EFI delete partition override select partition 2 # selecionar parti\u00e7\u00e3o MSR delete partition override list partition select disk 0 create partition efi size = 700 # criar parti\u00e7\u00e3o EFI list partition select partition 1 # selecionar parti\u00e7\u00e3o EFI format quick fs = fat32 label = \"EFI\" create partition msr size = 20 list partition list vol exit bcdboot x: \\w indows # x \u00e9 a parti\u00e7\u00e3o onde est\u00e1 o windows (pode mudar de c:) Caso n\u00e3o queira formatar as parti\u00e7\u00f5es EFI e MBR bcdboot x: \\w indows # x \u00e9 a parti\u00e7\u00e3o onde est\u00e1 o windows (pode mudar de c:)","title":"Windows"},{"location":"windows/windows/#windows","text":"","title":"Windows"},{"location":"windows/windows/#restaurar-particao-efi","text":"Caso queira formatar as parti\u00e7\u00f5es EFI e MBR diskpart list disk select disk 0 # selecionar disco que possui a parti\u00e7\u00e3o EFI list partition select partition 1 # selecionar parti\u00e7\u00e3o EFI delete partition override select partition 2 # selecionar parti\u00e7\u00e3o MSR delete partition override list partition select disk 0 create partition efi size = 700 # criar parti\u00e7\u00e3o EFI list partition select partition 1 # selecionar parti\u00e7\u00e3o EFI format quick fs = fat32 label = \"EFI\" create partition msr size = 20 list partition list vol exit bcdboot x: \\w indows # x \u00e9 a parti\u00e7\u00e3o onde est\u00e1 o windows (pode mudar de c:) Caso n\u00e3o queira formatar as parti\u00e7\u00f5es EFI e MBR bcdboot x: \\w indows # x \u00e9 a parti\u00e7\u00e3o onde est\u00e1 o windows (pode mudar de c:)","title":"Restaurar parti\u00e7\u00e3o EFI"}]}